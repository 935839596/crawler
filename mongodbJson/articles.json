{"_id":{"$oid":"5a43938e51fb4902b066151d"},"id":"5a43059bf265da43176a695d","author":{"$oid":"5a43938e51fb4902b0661511"},"title":"通过Scope Hoisting优化Webpack输出","meta":{"likeCount":0},"tag":["Webpack","前端","NPM"],"comment":[],"content":"\u003cp\u003eScope Hoisting 可以让 Webpack 打包出来的代码文件更小、运行的更快，\n它又译作 \"作用域提升\"，是在 Webpack3 中新推出的功能。\n单从名字上看不出 Scope Hoisting 到底做了什么，下面来详细介绍它。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e认识 Scope Hoisting\u003c/h2\u003e\n\u003cp\u003e让我们先来看看在没有 Scope Hoisting 之前 Webpack 的打包方式。\u003c/p\u003e\n\u003cp\u003e假如现在有两个文件分别是 \u003ccode\u003eutil.js\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'Hello,Webpack'\u003c/span\u003e;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e和入口文件 \u003ccode\u003emain.js\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e str \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./util.js'\u003c/span\u003e;\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(str);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e以上源码用 Webpack 打包后输出中的部分代码如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e[\n  (\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003emodule, __webpack_exports__, __webpack_require__\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e __WEBPACK_IMPORTED_MODULE_0__util_js__ = __webpack_require__(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e);\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(__WEBPACK_IMPORTED_MODULE_0__util_js__[\u003cspan class=\"hljs-string\"\u003e\"a\"\u003c/span\u003e]);\n  }),\n  (\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003emodule, __webpack_exports__, __webpack_require__\u003c/span\u003e) \u003c/span\u003e{\n    __webpack_exports__[\u003cspan class=\"hljs-string\"\u003e\"a\"\u003c/span\u003e] = (\u003cspan class=\"hljs-string\"\u003e'Hello,Webpack'\u003c/span\u003e);\n  })\n]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在开启 Scope Hoisting 后，同样的源码输出的部分代码如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e[\n  (\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003emodule, __webpack_exports__, __webpack_require__\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e util = (\u003cspan class=\"hljs-string\"\u003e'Hello,Webpack'\u003c/span\u003e);\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(util);\n  })\n]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e从中可以看出开启 Scope Hoisting 后，函数申明由两个变成了一个，\u003ccode\u003eutil.js\u003c/code\u003e 中定义的内容被直接注入到了 \u003ccode\u003emain.js\u003c/code\u003e 对应的模块中。\n这样做的好处是：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e代码体积更小，因为函数申明语句会产生大量代码；\u003c/li\u003e\n\u003cli\u003e代码在运行时因为创建的函数作用域更少了，内存开销也随之变小。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eScope Hoisting 的实现原理其实很简单：分析出模块之间的依赖关系，尽可能的把打散的模块合并到一个函数中去，但前提是不能造成代码冗余。\n因此只有那些被引用了一次的模块才能被合并。\u003c/p\u003e\n\u003cp\u003e由于 Scope Hoisting 需要分析出模块之间的依赖关系，因此源码必须采用 ES6 模块化语句，不然它将无法生效。\n原因和\u003ca target=\"_blank\" href=\"http://webpack.wuhaolin.cn/4%E4%BC%98%E5%8C%96/4-10%E4%BD%BF%E7%94%A8TreeShaking.html\"\u003e4-10 使用 TreeShaking\u003c/a\u003e 中介绍的类似。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e使用 Scope Hoisting\u003c/h2\u003e\n\u003cp\u003e要在 Webpack 中使用 Scope Hoisting 非常简单，因为这是 Webpack 内置的功能，只需要配置一个插件，相关代码如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e ModuleConcatenationPlugin = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'webpack/lib/optimize/ModuleConcatenationPlugin'\u003c/span\u003e);\n\n\u003cspan class=\"hljs-built_in\"\u003emodule\u003c/span\u003e.exports = {\n  \u003cspan class=\"hljs-attr\"\u003eplugins\u003c/span\u003e: [\n    \u003cspan class=\"hljs-comment\"\u003e// 开启 Scope Hoisting\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ModuleConcatenationPlugin(),\n  ],\n};\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e同时，考虑到 Scope Hoisting 依赖源码需采用 ES6 模块化语法，还需要配置 \u003ccode\u003emainFields\u003c/code\u003e。\n原因在 \u003ca target=\"_blank\" href=\"http://webpack.wuhaolin.cn/4%E4%BC%98%E5%8C%96/4-10%E4%BD%BF%E7%94%A8TreeShaking.html\"\u003e4-10 使用 TreeShaking\u003c/a\u003e 中提到过：因为大部分 Npm 中的第三方库采用了 CommonJS 语法，但部分库会同时提供 ES6 模块化的代码，为了充分发挥\nScope Hoisting 的作用，需要增加以下配置：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-built_in\"\u003emodule\u003c/span\u003e.exports = {\n  \u003cspan class=\"hljs-attr\"\u003eresolve\u003c/span\u003e: {\n    \u003cspan class=\"hljs-comment\"\u003e// 针对 Npm 中的第三方模块优先采用 jsnext:main 中指向的 ES6 模块化语法的文件\u003c/span\u003e\n    mainFields: [\u003cspan class=\"hljs-string\"\u003e'jsnext:main'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'browser'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'main'\u003c/span\u003e]\n  },\n};\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e对于采用了非 ES6 模块化语法的代码，Webpack 会降级处理不使用 Scope Hoisting 优化，为了知道 Webpack 对哪些代码做了降级处理，\n你可以在启动 Webpack 时带上 \u003ccode\u003e--display-optimization-bailout\u003c/code\u003e 参数，这样在输出日志中就会包含类似如下的日志：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e[0] ./main.js + 1 modules 80 bytes {0} [built]\n    ModuleConcatenation bailout: Module is not an ECMAScript module\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e其中的 \u003ccode\u003eModuleConcatenation bailout\u003c/code\u003e 告诉了你哪个文件因为什么原因导致了降级处理。\u003c/p\u003e\n\u003cp\u003e也就是说要开启 Scope Hoisting 并发挥最大作用的配置如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e ModuleConcatenationPlugin = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'webpack/lib/optimize/ModuleConcatenationPlugin'\u003c/span\u003e);\n\n\u003cspan class=\"hljs-built_in\"\u003emodule\u003c/span\u003e.exports = {\n  \u003cspan class=\"hljs-attr\"\u003eresolve\u003c/span\u003e: {\n    \u003cspan class=\"hljs-comment\"\u003e// 针对 Npm 中的第三方模块优先采用 jsnext:main 中指向的 ES6 模块化语法的文件\u003c/span\u003e\n    mainFields: [\u003cspan class=\"hljs-string\"\u003e'jsnext:main'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'browser'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'main'\u003c/span\u003e]\n  },\n  \u003cspan class=\"hljs-attr\"\u003eplugins\u003c/span\u003e: [\n    \u003cspan class=\"hljs-comment\"\u003e// 开启 Scope Hoisting\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ModuleConcatenationPlugin(),\n  ],\n};\n\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\n\u003cp\u003e本实例\u003ca target=\"_blank\" href=\"http://webpack.wuhaolin.cn/4-14%E5%BC%80%E5%90%AFScopeHoisting.zip\"\u003e提供项目完整代码\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://webpack.wuhaolin.cn/\"\u003e\u003c/a\u003e\u003c/p\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"http://webpack.wuhaolin.cn/\"\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/20/1607259d52144ee4?w=1348\u0026amp;h=845\u0026amp;f=jpeg\u0026amp;s=183464\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/a\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://webpack.wuhaolin.cn/\"\u003e《深入浅出Webpack》全书在线阅读链接\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://webpack.wuhaolin.cn/4%E4%BC%98%E5%8C%96/4-14%E5%BC%80%E5%90%AFScopeHoisting.html\"\u003e阅读原文\u003c/a\u003e\u003c/p\u003e\n","buildTime":"1514378025.8881","__v":0}
{"_id":{"$oid":"5a43938e51fb4902b066151e"},"id":"5a3f223351882506e50cda5c","author":{"$oid":"5a43938e51fb4902b0661514"},"title":"基于vue2.0 +vuex+ element-ui后台管理系统 ","meta":{"likeCount":0},"tag":["Node.js","Vue.js","MongoDB","Webpack","Vuex","vue-router"],"comment":[],"content":"\u003cp\u003e\u003cb\u003exxx金融后台管理系统\u003c/b\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eA magical vue element touzi admin.\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://118.126.117.130\"\u003e效果演示地址\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://github.com/wdlhao/vue2-element-touzi-admin\"\u003egithub地址\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608b39b9167c885?w=1366\u0026amp;h=662\u0026amp;f=jpeg\u0026amp;s=105349\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608b39ff2f9ad05?w=1366\u0026amp;h=662\u0026amp;f=jpeg\u0026amp;s=104277\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608b42f67bcff39?w=1366\u0026amp;h=662\u0026amp;f=gif\u0026amp;s=4527110\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003eAbout\u003c/h2\u003e\n\u003cp\u003e此项目是 vue2.0 + element-ui + node+mongodb 构建的后台管理系统，所有的数据都是从服务器实时获取的真实数据，具有真实的注册、登录、数据显示、新增数据、修改数据、删除数据等功能。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e  如果对您对此项目有兴趣，可以点 \u003cspan class=\"hljs-string\"\u003e\"Star\"\u003c/span\u003e 支持一下 谢谢！ ^_^\n  \n  或者您可以 \u003cspan class=\"hljs-string\"\u003e\"follow\"\u003c/span\u003e 一下，我会不断开源更多的有趣的项目\n  \n  开发环境 windows 64 、nodejs 6.11.0\n  \n  如有问题请直接在 Issues 中提，或者您发现问题并有非常好的解决方案，欢迎 PR\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e技术栈\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e前端技术栈：\u003c/strong\u003e vue2 + vuex + vue-router + webpack2.0 + ES6/7 + less + element-ui\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e服务端技术栈：\u003c/strong\u003e nodejs + express  + mongodb\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e前序准备\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e运行前准备：\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e1、不需要在本地调试及开发：\n\u003ca target=\"_blank\" href=\"http://118.126.117.130\"\u003e请访问本项目的服务器地址。\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e2、需要在本地调试及开发：\u003c/p\u003e\n\u003cp\u003e由于此项目是基于nodejs和mongodb的前后端结合项目，你需要进行nodejs和mongodb的相关准备工作。项目运行之前，请确保系统已经安装以下应用：\u003c/p\u003e\n\u003cp\u003e(1)、node (6.0 及以上版本)。使用细节，请参考：\u003ca target=\"_blank\" href=\"https://nodejs.org/en/download/\"\u003enode的下载及安装。\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e(2)、mongodb 。使用细节，请参考：\u003ca target=\"_blank\" href=\"https://pan.baidu.com/s/1jIxPJrK\"\u003emongodb的下载及使用。\u003c/a\u003e【下载，db/log配置，开启服务，use touzi，导入数据】\u003c/p\u003e\n\u003cp\u003e(3)、robomongod。使用细节，请参考：\u003ca target=\"_blank\" href=\"https://pan.baidu.com/s/1hsQuc08\"\u003erobomongod的下载及使用。\u003c/a\u003e（注意：mongodb可视化视图工具，本项目不是必须安装，主要用于方便查看数据库数据）。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e开发：\u003c/h2\u003e\n\u003cp\u003egit clone https://github.com/wdlhao/vue2-element-touzi-admin\u003c/p\u003e\n\u003cp\u003ecd vue2-element-touzi-admin\u003c/p\u003e\n\u003cp\u003enpm install\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003enpm run dev\u003c/strong\u003e (访问本地后台系统，需开启服务端express服务)。运行之后，会默认打开本地访问路径：http://localhost:8012\u003c/p\u003e\n\u003cp\u003e开启服务端express服务方法如下：双击server/start.bat启动文件，执行命令\u0026gt;node index.js即可，启动后切记不要关闭cmd窗口。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e发布\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003enpm run bulid\u003c/strong\u003e (生成打包之后的项目文件,此文件主要用于项目部署)。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e功能\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e登录/退出 -- 完成\u003c/li\u003e\n\u003cli\u003e首页 -- 完成\u003c/li\u003e\n\u003cli\u003e用户列表 -- 完成\u003c/li\u003e\n\u003cli\u003e信息列表 -- 完成\u003c/li\u003e\n\u003cli\u003e信息管理\n\u003cul\u003e\n\u003cli\u003e个人信息 -- 完成\u003c/li\u003e\n\u003cli\u003e修改信息 -- 完成\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e资金管理\n\u003cul\u003e\n\u003cli\u003e资金流水 -- 完成\u003c/li\u003e\n\u003cli\u003e支付单据 -- 完成\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e投资管理\n\u003cul\u003e\n\u003cli\u003e省份投资 -- 完成\u003c/li\u003e\n\u003cli\u003e区域投资 -- 完成\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e金融文章\n\u003cul\u003e\n\u003cli\u003e文章发布 -- 完成\u003c/li\u003e\n\u003cli\u003e文章编辑 -- 完成\u003c/li\u003e\n\u003cli\u003e查看文章 -- 完成\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e资金数据\n\u003cul\u003e\n\u003cli\u003e投资分布 -- 完成\u003c/li\u003e\n\u003cli\u003e项目分布 -- 完成\u003c/li\u003e\n\u003cli\u003e收支统计 -- 完成\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 class=\"heading\"\u003e目录结构\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"hljs shell\" lang=\"shell\"\u003e├── build                      // 构建相关  \n├── config                     // 配置相关\n├── exampleImgs                // 项目示例图片\n├── outdb                      // 导入数据库的初始化数据\n├── server                     // node服务端\n│   ├── api.js                    // 封装的接口请求\n│   ├── db.js                     // db数据模型定义\n│   ├── index.js                  // express服务器\n│   ├── mutils.js                 // 服务端工具类\n├── src                        // 源代码\n│   ├── assets                 // 图片等静态资源\n│   ├── components             // 全局公用组件\n│   ├── config                 // 接口请求配置\n│   ├── fonts                  // fontawesome字体库文件\n│   ├── layout                 // 全局 组件\n│   ├── page                   // 项目所有的视图\n│   ├── register               // 第三方库注册\n│   ├── router                 // 登录路由\n│   ├── store                  // 项目vuex数据存储器\n│   ├── style                  // 全局样式\n│   ├── utils                  // 全局公用方法\n│   ├── vendor                 // 公用vendor\n│   ├── App.vue                // 入口页面\n│   ├── main.js                // 入口 加载组件 初始化\n├── static                     // 第三方不打包资源\n│   └── Tinymce                // 富文本\n├── .babelrc                   // babel-loader 配置\n├── .gitignore                 // git 忽略项\n├── eslintrc.js                // eslint 配置项\n├── favicon.ico                // favicon图标\n├── index.html                 // html模板\n├── package.json               // 包依赖配置\n└── README.md                  // 说明文件\n\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e\u003ca target=\"_blank\" href=\"http://118.126.117.130\"\u003e查看更多demo\u003c/a\u003e\u003c/h2\u003e\n\u003ch2 class=\"heading\"\u003eLicense\u003c/h2\u003e\n\u003cp\u003eMIT\u003c/p\u003e\n","buildTime":"1514377698.641","__v":0}
{"_id":{"$oid":"5a43938e51fb4902b066151f"},"id":"5a3cccdb6fb9a04500034053","author":{"$oid":"5a43938e51fb4902b0661515"},"title":"compositionEvent组合事件，来填补React input输入框onchange事件的坑","meta":{"likeCount":0},"tag":["React.js","前端"],"comment":[],"content":"\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e...\n\u0026lt;input ref=\u003cspan class=\"hljs-string\"\u003e\"inputTest\"\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"text\"\u003c/span\u003e placeholder=\u003cspan class=\"hljs-string\"\u003e\"测试\"\u003c/span\u003e value={this.state.val}\nonChange={this.inputValue}/\u0026gt;\n...\ninputValue(e){\n    this.setState({\n        val:e.target.value\n    })\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e以上这段代码，相信大家再熟悉不过了，react controlled组件的最简单的栗子，controlled input组件。首先我们来说一说React的事件，包括上面我们使用的onChange事件，都属于React的合成事件，也就是非浏览器原生的，它是对浏览器原生事件的封装事件。react合成事件中，onChange事件类似于原生的input事件，只要按键就会触发，这在pc上面或者英文输入法中不会有任何问题，但是对于移动端输入时需要切换中文输入法或者其他不同输入法的其他语言的用户来说，会粗大事。比如上面这段最简单的代码，我们想要输入中文，比如\"事件\"，我们需要在手机键盘按键'shijian',每按一次键都会触发onChange事件，然后会发现输入框的内容已经输入了英文字母，这不是我们需要的结果。那怎么解决呢？接下来，我们的主角出场--compositionEvent。组合事件可以帮助我们解决这个问题，可以参看\u003ca target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent\"\u003e组合事件参考文档\u003c/a\u003e。\u003cbr\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003ecompositionEvent组合事件介绍\u003c/h2\u003e\n\u003cp\u003e我们还是以输入中文为例，大家会发现，在移动设备中，中文的输入其实分为三个步骤（pc上其实也是一样），1:开始，2:敲键盘，3:点击选择中文。这个compositionEvent组合事件就是分拆了不同的步骤的事件的组合，这个组合事件是由compositionStart，compositionUpdate和compositionEnd三个事件的组合，Start和End事件只执行一次，Update会执行多次，只要没有选中中文之前，触发update事件，选中需要的选中的文字，就会触发end事件，一个组合事件完成，以此循环。了解了组合事件这个原理后，解决方案就不难理解了吧。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e具体如何填坑\u003c/h2\u003e\n\u003ch3 class=\"heading\"\u003e1、使用uncontrolled 组件的方式，抛弃onChange事件\u003c/h3\u003e\n\u003cp\u003e使用这种方式就基本上与pc浏览器的效果就一致了，请看如下代码，只添加了组合事件中End的监听，意味着若我们完成输入最后一步选中操作后，才会触发该监听。大家肯定会疑问，这不就是的onInput效果吗，那不就能够支持到controlled组件的方式，对不起，真不行，因为输入确实完美契合，但是删除操作，就无法触发这个监听了。所以，如果不加上onChange事件的配合，那就使用uncontrolled组件的方式吧。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;input ref=\u003cspan class=\"hljs-string\"\u003e\"inputTest\"\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"text\"\u003c/span\u003e placeholder=\u003cspan class=\"hljs-string\"\u003e\"测试\"\u003c/span\u003e \n              onCompositionEnd={this.handleComposition} /\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e2、还是原来的controlled组件的配方，使用compositionEvent组合事件与onChange事件做兼容\u003c/h3\u003e\n\u003cp\u003e上面已经提到controlled组件的解决方式了，那就是与onChange事件进行配合，那具体如何配合呢，请看代码如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;input ref=\u003cspan class=\"hljs-string\"\u003e\"inputTest\"\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"text\"\u003c/span\u003e placeholder=\u003cspan class=\"hljs-string\"\u003e\"测试\"\u003c/span\u003e \n              onCompositionStart={this.handlingComposition} \n              onCompositionUpdate={this.handlingComposition} \n              onCompositionEnd={this.handleComposition} \n              onChange={this.inputValue}/\u0026gt;\n...\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003ehandlingComposition\u003c/span\u003e\u003c/span\u003e(){\n    this.isCompositionEnd = \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n}\nhandleComposition(e){\n    this.isCompositionEnd = \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n}\ninputValue(e){\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(this.isCompositionEnd){\n        this.setState({\n            val:e.target.value\n        })\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e以上代码会存在一点小问题，需要确保onCompositionEnd在onChange事件前触发，一旦有的浏览器存在兼容问题，两者的执行顺序相反，会导致onChange事件永不触发，因此，最好在handleComposition函数中重复执行一次onChange中的逻辑，避免出现兼容问题。\n前端发展日新月异，交流也是很好的学习方式，有不对的地方，请喷！\u003c/p\u003e\n","buildTime":"1514375012.8602","__v":0}
{"_id":{"$oid":"5a43938e51fb4902b0661520"},"id":"5a3cdac46fb9a045186aee74","author":{"$oid":"5a43938e51fb4902b066151c"},"title":"将 HTML 生成图片","meta":{"likeCount":0},"tag":["HTML","Canvas","前端"],"comment":[],"content":"\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"生成效果图片\" src=\"https://user-gold-cdn.xitu.io/2017/12/22/1607db68713a6ba9?w=545\u0026amp;h=397\u0026amp;f=png\u0026amp;s=180193\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e—— Liter\u003c/p\u003e\n\u003ch5 class=\"heading\"\u003e项目需求\u003c/h5\u003e\n\u003cp\u003e1.前端添加管理员信息包括（姓名，年龄，头像等）\n2.将管理员信息显示在具体背景图片上，将其生成图片的形式上传后台服务器（\u003cstrong\u003ebase64格式\u003c/strong\u003e或者\u003cstrong\u003e文件的格式\u003c/strong\u003e）\u003c/p\u003e\n\u003ch5 class=\"heading\"\u003e实现思路\u003c/h5\u003e\n\u003cp\u003e1.将管理员信息使用定位将其设置在指定背景图片上。\n2.使用html2canvas将指定div生成canvas\n3.将生成的canvas进行base64编码 或者生成文件 上传（建议base64上传）\u003c/p\u003e\n\u003ch5 class=\"heading\"\u003e附加功能\u003c/h5\u003e\n\u003cp\u003e本地上传图片 进行base64编码之后回显\n生成canvas之后支持本地下载\u003c/p\u003e\n\u003ch5 class=\"heading\"\u003e压缩图片\u003c/h5\u003e\n\u003cp\u003e使用canvas API\n\u003cstrong\u003equality 值越小，所绘制出的图像越模糊 对应图片越小\u003c/strong\u003e 根据需求设置相对应的数值\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e var base64 = canvas.toDataURL(\u003cspan class=\"hljs-string\"\u003e'image/jpeg'\u003c/span\u003e, quality );\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e点击访问\u003ca target=\"_blank\" href=\"http://116.62.168.126/pages/upLoadFile/index.htm\"\u003eDemo地址\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e下面笔记简单介绍html2canvas的使用\u003cbr\u003e\n\u003ca target=\"_blank\" href=\"http://html2canvas.hertzen.com/\"\u003ehtml2canvas官网\u003c/a\u003e\n\u003ca target=\"_blank\" href=\"https://github.com/niklasvh/html2canvas\"\u003egithub\u003c/a\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e1. 使用方法\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e html2canvas(document.getElementById(\u003cspan class=\"hljs-string\"\u003e'diploma'\u003c/span\u003e), {\n        onrendered: \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(canvas) {\n            $(\u003cspan class=\"hljs-string\"\u003e'#view'\u003c/span\u003e).html(canvas);  // 容器\n        },\n        width: 547,\n        height: 398\n    });\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003ediploma\u003c/strong\u003e html容器\n\u003cstrong\u003eview\u003c/strong\u003e放置将要生成图片的容器，设置固定宽高（547 * 398）\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e注意：\u003c/strong\u003e  在生成图片的时候\u003cstrong\u003ediploma容器不能被遮挡, 否则不能生成完整的canvas\u003c/strong\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e2. 基本常用API\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e参数名称\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e类型\u003c/th\u003e\n\u003cth style=\"text-align:right\"\u003e默认值\u003c/th\u003e\n\u003cth style=\"text-align:right\"\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003ebackground\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003estring\u003c/td\u003e\n\u003ctd style=\"text-align:right\"\u003e#fff\u003c/td\u003e\n\u003ctd style=\"text-align:right\"\u003e如果使用的是png背景图片这里可是使用如果没有 默认透明\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eheight\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enumber\u003c/td\u003e\n\u003ctd style=\"text-align:right\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:right\"\u003e需要手动设置\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ewidth\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enumber\u003c/td\u003e\n\u003ctd style=\"text-align:right\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:right\"\u003e需要手动设置\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003etimeout\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enumber\u003c/td\u003e\n\u003ctd style=\"text-align:right\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:right\"\u003e图片加载延时  默认为0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003etimeout\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enumber\u003c/td\u003e\n\u003ctd style=\"text-align:right\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:right\"\u003e图片加载延时  默认为0\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003cstrong\u003e其他API参看\u003ca target=\"_blank\" href=\"http://html2canvas.hertzen.com/configuration\"\u003e官网手册\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e3. 本地上传头base64编码（回显）\u003c/h3\u003e\n\u003cp\u003eFileReader接口提供了读取文件的方法和包含读取结果的事件模型\n\u003cstrong\u003e主要是将上传的图片文件转换成base64\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e  var r = new FileReader()  \n    r.readAsDataURL(file)  \n    r.onload = \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(e){\n        $(\u003cspan class=\"hljs-string\"\u003e'.avatar img'\u003c/span\u003e).attr(\u003cspan class=\"hljs-string\"\u003e'src'\u003c/span\u003e, e.target.result)  // 将img  src设置base64\n }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e附上\u003ca target=\"_blank\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader\"\u003eFileReader\u003c/a\u003e对象详细文档\u003c/strong\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e4.canvas转base64上传\u003c/h3\u003e\n\u003cp\u003e将html2canvas生成的canvas转换成base64进行上传\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003evar canvas = document.querySelector(\u003cspan class=\"hljs-string\"\u003e\"#view canvas\"\u003c/span\u003e)\n    var dataURL = canvas.toDataURL(\u003cspan class=\"hljs-string\"\u003e\"image/png\"\u003c/span\u003e);\n    dataURL = dataURL.split(\u003cspan class=\"hljs-string\"\u003e\",\"\u003c/span\u003e)[1];\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e dataURL\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e附上\u003ca target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL\"\u003ecanvas API\u003c/a\u003e文档\u003c/strong\u003e\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003e注意事项\u003c/h4\u003e\n\u003cp\u003e转换base64的时候需要一定时间可以使用promise函数异步去执行,在没有base64产生的时候执行会报错\u003c/p\u003e\n\u003cp\u003e组后点击下载 使用js将canvas转换成文件进行下载\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003eDownload\u003c/span\u003e\u003c/span\u003e(){\n    //cavas 保存图片到本地  js 实现\n    //------------------------------------------------------------------------\n    //1.确定图片的类型  获取到的图片格式 data:image/Png;base64,......\n    var \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e =\u003cspan class=\"hljs-string\"\u003e'png'\u003c/span\u003e;//你想要什么图片格式 就选什么吧\n    var d=document.querySelector(\u003cspan class=\"hljs-string\"\u003e'#view canvas'\u003c/span\u003e);\n    var imgdata=d.toDataURL(\u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e);\n    //2.0 将mime-type改为image/octet-stream,强制让浏览器下载\n    var fixtype=\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e){\n        \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=type.toLocaleLowerCase().replace(/jpg/i,\u003cspan class=\"hljs-string\"\u003e'jpeg'\u003c/span\u003e);\n        var r=type.match(/png|jpeg|bmp|gif/)[0];\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'image/'\u003c/span\u003e+r;\n    };\n    imgdata=imgdata.replace(fixtype(\u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e),\u003cspan class=\"hljs-string\"\u003e'image/octet-stream'\u003c/span\u003e);\n    //3.0 将图片保存到本地\n    var savaFile=\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(data,filename)\n    {\n        var save_link=document.createElementNS(\u003cspan class=\"hljs-string\"\u003e'http://www.w3.org/1999/xhtml'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'a'\u003c/span\u003e);\n        save_link.href=data;\n        save_link.download=filename;\n        var event=document.createEvent(\u003cspan class=\"hljs-string\"\u003e'MouseEvents'\u003c/span\u003e);\n        event.initMouseEvent(\u003cspan class=\"hljs-string\"\u003e'click'\u003c/span\u003e,\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,window,0,0,0,0,0,\u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,\u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,\u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,\u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,0,null);\n        save_link.dispatchEvent(event);\n    };\n    var filename=\u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e+new Date().getDate()+\u003cspan class=\"hljs-string\"\u003e'.'\u003c/span\u003e+\u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e;\n    //直接用当前几号做的图片名字\n    savaFile(imgdata,filename);\n};\n\u003c/code\u003e\u003c/pre\u003e\u003ch6 class=\"heading\"\u003e只是个Demo 仅供参考 代码较乱 有待提高\u003c/h6\u003e\n","buildTime":"1514377953.0153","__v":0}
{"_id":{"$oid":"5a43938e51fb4902b0661521"},"id":"5a4125bd51882574d23c95b0","author":{"$oid":"5a43938e51fb4902b0661512"},"title":"JavaScript30秒， 从入门到放弃之Array（二）","meta":{"likeCount":0},"tag":["JavaScript","前端","Chrome"],"comment":[],"content":"\u003ch2 class=\"heading\"\u003edifference\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eReturns the difference between two arrays.\u003c/p\u003e\n\u003cp\u003eCreate a \u003ccode\u003eSet\u003c/code\u003e from \u003ccode\u003eb\u003c/code\u003e, then use \u003ccode\u003eArray.filter()\u003c/code\u003e on \u003ccode\u003ea\u003c/code\u003e to only keep values not contained in \u003ccode\u003eb\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e difference = \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003ea, b\u003c/span\u003e) =\u0026gt;\u003c/span\u003e { \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e s = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eSet\u003c/span\u003e(b); \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e a.filter(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003ex\u003c/span\u003e =\u0026gt;\u003c/span\u003e !s.has(x)); };\n\u003cspan class=\"hljs-comment\"\u003e// difference([1,2,3], [1,2,4]) -\u0026gt; [3]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/blockquote\u003e\n\u003cp\u003e返回两个数组的不同。\u003c/p\u003e\n\u003cp\u003e创建一个\u003ccode\u003eb\u003c/code\u003e数组的集合，然后使用\u003ccode\u003eArray.filter()\u003c/code\u003e对\u003ccode\u003ea\u003c/code\u003e数组进行过滤，过滤出不存在于数组\u003ccode\u003eb\u003c/code\u003e的元素。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e➜  code cat difference.js\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e difference = \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003ea, b\u003c/span\u003e) =\u0026gt;\u003c/span\u003e {\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e s = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eSet\u003c/span\u003e(b);\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e a.filter(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003ex\u003c/span\u003e =\u0026gt;\u003c/span\u003e !s.has(x));\n}\n\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(difference([\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e], [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e]));\n➜  code node difference.js\n[ \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e ]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e关键点是主客体，这里主体应该是第一个数组，也就是\u003ccode\u003ea\u003c/code\u003e，客体是数组\u003ccode\u003eb\u003c/code\u003e，返回的是不在主体\u003ccode\u003ea\u003c/code\u003e里的数组元素。类似于集合的\u003ccode\u003ea - b\u003c/code\u003e，不同点是\u003ccode\u003ea\u003c/code\u003e、\u003ccode\u003eb\u003c/code\u003e数组都可以有重复的元素存在，而集合不允许重复元素存在。\u003c/p\u003e\n\u003cp\u003e这逻辑是很清晰的，先把\u003ccode\u003eb\u003c/code\u003e数组转成集合存到\u003ccode\u003es\u003c/code\u003e中，然后去\u003ccode\u003efilter\u003c/code\u003e数组\u003ccode\u003ea\u003c/code\u003e，只要把不存在于\u003ccode\u003es\u003c/code\u003e集合中的元素返回即可。记住\u003ca target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\"\u003e\u003ccode\u003efilter\u003c/code\u003e\u003c/a\u003e返回的是一个数组。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003edifferenceWith\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eFilters out all values from an array for which the comparator function does not return \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eUse \u003ccode\u003eArray.filter()\u003c/code\u003e and \u003ccode\u003eArray.find()\u003c/code\u003e to find the appropriate values.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e differenceWith = \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003earr, val, comp\u003c/span\u003e) =\u0026gt;\u003c/span\u003e arr.filter(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003ea\u003c/span\u003e =\u0026gt;\u003c/span\u003e !val.find(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003eb\u003c/span\u003e =\u0026gt;\u003c/span\u003e comp(a, b)))\n\u003cspan class=\"hljs-comment\"\u003e// differenceWith([1, 1.2, 1.5, 3], [1.9, 3], (a,b) =\u0026gt; Math.round(a) == Math.round(b)) -\u0026gt; [1, 1.2]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/blockquote\u003e\n\u003cp\u003e从一个数组中筛选出所有不满足指定比较方法运算结果为\u003ccode\u003etrue\u003c/code\u003e的元素值的数组。\u003c/p\u003e\n\u003cp\u003e使用\u003ccode\u003eArray.filter()\u003c/code\u003e和\u003ccode\u003eArray.find()\u003c/code\u003e来找出适当的值。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e➜  code cat differenceWith.js\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e differenceWith = \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003earr, val, comp\u003c/span\u003e) =\u0026gt;\u003c/span\u003e arr.filter(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003ea\u003c/span\u003e =\u0026gt;\u003c/span\u003e !val.find(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003eb\u003c/span\u003e =\u0026gt;\u003c/span\u003e comp(a, b)));\n\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(differenceWith([\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1.2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1.5\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e], [\u003cspan class=\"hljs-number\"\u003e1.9\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e], (a,b) =\u0026gt; \u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.round(a) == \u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.round(b)));\n➜  code node differenceWith.js\n[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1.2\u003c/span\u003e ]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e和\u003ccode\u003edifference\u003c/code\u003e类似，主客体还是第一个数组\u003ccode\u003earr\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e我们可以先把意思进行拆分。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003ecomp\u003c/code\u003e运行结果为\u003ccode\u003etrue\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e数组\u003ccode\u003eval.find()\u003c/code\u003e去寻找\u003ccode\u003ecomp(a, b)(a是arr元素，b是val元素)\u003c/code\u003e运行结果为\u003ccode\u003etrue\u003c/code\u003e的值\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003earr\u003c/code\u003e不要上面第2点中运行结果为\u003ccode\u003etrue\u003c/code\u003e的值\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e通俗点就是说去遍历数组\u003ccode\u003earr\u003c/code\u003e的所有元素，然后在数组\u003ccode\u003eval\u003c/code\u003e里寻找\u003ccode\u003ecomp\u003c/code\u003e运算结果不为true的值。因为\u003ccode\u003eval.find()\u003c/code\u003e方法如果找到就返回该值，否则返回\u003ccode\u003eundefined\u003c/code\u003e，此时\u003ccode\u003e!val.find()\u003c/code\u003e就是\u003ccode\u003etrue\u003c/code\u003e，\u003ccode\u003earr.filter()\u003c/code\u003e正是需要这样运算结果的值。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003edistinctValuesOfArray\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eReturns all the distinct values of an array.\u003c/p\u003e\n\u003cp\u003eUse ES6 \u003ccode\u003eSet\u003c/code\u003e and the \u003ccode\u003e...rest\u003c/code\u003e operator to discard all duplicated values.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003econst distinctValuesOfArray = arr =\u0026gt; [...new Set(arr)];\n// distinctValuesOfArray([1,2,2,3,4,4,5]) -\u0026gt; [1,2,3,4,5]\n\u003c/code\u003e\u003c/pre\u003e\u003c/blockquote\u003e\n\u003cp\u003e返回数组去重结果。\u003c/p\u003e\n\u003cp\u003e使用\u003ccode\u003eES6\u003c/code\u003e的集合\u003ccode\u003eSet\u003c/code\u003e和\u003ccode\u003eES6\u003c/code\u003e的扩展运算符\u003ccode\u003e…\u003c/code\u003e把重复的元素排除掉。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e➜  code cat distinctValuesOfArray.js\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e distinctValuesOfArray = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003earr\u003c/span\u003e =\u0026gt;\u003c/span\u003e [...new \u003cspan class=\"hljs-built_in\"\u003eSet\u003c/span\u003e(arr)];\n\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(distinctValuesOfArray([\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e]));\n➜  code node distinctValuesOfArray.js\n[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e ]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e实际上\u003ccode\u003eES6\u003c/code\u003e的集合\u003ccode\u003eSet\u003c/code\u003e干的事，没啥可说。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003edropElements\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eRemoves elements in an array until the passed function returns \u003ccode\u003etrue\u003c/code\u003e. Returns the remaining elements in the array.\u003c/p\u003e\n\u003cp\u003eLoop through the array, using \u003ccode\u003eArray.slice()\u003c/code\u003e to drop the first element of the array until the returned value from the function is \u003ccode\u003etrue\u003c/code\u003e. Returns the remaining elements.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003econst dropElements = (arr, func) =\u0026gt; {\n  \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e (arr.length \u0026gt; 0 \u0026amp;\u0026amp; !func(arr[0])) arr = arr.slice(1);\n  \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e arr;\n};\n// dropElements([1, 2, 3, 4], n =\u0026gt; n \u0026gt;= 3) -\u0026gt; [3,4]\n\u003c/code\u003e\u003c/pre\u003e\u003c/blockquote\u003e\n\u003cp\u003e剔除掉数组元素直到指定方法运算结果第一次为\u003ccode\u003etrue\u003c/code\u003e为止。\u003c/p\u003e\n\u003cp\u003e循环一个数组，使用\u003ccode\u003eArray.slice\u003c/code\u003e每次去删除该数组的第一个元素直到指定方法运算结果为\u003ccode\u003etrue\u003c/code\u003e，返回的是剩余元素组成的数组。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e➜  code cat dropElements.js\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e dropElements = \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003earr, func\u003c/span\u003e) =\u0026gt;\u003c/span\u003e {\n    \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e (arr.length \u0026gt; \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e \u0026amp;\u0026amp; !func(arr[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e])) arr = arr.slice(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e arr;\n};\n\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(dropElements([\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e], n =\u0026gt; n \u0026gt;= \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e));\n➜  code node dropElements.js\n[ \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e ]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这里用\u003ccode\u003ewhile\u003c/code\u003e进行循环，循环条件是数组的长度大于\u003ccode\u003e0\u003c/code\u003e并且数组的第一个元素按照指定方法运行结果为\u003ccode\u003efalse\u003c/code\u003e，如果满足条件，使用\u003ccode\u003earr.slice(1)\u003c/code\u003e将\u003ccode\u003earr\u003c/code\u003e第一个元素删除掉。直到\u003ccode\u003ewhile\u003c/code\u003e循环退出，返回此时的\u003ccode\u003earr\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e这里的边界条件是数组长度为\u003ccode\u003e0\u003c/code\u003e，这时候就不进入\u003ccode\u003ewhile\u003c/code\u003e循环，直接返回空数组。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003edropRight\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eReturns a new array with \u003ccode\u003en\u003c/code\u003e elements removed from the right.\u003c/p\u003e\n\u003cp\u003eUse \u003ccode\u003eArray.slice()\u003c/code\u003e to slice the remove the specified number of elements from the right.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e dropRight = \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003earr, n = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e\u003c/span\u003e) =\u0026gt;\u003c/span\u003e arr.slice(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, -n);\n\u003cspan class=\"hljs-comment\"\u003e//dropRight([1,2,3]) -\u0026gt; [1,2]\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//dropRight([1,2,3], 2) -\u0026gt; [1]\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//dropRight([1,2,3], 42) -\u0026gt; []\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/blockquote\u003e\n\u003cp\u003e返回数组从右边开始剔除掉\u003ccode\u003en\u003c/code\u003e个元素后的数组。\u003c/p\u003e\n\u003cp\u003e使用\u003ccode\u003eArray.slice()\u003c/code\u003e切掉从右边开始计算的指定数目的元素。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e➜  code cat dropRight.js\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e dropRight = \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003earr, n = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e\u003c/span\u003e) =\u0026gt;\u003c/span\u003e arr.slice(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, -n);\n\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(dropRight([\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e]));\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(dropRight([\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e));\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(dropRight([\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e42\u003c/span\u003e));\n➜  code node dropRight.js\n[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e ]\n[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ]\n[]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003en\u003c/code\u003e的默认值是\u003ccode\u003e1\u003c/code\u003e，所以不传第二个参数的时候会删掉数组的最后一个元素。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e-n\u003c/code\u003e不好理解吗？变换一下就好了\u003ccode\u003earr.slice(0, -n)\u003c/code\u003e跟\u003ccode\u003earr.slice(0, arr.length + (-n))\u003c/code\u003e是一样的。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eslice(m, n)\u003c/code\u003e对应就是[m, n)，包含下界，不包含上届。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003eeveryNth\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eReturns every nth element in an array.\u003c/p\u003e\n\u003cp\u003eUse \u003ccode\u003eArray.filter()\u003c/code\u003e to create a new array that contains every nth element of a given array.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003econst everyNth = (arr, nth) =\u0026gt; arr.filter((e, i) =\u0026gt; i % nth === nth - 1);\n// everyNth([1,2,3,4,5,6], 2) -\u0026gt; [ 2, 4, 6 ]\n\u003c/code\u003e\u003c/pre\u003e\u003c/blockquote\u003e\n\u003cp\u003e返回一个新的数组，数组包含每\u003ccode\u003enth\u003c/code\u003e的元素，即\u003ccode\u003enth\u003c/code\u003e倍数的元素。\u003c/p\u003e\n\u003cp\u003e使用\u003ccode\u003eArray.filter()\u003c/code\u003e创建一个包含\u003ccode\u003enth\u003c/code\u003e倍数元素的新数组。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e➜  code cat everyNth.js\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e everyNth = \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003earr, nth\u003c/span\u003e) =\u0026gt;\u003c/span\u003e arr.filter(\u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003ee, i\u003c/span\u003e) =\u0026gt;\u003c/span\u003e i % nth === nth - \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e);\n\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(everyNth([\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e));\n➜  code node everyNth.js\n[ \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e ]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e判断是否\u003ccode\u003enth\u003c/code\u003e倍数只需要知道该元素的索引加\u003ccode\u003e1\u003c/code\u003e后能不能被\u003ccode\u003enth\u003c/code\u003e整除即可。\u003c/p\u003e\n\u003cp\u003e如果是我的话我会这么写\u003ccode\u003e(e, i) =\u0026gt; (i + 1) % nth === 0\u003c/code\u003e，可能这样比较符合我的思维习惯。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003efilterNonUnique\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eFilters out the non-unique values in an array.\u003c/p\u003e\n\u003cp\u003eUse \u003ccode\u003eArray.filter()\u003c/code\u003e for an array containing only the unique values.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003econst filterNonUnique = arr =\u0026gt; arr.filter(i =\u0026gt; arr.indexOf(i) === arr.lastIndexOf(i));\n// filterNonUnique([1,2,2,3,4,4,5]) -\u0026gt; [1,3,5]\n\u003c/code\u003e\u003c/pre\u003e\u003c/blockquote\u003e\n\u003cp\u003e过滤掉不唯一元素后返回的数组。\u003c/p\u003e\n\u003cp\u003e使用\u003ccode\u003eArray.filter()\u003c/code\u003e去筛选满足数组元素唯一性的元素。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e➜  code cat filterNonUnique.js\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e filterNonUnique = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003earr\u003c/span\u003e =\u0026gt;\u003c/span\u003e arr.filter(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003ei\u003c/span\u003e =\u0026gt;\u003c/span\u003e arr.indexOf(i) === arr.lastIndexOf(i));\n\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(filterNonUnique([\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e]));\n➜  code node filterNonUnique.js\n[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e ]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e方法用得很巧，一个数如果出现在一个数组超过一次，那么该数在数组中的左索引\u003ccode\u003eindexOf\u003c/code\u003e(从左边数第一次出现该数的索引)和右索引\u003ccode\u003elastIndexOf\u003c/code\u003e（从右边数第一次出现该数的索引）一定不相等。\u003c/p\u003e\n\u003cp\u003e反过来说左索引等于右索引，该数在数组中只出现一次，满足唯一性。\u003c/p\u003e\n\u003cp\u003e这里和\u003ccode\u003edistinctValuesOfArray\u003c/code\u003e的区别是，\u003ccode\u003edistinctValuesOfArray\u003c/code\u003e删掉了重复的元素，只留一个；\u003ccode\u003efilterNonUnique\u003c/code\u003e删掉了所有重复元素，一个不留。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003eflatten\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eFlattens an array.\u003c/p\u003e\n\u003cp\u003eUse a new array and concatenate it with the spread input array causing a shallow denesting of any contained arrays.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003econst flatten = arr =\u0026gt; [ ].concat( ...arr );\n// flatten([1,[2],3,4]) -\u0026gt; [1,2,3,4]\n\u003c/code\u003e\u003c/pre\u003e\u003c/blockquote\u003e\n\u003cp\u003e摊平一个数组。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eArray.concat()\u003c/code\u003e、空数组\u003ccode\u003e[]\u003c/code\u003e和\u003ccode\u003eES6\u003c/code\u003e的扩展运算符\u003ccode\u003e…\u003c/code\u003e来摊平一个数组。这里是浅度摊平，即只摊平一层。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e➜  code cat flatten.js\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e flatten = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003earr\u003c/span\u003e =\u0026gt;\u003c/span\u003e [].concat(...arr);\n\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(flatten([\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, [\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e]));\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(flatten([\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, [[\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e]));\n➜  code node flatten.js\n[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e ]\n[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, [ \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e ], \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e ]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e主要是用\u003ccode\u003e[]\u003c/code\u003e和\u003ccode\u003eES6\u003c/code\u003e的扩展运算符\u003ccode\u003e…\u003c/code\u003e对\u003ccode\u003earr\u003c/code\u003e运算结果\u003ccode\u003econcat\u003c/code\u003e连接起来。\u003c/p\u003e\n\u003cp\u003e与\u003ccode\u003edeepFlatten\u003c/code\u003e的区别就是\u003ccode\u003eflatten\u003c/code\u003e只摊平一层，\u003ccode\u003edeepFlatten\u003c/code\u003e深度摊平。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e个人翻译水平有限，欢迎大家在issues上批评指正。\u003ca target=\"_blank\" href=\"https://github.com/hongmaoxiao/myblog/issues/6\"\u003eJavaScript30秒， 从入门到放弃之Array（二）\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e微信公众号：\u003ca target=\"_blank\" href=\"https://mp.weixin.qq.com/s/iJ7QxFVB3XWlL_efQU9hpQ\"\u003eJavaScript30秒， 从入门到放弃之Array（二）\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\n","buildTime":"1514376795.7333","__v":0}
{"_id":{"$oid":"5a43938e51fb4902b0661522"},"id":"5a41a23f6fb9a045234221e8","author":{"$oid":"5a43938e51fb4902b0661517"},"title":"vue-cli解析","meta":{"likeCount":0},"tag":["JavaScript","Webpack","Vue.js","Node.js"],"comment":[],"content":"\u003ch1 class=\"heading\"\u003e前言\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e这段时间，算是空出手来写几篇文章了。由于很久都没有时间整理现在所用的东西了，所以，接下来会慢慢整理出一些文档来记录前段时间的工作和生活。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e这篇文章的主题是vue-cli的理解。或许，很多人在开发vue的时候，我们会发现一个问题——只会去用，而不明白它的里面的东西。现在的框架可以说是足够的优秀，让开发者不用为搭建开发环境而烦恼。但是有时候，我们还是得回到\u003cstrong\u003e原始生活\u003c/strong\u003e体验一下，才能够让自己更上层楼，希望大家共勉。如果你喜欢我的文章，欢迎评论，欢迎Star~。欢迎关注我的\u003ca target=\"_blank\" href=\"https://github.com/laizimo/zimo-article\"\u003egithub博客\u003c/a\u003e\u003c/p\u003e\n\u003ch1 class=\"heading\"\u003e正文\u003c/h1\u003e\n\u003cp\u003e首先，我们来说一下安装的东西吧！处于有头有尾的目的，还是几句话草草了事。步骤如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e安装vue-cli\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003enpm install vue-cli -g\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e以webpack模版安装目录\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003evue init webapck webpack-template\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这样之后，我们就可以使用IDE打开目录了。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e此处注明我的vue-cli的版本2.9.2，以免之后改版之后，误导读者。\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e之后，附上自己的目录截图，并没有做改动，如图：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"vue-cli-menu\" src=\"https://user-gold-cdn.xitu.io/2017/12/26/1609061f12ce6d3d?w=414\u0026amp;h=530\u0026amp;f=jpeg\u0026amp;s=32907\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e首先，第一个问题，从何看起呢？当然，是从webpack.base.conf.js开始看起了。这个是dev和prod环境都会去加载的东西。然后，我们可以先从webpack.base.conf.js中会被用到的几个文件看起。其实，base中被用到了如下的文件，我们可以从代码中看出：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-meta\"\u003e'use strict'\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e path = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'path'\u003c/span\u003e)\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e utils = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'./utils'\u003c/span\u003e)\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e config = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'../config'\u003c/span\u003e)\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e vueLoaderConfig = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'./vue-loader.conf'\u003c/span\u003e)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e分别是：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003epath 【路径模块】\u003c/li\u003e\n\u003cli\u003ebuild目录中的utils.js文件\u003c/li\u003e\n\u003cli\u003econfig目录中的index文件\u003c/li\u003e\n\u003cli\u003ebuild目录中的vue-loader.conf.js文件\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003epath路径\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e这个模块可以看nodejs官网的介绍，其实，就是一个文件路径的获取和设置等模块，学习node的时候，我们往往会看到这个模块被大量运用。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003epath模块提供了用于处理文件和目录路径的使用工具\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 class=\"heading\"\u003eutils.js\u003c/h2\u003e\n\u003cp\u003e我们可以到其中去看一下代码，其实光从名字上我们可以推断出，它可能是为整个脚手架提供方法的。我们可以先来看一下头部引用的资源文件：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e path = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'path'\u003c/span\u003e)\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e config = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'../config'\u003c/span\u003e)\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e ExtractTextPlugin = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'extract-text-webpack-plugin'\u003c/span\u003e)\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e packageConfig = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'../package.json'\u003c/span\u003e)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e同样的，它也引用了\u003cem\u003epath模块\u003c/em\u003e和config目录中的index.js文件，之后的话是一个npm包——extract-text-webpack-plugin。这个包的话，是用来分离css和js的内容的。后续我们可以详细了解一下。同时，它还引用的package.json文件，这是一个json文件，加载过来之后，会变成一个对象。\u003c/p\u003e\n\u003cp\u003e所以，我们需要从它的头部依赖开始说起：\u003c/p\u003e\n\u003cp\u003epath模块我们之前提到过，这里就不细说。我们可以来分析一下config目录下的index.js文件。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eindex.js\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e这个文件中，其实有十分充足的代码注释，我们也可以来深入探究一下。\u003c/p\u003e\n\u003cp\u003e从代码中，我们可以看到通过module.exports导出了一个对象，其中包含两个设置dev和build。\u003c/p\u003e\n\u003cp\u003e在dev中，设置了一些配置，代码如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003emodules.exports = {\n\u0009\u003cspan class=\"hljs-attr\"\u003edev\u003c/span\u003e: {\n\u0009\n\u0009    \u003cspan class=\"hljs-comment\"\u003e// Paths\u003c/span\u003e\n\u0009    assetsSubDirectory: \u003cspan class=\"hljs-string\"\u003e'static'\u003c/span\u003e,\n\u0009    \u003cspan class=\"hljs-attr\"\u003eassetsPublicPath\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'/'\u003c/span\u003e,\n\u0009    \u003cspan class=\"hljs-attr\"\u003eproxyTable\u003c/span\u003e: {},\n\u0009\n\u0009    \u003cspan class=\"hljs-comment\"\u003e// Various Dev Server settings\u003c/span\u003e\n\u0009    host: \u003cspan class=\"hljs-string\"\u003e'localhost'\u003c/span\u003e, \u003cspan class=\"hljs-comment\"\u003e// can be overwritten by process.env.HOST\u003c/span\u003e\n\u0009    port: \u003cspan class=\"hljs-number\"\u003e8080\u003c/span\u003e, \u003cspan class=\"hljs-comment\"\u003e// can be overwritten by process.env.PORT, if port is in use, a free one will be determined\u003c/span\u003e\n\u0009    autoOpenBrowser: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,\n\u0009    \u003cspan class=\"hljs-attr\"\u003eerrorOverlay\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n\u0009    \u003cspan class=\"hljs-attr\"\u003enotifyOnErrors\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n\u0009    \u003cspan class=\"hljs-attr\"\u003epoll\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e, \u003cspan class=\"hljs-comment\"\u003e// https://webpack.js.org/configuration/dev-server/#devserver-watchoptions-\u003c/span\u003e\n\u0009\n\u0009    \u003cspan class=\"hljs-comment\"\u003e// Use Eslint Loader?\u003c/span\u003e\n\u0009    \u003cspan class=\"hljs-comment\"\u003e// If true, your code will be linted during bundling and\u003c/span\u003e\n\u0009    \u003cspan class=\"hljs-comment\"\u003e// linting errors and warnings will be shown in the console.\u003c/span\u003e\n\u0009    useEslint: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n\u0009    \u003cspan class=\"hljs-comment\"\u003e// If true, eslint errors and warnings will also be shown in the error overlay\u003c/span\u003e\n\u0009    \u003cspan class=\"hljs-comment\"\u003e// in the browser.\u003c/span\u003e\n\u0009    showEslintErrorsInOverlay: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,\n\u0009\n\u0009    \u003cspan class=\"hljs-comment\"\u003e/**\n\u0009     * Source Maps\n\u0009     */\u003c/span\u003e\n\u0009\n\u0009    \u003cspan class=\"hljs-comment\"\u003e// https://webpack.js.org/configuration/devtool/#development\u003c/span\u003e\n\u0009    devtool: \u003cspan class=\"hljs-string\"\u003e'eval-source-map'\u003c/span\u003e,\n\u0009\n\u0009    \u003cspan class=\"hljs-comment\"\u003e// If you have problems debugging vue-files in devtools,\u003c/span\u003e\n\u0009    \u003cspan class=\"hljs-comment\"\u003e// set this to false - it *may* help\u003c/span\u003e\n\u0009    \u003cspan class=\"hljs-comment\"\u003e// https://vue-loader.vuejs.org/en/options.html#cachebusting\u003c/span\u003e\n\u0009    cacheBusting: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n\u0009\n\u0009    \u003cspan class=\"hljs-comment\"\u003e// CSS Sourcemaps off by default because relative paths are \"buggy\"\u003c/span\u003e\n\u0009    \u003cspan class=\"hljs-comment\"\u003e// with this option, according to the CSS-Loader README\u003c/span\u003e\n\u0009    \u003cspan class=\"hljs-comment\"\u003e// (https://github.com/webpack/css-loader#sourcemaps)\u003c/span\u003e\n\u0009    \u003cspan class=\"hljs-comment\"\u003e// In our experience, they generally work as expected,\u003c/span\u003e\n\u0009    \u003cspan class=\"hljs-comment\"\u003e// just be aware of this issue when enabling this option.\u003c/span\u003e\n\u0009    cssSourceMap: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,\n\u0009  }\n  }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e通过它的注释，我们可以理解它在dev中配置了\u003cem\u003e静态路径\u003c/em\u003e、\u003cem\u003e本地服务器配置项\u003c/em\u003e、\u003cem\u003eEslint\u003c/em\u003e、\u003cem\u003eSource Maps\u003c/em\u003e等参数。如果我们需要在开发中，改动静态资源文件、服务器端口等设置，可以在这个文件中进行修改。\u003c/p\u003e\n\u003cp\u003e下面还有一个build的对象，它是在vue本地服务器启动时，打包的一些配置， 代码如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003ebuild: {\n    \u003cspan class=\"hljs-comment\"\u003e// Template for index.html\u003c/span\u003e\n    index: path.resolve(__dirname, \u003cspan class=\"hljs-string\"\u003e'../dist/index.html'\u003c/span\u003e),\n\n    \u003cspan class=\"hljs-comment\"\u003e// Paths\u003c/span\u003e\n    assetsRoot: path.resolve(__dirname, \u003cspan class=\"hljs-string\"\u003e'../dist'\u003c/span\u003e),\n    \u003cspan class=\"hljs-attr\"\u003eassetsSubDirectory\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'static'\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003eassetsPublicPath\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'/'\u003c/span\u003e,\n\n    \u003cspan class=\"hljs-comment\"\u003e/**\n     * Source Maps\n     */\u003c/span\u003e\n\n    productionSourceMap: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n    \u003cspan class=\"hljs-comment\"\u003e// https://webpack.js.org/configuration/devtool/#production\u003c/span\u003e\n    devtool: \u003cspan class=\"hljs-string\"\u003e'#source-map'\u003c/span\u003e,\n\n    \u003cspan class=\"hljs-comment\"\u003e// Gzip off by default as many popular static hosts such as\u003c/span\u003e\n    \u003cspan class=\"hljs-comment\"\u003e// Surge or Netlify already gzip all static assets for you.\u003c/span\u003e\n    \u003cspan class=\"hljs-comment\"\u003e// Before setting to `true`, make sure to:\u003c/span\u003e\n    \u003cspan class=\"hljs-comment\"\u003e// npm install --save-dev compression-webpack-plugin\u003c/span\u003e\n    productionGzip: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003eproductionGzipExtensions\u003c/span\u003e: [\u003cspan class=\"hljs-string\"\u003e'js'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'css'\u003c/span\u003e],\n\n    \u003cspan class=\"hljs-comment\"\u003e// Run the build command with an extra argument to\u003c/span\u003e\n    \u003cspan class=\"hljs-comment\"\u003e// View the bundle analyzer report after build finishes:\u003c/span\u003e\n    \u003cspan class=\"hljs-comment\"\u003e// `npm run build --report`\u003c/span\u003e\n    \u003cspan class=\"hljs-comment\"\u003e// Set to `true` or `false` to always turn it on or off\u003c/span\u003e\n    bundleAnalyzerReport: process.env.npm_config_report\n  }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e其中包括模版文件的修改，打包完目录之后的一些路径设置，gzip压缩等。\u003cstrong\u003e明白了这些字段的意思之后，就可以在之后的开发中，主动根据项目需求，改动目录内容\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e聊完config下的index.js文件，回到utils.js文件中，我们可以来看几个其中的方法，来分析它们分别起到了什么作用。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eassetsPath方法\u003c/p\u003e\n\u003cp\u003e接受一个_path参数\u003c/p\u003e\n\u003cp\u003e返回static目录位置拼接的路径。\u003c/p\u003e\n\u003cp\u003e它根据nodejs的proccess.env.NODE_ENV变量，来判断当前运行的环境。返回不同环境下面的不同static目录位置拼接给定的_path参数。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ecssLoaders方法\u003c/p\u003e\n\u003cp\u003e接受一个options参数，参数还有的属性：sourceMap、usePostCSS。\u003c/p\u003e\n\u003cp\u003e同时，这里用到了我们之前提到的extract-text-webpack-plugin插件，来分离出js中的css代码，然后分别进行打包。同时，它返回一个对象，其中包含了css预编译器(less、sass、stylus)loader生成方法等。如果你的文档明确只需要一门css语言，那么可以稍微清楚一些语言，同时可以减少npm包的大小(毕竟这是一个令人烦躁的东西)。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003estyleLoaders方法\u003c/p\u003e\n\u003cp\u003e接受的options对象和上面的方法一致。该方法只是根据cssLoaders中的方法配置，生成不同loaders。然后将其返回。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ecreateNotifierCallback方法\u003c/p\u003e\n\u003cp\u003e此处调用了一个模块，可以在GitHub上找到，它是一个原生的操作系统上发送通知的nodeJS模块。用于返回脚手架错误的函数\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e一共这么四个函数方法，在utils中被定义到。\u003c/p\u003e\n\u003cp\u003e回看到webpack.base.conf.js文件中，我们可以直接跳过config目录下的index.js文件，之前已经分析过了。直接来看一下vue-loader.conf.js下的内容。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003evue-loader.conf.js\u003c/h2\u003e\n\u003cp\u003e这个文件中的代码非常的少，我们可以直接贴上代码，然后来分析，其中的作用。代码如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs JavaScript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-meta\"\u003e'use strict'\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e utils = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'./utils'\u003c/span\u003e)\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e config = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'../config'\u003c/span\u003e)\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e isProduction = process.env.NODE_ENV === \u003cspan class=\"hljs-string\"\u003e'production'\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e sourceMapEnabled = isProduction\n  ? config.build.productionSourceMap\n  : config.dev.cssSourceMap\n\n\u003cspan class=\"hljs-built_in\"\u003emodule\u003c/span\u003e.exports = {\n  \u003cspan class=\"hljs-attr\"\u003eloaders\u003c/span\u003e: utils.cssLoaders({\n    \u003cspan class=\"hljs-attr\"\u003esourceMap\u003c/span\u003e: sourceMapEnabled,\n    \u003cspan class=\"hljs-attr\"\u003eextract\u003c/span\u003e: isProduction\n  }),\n  \u003cspan class=\"hljs-attr\"\u003ecssSourceMap\u003c/span\u003e: sourceMapEnabled,\n  \u003cspan class=\"hljs-attr\"\u003ecacheBusting\u003c/span\u003e: config.dev.cacheBusting,\n  \u003cspan class=\"hljs-attr\"\u003etransformToRequire\u003c/span\u003e: {\n    \u003cspan class=\"hljs-attr\"\u003evideo\u003c/span\u003e: [\u003cspan class=\"hljs-string\"\u003e'src'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'poster'\u003c/span\u003e],\n    \u003cspan class=\"hljs-attr\"\u003esource\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'src'\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003eimg\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'src'\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003eimage\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'xlink:href'\u003c/span\u003e\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e其中，主要就是根据NODE_ENV这个变量，然后分析是否是生产环境，然后将根据不同的环境来加载，不同的环境，来判断是否开启了sourceMap的功能。方便之后在cssLoaders中加上sourceMap功能。然后判断是否设置了cacheBusting属性，它指的是缓存破坏，特别是进行sourceMap debug时，设置成false是非常有帮助的。最后就是一个转化请求的内容，video、source、img、image等的属性进行配置。\u003c/p\u003e\n\u003cp\u003e具体的还是需要去了解vue-loader这个webpack的loader加载器。\u003c/p\u003e\n\u003cp\u003e分析了这么多，最终回到webpack.base.conf.js文件中\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003ewebpack.base.conf.js\u003c/h2\u003e\n\u003cp\u003e其实的两个方法，其中一个是来合并path路径的，另一个是加载Eslint的rules的。\u003c/p\u003e\n\u003cp\u003e我们直接看后面那个函数，createLintingRule方法：\u003c/p\u003e\n\u003cp\u003e其中，加载了一个formatter，这个可以在终端中显示eslint的规则错误，方便开发者直接找到相应的位置，然后修改代码。\u003c/p\u003e\n\u003cp\u003e之后的一个对象，就是webpack的基础配置信息。我们可以逐一字段进行分析：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003econtext =\u0026gt; 运行环境的上下文，就是实际的目录\u003c/li\u003e\n\u003cli\u003eentry =\u0026gt; 入口文件：src下的main.js文件\u003c/li\u003e\n\u003cli\u003eoutput =\u0026gt; 输出内容，这内部的配置会根据不同的运行环境来进行变化\u003c/li\u003e\n\u003cli\u003eresolve =\u0026gt; 其中的extensions字段，指定检测的文件后缀，同时alias是用于指定别名的。在引用文件路径中，如果有别名的符号，会被替换成指定的路径。\u003c/li\u003e\n\u003cli\u003emodule =\u0026gt; 配置了一些eslint、vue、js、图片资源、字体图标、文件等加载的loader。详细的可以去看webpack的官方网站。\u003c/li\u003e\n\u003cli\u003enode =\u0026gt; 此处部分有注释，主要是阻止一些webpack的默认注入行为，因为在vue中，已经具备了这些功能。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e看完这些，你或许对webapck.base.conf.js中的内容有了一些初步的了解。其实，看懂它还需要你了解webpack这个非常有用的打包工具。\u003c/p\u003e\n\u003cp\u003e之后，我们在来回看webpack.dev.conf.js这个文件\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003ewebpack.dev.conf.js\u003c/h2\u003e\n\u003cp\u003e这个文件中，引用了webapck-merge这npm包，它可以将两个配置对象，进行合并。代码如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs JavaScript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e merge = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'webpack-merge'\u003c/span\u003e);\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e devWebpackConfig = merge(baseWebpackConfig, {\n\u0009...\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这样就合并了base中的webpack配置项。之后，我们可以来看一下dev环境中的新增了那些配置项，它们分别起到了什么作用？\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e首先，在module的rules中增加了cssSourceMap的功能\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e然后就是devtools，通过注释的英文翻译，可以知道cheap-module-eval-source-map使得开发更快。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e之后，就是devSever的一些配置项了。其中包块客户端报错级别、端口、host等等\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e还有新增的plugins，我们可以来看一下实际新增的plugins(具体可以看webpack文档)：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e定义process.env\u003c/li\u003e\n\u003cli\u003eHotModuleReplacementPlugin: 模块热替换插件\u003c/li\u003e\n\u003cli\u003eNameModulesPlugin: 显示模块加载相对路径插件\u003c/li\u003e\n\u003cli\u003eNoEmitOnErrorsPlugin: 在编译出现错误时，使用 NoEmitOnErrorsPlugin 来跳过输出阶段。这样可以确保输出资源不会包含错误\u003c/li\u003e\n\u003cli\u003eHtmlWebpackPlugin: 使用插件生成一个指定的模版。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e之后，还有一个函数，确保启动程序时，如果端口被占用时，会通过portfinder来发布新的端口，然后输出运行的host字符串。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003ewebpack.prod.conf.js\u003c/h2\u003e\n\u003cp\u003e这是打包到生产环境中，会被用到的文件。我们可以看到，它相对于之前的webapck.dev.conf.js文件少了一些插件，多了更多的插件。我们也可以和之前一样，通过它新增的一些东西，来知道它到底干了什么！(此处的新增是相对于webpack.dev.conf.js没有的内容)\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e新增了output的配置，我们可以看到它在output中新增了一些属性，将js打包成不同的块chunk，然后使用hash尾缀进行命名\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e添加了一些插件：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUglifJsPlugin: 这个是用来丑化js代码的\u003c/li\u003e\n\u003cli\u003eExtractTextplugin: 这里新增了一些属性，在打包的css文件也增加了块和hash尾缀\u003c/li\u003e\n\u003cli\u003eOptimizeCssplugin: 这里是来优化css文件的，主要就是压缩css代码\u003c/li\u003e\n\u003cli\u003eHashedModuleIdsPlugin: 保证module的id值稳定\u003c/li\u003e\n\u003cli\u003eoptimize: 这里是webpack一系列优化的措施，具体可以逐一查看官方文档\u003c/li\u003e\n\u003cli\u003eCopyWebPlugins: 自定义assets文件目录\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e如果没有进行gzip压缩，调用CompressionWebpackPlugin插件进行压缩\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e这样，我们的webpack配置文件内容基本上就全部看完了。或许，会有点蒙，还是看官方文档来的实在。\u003c/p\u003e\n\u003cp\u003e最后，还需要分析一个build.js文件。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003ebuild.js\u003c/h2\u003e\n\u003cp\u003e这个文件是在打包的时候，会被用到的。\u003c/p\u003e\n\u003cp\u003e首先，文件的开头请求了check-version.js中的函数，然后确定了一下node和npm的版本。相对于较低版本的node和npm，在打包过程中，会产生警告。之后，设置环境参数，设置成生产环境，之后就是一系列打包的流程。\u003c/p\u003e\n\u003ch1 class=\"heading\"\u003e总结\u003c/h1\u003e\n\u003cp\u003e本篇文章，主要总结了一下vue-cli生成的文件中，其中的一些配置参数和文件大致的作用。有不到位的地方，希望大家可以指正。同时希望我们共同进步，共勉。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e如果你对我写的有疑问，可以评论，如我写的有错误，欢迎指正。你喜欢我的博客，请给我关注Star~呦\u003ca target=\"_blank\" href=\"https://github.com/laizimo/zimo-article\"\u003egithub博客\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n","buildTime":"1514374862.1015","__v":0}
{"_id":{"$oid":"5a43938e51fb4902b0661523"},"id":"5a3e81a251882512b67ae48f","author":{"$oid":"5a43938e51fb4902b0661512"},"title":"JavaScript30秒， 从入门到放弃","meta":{"likeCount":0},"tag":["JavaScript"],"comment":[],"content":"\u003ch1 class=\"heading\"\u003e有意思\u003c/h1\u003e\n\u003cp\u003e最近很火的\u003ccode\u003egithub\u003c/code\u003e上的库\u003ca target=\"_blank\" href=\"https://github.com/Chalarangelo/30-seconds-of-code\"\u003e\u003ccode\u003e30-seconds-of-code\u003c/code\u003e\u003c/a\u003e，特别有意思，代码也很优雅。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e能学es6\u003c/li\u003e\n\u003cli\u003e自己翻译，能学英语\u003c/li\u003e\n\u003cli\u003e代码很美，很优雅，美即正义\u003c/li\u003e\n\u003cli\u003e函数式表达，享受\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 class=\"heading\"\u003earrayGcd\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eCalculates the greatest common denominator (gcd) of an array of numbers.\u003c/p\u003e\n\u003cp\u003eUse \u003ccode\u003eArray.reduce()\u003c/code\u003e and the \u003ccode\u003egcd\u003c/code\u003e formula (uses recursion) to calculate the greatest common denominator of an array of numbers.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e arrayGcd = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003earr\u003c/span\u003e =\u0026gt;\u003c/span\u003e{\n  \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e gcd = \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003ex, y\u003c/span\u003e) =\u0026gt;\u003c/span\u003e !y ? x : gcd(y, x % y);\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e arr.reduce(\u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003ea,b\u003c/span\u003e) =\u0026gt;\u003c/span\u003e gcd(a,b));\n}\n\u003cspan class=\"hljs-comment\"\u003e// arrayGcd([1,2,3,4,5]) -\u0026gt; 1\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e// arrayGcd([4,8,12]) -\u0026gt; 4\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/blockquote\u003e\n\u003cp\u003e计算数组的最大公约数。\u003c/p\u003e\n\u003cp\u003e使用\u003ccode\u003eArray.reduce()\u003c/code\u003e和\u003ccode\u003egcd\u003c/code\u003e公式(使用递归)来计算一个数组的最大公约数。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e➜  code cat arrayGcd.js\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e arrayGcd = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003earr\u003c/span\u003e =\u0026gt;\u003c/span\u003e {\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e gcd = \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003ex, y\u003c/span\u003e) =\u0026gt;\u003c/span\u003e !y ? x : gcd(y, x % y);\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e arr.reduce(\u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003ea, b\u003c/span\u003e) =\u0026gt;\u003c/span\u003e gcd(a, b));\n}\n\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(arrayGcd([\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e]));\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(arrayGcd([\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e8\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e]));\n➜  code node arrayGcd.js\n\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e\n\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003egcd\u003c/code\u003e即欧几里德算法，具体不表，自查。这里用到了数组的reduce方法，相当简洁，reduce不太了解的话，看下\u003ca target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\"\u003emdn\u003c/a\u003e就明白。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003earrayLcm\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eCalculates the lowest common multiple (lcm) of an array of numbers.\u003c/p\u003e\n\u003cp\u003eUse \u003ccode\u003eArray.reduce()\u003c/code\u003e and the \u003ccode\u003elcm\u003c/code\u003e formula (uses recursion) to calculate the lowest common multiple of an array of numbers.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e arrayLcm = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003earr\u003c/span\u003e =\u0026gt;\u003c/span\u003e{\n \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e gcd = \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003ex, y\u003c/span\u003e) =\u0026gt;\u003c/span\u003e !y ? x : gcd(y, x % y);\n \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e lcm = \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003ex, y\u003c/span\u003e) =\u0026gt;\u003c/span\u003e (x*y)/gcd(x, y) \n \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e arr.reduce(\u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003ea,b\u003c/span\u003e) =\u0026gt;\u003c/span\u003e lcm(a,b));\n}\n\u003cspan class=\"hljs-comment\"\u003e// arrayLcm([1,2,3,4,5]) -\u0026gt; 60\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e// arrayLcm([4,8,12]) -\u0026gt; 24\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/blockquote\u003e\n\u003cp\u003e计算一个数组的最小公倍数。\u003c/p\u003e\n\u003cp\u003e使用\u003ccode\u003eArray.reduce()\u003c/code\u003e和\u003ccode\u003elcm\u003c/code\u003e公式(使用递归)来计算一个数组的最大公约数。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e➜  code cat arrayLcm.js\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e arrayLcm = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003earr\u003c/span\u003e =\u0026gt;\u003c/span\u003e {\n  \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e gcd = \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003ex, y\u003c/span\u003e) =\u0026gt;\u003c/span\u003e (!y ? x : gcd(y, x % y));\n  \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e lcm = \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003ex, y\u003c/span\u003e) =\u0026gt;\u003c/span\u003e x * y / gcd(x, y);\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e arr.reduce(\u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003ea, b\u003c/span\u003e) =\u0026gt;\u003c/span\u003e lcm(a, b));\n};\n\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(arrayLcm([\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e]));\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(arrayLcm([\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e8\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e]));\n➜  code node arrayLcm.js\n\u003cspan class=\"hljs-number\"\u003e60\u003c/span\u003e\n\u003cspan class=\"hljs-number\"\u003e24\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003elcm\u003c/code\u003e算法用到了前面的\u003ccode\u003egcd\u003c/code\u003e算法，关键点是两个数的最大公约数和最小公倍数的乘积正好就是这两个数的乘积。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003earrayMax\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eReturns the maximum value in an array.\u003c/p\u003e\n\u003cp\u003eUse \u003ccode\u003eMath.max()\u003c/code\u003e combined with the spread operator (\u003ccode\u003e...\u003c/code\u003e) to get the maximum value in the array.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003econst arrayMax = arr =\u0026gt; Math.max(...arr);\n// arrayMax([10, 1, 5]) -\u0026gt; 10\n\u003c/code\u003e\u003c/pre\u003e\u003c/blockquote\u003e\n\u003cp\u003e返回数组中最大的值。\u003c/p\u003e\n\u003cp\u003e使用\u003ccode\u003eMath.max()\u003c/code\u003e和\u003ccode\u003eES6\u003c/code\u003e的扩展运算符\u003ccode\u003e…\u003c/code\u003e返回数组中最大的值。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e➜  code cat arrayMax.js\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e arrayMax = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003earr\u003c/span\u003e =\u0026gt;\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.max(...arr);\n\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(arrayMax([\u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e]));\n➜  code node arrayMax.js\n\u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e实际上就是\u003ccode\u003eMath.max()\u003c/code\u003e干的事，没啥可说的了。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003earrayMin\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eReturns the minimum value in an array.\u003c/p\u003e\n\u003cp\u003eUse \u003ccode\u003eMath.min()\u003c/code\u003e combined with the spread operator (\u003ccode\u003e...\u003c/code\u003e) to get the minimum value in the array.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003econst arrayM\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e = arr =\u0026gt; Math.min(...arr);\n// arrayM\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e([10, 1, 5]) -\u0026gt; 1\n\u003c/code\u003e\u003c/pre\u003e\u003c/blockquote\u003e\n\u003cp\u003e返回数组中最小的值。\u003c/p\u003e\n\u003cp\u003e使用\u003ccode\u003eMath.min()\u003c/code\u003e和\u003ccode\u003eES6\u003c/code\u003e的扩展运算符\u003ccode\u003e…\u003c/code\u003e返回数组中最小的值。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e➜  code cat arrayMin.js\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e arrayMin = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003earr\u003c/span\u003e =\u0026gt;\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.min(...arr);\n\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(arrayMin([\u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e]));\n➜  code node arrayMin.js\n\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e实际上就是\u003ccode\u003eMath.min()\u003c/code\u003e干的事，没啥可说的了。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003echunk\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eChunks an array into smaller arrays of a specified size.\u003c/p\u003e\n\u003cp\u003eUse \u003ccode\u003eArray.from()\u003c/code\u003e to create a new array, that fits the number of chunks that will be produced. Use \u003ccode\u003eArray.slice()\u003c/code\u003e to map each element of the new array to a chunk the length of \u003ccode\u003esize\u003c/code\u003e. If the original array can't be split evenly, the final chunk will contain the remaining elements.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e chunk = \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003earr, size\u003c/span\u003e) =\u0026gt;\u003c/span\u003e\n \u003cspan class=\"hljs-built_in\"\u003eArray\u003c/span\u003e.from({\u003cspan class=\"hljs-attr\"\u003elength\u003c/span\u003e: \u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.ceil(arr.length / size)}, (v, i) =\u0026gt; arr.slice(i * size, i * size + size));\n\u003cspan class=\"hljs-comment\"\u003e// chunk([1,2,3,4,5], 2) -\u0026gt; [[1,2],[3,4],[5]]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/blockquote\u003e\n\u003cp\u003e按照给定的\u003ccode\u003esize\u003c/code\u003e将一个数组切分成含有\u003ccode\u003esize\u003c/code\u003e个数的更小数组块的数组。\u003c/p\u003e\n\u003cp\u003e使用\u003ccode\u003eArray.from()\u003c/code\u003e生产新的符合定义的数组。使用\u003ccode\u003eArray.slice()\u003c/code\u003e来截取指定\u003ccode\u003esize\u003c/code\u003e个元素组成新的数组块。如果原数组长度不能被\u003ccode\u003esize\u003c/code\u003e整除，最后的剩余的那些元素将归属于最后一个块。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e➜  code cat chunk.js\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e chunk = \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003earr, size\u003c/span\u003e) =\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-built_in\"\u003eArray\u003c/span\u003e.from({ \u003cspan class=\"hljs-attr\"\u003elength\u003c/span\u003e: \u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.ceil(arr.length / size) }, (v, i) =\u0026gt;\n    arr.slice(i * size, i * size + size)\n  );\n\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(chunk([\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e));\n➜  code node chunk.js\n[ [ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e ], [ \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e ], [ \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e ] ]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ca target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\"\u003e\u003ccode\u003eArray.from(arrayLike, mapFn, thisArg)\u003c/code\u003e\u003c/a\u003e这个方法呢，第一个参数是一个类数组或者可迭代的对象，第二个参数是一个应用在每一个数组元素上的方法，第三个参数就是改变\u003ccode\u003ethis\u003c/code\u003e的指向了。通俗说就是指定谁是你的爸爸。\u003c/p\u003e\n\u003cp\u003e这里用了一个\u003ccode\u003e{ length: Math.ceil(arr.length / size) }\u003c/code\u003e迭代对象，\u003ccode\u003elength\u003c/code\u003e指定了迭代次数，它正好按照\u003ccode\u003esize\u003c/code\u003e分块后的数组长度正好就是原数组长度除以\u003ccode\u003esize\u003c/code\u003e向上取整的值。向上取整就是为了满足不能完全整除的情况。比如5个元素按照2个进行分块，分了两块两个元素的，剩最后一个元素成了独立块，总共3个元素。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e(v, i)\u003c/code\u003e，由于迭代的时候数组在每一个位置上都是以\u003ccode\u003eundefined\u003c/code\u003e初始化的，所以\u003ccode\u003ev\u003c/code\u003e一直都是\u003ccode\u003eundefined\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003earr.slice(i * size, i * size + size)\u003c/code\u003e迭代过程中每次截取\u003ccode\u003esize\u003c/code\u003e个数的元素组成新数组。这里的\u003ccode\u003ei\u003c/code\u003e就是随着迭代变化，比如\u003ccode\u003elength\u003c/code\u003e是3，\u003ccode\u003ei\u003c/code\u003e就是0，1，2。\u003c/p\u003e\n\u003cp\u003e这里的迭代类似\u003ccode\u003epython\u003c/code\u003e里的\u003ccode\u003erange\u003c/code\u003e。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs python\" lang=\"python\"\u003e➜  code python\nPython \u003cspan class=\"hljs-number\"\u003e3.6\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e.4\u003c/span\u003e (default, Dec \u003cspan class=\"hljs-number\"\u003e23\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e37\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e40\u003c/span\u003e)\n[GCC \u003cspan class=\"hljs-number\"\u003e4.2\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e.1\u003c/span\u003e Compatible Apple LLVM \u003cspan class=\"hljs-number\"\u003e9.0\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e.0\u003c/span\u003e (clang\u003cspan class=\"hljs-number\"\u003e-900.0\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e.39\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e.2\u003c/span\u003e)] on darwin\nType \u003cspan class=\"hljs-string\"\u003e\"help\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"copyright\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"credits\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"license\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e more information.\n\u003cspan class=\"hljs-meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e math\n\u003cspan class=\"hljs-meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003earr = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e]\n\u003cspan class=\"hljs-meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003esize = \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e\n\u003cspan class=\"hljs-meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e range(math.ceil(len(arr) / size)):\n\u003cspan class=\"hljs-meta\"\u003e... \u003c/span\u003e    print(\u003cspan class=\"hljs-string\"\u003e'index: '\u003c/span\u003e, i)\n...\nindex:  \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e\nindex:  \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e\nindex:  \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003ecompact\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eRemoves falsey values from an array.\u003c/p\u003e\n\u003cp\u003eUse \u003ccode\u003eArray.filter()\u003c/code\u003e to filter out falsey values (\u003ccode\u003efalse\u003c/code\u003e, \u003ccode\u003enull\u003c/code\u003e, \u003ccode\u003e0\u003c/code\u003e, \u003ccode\u003e\"\"\u003c/code\u003e, \u003ccode\u003eundefined\u003c/code\u003e, and \u003ccode\u003eNaN\u003c/code\u003e).\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003econst compact = arr =\u0026gt; arr.filter(Boolean);\n// compact([0, 1, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e, 2, \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e, 3, \u003cspan class=\"hljs-string\"\u003e'a'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'e'\u003c/span\u003e*23, NaN, \u003cspan class=\"hljs-string\"\u003e's'\u003c/span\u003e, 34]) -\u0026gt; [ 1, 2, 3, \u003cspan class=\"hljs-string\"\u003e'a'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e's'\u003c/span\u003e, 34 ]\n\u003c/code\u003e\u003c/pre\u003e\u003c/blockquote\u003e\n\u003cp\u003e移除掉数组里\u003ccode\u003efalsey\u003c/code\u003e的元素。（这个\u003ccode\u003efalsey\u003c/code\u003e不太好翻译，我记得好像不是错误的，应该是该值布尔运算值为\u003ccode\u003efalse\u003c/code\u003e的，我个人常用\u003ccode\u003e!!\u003c/code\u003e进行运算）。\u003c/p\u003e\n\u003cp\u003e使用\u003ccode\u003eArray.filter()\u003c/code\u003e把\u003ccode\u003efalse\u003c/code\u003e、\u003ccode\u003enull\u003c/code\u003e、\u003ccode\u003e0\u003c/code\u003e、\u003ccode\u003e\"\"\u003c/code\u003e、\u003ccode\u003eundefined\u003c/code\u003e和\u003ccode\u003eNaN\u003c/code\u003e这些\u003ccode\u003efalsey\u003c/code\u003e过滤掉。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e➜  code cat compact.js\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e compact = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003earr\u003c/span\u003e =\u0026gt;\u003c/span\u003e arr.filter(\u003cspan class=\"hljs-built_in\"\u003eBoolean\u003c/span\u003e);\n\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(compact([\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"a\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"e\"\u003c/span\u003e * \u003cspan class=\"hljs-number\"\u003e23\u003c/span\u003e, \u003cspan class=\"hljs-literal\"\u003eNaN\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"s\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e34\u003c/span\u003e]));\n➜  code node compact.js\n[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'a'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e's'\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e34\u003c/span\u003e ]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ca target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\"\u003e\u003ccode\u003eArray.prototype.filter()\u003c/code\u003e\u003c/a\u003e干的，没啥好说。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003ecountOccurrences\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eCounts the occurrences of a value in an array.\u003c/p\u003e\n\u003cp\u003eUse \u003ccode\u003eArray.reduce()\u003c/code\u003e to increment a counter each time you encounter the specific value inside the array.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003econst countOccurrences = (arr, value) =\u0026gt; arr.reduce((a, v) =\u0026gt; v === value ? a + 1 : a + 0, 0);\n// countOccurrences([1,1,2,1,2,3], 1) -\u0026gt; 3\n\u003c/code\u003e\u003c/pre\u003e\u003c/blockquote\u003e\n\u003cp\u003e统计一个元素在一个数组中出现的次数。\u003c/p\u003e\n\u003cp\u003e使用\u003ccode\u003eArray.reduce()\u003c/code\u003e在遍历过程中如果指定元素在数组中出现，则增加它的次数值，默认次数为0。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e➜  code cat countOccurrences.js\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e countOccurrences = \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003earr, value\u003c/span\u003e) =\u0026gt;\u003c/span\u003e\n  arr.reduce(\u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003ea, v\u003c/span\u003e) =\u0026gt;\u003c/span\u003e (v === value ? a + \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e : a + \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e), \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\n\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(countOccurrences([\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e));\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(countOccurrences([\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e));\n➜  code node countOccurrences.js\n\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e\n\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e三元运算符\u003ccode\u003e(v === value ? a + 1 : a + 0)\u003c/code\u003e遍历过程中判断遍历数组值\u003ccode\u003ev\u003c/code\u003e是否严格等于指定值\u003ccode\u003evalue\u003c/code\u003e，是，次数\u003ccode\u003ea+1\u003c/code\u003e；否，\u003ccode\u003ea+0\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e最后的一个逗号后面的0，是这个初始值，即\u003ccode\u003ea=0\u003c/code\u003e，这个懂\u003ccode\u003ereduce\u003c/code\u003e方法都知道，特别指出是，因为这个函数一定会有返回值，如果指定元素没有在数组中出现一次，返回值是\u003ccode\u003e0\u003c/code\u003e，所以必须得初始化为\u003ccode\u003e0\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003edeepFlatten\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDeep flattens an array.\u003c/p\u003e\n\u003cp\u003eUse recursion. Use \u003ccode\u003eArray.concat()\u003c/code\u003e with an empty array (\u003ccode\u003e[]\u003c/code\u003e) and the spread operator (\u003ccode\u003e...\u003c/code\u003e) to flatten an array. Recursively flatten each element that is an array.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003econst deepFlatten = arr =\u0026gt; [].concat(...arr.map(v =\u0026gt; Array.isArray(v) ? deepFlatten(v) : v));\n// deepFlatten([1,[2],[[3],4],5]) -\u0026gt; [1,2,3,4,5]\n\u003c/code\u003e\u003c/pre\u003e\u003c/blockquote\u003e\n\u003cp\u003e深度摊平一个数组。\u003c/p\u003e\n\u003cp\u003e使用递归方法。结合\u003ccode\u003eArray.concat()\u003c/code\u003e、空数组\u003ccode\u003e[]\u003c/code\u003e和\u003ccode\u003eES6\u003c/code\u003e的扩展运算符\u003ccode\u003e…\u003c/code\u003e来摊平一个数组，如果摊平的元素还是一个数组，就再递归运用该方法。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e➜  code cat deepFlatten.js\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e deepFlatten = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003earr\u003c/span\u003e =\u0026gt;\u003c/span\u003e\n  [].concat(...arr.map(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003ev\u003c/span\u003e =\u0026gt;\u003c/span\u003e (\u003cspan class=\"hljs-built_in\"\u003eArray\u003c/span\u003e.isArray(v) ? deepFlatten(v) : v)));\n\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(deepFlatten([\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, [\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e], [[\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e]));\n➜  code node deepFlatten.js\n[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e ]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e三元运算符\u003ccode\u003e(Array.isArray(v) ? deepFlatten(v) : v)\u003c/code\u003e判断\u003ccode\u003ev\u003c/code\u003e是否是一个数组，是，返回递归运用\u003ccode\u003edeepFlatten(v)\u003c/code\u003e后的值；否，直接返回\u003ccode\u003ev\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e[].concat(...arr.map(fn))\u003c/code\u003e用空数组把\u003ccode\u003emap\u003c/code\u003e运算产生的数组进行\u003ccode\u003e…\u003c/code\u003e扩展运算值拼接成结果数组返回。\u003c/p\u003e\n\u003cp\u003e该方法是深度摊平方法，在很多时候还有特定的摊平一层的需求，\u003ccode\u003eunderscore\u003c/code\u003e就有。实现的方法就是再加一个标志参数进行处理即可。具体不讲了。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e应该会写一个系列，今天先写到这，明天继续。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e个人翻译水平有限，欢迎大家在issues上批评指正。\u003ca target=\"_blank\" href=\"https://github.com/hongmaoxiao/myblog/issues/5\"\u003eJavaScript30秒， 从入门到放弃\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\n","buildTime":"1514373432.5408","__v":0}
{"_id":{"$oid":"5a43938e51fb4902b0661524"},"id":"5a3cb0846fb9a044fb07f36c","author":{"$oid":"5a43938e51fb4902b0661513"},"title":"使用 Javascript 原生的 Proxy 优化应用","meta":{"likeCount":0},"tag":["JavaScript","CSS","Promise","前端"],"comment":[],"content":"\u003cp\u003e看到 \u003ca target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\"\u003eProxy\u003c/a\u003e就应该想到\u003ca target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Proxy_pattern\"\u003e代理模式(Proxy Pattern)\u003c/a\u003e，\u003ccode\u003eProxy\u003c/code\u003e 是 Javascript ES2015 标准的一部分，我们应该学会使用它，代理模式是一种设计模式，使用 \u003ccode\u003eProxy\u003c/code\u003e 对象可以轻而易举的在 Javascript 中创建代理模式。然而，使用设计模式并不是目的，目的在于解决实际问题。本文首先会简单介绍 \u003ccode\u003eProxy\u003c/code\u003e 的基本用法，接着将会叙述如何使用 \u003ccode\u003eProxy\u003c/code\u003e 创建代理模式并且对我们的应用进行优化。\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 class=\"heading\"\u003eProxy 的基本使用\u003c/h2\u003e\n\u003cp\u003e开始学习 \u003ccode\u003eProxy\u003c/code\u003e 的使用之前，建议首先对 \u003ca target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect\"\u003eReflect\u003c/a\u003e 有一定的了解，如果很陌生的话，建议先花 1 分钟浏览相关知识。\u003c/p\u003e\n\u003cp\u003e好了，现在假设已经具备了一定的 \u003ccode\u003eReflect\u003c/code\u003e 知识，就开始掌握 \u003ccode\u003eProxy\u003c/code\u003e 吧。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e基本语法\u003c/h3\u003e\n\u003cp\u003e和 \u003ccode\u003eProxy\u003c/code\u003e 相关的方法一共就两个：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e构造方法 本文着重讨论\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eProxy.revocable()\u003c/code\u003e 创建一个可撤销的 \u003ccode\u003eProxy\u003c/code\u003e 对象，其余与构造函数类似，理解了 \u003ccode\u003eProxy\u003c/code\u003e 的构造方法后，该方法与构造方法使用非常类似，本文不再涉及\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e接下来本文将围绕 \u003ccode\u003eProxy\u003c/code\u003e 的构造方法进行讲解。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e p = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eProxy\u003c/span\u003e(target, handler);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cem\u003e参数\u003c/em\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003etarget\n任何类型的对象，包括原生数组，函数，甚至另一个 \u003ccode\u003eProxy\u003c/code\u003e 对象\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ehandler\n一个对象，其属性是当执行一个操作时定义代理的行为的函数， 允许的属性一共 13 种，与 \u003ccode\u003eReflect\u003c/code\u003e 的方法名一致\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cem\u003e返回\u003c/em\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ep\n\u003ccode\u003eProxy\u003c/code\u003e 对象\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e注意： \u003ccode\u003enew Proxy\u003c/code\u003e 是稳定操作，不会对 \u003ccode\u003etarget\u003c/code\u003e 有任何影响。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e下面来看几个代表性的例子，便于加深理解。\u003c/p\u003e\n\u003cp\u003e代理一个对象字面量：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e target = {};\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e handler = {\n  \u003cspan class=\"hljs-attr\"\u003eset\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003eobj, prop, value\u003c/span\u003e) =\u0026gt;\u003c/span\u003e {\n    obj[prop] = \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e * value;\n  },\n  \u003cspan class=\"hljs-attr\"\u003eget\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003eobj, prop\u003c/span\u003e) =\u0026gt;\u003c/span\u003e {\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e obj[prop] * \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e;\n  }\n};\n\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e p = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eProxy\u003c/span\u003e(target, handler);\n\np.x = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;          \u003cspan class=\"hljs-comment\"\u003e// 使用了 set 方法\u003c/span\u003e\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(p.x); \u003cspan class=\"hljs-comment\"\u003e// 4, 使用了 get 方法\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e代理一个数组：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e p = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eProxy\u003c/span\u003e(\n  [\u003cspan class=\"hljs-string\"\u003e'Adela'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Melyna'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Lesley'\u003c/span\u003e],\n  {\n    \u003cspan class=\"hljs-attr\"\u003eget\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003eobj, prop\u003c/span\u003e) =\u0026gt;\u003c/span\u003e {\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (prop === \u003cspan class=\"hljs-string\"\u003e'length'\u003c/span\u003e) \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e`Length is \u003cspan class=\"hljs-subst\"\u003e${obj[prop]}\u003c/span\u003e.`\u003c/span\u003e;\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e`Hello, \u003cspan class=\"hljs-subst\"\u003e${obj[prop]}\u003c/span\u003e!`\u003c/span\u003e;\n    }\n  }\n);\n\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(p.length) \u003cspan class=\"hljs-comment\"\u003e// Length is 3.\u003c/span\u003e\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(p[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e]); \u003cspan class=\"hljs-comment\"\u003e// Hello, Adela\u003c/span\u003e\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(p[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e]); \u003cspan class=\"hljs-comment\"\u003e// Hello, Melyna\u003c/span\u003e\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(p[\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e]); \u003cspan class=\"hljs-comment\"\u003e// Hello, Lesley\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e代理一个普通函数：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e foo = \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003ea, b, c\u003c/span\u003e) =\u0026gt;\u003c/span\u003e {\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e a + b + c;\n}\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e pFoo = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eProxy\u003c/span\u003e(foo, {\n  \u003cspan class=\"hljs-attr\"\u003eapply\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003etarget, that, args\u003c/span\u003e) =\u0026gt;\u003c/span\u003e {\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e grow = args.map(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003ex\u003c/span\u003e =\u0026gt;\u003c/span\u003e x * \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e inter = \u003cspan class=\"hljs-built_in\"\u003eReflect\u003c/span\u003e.apply(target, that, grow);\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e inter * \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e;\n  }\n});\n\npFoo(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e);   \u003cspan class=\"hljs-comment\"\u003e// 36, (1 * 2  + 2 * 2 + 3 * 2) * 3  \u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e代理构造函数\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eBar\u003c/span\u003e \u003c/span\u003e{\n  \u003cspan class=\"hljs-keyword\"\u003econstructor\u003c/span\u003e(x) {\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.x = x;\n  }\n  say() {\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e`Hello, x = \u003cspan class=\"hljs-subst\"\u003e${\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.x}\u003c/span\u003e`\u003c/span\u003e);\n  }\n}\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e PBar = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eProxy\u003c/span\u003e(Bar, {\n  \u003cspan class=\"hljs-attr\"\u003econstruct\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003etarget, args\u003c/span\u003e) =\u0026gt;\u003c/span\u003e {\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e obj = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Bar(args[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e] * \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e obj;\n  }\n});\n\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e p = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e PBar(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e);\np.say(); \u003cspan class=\"hljs-comment\"\u003e// Hello, x = 2\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003eProxy\u003c/code\u003e 的基本用法无出其上，可 \u003ccode\u003eProxy\u003c/code\u003e 的真正用途还没有显现出来，接下来结合设计模式中的一种模式 —— 代理模式 —— 进一步讨论。\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 class=\"heading\"\u003e使用 Proxy 创建代理模式\u003c/h2\u003e\n\u003cp\u003e从上面的例子并不能看出 \u003ccode\u003eProxy\u003c/code\u003e 给我们带来了什么便利，需要实现的功能完全可以在原函数内部进行实现。既然如此，使用代理模式的意义是什么呢？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e遵循“单一职责原则”，面向对象设计中鼓励将不同的职责分布到细粒度的对象中，\u003ccode\u003eProxy\u003c/code\u003e 在原对象的基础上进行了功能的衍生而又不影响原对象，符合松耦合高内聚的设计理念\u003c/li\u003e\n\u003cli\u003e遵循“开放-封闭原则”，代理可以随时从程序中去掉，而不用对其他部分的代码进行修改，在实际场景中，随着版本的迭代可能会有多种原因不再需要代理，那么就可以容易的将代理对象换成原对象的调用\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e达到上述两个原则有一个前提就是代理必须符合“代理和本体接口一致性”原则：代理和原对象的输入和输出必须是一致的。这样对于用户来说，代理就是透明的，代理和原对象在不改动其他代码的条件下是可以被相互替换的。\u003c/p\u003e\n\u003cp\u003e代理模式的用途很广泛，这里我们看一个缓存代理的例子。\u003c/p\u003e\n\u003cp\u003e首先创建一个 \u003ccode\u003eProxy\u003c/code\u003e 的包装函数，该函数接受需要创建代理的目标函数为第一个参数，以缓存的初值为第二个参数：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e createCacheProxy = \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003efn, cache = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eMap\u003c/span\u003e(\u003c/span\u003e)) =\u0026gt;\u003c/span\u003e {\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eProxy\u003c/span\u003e(fn, {\n    apply(target, context, args) {\n      \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e argsProp = args.join(\u003cspan class=\"hljs-string\"\u003e' '\u003c/span\u003e);\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (cache.has(argsProp)) {\n        \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e'Using old data...'\u003c/span\u003e);\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e cache.get(argsProp);\n      }\n      \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e result = fn(...args);\n      cache.set(argsProp, result);\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e result;\n    }\n  });\n};\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e然后我们使用乘法函数 \u003ccode\u003emult\u003c/code\u003e 去创建代理并调用：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e mult = \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003e...args\u003c/span\u003e) =\u0026gt;\u003c/span\u003e args.reduce(\u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003ea, b\u003c/span\u003e) =\u0026gt;\u003c/span\u003e a * b);\n\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e multProxy = createCacheProxy(mult);\n\nmultProxy(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e);  \u003cspan class=\"hljs-comment\"\u003e// 24\u003c/span\u003e\nmultProxy(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e);  \u003cspan class=\"hljs-comment\"\u003e// 24, 输出 Using old data\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e也可以使用其他的函数：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e squareAddtion = \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003e...args\u003c/span\u003e) =\u0026gt;\u003c/span\u003e args.reduce(\u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003ea, b\u003c/span\u003e) =\u0026gt;\u003c/span\u003e a + b ** \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\n\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e squareAddtionProxy = createCacheProxy(squareAddtion);\n\nsquareAddtionProxy(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e);  \u003cspan class=\"hljs-comment\"\u003e// 29\u003c/span\u003e\nsquareAddtionProxy(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e);  \u003cspan class=\"hljs-comment\"\u003e// 29, 输出 Using old data\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e对于上面这个例子，有三点需要注意：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e对于检测是否存在旧值的过程较为粗暴，实际应用中应考虑是否应该使用更为复杂精确的判断方法，需要结合实际进行权衡；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecreateCacheProxy\u003c/code\u003e 中的 \u003ccode\u003econsole.log\u003c/code\u003e 违背了前文所说的“代理和本体接口一致性”原则，只是为了开发环境更加方便性的调试，生产环境中必须去掉；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emultProxy\u003c/code\u003e 与 \u003ccode\u003esquareAdditionProxy\u003c/code\u003e 是为了演示使用方法而在这里使用了相对简单的算法和小数据量，但在实际应用中数据量越大、 \u003ccode\u003efn\u003c/code\u003e 的计算过程越复杂，优化效果越好，否则，优化效果不仅有可能不明显反而会造成性能下降\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 class=\"heading\"\u003e代理模式的实际应用\u003c/h2\u003e\n\u003cp\u003e这一节结合几个具体的例子来加深对代理模式的理解。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e函数节流\u003c/h3\u003e\n\u003cp\u003e如果想要控制函数调用的频率，可以使用代理进行控制：\u003c/p\u003e\n\u003cp\u003e需要实现的基本功能：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e handler = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e =\u0026gt;\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e'Do something...'\u003c/span\u003e);\n\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.addEventListener(\u003cspan class=\"hljs-string\"\u003e'click'\u003c/span\u003e, handler);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e接下来使用 \u003ccode\u003eProxy\u003c/code\u003e 进行节流。\u003c/p\u003e\n\u003cp\u003e首先使用构造创建代理函数：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e createThrottleProxy = \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003efn, rate\u003c/span\u003e) =\u0026gt;\u003c/span\u003e {\n  \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e lastClick = \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e.now() - rate;\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eProxy\u003c/span\u003e(fn, {\n    apply(target, context, args) {\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e.now() - lastClick \u0026gt;= rate) {\n        fn(args);\n        lastClick = \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e.now();\n      }\n    }\n  });\n};\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e然后只需要将原有的事件处理函数进行一曾包装即可：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e handler = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e =\u0026gt;\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e'Do something...'\u003c/span\u003e);\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e handlerProxy = createThrottleProxy(handler, \u003cspan class=\"hljs-number\"\u003e1000\u003c/span\u003e);\n\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.addEventListener(\u003cspan class=\"hljs-string\"\u003e'click'\u003c/span\u003e, handlerProxy);\n\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\n\u003cp\u003e在生产环境中已有多种工具库实现该功能，不需要我们自己编写\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 class=\"heading\"\u003e图片懒加载\u003c/h3\u003e\n\u003cp\u003e某些时候需要延迟加载图片，尤其要考虑网络环境恶劣以及比较重视流量的情况。这个时候可以使用一个虚拟代理进行延迟加载。\u003c/p\u003e\n\u003cp\u003e首先是我们最原始的代码：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e img = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Image();\nimg.src = \u003cspan class=\"hljs-string\"\u003e'/some/big/size/image.jpg'\u003c/span\u003e;\n\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.body.appendChild(img);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e为了实现懒加载，创建虚拟图片节点 \u003ccode\u003evirtualImg\u003c/code\u003e 并构造创建代理函数：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e createImgProxy = \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003eimg, loadingImg, realImg\u003c/span\u003e) =\u0026gt;\u003c/span\u003e {\n  \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e hasLoaded = \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n  \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e virtualImg = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Image();\n  virtualImg.src = realImg;\n  virtualImg.onload = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e =\u0026gt;\u003c/span\u003e {\n    \u003cspan class=\"hljs-built_in\"\u003eReflect\u003c/span\u003e.set(img, \u003cspan class=\"hljs-string\"\u003e'src'\u003c/span\u003e, realImg);\n    hasLoaded = \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eProxy\u003c/span\u003e(img, {\n    get(obj, prop) {\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (prop === \u003cspan class=\"hljs-string\"\u003e'src'\u003c/span\u003e \u0026amp;\u0026amp; !hasLoaded) {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e loadingImg;\n      }\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e obj[prop];\n    }\n  });\n};\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e最后是将原始的图片节点替换为代理图片进行调用：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e img = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Image();\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e imgProxy = createImgProxy(img, \u003cspan class=\"hljs-string\"\u003e'/loading.gif'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'/some/big/size/img.jpg'\u003c/span\u003e);\n\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.body.appendChild(imgProxy);\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e异步队列\u003c/h3\u003e\n\u003cp\u003e这个需求是很常见的：前一个异步操作结束后再进行下一个异步操作。这部分我使用 \u003ccode\u003ePromise\u003c/code\u003e 进行实现。\u003c/p\u003e\n\u003cp\u003e首先构造一个最为简单的异步操作 \u003ccode\u003easyncFunc\u003c/code\u003e ：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e callback = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e =\u0026gt;\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e'Do something...'\u003c/span\u003e);\n\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e asyncFunc = \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003ecb\u003c/span\u003e) =\u0026gt;\u003c/span\u003e setTimeout(cb, \u003cspan class=\"hljs-number\"\u003e1000\u003c/span\u003e);\n\nasyncFunc(callback);\nasyncFunc(callback);\nasyncFunc(callback);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e可以看到控制台的输出是 1s 之后，几乎是同时输出三个结果：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// .. 1s later ..\nDo something...\nDo something...\nDo something...\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e接下来我们使用 \u003ccode\u003ePromise\u003c/code\u003e 实现异步队列：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e createAsyncQueueProxy = \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003easyncFunc\u003c/span\u003e) =\u0026gt;\u003c/span\u003e {\n  \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e promise = \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e;\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eProxy\u003c/span\u003e(asyncFunc, {\n    apply(target, context, [cb, ...args]) {\n      \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e result = \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e;\n      promise = \u003cspan class=\"hljs-built_in\"\u003ePromise\u003c/span\u003e\n        .resolve(promise)\n        .then(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e =\u0026gt;\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003ePromise\u003c/span\u003e(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003eresolve\u003c/span\u003e =\u0026gt;\u003c/span\u003e {\n          result = \u003cspan class=\"hljs-built_in\"\u003eReflect\u003c/span\u003e.apply(asyncFunc, \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, [\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e =\u0026gt;\u003c/span\u003e {\n            cb();\n            resolve();\n          }, ...args]);\n        }));\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e result;\n    }\n  });\n};\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e上面这段代码通过 \u003ccode\u003ePromise\u003c/code\u003e 实现了异步函数队列，建议在理解了 \u003ccode\u003ePromise\u003c/code\u003e 之后再理解阅读上面这段代码。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e上面这段代码测试通过，有两点需要注意：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003epromise\u003c/code\u003e 的值并不能确定是否为 \u003ccode\u003ePromise\u003c/code\u003e ，需要使用 \u003ccode\u003ePromise.resolve\u003c/code\u003e 方法之后才能使用 \u003ccode\u003ethen\u003c/code\u003e 方法\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eReflect.apply\u003c/code\u003e 方法中的第三个参数是数组，形同与 \u003ccode\u003eFunction.prototype.apply\u003c/code\u003e 的第二个参数\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e然后使用代理进行替换并调用：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e timeoutProxy = createAsyncQueueProxy(asynFunc);\n\ntimeoutProxy(callback);\ntimeoutProxy(callback);\ntimeoutProxy(callback);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e可以看到控制台的输出已经像我们期望的那样： 前一个异步操作执行完毕之后才会进行下一个异步操作。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// .. 1s later ..\nDo something...\n// .. 1s later ..\nDo something...\n// .. 1s later ..\nDo something...\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e除了上面这种使用代理的方式实现异步队列外，在我的另一篇博客\u003ca target=\"_blank\" href=\"https://juejin.im/post/5a31d4b66fb9a045211eb727\"\u003e进阶 Javascript 生成器\u003c/a\u003e中，还使用了另外一种方式。\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 class=\"heading\"\u003e结语\u003c/h2\u003e\n\u003cp\u003e本文首先介绍了 ES2015 中关于 \u003ccode\u003eProxy\u003c/code\u003e 的基本用法，接着讨论了代理模式的使用特点，然后结合实际列举了几种常见的使用场景。最后列举一些比较有价值的参考资料供感兴趣的开发者继续阅读。\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 class=\"heading\"\u003e参考资料\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"http://www.dofactory.com/javascript/proxy-design-pattern\"\u003eJavascript Proxy Design Pattern\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://book.douban.com/subject/26382780/\"\u003eJavaScript设计模式与开发实践 - 曾探\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://www.joezimjs.com/javascript/javascript-design-patterns-proxy/\"\u003eJavaScript Design Patterns: Proxy\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","buildTime":"1514376913.1454","__v":0}
{"_id":{"$oid":"5a43938e51fb4902b0661525"},"id":"5a41c21df265da43333ea724","author":{"$oid":"5a43938e51fb4902b0661510"},"title":"JavaScript设计模式之结构型设计模式","meta":{"likeCount":0},"tag":["设计模式","JavaScript","API","前端"],"comment":[],"content":"\u003cblockquote\u003e\n\u003cp\u003egithub 全文地址 ： \u003ca target=\"_blank\" href=\"https://github.com/Nealyang/YOU-SHOULD-KNOW-JS\"\u003eYOU-SHOULD-KNOW-JS\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 class=\"heading\"\u003eJavaScript设计模式之外观模式\u003c/h2\u003e\n\u003ch3 class=\"heading\"\u003e概念\u003c/h3\u003e\n\u003cp\u003e外观模式：为一组复杂子系统接口提供一个更高级的统一接口，通过这个接口使得对子系统访问更加的容易。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e代码演示\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// 使用外观模式注册事件监听\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e addEvent(dom,\u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e,fn) {\n  \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(dom.addEventListener){\n      dom.addEventListener(\u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e,fn,\u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n  }\u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(dom.attachEvent){\n      dom.attachEvent(\u003cspan class=\"hljs-string\"\u003e'on'\u003c/span\u003e+\u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e,fn);\n  }\u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e{\n      dom[\u003cspan class=\"hljs-string\"\u003e'on'\u003c/span\u003e+\u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e] = fn;\n  }\n}\n// 使用外观模式获取事件对象\n\nvar getEvent = \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(event) {\n  \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e event || window.event;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e通过对接口的二次封装，使其简单易用，隐藏起内部的复杂度，外观模式就是对接口的外层包装，以供上层代码调用。因此外观模式封装的接口方法不需要接口的具体实现，只需要按照接口的使用规则使用即可\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003eJavaScript设计模式之适配器模式\u003c/h2\u003e\n\u003ch3 class=\"heading\"\u003e概念\u003c/h3\u003e\n\u003cp\u003e适配器模式：将一个类的接口转换为另外一个类的接口以满足用户的需求，使类之间的接口不兼容问题通过适配器得以解决。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e代码演示\u003c/h3\u003e\n\u003cp\u003e书中这里说的比价没意思，这里我拿汤姆大叔的例子来说下\u003c/p\u003e\n\u003cp\u003e我们来举一个例子，鸭子（Dock）有飞（fly）和嘎嘎叫（quack）的行为，而火鸡虽然也有飞（fly）的行为，但是其叫声是咯咯的（gobble）。如果你非要火鸡也要实现嘎嘎叫（quack）这个动作，那我们可以复用鸭子的quack方法，但是具体的叫还应该是咯咯的，此时，我们就可以创建一个火鸡的适配器，以便让火鸡也支持quack方法，其内部还是要调用gobble。\u003c/p\u003e\n\u003cp\u003e首先要先定义鸭子和火鸡的抽象行为，也就是各自的方法函数：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e//鸭子\nvar Duck = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e(){\n\n};\nDuck.prototype.fly = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e(){\nthrow new Error(\u003cspan class=\"hljs-string\"\u003e\"该方法必须被重写!\"\u003c/span\u003e);\n};\nDuck.prototype.quack = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e(){\nthrow new Error(\u003cspan class=\"hljs-string\"\u003e\"该方法必须被重写!\"\u003c/span\u003e);\n}\n\n//火鸡\nvar Turkey = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e(){\n\n};\nTurkey.prototype.fly = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e(){\n    throw new Error(\u003cspan class=\"hljs-string\"\u003e\" 该方法必须被重写 !\"\u003c/span\u003e);\n};\nTurkey.prototype.gobble = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e(){\n    throw new Error(\u003cspan class=\"hljs-string\"\u003e\" 该方法必须被重写 !\"\u003c/span\u003e);\n};\n\n\n//鸭子\nvar MallardDuck = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e () {\n    Duck.apply(this);\n};\nMallardDuck.prototype = new Duck(); //原型是Duck\nMallardDuck.prototype.fly = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e () {\n    console.log(\u003cspan class=\"hljs-string\"\u003e\"可以飞翔很长的距离!\"\u003c/span\u003e);\n};\nMallardDuck.prototype.quack = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e () {\n    console.log(\u003cspan class=\"hljs-string\"\u003e\"嘎嘎！嘎嘎！\"\u003c/span\u003e);\n};\n\n//火鸡\nvar WildTurkey = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e () {\n    Turkey.apply(this);\n};\nWildTurkey.prototype = new Turkey(); //原型是Turkey\nWildTurkey.prototype.fly = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e () {\n    console.log(\u003cspan class=\"hljs-string\"\u003e\"飞翔的距离貌似有点短!\"\u003c/span\u003e);\n};\nWildTurkey.prototype.gobble = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e () {\n    console.log(\u003cspan class=\"hljs-string\"\u003e\"咯咯！咯咯！\"\u003c/span\u003e);\n};\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e为了让火鸡也支持quack方法，我们创建了一个新的火鸡适配器TurkeyAdapter：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003evar TurkeyAdapter = \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(oTurkey){\n    Duck.apply(this);\n    this.oTurkey = oTurkey;\n};\nTurkeyAdapter.prototype = new Duck();\nTurkeyAdapter.prototype.quack = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e(){\n    this.oTurkey.gobble();\n};\nTurkeyAdapter.prototype.fly = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e(){\n    var nFly = 0;\n    var nLenFly = 5;\n    \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(; nFly \u0026lt; nLenFly;){\n        this.oTurkey.fly();\n        nFly = nFly + 1;\n    }\n};\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e该构造函数接受一个火鸡的实例对象，然后使用Duck进行apply，其适配器原型是Duck，然后要重新修改其原型的quack方法，以便内部调用oTurkey.gobble()方法。其fly方法也做了一些改变，让火鸡连续飞5次（内部也是调用自身的oTurkey.fly()方法）。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e    var oMallardDuck = new MallardDuck();\n    var oWildTurkey = new WildTurkey();\n    var oTurkeyAdapter = new TurkeyAdapter(oWildTurkey);\n    \n    //原有的鸭子行为\n    oMallardDuck.fly();\n    oMallardDuck.quack();\n    \n    //原有的火鸡行为\n    oWildTurkey.fly();\n    oWildTurkey.gobble();\n    \n    //适配器火鸡的行为（火鸡调用鸭子的方法名称）\n    oTurkeyAdapter.fly();\n    oTurkeyAdapter.quack();\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003eJavaScript设计模式之代理模式\u003c/h2\u003e\n\u003ch3 class=\"heading\"\u003e概念\u003c/h3\u003e\n\u003cp\u003e代理模式：由于一个对象不能直接引用另一个对象，所以需要代理对象在这两个对象之间起到中介的作用\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e代码演示\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// 先声明美女对象\nvar girl = \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (name) {\n    this.name = name;\n};\n\n// 这是dudu\nvar dudu = \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (girl) {\n    this.girl = girl;\n    this.sendGift = \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (gift) {\n        alert(\u003cspan class=\"hljs-string\"\u003e\"Hi \"\u003c/span\u003e + girl.name + \u003cspan class=\"hljs-string\"\u003e\", dudu送你一个礼物：\"\u003c/span\u003e + gift);\n    }\n};\n\n// 大叔是代理\nvar proxyTom = \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (girl) {\n    this.girl = girl;\n    this.sendGift = \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (gift) {\n        (new dudu(girl)).sendGift(gift); // 替dudu送花咯\n    }\n};\n\nvar proxy = new proxyTom(new girl(\u003cspan class=\"hljs-string\"\u003e\"酸奶小妹\"\u003c/span\u003e));\nproxy.sendGift(\u003cspan class=\"hljs-string\"\u003e\"999朵玫瑰\"\u003c/span\u003e);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e假如dudu要送酸奶小妹玫瑰花，却不知道她的联系方式或者不好意思，想委托大叔去送这些玫瑰，那大叔就是个代理\u003c/p\u003e\n\u003cp\u003e其实在日常开发中，我们遇到很多这种情况，比如跨域，之前总结过跨域的所有东西，其中的jsonp，window.name还是location.hash都是通过代理模式来实现的。\u003c/p\u003e\n\u003cp\u003e代理模式具体的从我的另一篇文章，JavaScript中的跨域总结去体会哈\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003eJavaScript设计模式之装饰着模式\u003c/h2\u003e\n\u003ch3 class=\"heading\"\u003e概念\u003c/h3\u003e\n\u003cp\u003e装饰着模式，在不改变源对象的基础上，通过对其进行包装拓展使原有对象可以满足用户的更复杂需求\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e代码演示\u003c/h3\u003e\n\u003cp\u003e这里我拿给输入框添加事件举例\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003evar decorator = \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(input ,fn) {\n  //获取时间源\n  var input = document.getElementById(input);\n  \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(typeof input.onclick === \u003cspan class=\"hljs-string\"\u003e'function'\u003c/span\u003e){\n      //缓存事件源原有的回调函数\n      var oldClickFn = input.onclick;\n      input.onclick = \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (ev) { \n          oldClickFn();\n          fn();\n       }\n  }\u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e{\n      input.onclick = fn;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e装饰着模式很简单，就是对原有对象的属性和方法的添加。相比于之前说的适配器模式是对原有对象的适配，添加的方法和原有的方法功能上大致相似。但是装饰着提供的方法和原有方法功能项则有一定的区别，且不需要去了解原有对象的功能。只要原封不动的去使用就行。不需要知道具体的实现细节。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003eJavaScript设计模式之桥接模式\u003c/h2\u003e\n\u003ch3 class=\"heading\"\u003e概念\u003c/h3\u003e\n\u003cp\u003e桥接模式：在系统沿着多个维度变化的时候，不增加起复杂度已达到解耦的目的\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e应用场景\u003c/h3\u003e\n\u003cp\u003e在我们日常开发中，需要对相同的逻辑做抽象的处理。桥接模式就是为了解决这类的需求。\u003c/p\u003e\n\u003cp\u003e桥接模式最主要的特点就是将实现层和抽象层解耦分离，是两部分可以独立变化\u003c/p\u003e\n\u003cp\u003e比如我们写一个跑步游戏，对于游戏中的人和精灵都是动作单元。而他们的动作也是非常的统一。比如人和精灵和球运动都是x，y坐标的改变，球的颜色和精灵的颜色绘制方式也非常的类似。\n我们就可以将这些方法给抽象出来。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e代码演示\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e//运动单元\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e Speed(x,y) {\n  this.x = x;\n  this.y = y;\n}\nSpeed.prototype.run = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n  console.log(\u003cspan class=\"hljs-string\"\u003e'动起来'\u003c/span\u003e);\n}\n// 着色单元\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e Color(cl) {\n  this.color = cl;\n}\nColor.prototype.draw = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n  console.log(\u003cspan class=\"hljs-string\"\u003e'绘制色彩'\u003c/span\u003e)\n}\n\n// 变形单元\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e Shape(ap) {\n  this.shape = ap;\n}\nShape.prototype.change = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n  console.log(\u003cspan class=\"hljs-string\"\u003e'改变形状'\u003c/span\u003e);\n}\n//说话单元\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e Speak(wd) {\n  this.word = wd;\n}\nSpeak.prototype.say = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n  console.log(\u003cspan class=\"hljs-string\"\u003e'请开始你的表演'\u003c/span\u003e)\n}\n\n\n//创建球类，并且它可以运动可以着色\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e Ball(x,y,c) {\n  this.speed = new Speed(x,y);\n  this.color = new Color(c);\n}\nBall.prototype.init = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n  //实现运动和着色\n  this.speed.run();\n  this.color.draw();\n}\n\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e People(x,y,f) {\n  this.speed = new Speed(x,y);\n  this.speak = new Speak(f);\n}\n\nPeople.prototype.init = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n  this.speed.run();\n  this.speak.say();\n}\n//...\n\n\n//当我们实例化一个人物对象的时候，他就可以有对应的方法实现了\n\nvar p =new People(10,12,\u003cspan class=\"hljs-string\"\u003e'我是一个人'\u003c/span\u003e);\np.init();\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003eJavaScript设计模式之组合模式\u003c/h2\u003e\n\u003ch3 class=\"heading\"\u003e概念\u003c/h3\u003e\n\u003cp\u003e组合模式：又称部分-整体模式，将对象组合成树形结构以表示成“部分整体”的层次结构。组合模式使得用户对单个对象以及组合对象的使用具有一致性\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e使用场景\u003c/h3\u003e\n\u003cp\u003e我们平时开发过程中，一定会遇到这种情况：同时处理简单对象和由简单对象组成的复杂对象，这些简单对象和复杂对象会组合成树形结构，在客户端对其处理的时候要保持一致性。比如电商网站中的产品订单，每一张产品订单可能有多个子订单组合，比如操作系统的文件夹，每个文件夹有多个子文件夹或文件，我们作为用户对其进行复制，删除等操作时，不管是文件夹还是文件，对我们操作者来说是一样的。在这种场景下，就非常适合使用组合模式来实现。\u003c/p\u003e\n\u003cp\u003e组合模式主要有三个角色：\u003c/p\u003e\n\u003cp\u003e（1）抽象组件（Component）：抽象类，主要定义了参与组合的对象的公共接口\u003c/p\u003e\n\u003cp\u003e（2）子对象（Leaf）：组成组合对象的最基本对象\u003c/p\u003e\n\u003cp\u003e（3）组合对象（Composite）：由子对象组合起来的复杂对象\u003c/p\u003e\n\u003cp\u003e理解组合模式的关键是要理解组合模式对单个对象和组合对象使用的一致性，我们接下来说说组合模式的实现加深理解。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e代码演示\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// 抽象一个虚拟父类\nvar News = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n  this.children = [];\n  this.element = null;\n}\n\nNews.prototype = {\n    init:\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n      throw new Error(\u003cspan class=\"hljs-string\"\u003e'请重写你的方法'\u003c/span\u003e);\n    },\n    add:\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n              throw new Error(\u003cspan class=\"hljs-string\"\u003e'请重写你的方法'\u003c/span\u003e);\n            },\n    getElement:\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n                    throw new Error(\u003cspan class=\"hljs-string\"\u003e'请重写你的方法'\u003c/span\u003e);\n                  },\n}\n\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e iniheritObject(o) {\n  \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003eF\u003c/span\u003e\u003c/span\u003e() {}\n  F.prototype = o;\n  \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e new F();\n}\n\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e inheritPrototype(subClass,superClass) {\n  var p = iniheritObject(superClass.prototype);\n  p.constructor = subClass;\n  subClass.prototype = p;\n}\n//容器类\nvar Container = \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(id,parent) {\n  News.call(this);\n  this.id = id;\n  this.parent = parent;\n  this.init();\n}\n\n//寄生式继承父类原型方法\ninheritPrototype(Container,News);\n\nContainer.prototype.init = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n  this.element = document.createElement(\u003cspan class=\"hljs-string\"\u003e'ul'\u003c/span\u003e);\n  this.element.id = this.id;\n  this.element.className = \u003cspan class=\"hljs-string\"\u003e'new-container'\u003c/span\u003e;\n}\n\nContainer.prototype.add = \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(child) {\n  this.children.push(child);\n  this.element.appendChild(child.getElement());\n  \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e this;\n}\n\nContainer.prototype.getElement = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n  \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e this.element;\n}\n\nContainer.prototype.show = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n  this.parent.appendChild(this.element)\n}\n//同样下一层极的行成员集合类以及后面新闻组合体类\nvar Item = \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(classname) {\n  News.call(this);\n  this.classname = classname;\n  this.init();\n}\ninheritPrototype(Item,News);\nItem.prototype.init = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n  this.element = document.createElement(\u003cspan class=\"hljs-string\"\u003e'li'\u003c/span\u003e);\n  this.element.className = this.classname;\n}\nItem.prototype.add = \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(child) {\n  this.children.push(child);\n  this.element.appendChild(child.getElement());\n  \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e this;\n}\nItem.prototype.getElement = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n  \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e this.element;\n}\n\nvar NewsGroup = \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(className) {\n  News.call(this);\n  this.classname = classname|| \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e;\n  this.init();\n}\ninheritPrototype(NewsGroup,News);\nNewsGroup.prototype.init = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n  this.element = document.createElement(\u003cspan class=\"hljs-string\"\u003e'div'\u003c/span\u003e);\n  this.element.className = this.classname;\n}\nNewsGroup.prototype.add = \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(child) {\n  this.children.push(child);\n  this.element.appendChild(child.getElement());\n  \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e this;\n}\nNewsGroup.prototype.getElement = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n  \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e this.element;\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e所以后面我们在使用的时候，创建新闻类，利用之前定义的组合元素去组合就可以了。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003eJavaScript设计模式之享元模式\u003c/h2\u003e\n\u003ch3 class=\"heading\"\u003e概念\u003c/h3\u003e\n\u003cp\u003e享元模式：运用共享技术有效的支持大量细粒度对象，避免对象之间拥有相同内容造成的不必要开销\u003c/p\u003e\n\u003cp\u003e主要用来优化程序的性能，适合解决大量类似的对象产生的性能问题。享元模式通过分析应用程序的对象，将其解析为内在数据和外在数据，减少对象数量，从而提高程序的性能。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e基础知识\u003c/h3\u003e\n\u003cp\u003e享元模式通过共享大量的细粒度的对象，减少对象的数量，从而减少对象的内存，提高应用程序的性能。其基本思想就是分解现有类似对象的组成，将其展开为可以共享的内在数据和不可共享的外在数据，我们称内在数据的对象为享元对象。通常还需要一个工厂类来维护内在数据。\u003c/p\u003e\n\u003cp\u003e在JS中，享元模式主要有下面几个角色组成：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e客户端：用来调用享元工厂来获取内在数据的类，通常是应用程序所需的对象\u003c/li\u003e\n\u003cli\u003e享元工厂：用来维护享元数据的类\u003c/li\u003e\n\u003cli\u003e享元类：保持内在数据的类\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 class=\"heading\"\u003e基本实现\u003c/h3\u003e\n\u003cp\u003e我们举个例子进行说明：苹果公司批量生产iphone，iphone的大部分数据比如型号，屏幕都是一样，少数部分数据比如内存有分16G,32G等。未使用享元模式前，我们写代码如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction Iphone(model, screen, memory, SN) {\n    this. model  = model;\n    this.screen = screen;\n    this.memory = memory;\n    this.SN = SN;\n}\nvar phones = [];\nfor (var i = 0; i \u0026lt; 1000000; i++) {\n    var memory = i % 2 == 0 ? 16 : 32;\n    phones.push(new Iphone(\"iphone6s\", 5.0, memory, i));\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e这段代码中，创建了一百万个iphone，每个iphone都独立申请一个内存。但是我们仔细观察可以看到，大部分iphone都是类似的，只是内存和序列号不一样，如果是一个对性能要求比较高的程序，我们就要考虑去优化它。\n大量相似对象的程序，我们就可以考虑用享元模式去优化它，我们分析出大部分的iphone的型号，屏幕，内存都是一样的，那这部分数据就可以公用，就是享元模式中的内在数据，定义享元类如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e function IphoneFlyweight(model, screen, memory) {\n      this.model = model;\n      this.screen = screen;\n      this.memory = memory;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e我们定义了iphone的享元类，其中包含型号，屏幕和内存三个数据。我们还需要一个享元工厂来维护这些数据：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e var flyweightFactory = (function () {\n     var iphones = {};\n     return {\n         get: function (model, screen, memory) {\n             var key = model + screen + memory;\n             if (!iphones[key]) {\n                 iphones[key] = new IphoneFlyweight(model, screen, memory);\n             }\n             return iphones[key];\n         }\n     };\n })();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e在这个工厂中，我们定义了一个字典来保存享元对象，提供一个方法根据参数来获取享元对象，如果字典中有则直接返回，没有则创建一个返回。\n接着我们创建一个客户端类，这个客户端类就是修改自iphone类：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e function Iphone(model, screen, memory, SN) {\n     this.flyweight = flyweightFactory.get(model, screen, memory);\n     this.SN = SN;\n }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e然后我们依旧像之间那样生成多个iphone\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evar phones = [];\nfor (var i = 0; i \u0026lt; 1000000; i++) {\n    var memory = i % 2 == 0 ? 16 : 32;\n    phones.push(new Iphone(\"iphone6s\", 5.0, memory, i));\n}\nconsole.log(phones);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e这里的关键就在于Iphone构造函数里面的this.flyweight = flyweightFactory.get(model, screen, memory)。这句代码通过享元工厂去获取享元数据，而在享元工厂里面，如果已经存在相同数据的对象则会直接返回对象，多个iphone对象共享这部分相同的数据，所以原本类似的数据已经大大减少，减少的内存的占用。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e在DOM中的使用\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;ul class=\"menu\"\u0026gt;\n    \u0026lt;li class=\"item\"\u0026gt;选项1\u0026lt;/li\u0026gt;\n    \u0026lt;li class=\"item\"\u0026gt;选项2\u0026lt;/li\u0026gt;\n    \u0026lt;li class=\"item\"\u0026gt;选项3\u0026lt;/li\u0026gt;\n    \u0026lt;li class=\"item\"\u0026gt;选项4\u0026lt;/li\u0026gt;\n    \u0026lt;li class=\"item\"\u0026gt;选项5\u0026lt;/li\u0026gt;\n    \u0026lt;li class=\"item\"\u0026gt;选项6\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e点击菜单项，进行相应的操作，我们通过jQuery来绑定事件，一般会这么做：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e $(\".item\").on(\"click\", function () {\n     console.log($(this).text());\n })\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e给每个列表项绑定事件，点击输出相应的文本。这样看暂时没有什么问题，但是如果是一个很长的列表，尤其是在移动端特别长的列表时，就会有性能问题，因为每个项都绑定了事件，都占用了内存。但是这些事件处理程序其实都是很类似的，我们就要对其优化。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e $(\".menu\").on(\"click\", \".item\", function () {\n     console.log($(this).text());\n })\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e通过这种方式进行事件绑定，可以减少事件处理程序的数量，这种方式叫做事件委托，也是运用了享元模式的原理。事件处理程序是公用的内在部分，每个菜单项各自的文本就是外在部分。我们简单说下事件委托的原理：点击菜单项，事件会从li元素冒泡到ul元素，我们绑定事件到ul上，实际上就绑定了一个事件，然后通过事件参数event里面的target来判断点击的具体是哪一个元素，比如低级第一个li元素，event.target就是li，这样就能拿到具体的点击元素了，就可以根据不同元素进行不同的处理。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e参考地址：http://luopq.com/2015/11/20/design-pattern-flyweight/\u003c/p\u003e\n\u003c/blockquote\u003e\n","buildTime":"1514378032.4748","__v":0}
{"_id":{"$oid":"5a43938e51fb4902b0661526"},"id":"5a4315d86fb9a0450909c7a4","author":{"$oid":"5a43938e51fb4902b066151b"},"title":"ReactNative-Navigator组件使用总结","meta":{"likeCount":0},"tag":["React Native"],"comment":[],"content":"\u003cblockquote\u003e\n\u003cp\u003e文章描述本人在开发RN跨平台应用时，使用Navigator导航器的一些实践经验，以防忘记，也供他人参考。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch4 class=\"heading\"\u003e一、前言\u003c/h4\u003e\n\u003cp\u003e如果你刚接触reactNative，并且想跨平台开发，可以直接选择使用\u003ca target=\"_blank\" title=\"React Navigation\" href=\"https://reactnavigation.org/\"\u003eReact Navigation\u003c/a\u003e。如果你只针对iOS平台开发，并且想和iOS原生外观一致，可以使用\u003ccode\u003eNavigatorIOS\u003c/code\u003e组件。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eNavigator\u003c/code\u003e是官方推出的导航组件，兼容iOS与Android两端。从0.44版本开始，\u003ccode\u003eNavigator\u003c/code\u003e被从react native的核心组件库中剥离到了一个名为\u003ccode\u003ereact-native-deprecated-custom-components\u003c/code\u003e的单独模块中。也就是说在0.44版本后，如果要使用\u003ccode\u003eNavigator\u003c/code\u003e，需要先将\u003ccode\u003ereact-native-deprecated-custom-components\u003c/code\u003e安装到工程中，在需要使用的地方import。\u003c/p\u003e\n\u003cp\u003e在实际开发过程中，\u003ccode\u003eNavigator\u003c/code\u003e性能表现还是比较不错的，也很稳定，毕竟经历了那么多版本的检验。UI表现上也不错，几乎与原生相当。虽然被移除了RN核心库，但不影响使用。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e写此文章时，我们团队使用的RN是0.44.3版本，官方已经更新到0.51版本。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch4 class=\"heading\"\u003e二、为什么我不使用React Navigation\u003c/h4\u003e\n\u003cp\u003e本来也是考虑直接使用\u003ccode\u003eReact Navigation\u003c/code\u003e，但我们是在现有Native工程基础上增加的RN功能，根据业务功能不同，分为不同的module。需要在同一个module中，根据Native不同的传值，跳转到不同的RN页面，也就是说导航器的initialRoute(根视图)是变化的，不是固定不变的。而经过研究，\u003ccode\u003eReact Navigation\u003c/code\u003e比较适合根视图是固定的情况，所以只好放弃之。\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003e三、安装\u0026amp;使用\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003e1.安装：\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e在项目根目录执行命令(与node_modules同级)：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs shell\" lang=\"shell\"\u003enpm install react-native-deprecated-custom-components\n\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\n\u003cp\u003e注意：经过本人多次踩坑得到的经验，安装前，最好先执行命令\u003ccode\u003enpm install\u003c/code\u003e，再执行上面的安装命令。直接安装的话，会出现很多奇怪的问题 :broken_heart:。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e安装位置：\n在~/node_modules/react-native-deprecated-custom-components目录下\u003c/p\u003e\n\u003cp\u003e目录截图：\n\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/160960d48d4c728e?w=2432\u0026amp;h=1508\u0026amp;f=png\u0026amp;s=559788\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e2.使用：\u003c/strong\u003e\n\u003ccode\u003eNavigator\u003c/code\u003e的使用与iOS中的UINavigationController类似，一般作为根视图。将所有的子视图组件都放到\u003ccode\u003eNavigator\u003c/code\u003e中，再在对应render函数中返回\u003ccode\u003eNavigator\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e代码如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003erender() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e (\n                \u0026lt;Navigator\n                    initialRoute={{title: this._getRootConmponet().title, id: this.state.rootPageKey, component: this._getRootConmponet().component}}\n                    configureScene={(route) =\u0026gt; {\n                        return Navigator.SceneConfigs.PushFromRight;\n                    }}\n                    renderScene={(route, navigator) =\u0026gt; {\n                        let Component = route.component;\n                        return \u0026lt;Component {...route.params} route={route} navigator={navigator} /\u0026gt;\n                    }}\n                    sceneStyle={{paddingTop: paddingTopOffset, paddingBottom:paddingBottomOffset}}\n                    navigationBar={\n                        \u0026lt;Navigator.NavigationBar\n                            style={{\n                                alignItems: 'center',\n                                backgroundColor: '#f8f8f8',\n                                borderBottomWidth:1/PixelRatio.get(),\n                                borderBottomColor:'#cccccc',\n                            }}\n                            routeMapper={RouteMapper}\n                            navigationStyles={Navigator.NavigationBar.Styles}\n                        /\u0026gt;\n                    }\n                /\u0026gt;\n        )\n    }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e代码解释：\n\u003ccode\u003einitialRoute\u003c/code\u003e：为代码的根组件，也就是启动app之后会看到界面的第一屏，其中，其有三个参数，title:组件的名字，id：是组件的唯一标识(字符串类型，是为了区分组件的唯一性而自定义的)，component：根组件。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003einitialRoute={{\u003cspan class=\"hljs-attr\"\u003etitle\u003c/span\u003e: \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e._getRootConmponet().title, \u003cspan class=\"hljs-attr\"\u003eid\u003c/span\u003e: \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.state.rootPageKey, \u003cspan class=\"hljs-attr\"\u003ecomponent\u003c/span\u003e: \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e._getRootConmponet().component}}\n\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\n\u003cp\u003e注：参数个数和参数名字不是固定的，你这里怎么定义，决定后面怎么使用。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003ccode\u003econfigureScene\u003c/code\u003e：这个是场景配置，决定页面之间跳转时候的动画方式，跳转方式比较多，具体可以到NavigatorSceneConfigs.js文件中查看。\n\u003ccode\u003erenderScene\u003c/code\u003e：场景渲染，返回一个组件元素。\u003ccode\u003elet Component = route.component\u003c/code\u003e就是取每个route里的组件，例如initialRoute里的component，在配置完后，return该组件。\n\u003ccode\u003esceneStyle\u003c/code\u003e：场景样式，统一设置页面偏移量等，可以用来适配安卓和iOS导航栏高度不一致问题，也可以用来适配iPhoneX。\n\u003ccode\u003enavigationBar\u003c/code\u003e：导航栏属性，返回一个Navigator.NavigationBar类型的组件，使用navigationBar属性优点是方便，具有类似原生的过渡动画；缺点是，需要在其属性routeMapper中统一定制页面导航栏样式，而不能在各个页面中定制导航栏样式，如果有页面的导航栏样式比较特别，这就需要使用上文提到的组件\u003ccode\u003eid\u003c/code\u003e进行判断，耦合性比较高。当然也可以不设置navigationBar属性，自己定义每个页面的导航栏(比较烦，下面说)。\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003e四、使用系统自带navigationBar\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003e1.navigationBar：\u003c/strong\u003e\n示例代码：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003enavigationBar={\n    \u0026lt;Navigator.NavigationBar\n                            style={{\n                                \u003cspan class=\"hljs-attr\"\u003ealignItems\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'center'\u003c/span\u003e,\n                                \u003cspan class=\"hljs-attr\"\u003ebackgroundColor\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'#f8f8f8'\u003c/span\u003e,\n                                \u003cspan class=\"hljs-attr\"\u003eborderBottomWidth\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e/PixelRatio.get(),\n                                \u003cspan class=\"hljs-attr\"\u003eborderBottomColor\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e'#cccccc'\u003c/span\u003e,\n                            }}\n                            routeMapper={RouteMapper}\n                            navigationStyles={Navigator.NavigationBar.Styles}\n                        /\u0026gt;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这里\u003ccode\u003enavigationBar\u003c/code\u003e只使用了三个属性：\n\u003ccode\u003estyle\u003c/code\u003e：统一定义navigationBar的样式，背景色，底部线条，子视图位置等。\n\u003ccode\u003erouteMapper\u003c/code\u003e：这个是navigationBar的灵魂，它决定navigationBar显示什么，如何操作等。\n\u003ccode\u003enavigationStyles\u003c/code\u003e：安卓和iOS的导航栏样式不一样，\u003ccode\u003eNavigator.NavigationBar.Styles\u003c/code\u003e中会判断当前是什么系统，安卓就返回一个\u003ccode\u003eNavigatorNavigationBarStylesAndroid\u003c/code\u003e，iOS就返回\u003ccode\u003eNavigatorNavigationBarStylesIOS\u003c/code\u003e，后面提到的适配iPhoneX，就需要改动\u003ccode\u003eNavigatorNavigationBarStylesIOS\u003c/code\u003e文件。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e2.routeMapper：\u003c/strong\u003e\n由于\u003ccode\u003erouteMapper\u003c/code\u003e内容比较多，可以单独抽出到一个js文件中管理。\n示例代码：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-built_in\"\u003emodule\u003c/span\u003e.exports = {\n\n    \u003cspan class=\"hljs-comment\"\u003e//左边按钮\u003c/span\u003e\n    LeftButton(route, navigator, index, navState) {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(index \u0026gt; \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) {\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e (\n                \u0026lt;TouchableOpacity\n                    onPress={() =\u0026gt; {\n                        if (route.backClick) {\n                            route.backClick(); //如果动作被拦截，那就直接新动作\n                        } else {\n                            navigator.pop() //否则，pop\n                        }\n                    }}\n                    style={styles.leftButtonStyle}\u0026gt;\n                    \u0026lt;Image source={require('../images/trc_pay_pop_btn_back.png')} resizeMode='stretch'/\u0026gt;\n                \u0026lt;/TouchableOpacity\u0026gt;\n            );\n        } else {\n            if (route.id === Config.AccountLoginPage.id) {\n                return (\n                    \u0026lt;TouchableOpacity\n                        onPress={() =\u0026gt; {\n                            if (route.rootBack) { //如果传入根视图返回，就执行新动作\n                                return route.rootBack()\n                            }else {\n                                TRCNativeBridge.dismiss();\n                            }\n                        }}\n                        style={styles.leftButtonStyle}\u0026gt;\n                        \u0026lt;Image style={{marginLeft:10}}\n                               source={require('../images/trc_account_login_close.png')}\n                               resizeMode='stretch' /\u0026gt;\n                    \u0026lt;/TouchableOpacity\u0026gt;\n                )\n            } else {\n                return (\n                    \u0026lt;View/\u0026gt;\n                );\n            }\n        }\n    },\n\n    //右边按钮\n    RightButton(route, navigator, index, navState) {\n        if(index \u0026gt; 0 \u0026amp;\u0026amp; route.rightButtonTitle) {\n            return (\n                \u0026lt;TouchableOpacity\n                    onPress={() =\u0026gt; {\n                        if (route.rightBarButtonOnPress) { //道理同上\n                            route.rightBarButtonOnPress()\n                        }\n                    }}\n                    style={styles.rightButtonStyle}\u0026gt;\n                    \u0026lt;Text style={styles.rightButtonTextStyle} numberOfLines={1}\u0026gt;{route.rightButtonTitle}\u0026lt;/Text\u0026gt;\n                \u0026lt;/TouchableOpacity\u0026gt;\n            );\n        } else {\n            return \u0026lt;View /\u0026gt;\n        }\n    },\n\n    //标题\n    Title(route, navigator, index, navState) {\n        let title = route.title ? route.title : '';\n        return (\n            \u0026lt;View style={styles.titleBgStyle}\u0026gt;\n                \u0026lt;Text style={styles.middleButtonTextStyle}\u0026gt;{title}\u0026lt;/Text\u0026gt;\n            \u0026lt;/View\u0026gt;\n        );\n    }\n};\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e代码解释：\n\u003ccode\u003erouteMapper\u003c/code\u003e对象中有三个函数，\u003ccode\u003eLeftButton\u003c/code\u003e、\u003ccode\u003eRightButton\u003c/code\u003e和\u003ccode\u003eTitle\u003c/code\u003e，分别代表左边按钮，右边按钮和中间标题，它们的参数都是(route, navigator, index, navState)，它们都需要返回一个组件元素。\u003c/p\u003e\n\u003cp\u003e其中函数每个参数含义是：\n\u003ccode\u003eroute\u003c/code\u003e:表示当前的路由。\n\u003ccode\u003enavigator\u003c/code\u003e:表示当前的导航器。\n\u003ccode\u003eindex\u003c/code\u003e:表示当前的页面的在导航栈中的位置索引。\n\u003ccode\u003enavState\u003c/code\u003e:表示当前的导航状态。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e3.LeftButton：\u003c/strong\u003e\n解释一下\u003ccode\u003eLeftButton\u003c/code\u003e：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-comment\"\u003e//左边按钮\u003c/span\u003e\n    LeftButton(route, navigator, index, navState) {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(index \u0026gt; \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) {\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e (\n                \u0026lt;TouchableOpacity\n                    onPress={() =\u0026gt; {\n                        if (route.backClick) {\n                            route.backClick(); //如果动作被拦截，那就直接新动作\n                        } else {\n                            navigator.pop() //否则，pop\n                        }\n                    }}\n                    style={styles.leftButtonStyle}\u0026gt;\n                    \u0026lt;Image source={require('../images/trc_pay_pop_btn_back.png')} resizeMode='stretch'/\u0026gt;\n                    {\n                        iOS\n                            ?\n                            \u0026lt;Text style={{marginLeft:-6, fontSize:accessoryFontSize}}\u0026gt;返回\u0026lt;/Text\u0026gt;\n                            :\n                            null\n                    }\n                \u0026lt;/TouchableOpacity\u0026gt;\n            );\n        } else {\n            if (route.id === Config.AccountLoginPage.id) {\n                return (\n                    \u0026lt;TouchableOpacity\n                        onPress={() =\u0026gt; {\n                            if (route.rootBack) { //如果传入根视图返回，就执行新动作\n                                return route.rootBack()\n                            }else {\n                                TRCNativeBridge.dismiss();\n                            }\n                        }}\n                        style={styles.leftButtonStyle}\u0026gt;\n                        \u0026lt;Image style={{marginLeft:10}}\n                               source={require('../images/trc_account_login_close.png')}\n                               resizeMode='stretch' /\u0026gt;\n                    \u0026lt;/TouchableOpacity\u0026gt;\n                )\n            } else {\n                return (\n                    \u0026lt;View/\u0026gt;\n                );\n            }\n        }\n    },\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e代码解释：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果index \u0026gt; 0，表示当前页面不是根视图，返回按钮基本上都是一个返回箭头\"\u0026lt;\"，或者\"\u0026lt;返回\"，点击进行返回。\n所以这里定了一个\u003ccode\u003eTouchableOpacity\u003c/code\u003e按钮，上面有一个\u003ccode\u003eImage\u003c/code\u003e。点击按钮执行onPress时：\n①如果某个页面需要拦截返回事件，可以在其componentWillMount中给route定义一个\u003ccode\u003ebackClick\u003c/code\u003e函数，进行拦截。代码如下：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003ecomponentWillMount(){\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.props.route.backClick = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e =\u0026gt;\u003c/span\u003e {\n            Keyboard.dismiss();\n            \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e { navigator } = \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.props;\n            navigator.pop();\n        };\n    }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e②如果不需要拦截，则会直接执行\u003ccode\u003enavigator.pop()\u003c/code\u003e，开发者就不需要感知返回事件。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果index = 0，就判断当前视图的\u003ccode\u003eid\u003c/code\u003e是不是根视图。如果是，同上也渲染一个按钮，点击按钮执行onPress时：\n①如果某个页面需要拦截返回事件，可以在其componentWillMount中给route定义一个\u003ccode\u003erootBack\u003c/code\u003e函数，进行返回拦截。\n②如果不需要拦截，则会直接执行\u003ccode\u003eTRCNativeBridge.dismiss()\u003c/code\u003e，告诉Native关闭RN模块。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003eRightButton与TItle的原理与\u003ccode\u003eLeftButton\u003c/code\u003e类似，就不在赘述。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch4 class=\"heading\"\u003e五、自定义navigationBar\u003c/h4\u003e\n\u003cp\u003e由于使用系统自带的\u003ccode\u003enavigationBar\u003c/code\u003e，会增加代码耦合性，也不利于后期维护，所以只适合页面导航栏定制化较少，功能比较简单的项目。如果导航栏定制化较多，比如需要隐藏导航栏，导航栏上加搜索框等功能时，使用自定义的navigationBar会比较好。\u003c/p\u003e\n\u003cp\u003e自定义导航栏，也就是写一个公共的导航栏组件，定义好组件样式，为各种情况提供属性和事件callBack，在需要的页面进行引用(几乎每个页面都需要 :flushed:)。\n使用示例：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e  NavigatorBar  \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./NavigatorBar'\u003c/span\u003e;\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ePageClass\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eComponent\u003c/span\u003e \u003c/span\u003e{\n    render() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e (\n            \u003cspan class=\"xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eView\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003estyle\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e{{flex:1}}\u003c/span\u003e\u0026gt;\u003c/span\u003e\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eNavigatorBar\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003enavigator\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e{this.props.navigator}\u003c/span\u003e\n                              \u003cspan class=\"hljs-attr\"\u003etitle\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e'SecretGarden'\u003c/span\u003e\n                              \u003cspan class=\"hljs-attr\"\u003ehiddenLeftButton\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e{true}\u003c/span\u003e  /\u0026gt;\u003c/span\u003e\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003eView\u003c/span\u003e\u0026gt;\u003c/span\u003e\n        )\n    }\n}\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e优点：真的freeStyle，想怎么定制就怎么定制。\n缺点：①使用时比较烦，每次使用都要import；②过渡动画不是很好。\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003e六、适配iPhoneX\u003c/h4\u003e\n\u003cp\u003e网上很多适配iPhoneX的方法。我的方法是：如果是iPhoneX，就把状态栏高度增加24像素，也就是在上面说到的\u003ccode\u003eNavigatorNavigationBarStylesIOS\u003c/code\u003e文件中，修改STATUS_BAR_HEIGHT，如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e STATUS_BAR_HEIGHT = \u003cspan class=\"hljs-number\"\u003e20\u003c/span\u003e + (Dimensions.get(\u003cspan class=\"hljs-string\"\u003e'window'\u003c/span\u003e).height === \u003cspan class=\"hljs-number\"\u003e812\u003c/span\u003e ? \u003cspan class=\"hljs-number\"\u003e24\u003c/span\u003e : \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e); \u003cspan class=\"hljs-comment\"\u003e//change by meng, note:适配iPhone X\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e上面只是把状态栏增高，但是还需要将页面顶部向下偏移24像素，页面底部向上偏移34像素。注意：安卓不需要偏移。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-comment\"\u003e//顶部偏移\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e iOSPaddingTop = \u003cspan class=\"hljs-number\"\u003e64\u003c/span\u003e + (SCREEN_HEIGHT === \u003cspan class=\"hljs-number\"\u003e812\u003c/span\u003e ? \u003cspan class=\"hljs-number\"\u003e24\u003c/span\u003e : \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e); \u003cspan class=\"hljs-comment\"\u003e//适配iPhone X\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e androidPaddingTop = \u003cspan class=\"hljs-number\"\u003e56\u003c/span\u003e;\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e paddingTopOffset = global.Android ? androidPaddingTop : iOSPaddingTop;\n\n\u003cspan class=\"hljs-comment\"\u003e//底部偏移\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e iOSPaddingBottomOffset = SCREEN_HEIGHT === \u003cspan class=\"hljs-number\"\u003e812\u003c/span\u003e ? \u003cspan class=\"hljs-number\"\u003e34\u003c/span\u003e : \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; \u003cspan class=\"hljs-comment\"\u003e//适配iPhone X\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e androidPaddingBottomOffset = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e paddingBottomOffset = global.Android ? androidPaddingBottomOffset : iOSPaddingBottomOffset;\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这样就完成了iPhoneX的适配。\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003e七、适配安卓沉浸式\u003c/h4\u003e\n\u003cp\u003e安卓沉浸式不是属于Navigator部分，但一般讨论导航栏都会与状态栏联系起来，所以在此顺便说一下。\u003c/p\u003e\n\u003cp\u003e沉浸式是安卓5.0系统上的新功能。即5.0以上系统，可以设置状态栏透明，页面布局从状态栏顶部开始。\n5.0以下系统，状态栏是黑底白字。\u003c/p\u003e\n\u003cp\u003e适配方法如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { StatusBar } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'react-native'\u003c/span\u003e;\ncomponentWillMount() {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (Android) {\n            StatusBar.setBackgroundColor(\u003cspan class=\"hljs-string\"\u003e'#f8f8f8'\u003c/span\u003e);\n            StatusBar.setBarStyle(\u003cspan class=\"hljs-string\"\u003e'dark-content'\u003c/span\u003e, \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e);\n        }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e其中背景色设为与\u003ccode\u003enavigationBar\u003c/code\u003e背景色一致。\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003e八、防止快速点击多次push同一界面\u003c/h4\u003e\n\u003cp\u003e在原生iOS上，经常会遇到快速点击一次按钮，同一个页面会push出两次或多次，在RN上也会有这个问题。我的解决方法是：修改\u003ccode\u003eNavigator\u003c/code\u003e导航器源码，在\u003ccode\u003eNavigator\u003c/code\u003e进行push的时候，判断要push的页面与当前栈顶的页面的\u003ccode\u003eid\u003c/code\u003e是不是相同，如果不相同，就push；如果相同，就return。\u003c/p\u003e\n\u003cp\u003e代码如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003epush: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eroute\u003c/span\u003e) \u003c/span\u003e{\n      \u003cspan class=\"hljs-comment\"\u003e//----------【修改源码开始】change by meng----------\u003c/span\u003e\n\u0009  \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e currentRoutes = \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.getCurrentRoutes();\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (currentRoutes.length \u0026gt; \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) {\n          \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e lastRoute = currentRoutes[currentRoutes.length - \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e];\n          \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e oldId = lastRoute.id;\n          \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e newId = route.id;\n          \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (oldId \u0026amp;\u0026amp; newId \u0026amp;\u0026amp; oldId === newId) {\n              \u003cspan class=\"hljs-comment\"\u003e//如果是连续push到同一个页面，就直接返回\u003c/span\u003e\n              \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e;\n          }\n      }\n      \u003cspan class=\"hljs-comment\"\u003e//----------【修改源码结束】----------\u003c/span\u003e\n\u0009  ...\n  }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e以上就是我在开发过程中使用Navigator的一点心得体会，技术水平有限，若有发现不合理或不准确的地方，欢迎交流指正。\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://mengai.net/rn/438/\"\u003e原文链接\u003c/a\u003e\u003c/p\u003e\n","buildTime":"1514373341.8157","__v":0}
{"_id":{"$oid":"5a43938e51fb4902b0661527"},"id":"5a40aea26fb9a044fd12005e","author":{"$oid":"5a43938e51fb4902b066150f"},"title":"React全家桶构建一款Web音乐App实战（四）：专辑页开发及其动画实现","meta":{"likeCount":0},"tag":["React.js","前端"],"comment":[],"content":"\u003cblockquote\u003e\n\u003cp\u003e项目打包脚本配置针对生产环境已经做了修改，增加了对样式的压缩，把样式统一打包到样式文件中。详细请看第一节\u003ca target=\"_blank\" href=\"https://juejin.im/post/5a367e996fb9a0450f22050f#heading-3\"\u003e配置Stylus预处理语言\u003c/a\u003e。本节所有内容紧接上一节，上一节地址：\u003ca target=\"_blank\" href=\"https://juejin.im/post/5a3a6c12f265da4325297408\"\u003ehttps://juejin.im/post/5a3a6c12f265da4325297408\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e上一节开发了推荐页面，这一节实现专辑页面开发、进入动画和图片拉伸动画。话不多说，先看效果图\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608cbde5bf76b30?w=373\u0026amp;h=664\u0026amp;f=png\u0026amp;s=146850\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e头部是一个很常见的标题加一个返回按钮（标准app的做法~~~），上部分是专辑背景图片，图片下面就是专辑的歌曲列表，最底下就是专辑的简介\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e数据抓取\u003c/h3\u003e\n\u003cp\u003e打开chrome浏览器，地址栏输入QQ音乐官网：\u003ca target=\"_blank\" href=\"https://y.qq.com\"\u003ehttps://y.qq.com\u003c/a\u003e。打开后点击专辑\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608cc22451222f4?w=1265\u0026amp;h=144\u0026amp;f=png\u0026amp;s=21120\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e点击后，如下图\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608cc585f6741ee?w=1234\u0026amp;h=735\u0026amp;f=png\u0026amp;s=379486\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e打开开发者工具（按F12或CTRL+SHIFT+I），然后任意选一张专辑点击\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608cc864434c282?w=1018\u0026amp;h=337\u0026amp;f=png\u0026amp;s=236998\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e这个时候回弹出一个新的窗口，直接关闭它。回到刚才的开发者工具，可以看到有一个请求，这个请求就是获取专辑详情的\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608cca0585baf11?w=1054\u0026amp;h=554\u0026amp;f=png\u0026amp;s=71305\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e点开preview，这里面就是我们需要的数据\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608ccbf06e57f06?w=1065\u0026amp;h=591\u0026amp;f=png\u0026amp;s=87145\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e接下来编写获取接口的代码\u003c/p\u003e\n\u003cp\u003e在\u003cstrong\u003eapi\u003c/strong\u003e目录下的\u003cstrong\u003econfig.js\u003c/strong\u003e中，添加专辑详情的url配置\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003econfig.js\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003econst URL = {\n    /*推荐轮播*/\n    carousel: \u003cspan class=\"hljs-string\"\u003e\"https://c.y.qq.com/musichall/fcgi-bin/fcg_yqqhomepagerecommend.fcg\"\u003c/span\u003e,\n    /*最新专辑*/\n    newalbum: \u003cspan class=\"hljs-string\"\u003e\"https://u.y.qq.com/cgi-bin/musicu.fcg\"\u003c/span\u003e,\n    /*专辑信息*/\n    albumInfo: \u003cspan class=\"hljs-string\"\u003e\"https://c.y.qq.com/v8/fcg-bin/fcg_v8_album_info_cp.fcg\"\u003c/span\u003e\n};\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在\u003cstrong\u003eapi\u003c/strong\u003e下的\u003cstrong\u003erecommend.js\u003c/strong\u003e中添加获取专辑请求的方法\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003erecommend.js\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-built_in\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e getAlbumInfo(albumMid) {\n\u0009const data = Object.assign({}, PARAM, {\n\u0009\u0009albummid: albumMid,\n\u0009\u0009g_tk: 1278911659,\n\u0009\u0009hostU\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e: 0,\n\u0009\u0009platform: \u003cspan class=\"hljs-string\"\u003e\"yqq\"\u003c/span\u003e,\n\u0009\u0009needNewCode: 0\n\u0009});\n\u0009\u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e jsonp(URL.albumInfo, data, OPTION);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e推荐页子路由\u003c/h3\u003e\n\u003cp\u003e为了进入专辑详情页面，需要在推荐页面中实现点击专辑项跳转到专辑详情的路由。先创建专辑页面组件Album.js\n在src下的components下面新建\u003cstrong\u003ealbum\u003c/strong\u003e文件夹，然后在album下面新建\u003cstrong\u003eAlbum.js\u003c/strong\u003e和\u003cstrong\u003ealbum.styl\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eAlbum.js\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eimport React from \u003cspan class=\"hljs-string\"\u003e\"react\"\u003c/span\u003e\n\nimport \u003cspan class=\"hljs-string\"\u003e\"./album.styl\"\u003c/span\u003e\n\nclass Album extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    \n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003ecomponentDidMount\u003c/span\u003e\u003c/span\u003e() {\n    }\n    \n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003erender\u003c/span\u003e\u003c/span\u003e() {\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e (\n            \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"music-album\"\u003c/span\u003e\u0026gt;\n                Album\n            \u0026lt;/div\u0026gt;\n        );\n    }\n}\n\n\u003cspan class=\"hljs-built_in\"\u003eexport\u003c/span\u003e default Album\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003ealbum.styl\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e.music-album\n  position: fixed\n  top: 0\n  left: 0\n  right: 0\n  bottom: 0\n  background-color: \u003cspan class=\"hljs-comment\"\u003e#212121\u003c/span\u003e\n  z-index: 100\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e点开\u003cstrong\u003eRecommend.js\u003c/strong\u003e（src下面components中的recommend目录下面）。导入\u003cstrong\u003eRoute\u003c/strong\u003e和\u003cstrong\u003eAlbum.js\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRecommend.js\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eimport {Route} from \u003cspan class=\"hljs-string\"\u003e\"react-router-dom\"\u003c/span\u003e\nimport Album from \u003cspan class=\"hljs-string\"\u003e\"@/containers/Album\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在\u003cstrong\u003erender\u003c/strong\u003e方法第一行增加\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e {match} = this.props;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003ematch\u003c/strong\u003e是路由通过props传递给组件的包含了url、参数等相关信息。然后在根元素下面添加子路由\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"music-recommend\"\u003c/span\u003e\u0026gt;\n    \u0026lt;Scroll refresh={this.state.refreshScroll}\n            onScroll={(e) =\u0026gt; {\n                /*检查懒加载组件是否出现在视图中，如果出现就加载组件*/\n                forceCheck();}}\u0026gt;\n        ...\n        \n    \u0026lt;/Scroll\u0026gt;\n    \u0026lt;Loading title=\u003cspan class=\"hljs-string\"\u003e\"正在加载...\"\u003c/span\u003e show={this.state.loading}/\u0026gt;\n    \u0026lt;Route path={`\u003cspan class=\"hljs-variable\"\u003e${match.url + '/:id'}\u003c/span\u003e`} component={Album} /\u0026gt;\n\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e最后给每一个专辑包裹元素添加点击事件\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e albums = this.state.newAlbums.map(item =\u0026gt; {\n//通过函数创建专辑对象\n\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e album = AlbumModel.createAlbumByList(item);\n\u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e (\n    \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"album-wrapper\"\u003c/span\u003e key={album.mId}\n         onClick={this.toAlbumDetail(`\u003cspan class=\"hljs-variable\"\u003e${match.url + '/' + album.mId}\u003c/span\u003e`)}\u0026gt;\n        ...\n    \u0026lt;/div\u0026gt;\n);\n});\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003etoAlbumDetail(url) {\n    /*scroll组件会派发一个点击事件，不能使用链接跳转*/\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e () =\u0026gt; {\n        this.props.history.push({\n            pathname: url\n        });\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这里使用react路由提供的history对象来实现编程路由跳转，使用闭包函数把每次循环传入的url作为局部变量。这样每次点击item获取到的都是对应传递的url\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003eHeader组件封装\u003c/h3\u003e\n\u003cp\u003e在整个项目中标题是很常见的，这里把头部标题和返回按钮封装成一个公用的\u003cstrong\u003eHeader\u003c/strong\u003e组件。Header组件接受一个\u003cstrong\u003etitle\u003c/strong\u003e标题，返回按钮点击的时候具有返回的功能，其实就是路由的返回，这里在Header组件内部处理这个点击事件\n在src下面的common目录下新建\u003cstrong\u003eheader\u003c/strong\u003e文件夹，在header文件夹下面新建\u003cstrong\u003eHeader.js\u003c/strong\u003e和\u003cstrong\u003eheader.styl\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eHeader.js\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eimport React from \u003cspan class=\"hljs-string\"\u003e\"react\"\u003c/span\u003e\nimport \u003cspan class=\"hljs-string\"\u003e\"./header.styl\"\u003c/span\u003e\n\nclass MusicHeader extends React.Component {\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003ehandleClick\u003c/span\u003e\u003c/span\u003e() {\n        window.history.back();\n    }\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003erender\u003c/span\u003e\u003c/span\u003e() {\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e (\n            \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"music-header\"\u003c/span\u003e\u0026gt;\n\u0009            \u0026lt;span className=\u003cspan class=\"hljs-string\"\u003e\"header-back\"\u003c/span\u003e onClick={this.handleClick}\u0026gt;\n\u0009                \u0026lt;i className=\u003cspan class=\"hljs-string\"\u003e\"icon-back\"\u003c/span\u003e\u0026gt;\u0026lt;/i\u0026gt;\n\u0009            \u0026lt;/span\u0026gt;\n                \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"header-title\"\u003c/span\u003e\u0026gt;\n                    {this.props.title}\n                \u0026lt;/div\u0026gt;\n            \u0026lt;/div\u0026gt;\n        );\n    }\n}\n\n\u003cspan class=\"hljs-built_in\"\u003eexport\u003c/span\u003e default MusicHeader\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e上诉代码的handleClick函数中也可以使用history.goBack()来实现路由的回退。返回按钮使用的是一个字体图标，在\u003cstrong\u003eApp.js\u003c/strong\u003e中引入字体图标样式，作为全局引入，这样所有的组件都可以使用字体图标样式\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eimport \u003cspan class=\"hljs-string\"\u003e\"../assets/stylus/font.styl\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003eheader.styl\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e.music-header\n  position: fixed\n  width: 100%\n  height: 55px\n  line-height: 55px\n  color: \u003cspan class=\"hljs-comment\"\u003e#FFFFFF\u003c/span\u003e\n  text-align: center\n  font-size: 18px\n  .header-back\n    position: absolute\n    left: 10px\n    font-size: 22px\n  .header-title\n    margin: 0 40px\n    overflow: hidden\n    text-overflow: ellipsis\n    white-space: nowrap\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e专辑页开发\u003c/h3\u003e\n\u003cp\u003e在上一节已经为专辑数据创建了一类模型，对于专辑详情接口只需要一个创建对象的函数即可。在src下面的model目录中的\u003cstrong\u003ealbum.js\u003c/strong\u003e中新增以下代码\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\n/**\n *  通过专辑详情数据创建专辑对象函数\n */\n\u003cspan class=\"hljs-built_in\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e createAlbumByDetail(data) {\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e new Album(\n        data.id,\n        data.mid,\n        data.name,\n        `http://y.gtimg.cn/music/photo_new/T002R300x300M000\u003cspan class=\"hljs-variable\"\u003e${data.mid}\u003c/span\u003e.jpg?max_age=2592000`,\n        data.singername,\n        data.aDate\n    );\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e专辑列表中有很多歌曲数据，这里为歌曲数据创建一个\u003cstrong\u003eSong\u003c/strong\u003e类，方便后续使用。同样在src下的model中新建\u003cstrong\u003esong.js\u003c/strong\u003e，编写一个创建Song类对象的函数\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003esong.js\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e/**\n *  歌曲类模型\n */\n\u003cspan class=\"hljs-built_in\"\u003eexport\u003c/span\u003e class Song {\n\u0009constructor(id, mId, name, img, duration, url, singer) {\n\u0009\u0009this.id = id;\n\u0009\u0009this.mId = mId;\n\u0009\u0009this.name = name;\n\u0009\u0009this.img = img;\n\u0009\u0009this.duration = duration;\n\u0009\u0009this.url = url;\n\u0009\u0009this.singer = singer;\n\u0009}\n}\n\n/**\n *  创建歌曲对象函数\n */\n\u003cspan class=\"hljs-built_in\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e createSong(data) {\n\u0009\u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e new Song(\n\u0009\u0009data.songid,\n\u0009\u0009data.songmid,\n\u0009\u0009data.songname,\n\u0009\u0009`http://y.gtimg.cn/music/photo_new/T002R300x300M000\u003cspan class=\"hljs-variable\"\u003e${data.albummid}\u003c/span\u003e.jpg?max_age=2592000`,\n\u0009\u0009data.interval,\n\u0009\u0009\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e,\n\u0009\u0009filterSinger(data.singer)\n\u0009);\n}\n\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e filterSinger(singers) {\n\u0009\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e singerArray = singers.map(singer =\u0026gt; {\n\u0009\u0009\u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e singer.name;\n\u0009});\n\u0009\u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e singerArray.join(\u003cspan class=\"hljs-string\"\u003e\"/\"\u003c/span\u003e);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e专辑页中需要用到上一节封装的Scroll组件和Loading组件以及封装的Header组件。回到\u003cstrong\u003eAlbum.js\u003c/strong\u003e中导入这个三个组件\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eimport Header from \u003cspan class=\"hljs-string\"\u003e\"@/common/header/Header\"\u003c/span\u003e\nimport Scroll from \u003cspan class=\"hljs-string\"\u003e\"@/common/scroll/Scroll\"\u003c/span\u003e\nimport Loading from \u003cspan class=\"hljs-string\"\u003e\"@/common/loading/Loading\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e导入专辑请求函数，接口成功状态码常量，专辑和歌曲模型类\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eimport {getAlbumInfo} from \u003cspan class=\"hljs-string\"\u003e\"@/api/recommend\"\u003c/span\u003e\nimport {CODE_SUCCESS} from \u003cspan class=\"hljs-string\"\u003e\"@/api/config\"\u003c/span\u003e\nimport * as AlbumModel from \u003cspan class=\"hljs-string\"\u003e\"@/model/album\"\u003c/span\u003e\nimport * as SongModel from \u003cspan class=\"hljs-string\"\u003e\"@/model/song\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eAlbum.js\u003c/strong\u003e主要代码如下\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eclass Album extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loading: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n            album: {},\n            songs: [],\n            refreshScroll: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\n        }\n    }\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003ecomponentDidMount\u003c/span\u003e\u003c/span\u003e() {\n        \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e albumBgDOM = ReactDOM.findDOMNode(this.refs.albumBg);\n        \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e albumContainerDOM = ReactDOM.findDOMNode(this.refs.albumContainer);\n        albumContainerDOM.style.top = albumBgDOM.offsetHeight + \u003cspan class=\"hljs-string\"\u003e\"px\"\u003c/span\u003e;\n\n        getAlbumInfo(this.props.match.params.id).then((res) =\u0026gt; {\n            console.log(\u003cspan class=\"hljs-string\"\u003e\"获取专辑详情：\"\u003c/span\u003e);\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (res) {\n                console.log(res);\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (res.code === CODE_SUCCESS) {\n                    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e album = AlbumModel.createAlbumByDetail(res.data);\n                    album.desc = res.data.desc;\n\n                    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e songList = res.data.list;\n                    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e songs = [];\n                    songList.forEach(item =\u0026gt; {\n                        \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e song = SongModel.createSong(item);\n                        songs.push(song);\n                    });\n                    this.setState({\n                        loading: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,\n                        album: album,\n                        songs: songs\n                    }, () =\u0026gt; {\n                        //刷新scroll\n                        this.setState({refreshScroll:\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e});\n                    });\n                }\n            }\n        });\n    }\n\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003erender\u003c/span\u003e\u003c/span\u003e() {\n        \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e album = this.state.album;\n        \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e songs = this.state.songs.map((song) =\u0026gt; {\n            \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e (\n                \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"song\"\u003c/span\u003e key={song.id}\u0026gt;\n                    \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"song-name\"\u003c/span\u003e\u0026gt;{song.name}\u0026lt;/div\u0026gt;\n                    \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"song-singer\"\u003c/span\u003e\u0026gt;{song.singer}\u0026lt;/div\u0026gt;\n                \u0026lt;/div\u0026gt;\n            );\n        });\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e (\n            \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"music-album\"\u003c/span\u003e\u0026gt;\n                \u0026lt;Header title={album.name} ref=\u003cspan class=\"hljs-string\"\u003e\"header\"\u003c/span\u003e\u0026gt;\u0026lt;/Header\u0026gt;\n                \u0026lt;div style={{position:\u003cspan class=\"hljs-string\"\u003e\"relative\"\u003c/span\u003e}}\u0026gt;\n                    \u0026lt;div ref=\u003cspan class=\"hljs-string\"\u003e\"albumBg\"\u003c/span\u003e className=\u003cspan class=\"hljs-string\"\u003e\"album-img\"\u003c/span\u003e style={{backgroundImage: `url(\u003cspan class=\"hljs-variable\"\u003e${album.img}\u003c/span\u003e)`}}\u0026gt;\n                        \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"filter\"\u003c/span\u003e\u0026gt;\u0026lt;/div\u0026gt;\n                    \u0026lt;/div\u0026gt;\n                    \u0026lt;div ref=\u003cspan class=\"hljs-string\"\u003e\"albumFixedBg\"\u003c/span\u003e className=\u003cspan class=\"hljs-string\"\u003e\"album-img fixed\"\u003c/span\u003e style={{backgroundImage: `url(\u003cspan class=\"hljs-variable\"\u003e${album.img}\u003c/span\u003e)`}}\u0026gt;\n                        \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"filter\"\u003c/span\u003e\u0026gt;\u0026lt;/div\u0026gt;\n                    \u0026lt;/div\u0026gt;\n                    \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"play-wrapper\"\u003c/span\u003e ref=\u003cspan class=\"hljs-string\"\u003e\"playButtonWrapper\"\u003c/span\u003e\u0026gt;\n                        \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"play-button\"\u003c/span\u003e\u0026gt;\n                            \u0026lt;i className=\u003cspan class=\"hljs-string\"\u003e\"icon-play\"\u003c/span\u003e\u0026gt;\u0026lt;/i\u0026gt;\n                            \u0026lt;span\u0026gt;播放全部\u0026lt;/span\u0026gt;\n                        \u0026lt;/div\u0026gt;\n                    \u0026lt;/div\u0026gt;\n                \u0026lt;/div\u0026gt;\n                \u0026lt;div ref=\u003cspan class=\"hljs-string\"\u003e\"albumContainer\"\u003c/span\u003e className=\u003cspan class=\"hljs-string\"\u003e\"album-container\"\u003c/span\u003e\u0026gt;\n                    \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"album-scroll\"\u003c/span\u003e style={this.state.loading === \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e ? {display:\u003cspan class=\"hljs-string\"\u003e\"none\"\u003c/span\u003e} : {}}\u0026gt;\n                        \u0026lt;Scroll refresh={this.state.refreshScroll}\u0026gt;\n                            \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"album-wrapper\"\u003c/span\u003e\u0026gt;\n                                \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"song-count\"\u003c/span\u003e\u0026gt;专辑 共{songs.length}首\u0026lt;/div\u0026gt;\n                                \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"song-list\"\u003c/span\u003e\u0026gt;\n                                    {songs}\n                                \u0026lt;/div\u0026gt;\n                                \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"album-info\"\u003c/span\u003e style={album.desc? {} : {display:\u003cspan class=\"hljs-string\"\u003e\"none\"\u003c/span\u003e}}\u0026gt;\n                                    \u0026lt;h1 className=\u003cspan class=\"hljs-string\"\u003e\"album-title\"\u003c/span\u003e\u0026gt;专辑简介\u0026lt;/h1\u0026gt;\n                                    \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"album-desc\"\u003c/span\u003e\u0026gt;\n                                        {album.desc}\n                                    \u0026lt;/div\u0026gt;\n                                \u0026lt;/div\u0026gt;\n                            \u0026lt;/div\u0026gt;\n                        \u0026lt;/Scroll\u0026gt;\n                    \u0026lt;/div\u0026gt;\n                    \u0026lt;Loading title=\u003cspan class=\"hljs-string\"\u003e\"正在加载...\"\u003c/span\u003e show={this.state.loading}/\u0026gt;\n                \u0026lt;/div\u0026gt;\n            \u0026lt;/div\u0026gt;\n        );\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e上诉代码在componentDidMount中通过match.params.id获取参数id，再发送请求获取到数据后先创建Album对象再创建Song列表，然后调用setState更新ui。此时歌曲还缺少文件地址，歌曲文件地址接口获取见\u003ca target=\"_blank\" href=\"https://juejin.im/post/5a35228e51882506a463b172#heading-12\"\u003ehttps://juejin.im/post/5a35228e51882506a463b172#heading-12\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e在api目录下的\u003cstrong\u003econfig\u003c/strong\u003e中添加歌曲vkey地址，然后新建\u003cstrong\u003esong.js\u003c/strong\u003e，编写用来获取歌曲vkey请求\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003econfig.js\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e/*歌曲vkey*/\nsongVkey: \u003cspan class=\"hljs-string\"\u003e\"https://c.y.qq.com/base/fcgi-bin/fcg_music_express_mobile3.fcg\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003esong.js\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eimport jsonp from \u003cspan class=\"hljs-string\"\u003e\"./jsonp\"\u003c/span\u003e\nimport {URL, PARAM} from \u003cspan class=\"hljs-string\"\u003e\"./config\"\u003c/span\u003e\n\n\u003cspan class=\"hljs-built_in\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e getSongVKey(songMid) {\n\u0009const data = Object.assign({}, PARAM, {\n\u0009\u0009g_tk: 1278911659,\n\u0009\u0009hostU\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e: 0,\n\u0009\u0009platform: \u003cspan class=\"hljs-string\"\u003e\"yqq\"\u003c/span\u003e,\n\u0009\u0009needNewCode: 0,\n\u0009\u0009cid: 205361747,\n\u0009\u0009uin: 0,\n\u0009\u0009songmid: songMid,\n\u0009\u0009filename: `C400\u003cspan class=\"hljs-variable\"\u003e${songMid}\u003c/span\u003e.m4a`,\n\u0009\u0009guid: 3655047200\n\u0009});\n\u0009const option = {\n\u0009\u0009param: \u003cspan class=\"hljs-string\"\u003e\"callback\"\u003c/span\u003e,\n\u0009\u0009prefix: \u003cspan class=\"hljs-string\"\u003e\"callback\"\u003c/span\u003e\n\u0009};\n\u0009\u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e jsonp(URL.songVkey, data, option);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在\u003cstrong\u003eAlbum.js\u003c/strong\u003e中导入上述方法\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eimport {getSongVKey} from \u003cspan class=\"hljs-string\"\u003e\"@/api/song\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e编写一个获取歌曲vkey的方法\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003egetSongUrl(song, mId) {\n    getSongVKey(mId).then((res) =\u0026gt; {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (res) {\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(res.code === CODE_SUCCESS) {\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(res.data.items) {\n                    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e item = res.data.items[0];\n                    song.url =  `http://dl.stream.qqmusic.qq.com/\u003cspan class=\"hljs-variable\"\u003e${item.filename}\u003c/span\u003e?vkey=\u003cspan class=\"hljs-variable\"\u003e${item.vkey}\u003c/span\u003e\u0026amp;guid=3655047200\u0026amp;fromtag=66`\n                }\n            }\n        }\n    });\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e对歌曲进行遍历的时候调用getSongUrl获取歌曲文件地址\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003esongList.forEach(item =\u0026gt; {\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e song = SongModel.createSong(item);\n    //获取歌曲vkey\n    this.getSongUrl(song, item.songmid);\n    songs.push(song);\n});\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003esong是一个对象，对象是引用类型，把song传递给getSongUrl的第一个参数，他们指向的是同一块内存，也就是说他们是同一个的实例，那么他们的url属性也是一样的。在getSongUrl中修改了url也就修改了传递进去的song对象的url属性\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e实现动画\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e专辑页进入动画\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e在很多app中页面进入时都会有平移动画，这样看起来界面跳转不会显得很生硬。这里使用\u003cstrong\u003ereact-transition-group\u003c/strong\u003e动画库来实现动画。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e注意：这里使用的是2.x版本，1.x和2.x版本api相差很大。详细请看\u003ca target=\"_blank\" href=\"https://github.com/reactjs/react-transition-group\"\u003egithub\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003ereact-transition-group提供了三个组件\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eTransition\u003c/strong\u003e（过渡动画组件。允许从一种状态到另一种状态的改变。默认跟踪组件的进入和离开状态）\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTransitionGroup\u003c/strong\u003e（管理Transition组件集合）\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCSSTransition\u003c/strong\u003e（使用css过渡和动画的Transition组件）\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e详细用法请看：\u003ca target=\"_blank\" href=\"https://reactcommunity.org/react-transition-group/\"\u003ehttps://reactcommunity.org/react-transition-group\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e这里使用\u003cstrong\u003eCSSTransition\u003c/strong\u003e组件来做动画。先安装\u003cstrong\u003ereact-transition-group\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003enpm install react-transition-group --save\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在Album.js中导入\u003cstrong\u003eCSSTransition\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eimport {CSSTransition} from \u003cspan class=\"hljs-string\"\u003e\"react-transition-group\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e给Album组件添加一个\u003cstrong\u003eshow\u003c/strong\u003e属性用来控制动画的状态\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003ethis.state = {\n    show: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,\n    loading: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n    album: {},\n    songs: [],\n    refreshScroll: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e使用CSSTransition组件包裹Album组件的根元素\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;CSSTransition \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e={this.state.show} timeout={300} classNames=\u003cspan class=\"hljs-string\"\u003e\"translate\"\u003c/span\u003e\u0026gt;\n    \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"music-album\"\u003c/span\u003e\u0026gt;\n        ...\n    \u0026lt;/div\u0026gt;\n\u0026lt;/CSSTransition\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eCSSTransition接受\u003cstrong\u003ein\u003c/strong\u003e、\u003cstrong\u003etimeout\u003c/strong\u003e、\u003cstrong\u003eclassNames\u003c/strong\u003e三个props。其中in控制组件的状态。当in为true时，组件的子元素会应用\u003cstrong\u003etranslate-enter\u003c/strong\u003e、\u003cstrong\u003etranslate-enter-active\u003c/strong\u003e样式，当in为false时，组件的子元素会应用\u003cstrong\u003etranslate-exit\u003c/strong\u003e、\u003cstrong\u003etranslate-exit-active\u003c/strong\u003e样式。timeout指定过渡时间\u003c/p\u003e\n\u003cp\u003e这里只实现组件进入动画，组件离开动画可通过\u003cstrong\u003eHeader\u003c/strong\u003e组件的返回按钮点击事件结合动画钩子函数实现\u003c/p\u003e\n\u003cp\u003e这个动画使用的样式会被用在多处，我们把样式写在\u003cstrong\u003eApp.styl\u003c/strong\u003e中\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e.translate-enter\n  transform: translate3d(100%, 0, 0)\n  \u0026amp;.translate-enter-active\n    transition: transform .3s\n    transform: translate3d(0, 0, 0)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在组件挂载完成后，也就是\u003cstrong\u003ecomponentDidMount\u003c/strong\u003e函数中将\u003cstrong\u003eshow\u003c/strong\u003e设置为\u003cstrong\u003etrue\u003c/strong\u003e，让组件应用\u003cstrong\u003etranslate-enter\u003c/strong\u003e、\u003cstrong\u003etranslate-enter-active\u003c/strong\u003e样式从而实现过渡动画\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003ecomponentDidMount\u003c/span\u003e\u003c/span\u003e() {\n    this.setState({\n        show: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\n    });\n    ...\n}\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003e列表滚动和图片拉伸效果\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e先来看gif图\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/16091b5e1102ae19?w=435\u0026amp;h=875\u0026amp;f=gif\u0026amp;s=1471483\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e上图中列表往上滚动会覆盖图片，当超过头部高度的时候会隐藏，图片上半部分Header高度的区域显示在列表上方。向下拉伸时图片会跟着放大。向上滚动效果主要利用元素的\u003cstrong\u003eposition\u003c/strong\u003e定位，和\u003cstrong\u003ez-index\u003c/strong\u003e设置层级关系，图片这里做了两个同样的元素，它们都相对父元素进行定位，一个是用来默认显示，另外一个隐藏并且高度只有Header高，隐藏的元素层级比列表要高。当里列表往上滚动超过Header的底部时就显示隐藏的图片。向下滚动利用监听Scroll组件的滚动事件，根据滚动的高度给图片设置对应的\u003cstrong\u003escale\u003c/strong\u003e值，同时给按钮设置\u003cstrong\u003emargin-top\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e先给滚动列表设置溢出隐藏，覆盖Scroll组件的样式\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e.scroll-view\n    overflow: visible\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e监听Scroll组件的滚动，判断y是否小于0，小于0表示向上滚动。当滚动y值的绝对值加上Header的高度大于图片高度的时候此时已经超过了Header的底部，这个时候显示隐藏的图片，向下滚动没有达到Header的底部时隐藏图片（这里使用了两张图片，其实也可以使用一张图片，当滚动到Header组件的底部的时候设置图片的高度和z-index即可）\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e/**\n * 监听scroll\n */\nscroll = ({y}) =\u0026gt; {\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e albumBgDOM = ReactDOM.findDOMNode(this.refs.albumBg);\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e albumFixedBgDOM = ReactDOM.findDOMNode(this.refs.albumFixedBg);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (y \u0026lt; 0) {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (Math.abs(y) + 55 \u0026gt; albumBgDOM.offsetHeight) {\n            albumFixedBgDOM.style.display = \u003cspan class=\"hljs-string\"\u003e\"block\"\u003c/span\u003e;\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n            albumFixedBgDOM.style.display = \u003cspan class=\"hljs-string\"\u003e\"none\"\u003c/span\u003e;\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;Scroll refresh={this.state.refreshScroll} onScroll={this.scroll}\u0026gt;\n    ...\n\u0026lt;/Scroll\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e接下来处理图片拉伸，在if (y \u0026lt; 0)增加else块，当y大于0时表示向下滚动\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003escroll = ({y}) =\u0026gt; {\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e albumBgDOM = ReactDOM.findDOMNode(this.refs.albumBg);\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e albumFixedBgDOM = ReactDOM.findDOMNode(this.refs.albumFixedBg);\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e playButtonWrapperDOM = ReactDOM.findDOMNode(this.refs.playButtonWrapper);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (y \u0026lt; 0) {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (Math.abs(y) + 55 \u0026gt; albumBgDOM.offsetHeight) {\n            albumFixedBgDOM.style.display = \u003cspan class=\"hljs-string\"\u003e\"block\"\u003c/span\u003e;\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n            albumFixedBgDOM.style.display = \u003cspan class=\"hljs-string\"\u003e\"none\"\u003c/span\u003e;\n        }\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n        \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e transform = `scale(\u003cspan class=\"hljs-variable\"\u003e${1 + y * 0.004}\u003c/span\u003e, \u003cspan class=\"hljs-variable\"\u003e${1 + y * 0.004}\u003c/span\u003e)`;\n        albumBgDOM.style[\u003cspan class=\"hljs-string\"\u003e\"webkitTransform\"\u003c/span\u003e] = transform;\n        albumBgDOM.style[\u003cspan class=\"hljs-string\"\u003e\"transform\"\u003c/span\u003e] = transform;\n        playButtonWrapperDOM.style.marginTop = `\u003cspan class=\"hljs-variable\"\u003e${y}\u003c/span\u003epx`;\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ealbum.styl完整代码见结尾源码地址\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e总结\u003c/h3\u003e\n\u003cp\u003e这一节使用history对象来实现编程子路由跳转，简单的介绍了react-transition-group做过渡动画，后面会介绍使用react-transition-group结合钩子函数实现动画效果。还利用上一节封装的Scroll组件的滚动事件实现了列表滚动和图片拉伸效果，主要是明白如何通过滚动的y值判断是上拉还是下拉、图片的布局设计以及如何判断列表滚动到了Header组件底部\u003c/p\u003e\n\u003cp\u003e完整项目地址：\u003ca target=\"_blank\" href=\"https://github.com/code-mcx/mango-music\"\u003ehttps://github.com/code-mcx/mango-music\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e本章节代码在\u003cstrong\u003echapter4\u003c/strong\u003e分支\u003c/p\u003e\n\u003cp\u003e后续更新中...\u003c/p\u003e\n","buildTime":"1514376892.8096","__v":0}
{"_id":{"$oid":"5a43938e51fb4902b0661528"},"id":"5a425cce6fb9a045204c7c11","author":{"$oid":"5a43938e51fb4902b0661516"},"title":"手把手教你用 100行代码实现基于 react的 markdown 输入 + 即时预览在线编辑器（二）","meta":{"likeCount":0},"tag":["Markdown"],"comment":[],"content":"\u003cblockquote\u003e\n\u003cp\u003e本文介绍如何使用 \u003ca target=\"_blank\" href=\"https://github.com/ajaxorg/ace\"\u003eAce\u003c/a\u003e和 \u003ca target=\"_blank\" href=\"https://github.com/codemirror/CodeMirror\"\u003eCodeMirror\u003c/a\u003e来实现一个基于 \u003ccode\u003ereact\u003c/code\u003e的 \u003ccode\u003emarkdown\u003c/code\u003e 输入 \u003ccode\u003e+\u003c/code\u003e 即时预览在线编辑器\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003chr\u003e\n\u003ch2 class=\"heading\"\u003eAce版本\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eAce\u003c/code\u003e算是一个久经考验的老牌编辑器插件了，现在很多大公司都在用这个东西，似乎 \u003ca target=\"_blank\" href=\"https://github.com\"\u003eGithub\u003c/a\u003e曾经就使用 \u003ccode\u003eAce\u003c/code\u003e用于构建它的在线编辑器（虽然现在不用了）。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eAce\u003c/code\u003e在\u003ca target=\"_blank\" href=\"https://github.com/ajaxorg/ace\"\u003eGithub\u003c/a\u003e上只是存放了其项目，更多详细的介绍，例如如何开始以及 \u003ccode\u003eAPI\u003c/code\u003e等文档都放在它的\u003ca target=\"_blank\" href=\"https://ace.c9.io\"\u003e官网上\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e温馨提示：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e如果你打开其 \u003ca target=\"_blank\" href=\"https://ace.c9.io\"\u003e官网\u003c/a\u003e发现加载失败，或者页面不全，那么可能需要你翻墙重新请求一遍才行，因为虽然其官网的大部分资源墙内就能访问，但一些脚本文件，例如 \u003ccode\u003ejQuery\u003c/code\u003e是墙外的，所以可能出现数据加载失败的情况。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAce\u003c/code\u003e的文档读起来可能有些困难，这里的困难并不是指其文档都是英文的，如果只是英文阅读障碍，在线翻译一下也就\u003ccode\u003eok\u003c/code\u003e了，而是说你可能不知道该从哪里阅读，不知从何下手，这也是大部分开源项目的通病，这个问题可能就需要你多翻看几遍，找到文档编写规律后再阅读应该就容易多了。\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/blockquote\u003e\n\u003chr\u003e\n\u003ch3 class=\"heading\"\u003e引入 \u003ccode\u003eAce\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003e本文所要实现的编辑器虽然是基于 \u003ccode\u003eAce\u003c/code\u003e，但是没有直接使用 \u003ccode\u003eAce\u003c/code\u003e，而是使用了其一个封装插件 \u003ca target=\"_blank\" href=\"https://github.com/thlorenz/brace\"\u003ebrace\u003c/a\u003e，至于为什么不直接使用 \u003ccode\u003eAce\u003c/code\u003e，\u003ca target=\"_blank\" href=\"https://github.com/thlorenz/brace\"\u003ebrace\u003c/a\u003e项目也有说明，可以自己去看看，另外，由于本文所要实现的编辑器还是基于 \u003ccode\u003eReact\u003c/code\u003e的，所以为了使用方便，需要对 \u003ccode\u003eAce\u003c/code\u003e进行一层封装，将其包裹成一个 \u003ccode\u003eReact\u003c/code\u003e组件。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eGithub\u003c/code\u003e上也有人做过这种事情了，例如 \u003ca target=\"_blank\" href=\"https://github.com/securingsincity/react-ace\"\u003ereact-ace\u003c/a\u003e，由于此项目规模较大，\u003ccode\u003eAPI\u003c/code\u003e和方法很多，此项目只是封装了其部分功能，我看了下\u003ca target=\"_blank\" href=\"https://github.com/securingsincity/react-ace\"\u003ereact-ace\u003c/a\u003e的封装代码，可能它的封装无法满足我的需求，所以我就抽出了其中一部分代码，并进行了稍微的修改。\u003c/p\u003e\n\u003cp\u003e另外，本文所要实现的编辑器是间接基于 \u003ccode\u003eAce\u003c/code\u003e，直接基于 \u003ccode\u003ebrace\u003c/code\u003e的，所以所要安装的包是 \u003ca target=\"_blank\" href=\"https://github.com/thlorenz/brace\"\u003ebrace\u003c/a\u003e:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003enpm i brace -S\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e基本的 \u003ccode\u003eDOM\u003c/code\u003e结构和 \u003ca target=\"_blank\" href=\"https://juejin.im/post/5a40792a6fb9a0450671da48\"\u003e手把手教你用 100行代码实现基于 react的 markdown输入+即时预览在线编辑器（一）\u003c/a\u003e是差不多的，只不过在左侧输入容器的子元素由原来具有 \u003ccode\u003econtentEditable=\"plaintext-only\"\u003c/code\u003e属性的 \u003ccode\u003ediv\u003c/code\u003e换成了 \u003ccode\u003eAce\u003c/code\u003e组件：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u0026lt;AceEditor\n  mode=\u003cspan class=\"hljs-string\"\u003e\"markdown\"\u003c/span\u003e\n  theme=\u003cspan class=\"hljs-string\"\u003e\"github\"\u003c/span\u003e\n  wrapEnabled={\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e}\n  tabSize={\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e}\n  fontSize={\u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e}\n  showGutter={\u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e}\n  height={state.aceBoxH + \u003cspan class=\"hljs-string\"\u003e'px'\u003c/span\u003e}\n  width={\u003cspan class=\"hljs-string\"\u003e'100%'\u003c/span\u003e}\n  debounceChangePeriod={\u003cspan class=\"hljs-number\"\u003e60\u003c/span\u003e}\n  onChange={\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.onContentChange}\n  onScroll={\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.containerScroll.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e)}\n  name=\u003cspan class=\"hljs-string\"\u003e\"aceEditorMain\"\u003c/span\u003e\n  editorProps={{\u003cspan class=\"hljs-attr\"\u003e$blockScrolling\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e}}/\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e上述 \u003ccode\u003e\u0026lt;AceEditor/\u0026gt;\u003c/code\u003e的组件属性都是能在 \u003ca target=\"_blank\" href=\"https://ace.c9.io\"\u003eAce\u003c/a\u003e文档里找到的，这里只简单说明一下：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003emode\u003c/code\u003e：编辑器的整体模式或样式，这里取值为 \u003ccode\u003emarkdown\u003c/code\u003e，表明需要用这个编辑器来输入 \u003ccode\u003emarkdown\u003c/code\u003e文本，这样编辑器就会进行相应的初始设置。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etheme\u003c/code\u003e：编辑器主题，这里使用了 \u003ccode\u003egithub\u003c/code\u003e这个主题。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ewrapEnabled\u003c/code\u003e：当输入的一句文本比一行的长度要长时，是否允许换行。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etabSize\u003c/code\u003e：使用几个空格来表示表示一次 \u003ccode\u003eTab\u003c/code\u003e按键。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efontSize\u003c/code\u003e：文本的字体大小\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eheight\u003c/code\u003e：编辑器的高度，单位为 \u003ccode\u003epx\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ewidth\u003c/code\u003e：编辑器的宽度，单位为 \u003ccode\u003epx\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edebounceChangePeriod\u003c/code\u003e：多长时间对输入响应一次，单位为 \u003ccode\u003ems\u003c/code\u003e，类似于节流。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eonChange\u003c/code\u003e：文本框内容发生变化时的回调函数。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eonScroll\u003c/code\u003e：文本框内容发生滚动时的回调函数。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ename\u003c/code\u003e：编辑器的 \u003ccode\u003eid\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eeditorProps\u003c/code\u003e：当在文本框内输入内容时，是否需要滚动条进行响应的滚动定位。\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/blockquote\u003e\n\u003chr\u003e\n\u003ch3 class=\"heading\"\u003e功能实现\u003c/h3\u003e\n\u003cp\u003e大部分的功能点与\u003ca target=\"_blank\" href=\"https://juejin.im/post/5a40792a6fb9a0450671da48\"\u003e手把手教你用 100行代码实现基于 react的 markdown 输入+即时预览在线编辑器（一）\u003c/a\u003e这篇文档的类似，不过由于使用 \u003ccode\u003eAce\u003c/code\u003e与 直接的 \u003ccode\u003econtentEditable=\"plaintext-only\"\u003c/code\u003e属性的 \u003ccode\u003ediv\u003c/code\u003e还是存在很多不同的地方，需要对这些地方进行相应的调整。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eonContentChange\u003c/code\u003e方法\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e当文本内容发生变化时，\u003ccode\u003e\u0026lt;AceEditor/\u0026gt;\u003c/code\u003e组件的回调函数 \u003ccode\u003eonChange\u003c/code\u003e被触发，其会返回一个值，此值就是当前编辑器的完整文本内容字符串，所以直接接收即可，无需做其他的额外操作：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003eonContentChange(value) {\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.previewWrap.innerHTML = marked(value)\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e获取 \u003ccode\u003e\u0026lt;AceEditor/\u0026gt;\u003c/code\u003e组件内容高度以及\u003ccode\u003escrollTop\u003c/code\u003e值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003eAce\u003c/code\u003e使用了一种 \u003ccode\u003eVirtualRenderer\u003c/code\u003e的技术，你可能无法直接使用 \u003ccode\u003eDOM\u003c/code\u003e来获取编辑器本身的某些属性和方法，需要间接地调用 \u003ccode\u003eAce\u003c/code\u003e暴露出来的方法才行。\u003c/p\u003e\n\u003cp\u003e例如，你需要这样获取编辑器文本内容的高度：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003eeditorHandler.getSession().getScreenLength()*editorHandler.renderer.lineHeight\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003eeditorHandler\u003c/code\u003e是编辑器的一个 \u003ccode\u003eHandler\u003c/code\u003e，可以使用此 \u003ccode\u003ehandler\u003c/code\u003e来完成一些对编辑器的操作，\u003ccode\u003egetScreenLength()\u003c/code\u003e方法获取到编辑器内当前所有文本的总行数，这个行数是包括换行的，\u003ccode\u003elineHeight\u003c/code\u003e是每行文本的高度，二者相乘即得到内容的总高度，我没看到 \u003ccode\u003eAce\u003c/code\u003e直接暴露出获取内容总高度的方法，所以使用了这种操作。\u003c/p\u003e\n\u003cp\u003e如果你想获取编辑器滚动的高度 \u003ccode\u003escrollTop\u003c/code\u003e,那么就需要使用下面这个方法：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003eeditorHandler.renderer.getScrollTop()\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e或者直接调用属性也可以：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003eeditorHandler.renderer.scrollTop()\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e其中，\u003ccode\u003eeditorHandler\u003c/code\u003e这个 \u003ccode\u003eHandler\u003c/code\u003e我再封装 \u003ccode\u003eAce\u003c/code\u003e的时候，已经暴露出来了，需要的时候导出即可：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e AceEditor, {editorHandler} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../../Component/AceEditor/index'\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003chr\u003e\n\u003ch3 class=\"heading\"\u003e代码高亮\u003c/h3\u003e\n\u003cp\u003e在 \u003ccode\u003e\u0026lt;AceEditor/\u0026gt;\u003c/code\u003e编辑器内输入的文本高亮，是由编辑器组件的两个属性控制的：\u003ccode\u003emode\u003c/code\u003e和 \u003ccode\u003etheme\u003c/code\u003e，当你指定了这两个属性时，你在编辑器内输入的文本，无论是 \u003ccode\u003emarkdown\u003c/code\u003e标记还是代码段就都已经自动高亮的了，例如，在编辑器内输入下述代码段，编辑器会自动对其进行高亮处理：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n```css\n#container {\n  display: flex;\n  border: 1px solid #bbb;\n}\n.left, .right {\n  flex: 1;\n  height: 100%;\n  word-wrap: break-word;\n  overflow-y: scroll;\n}\n```\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e输入效果示例如下：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/160933b01ce8e265?w=445\u0026amp;h=237\u0026amp;f=png\u0026amp;s=3605\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e至于预览内容的高亮，依旧是借助 \u003ca target=\"_blank\" href=\"https://github.com/isagalaev/highlight.js\"\u003ehighlight.js\u003c/a\u003e，不过这个东西感觉内置的样式有点问题（也可能是我使用方法有问题），所以我只是使用了其 \u003ccode\u003ejs\u003c/code\u003e脚本，用于让 \u003ccode\u003emarked\u003c/code\u003e输出正确格式的 \u003ccode\u003ehtml\u003c/code\u003e，至于样式，我没有用 \u003ccode\u003ehtghlight.js\u003c/code\u003e内置的，而是参照其样式自己修改了一份 \u003ccode\u003ejs-highlight.css\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e这样做的好处是，既可以去除冗余的代码减小代码体积，同时也能自定义自己喜欢的颜色主题。\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 class=\"heading\"\u003eCodeMirror版本\u003c/h2\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://github.com/codemirror/CodeMirror\"\u003eCodeMirror\u003c/a\u003e 和 \u003ca target=\"_blank\" href=\"https://github.com/ajaxorg/ace\"\u003eAce\u003c/a\u003e 都是开源在线编辑器中的佼佼者，在 \u003ccode\u003eGithub\u003c/code\u003e上的星数也都不相上下，不过据我至今的观测来看，无论是调试还是文档方面，\u003ccode\u003eCodeMirror\u003c/code\u003e都比 \u003ccode\u003eAce\u003c/code\u003e更加友好得多，如果你对着 \u003ccode\u003eCodeMirror\u003c/code\u003e的文档无从下手的话，那么建议你先去看看 \u003ccode\u003eAce\u003c/code\u003e的文档，然后再回来看 \u003ccode\u003eCodeMirror\u003c/code\u003e的，你就会发现，二者的入手体验真的不是在一个层次的。\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 class=\"heading\"\u003e引入 \u003ccode\u003eCodeMirror\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eCodeMirror\u003c/code\u003e的文档基本上也都是放在其\u003ca target=\"_blank\" href=\"http://codemirror.net/\"\u003e官网\u003c/a\u003e上，\u003ca target=\"_blank\" href=\"https://github.com/codemirror/CodeMirror\"\u003eGithub\u003c/a\u003e上存放了其源码以及各种 \u003ccode\u003eDemo\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e下载完成后，同样的，由于本文所要实现的编辑器是基于 \u003ccode\u003eReact\u003c/code\u003e，所以最好将其封装成一个 \u003ccode\u003eReact\u003c/code\u003e组件，\u003ca target=\"_blank\" href=\"https://github.com/JedWatson/react-codemirror\"\u003eGithub\u003c/a\u003e上也已经有人做过这个事了，不过和上述 \u003ca target=\"_blank\" href=\"https://github.com/securingsincity/react-ace\"\u003ereact-ace\u003c/a\u003e的原因类似，\u003ca target=\"_blank\" href=\"https://github.com/JedWatson/react-codemirror\"\u003ereact-codemirror\u003c/a\u003e这个项目也只是封装了部分常用的 \u003ccode\u003eAPI\u003c/code\u003e和功能，直接拿来用也无法满足我的要求，所以我就在其基础上进行了稍微的修改。\u003c/p\u003e\n\u003cp\u003e封装完成后的 \u003ccode\u003eCodeMirror\u003c/code\u003e组件的使用，可以类似于下面这种：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs jsx\" lang=\"jsx\"\u003e\u0026lt;CodemirrorEditor\n  ref=\u003cspan class=\"hljs-string\"\u003e\"editor\"\u003c/span\u003e\n  onScroll={\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.containerScroll.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e)}\n  onChange={\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.updateCode.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e)}\n  options={\n    \u003cspan class=\"hljs-attr\"\u003elineNumbers\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003etheme\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'solarized'\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003etabSize\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003elineWrapping\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003ereadOnly\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003emode\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'markdown'\u003c/span\u003e,\n    \u003cspan class=\"hljs-comment\"\u003e// 是否自动闭合标签，基于 codemirror/addon/edit/closetag\u003c/span\u003e\n    autoCloseTags: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n    \u003cspan class=\"hljs-comment\"\u003e// 自定义快捷键\u003c/span\u003e\n    extraKeys: \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.setExtraKeys()\n  }\n  autoFocus={\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e}/\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这些属性所代表的含义都可以在 \u003ca target=\"_blank\" href=\"http://codemirror.net/\"\u003eCodeMirror\u003c/a\u003e的官网上找到，这里只稍微说明下。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eref\u003c/code\u003e: 用于方便组件内部对 \u003ccode\u003eCodeMirror\u003c/code\u003e容器的引用\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eonScroll\u003c/code\u003e: 编辑器内容滚动时触发的回调\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eonChange\u003c/code\u003e: 编辑器内容发生变化时触发的回调\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eoptions\u003c/code\u003e: 一些配置参数，例如是否显示行数、编辑器主题、缩进空格数、是否允许软换行、是否只读、文本内容的模式、是否自动闭合标签、自定义快捷键等\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eautoFocus\u003c/code\u003e: 是否自动聚焦\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/blockquote\u003e\n\u003chr\u003e\n\u003ch3 class=\"heading\"\u003e功能实现\u003c/h3\u003e\n\u003cp\u003e大部分的功能点与上节\u003ccode\u003eAce\u003c/code\u003e的类似，不过由于代码逻辑不同，所以需要细微调整。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003econtainerScroll\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e编辑器内容滚动时触发的回调函数，调用 \u003ccode\u003eonScroll\u003c/code\u003e方法，此方法返回了当前编辑器的相关位置参数，可以直接获取到滚动条的 \u003ccode\u003escrollTop\u003c/code\u003e值，可以借助 \u003ccode\u003eCodeMirror\u003c/code\u003e组件暴露出来的编辑器句柄 \u003ccode\u003eCodemirrorHandler\u003c/code\u003e，通过调用 \u003ccode\u003escrollTo\u003c/code\u003e函数来控制滚动条的滚动。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003eCodemirrorHandler.scrollTo(\u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.previewContainer.scrollTop / state.scale)\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eupdateCode\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e当编辑器内容发生变化出触发的回调函数，可以直接获得编辑器输入的文本内容，对此内容调用 \u003ccode\u003emarked\u003c/code\u003e方法将其编译成对应的 \u003ccode\u003eHTML\u003c/code\u003e。\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 class=\"heading\"\u003e代码高亮\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eCodeMirror\u003c/code\u003e也可以对输入的内容进行高亮处理，\u003ccode\u003eCodeMirror\u003c/code\u003e组件的 \u003ccode\u003emode\u003c/code\u003e属性用于指定编辑器的模式，当指定此值为 \u003ccode\u003emarkdown\u003c/code\u003e时，编辑器就会对输入的内容按照 \u003ccode\u003emarkdown\u003c/code\u003e的语法来进行高亮处理，例如添加 \u003ccode\u003ecss\u003c/code\u003e类名等，除此之外，还需要配合样式才能达到视觉上的效果。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eCodeMirror\u003c/code\u003e内置了很多主题样式，你可以根据自己的需求进行选择：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/160933be629b68a7?w=257\u0026amp;h=344\u0026amp;f=png\u0026amp;s=12312\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e我这里选择了 \u003ccode\u003esolarized\u003c/code\u003e这个主题，所以需要将此主题对应的样式文件引入：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'codemirror/theme/solarized.css'\u003c/span\u003e)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e除此之外，你还需要为 \u003ccode\u003eCodeMirror\u003c/code\u003e组件显式配置这个主题才能生效：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003etheme: \u003cspan class=\"hljs-string\"\u003e'solarized'\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e输入高亮的效果如下：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/160933c0ee89e715?w=325\u0026amp;h=268\u0026amp;f=png\u0026amp;s=3783\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e至于预览高亮样式，操作与上节 \u003ccode\u003eAce\u003c/code\u003e的相同，同样是借助 \u003ccode\u003ehighlight.js\u003c/code\u003e，并且自定义了一份样式表，用于预览高亮的显示效果,预览效果如下：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/160933c41f0e2a35?w=304\u0026amp;h=194\u0026amp;f=png\u0026amp;s=2844\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 class=\"heading\"\u003e搜索功能\u003c/h3\u003e\n\u003cp\u003e在使用 \u003ccode\u003eGithub\u003c/code\u003e在线编辑器的时候，会发现 \u003ccode\u003eGithub\u003c/code\u003e的编辑器是具备搜索功能的，就像下面这样：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/160933c71ce2966a?w=604\u0026amp;h=251\u0026amp;f=png\u0026amp;s=15555\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eAce\u003c/code\u003e和 \u003ccode\u003eCodeMirror\u003c/code\u003e都是支持此功能的，不过 \u003ccode\u003eAce\u003c/code\u003e的文档实在是不太友好，也不好调试，各种问题，所以我没有深入研究，但是 \u003ccode\u003eCodeMirror\u003c/code\u003e就很好，我看了下 \u003ccode\u003eCodeMirror\u003c/code\u003e文档中关于编辑器内搜索的部分，发现实现起来没什么难度，所以就花了点时间弄清楚其原理，然后给实现了一下。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eCodeMirror\u003c/code\u003e没有预定义搜索功能，不过其代码包中有搜索功能的 \u003ccode\u003eAddons\u003c/code\u003e包，只要将 \u003ccode\u003esearch.js\u003c/code\u003e这个 \u003ccode\u003eaddon\u003c/code\u003e包引入，就可以轻松实现搜索功能了，除了搜索 \u003ccode\u003eaddon\u003c/code\u003e包，还有其他很多相关功能包，可根据实际需求进行增添：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/160933c8cf21192c?w=259\u0026amp;h=369\u0026amp;f=png\u0026amp;s=9603\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eAddons\u003c/code\u003e这个东西我觉得很好，这样一来对于一些可有可无的功能也就不必纠结了，如果不想用那个功能，就不引用相关 \u003ccode\u003eaddon\u003c/code\u003e包就行，减小打包后的代码体积，如果想用了就加上，很方便。\u003c/p\u003e\n\u003cp\u003e想要实现编辑器内搜索功能，首先你需要将搜索的功能包引入：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'codemirror/addon/search/search'\u003c/span\u003e)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这样，编辑器就具备搜索功能了，不过还需要相应的样式，才能实现视觉上的统一，此功能包基于另外一个功能包 \u003ccode\u003edialog.js\u003c/code\u003e，搜索框就是此功能包实现的，所以需要引入此功能的样式：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'codemirror/addon/dialog/dialog.css'\u003c/span\u003e)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e想要调出搜索框，只需要使用快捷键 \u003ccode\u003eCtrl+F(Win)\u003c/code\u003e或者 \u003ccode\u003eCmd+F(Mac)\u003c/code\u003e，然后在搜索框内输入要搜索的字符，按下 \u003ccode\u003eEnter\u003c/code\u003e就行，和在 \u003ccode\u003eGithub\u003c/code\u003e在线编辑器内搜索功能的使用时一样的，并且搜索结果高亮显示。\u003c/p\u003e\n\u003cp\u003e如果你想跳到下一个搜索结果，只需要 \u003ccode\u003eCtrl-G(Win)\u003c/code\u003e或者 \u003ccode\u003eCmd-G(Mac)\u003c/code\u003e，如果想跳到上一个搜索结果，只需要 \u003ccode\u003eShift-Ctrl-G(PC)\u003c/code\u003e或者\u003ccode\u003eShift-Cmd-G(Mac)\u003c/code\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 class=\"heading\"\u003e自动闭合标签\u003c/h2\u003e\n\u003cp\u003e当你在写 \u003ccode\u003eHTML\u003c/code\u003e结构的时候，有些编辑器会帮你自动闭合标签，例如输入 \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e，当输入第 5个字符 \u003ccode\u003e\u0026gt;\u003c/code\u003e的时候，编辑器会自动补全 \u003ccode\u003e\u0026lt;/div\u0026gt;\u003c/code\u003e，\u003ccode\u003eCodeMirror\u003c/code\u003e也有个这样的功能包：\u003ccode\u003eclosetag\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'codemirror/addon/edit/closetag'\u003c/span\u003e)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e当你引入此功能包，在编辑器内输入 \u003ccode\u003eHTML\u003c/code\u003e代码段的时候，输入 \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e，当键入最后一个字符 \u003ccode\u003e\u0026gt;\u003c/code\u003e的时候，你就会看到……编辑器没反应，没有帮你自动补全。\u003c/p\u003e\n\u003cp\u003e仔细看了下文档，发现原来还需要进行显示配置才行：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003eautoCloseTags: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e配置好此属性后，就可以自动补全了。\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 class=\"heading\"\u003e全屏显示\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eCodeMirror\u003c/code\u003e也有全屏显示的功能包：\u003ccode\u003efullscreen.js\u003c/code\u003e：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'codemirror/addon/display/fullscreen'\u003c/span\u003e)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e使用此功能时，需要引入对应的样式文件：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'codemirror/addon/display/fullscreen.css'\u003c/span\u003e)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e文档上说得很清楚，想调起此功能，只需要将光标定位在编辑器内，然后按下 \u003ccode\u003eF11\u003c/code\u003e键，你就会看到……确实是全屏了，\u003ccode\u003eBut\u003c/code\u003e，你再仔细看看就会发现，你按的这个 \u003ccode\u003eF11\u003c/code\u003e调起的其实是浏览器的快捷键而非是编辑器的快捷键，因为 \u003ccode\u003ejs-DOM\u003c/code\u003e再厉害，翻江倒海的能力也就在浏览器内部，怎么可能会把浏览器包括标签、选项卡、边栏在内的 \u003ccode\u003eNative\u003c/code\u003e部件都给隐藏了？而且这种全屏，只是除去了浏览器无关部件，文档内容相应放大，布局之类的没有任何变化，并不是 \u003ccode\u003efullscreen.js\u003c/code\u003e所要实现的功能。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003efullscreen.js\u003c/code\u003e所实现的功能是隐藏掉浏览器页面中除了编辑器之外所有的元素，让编辑器占满整个页面。\u003c/p\u003e\n\u003cp\u003e想要实现这种效果，你需要自定义快捷键，用于调起功能，并且拦截触发浏览器自带的全屏功能，自定义快捷键也是通过配置来实现的，例如如果你想要当按下 \u003ccode\u003eF11\u003c/code\u003e的时候，调起全屏功能，并且按 \u003ccode\u003eEsc\u003c/code\u003e的时候退出全屏：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003eextraKeys: {\n  \u003cspan class=\"hljs-string\"\u003e'F11'\u003c/span\u003e(cm) {\n      \u003cspan class=\"hljs-comment\"\u003e// 全屏\u003c/span\u003e\n      cm.setOption(\u003cspan class=\"hljs-string\"\u003e'fullScreen'\u003c/span\u003e, !cm.getOption(\u003cspan class=\"hljs-string\"\u003e'fullScreen'\u003c/span\u003e))\n    },\n    \u003cspan class=\"hljs-string\"\u003e'Esc'\u003c/span\u003e(cm) {\n      \u003cspan class=\"hljs-comment\"\u003e// 退出全屏\u003c/span\u003e\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (cm.getOption(\u003cspan class=\"hljs-string\"\u003e'fullScreen'\u003c/span\u003e)) cm.setOption(\u003cspan class=\"hljs-string\"\u003e'fullScreen'\u003c/span\u003e, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e)\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003eextraKeys\u003c/code\u003e就是用于配置快捷键的属性，除了全屏快捷键，你还可以配置其他的快捷键，例如 \u003ca target=\"_blank\" href=\"https://juejin.im\"\u003e掘金\u003c/a\u003e 的在线编辑器就提供了一些输入 \u003ccode\u003emarkdown\u003c/code\u003e代码段的快捷键:\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/160933cb8425a8bf?w=346\u0026amp;h=396\u0026amp;f=png\u0026amp;s=11411\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e使用 \u003ccode\u003eCodeMirror\u003c/code\u003e来实现这种快捷键也没什么难度，主要是你要熟悉文档，知道调用哪些方法来达到目的。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e[\n  { \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Ctrl-H'\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003evalue\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'## '\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eoffset\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e },\n  { \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Ctrl-B'\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003evalue\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'**'\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eoffset\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e },\n  { \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Ctrl-K'\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003evalue\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'[]()'\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eoffset\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e },\n  { \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Alt-K'\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003evalue\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'``'\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eoffset\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e },\n  { \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Alt-C'\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003evalue\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'```js\\n\\n```'\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eoffset\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eoffsetLine\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e },\n  { \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Alt-I'\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003evalue\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'![alt]()'\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eoffset\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e },\n  { \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Alt-L'\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003evalue\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'* '\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eoffset\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e }\n]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003eCodeMirror\u003c/code\u003e还有其他的 \u003ccode\u003eAddons\u003c/code\u003e，并且在其 \u003ca target=\"_blank\" href=\"https://github.com/codemirror/CodeMirror/tree/master/demo\"\u003eGithub\u003c/a\u003e上也都有相应的 \u003ccode\u003eDemo\u003c/code\u003e，根据实际需求添加即可。\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 class=\"heading\"\u003e小记\u003c/h2\u003e\n\u003cp\u003e富文本编辑器一共都是前端领域的天坑，本文基于 \u003ccode\u003eAce\u003c/code\u003e和 \u003ccode\u003eCodeMirror\u003c/code\u003e实现的编辑器只是用到了这两个项目很少的一部分功能，不过也足以满足大部分的需求了。\u003c/p\u003e\n\u003cp\u003e另外，说实话，\u003ccode\u003eAce\u003c/code\u003e的文档真是不太好看，而且这个编辑器也不太好使用，无法进行精确的自定义控制，别看上面我写的内容不是太多，但是为了弄明白 \u003ccode\u003eAce\u003c/code\u003e的一些情况，从而做出一个 \u003ccode\u003eDemo\u003c/code\u003e并写出这篇文章，我最近几天工作之余的所有自由时间几乎都贡献在上面了，对开发者真的有点不太友好，相对而言，\u003ccode\u003eCodeMirror\u003c/code\u003e做得就很好，不会有这样那样的问题，就算有问题，也容易调试，最起码在我看来是这样，所以，我大概明白为何 \u003ccode\u003eGithub\u003c/code\u003e会选用 \u003ccode\u003eCodeMirror\u003c/code\u003e而不是 \u003ccode\u003eAce\u003c/code\u003e来用于构建其在线编辑器了。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e本文可运行的示例代码全都放到了 \u003ca target=\"_blank\" href=\"https://github.com/accforgit/blog-data/tree/master/%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91%E5%99%A8\"\u003eGithub\u003c/a\u003e上，有兴趣的可以看看，顺手 Star哦~\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/160933cf8e9fb3f8?w=730\u0026amp;h=655\u0026amp;f=gif\u0026amp;s=1130129\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n","buildTime":"1514378066.673","__v":0}
{"_id":{"$oid":"5a43938e51fb4902b0661529"},"id":"5a3e3cfdf265da431e16f802","author":{"$oid":"5a43938e51fb4902b066150e"},"title":"浅谈闭包和异步","meta":{"likeCount":0},"tag":["JavaScript"],"comment":[],"content":"\u003ch2\u003e把复杂的知识简单化------------------------------------------westlife\u003c/h2\u003e\u003cp\u003e引言-----你知道嫦娥为什么那么善变吗？？？ 因为chang er啊，哈哈哈哈！\u003c/p\u003e\u003cblockquote\u003e纵观js，有三座大山，这三座大山分别为--- 作用域/闭包 ， 原型,\u0026nbsp; 异步和单线程.难倒了一代又一代前端小白，小白发挥着愚公移山的精神，挠碎多少头发。伤害了多少神经元。。。。。\u003c/blockquote\u003e\u003cp\u003e今天我来说下我所理解的闭包。\u003cbr\u003e\u003c/p\u003e\u003cp\u003e首先闭包产生地条件：有两个。\u003c/p\u003e\u003cp\u003e1.函数嵌套函数\u003c/p\u003e\u003cp\u003e2.变量在外面那个函数声明，在里面呢个函数调用。\u003c/p\u003e\u003cp\u003e给大家看一个例子\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efoo\u003c/span\u003e\u003c/span\u003e(){\n    var a  = 10;\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e(){\n        a++\n    }\n}\nvar c = foo();\nc();\nc();\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003e\u003cb\u003e这就是一个简单的闭包，在浏览器调试器下可以看到分别打印了 11 12；\u003c/b\u003e\u003c/p\u003e\u003cp\u003e\u003cb\u003e那么闭包有什么作用呢？\u003c/b\u003e\u003c/p\u003e\u003cp\u003e\u003cb\u003e作用1：保存即将要被销毁的数据\u003c/b\u003e\u003c/p\u003e\u003cp\u003e举个小栗子：\u003c/p\u003e\u003cp\u003e大家记得做tab选项卡是怎么做的吗？恩，对，应该很多人都会做，无非就是找按钮的下标，找内容区域的下标，一一对应，for循环遍历按钮，点击按钮时，有事件了，所以产生了异步，for循环的i值不能对应到点击事件的i值，这里我们取巧了，给每个按钮都添加了下标，对应下标的内容区域显示出来，可是，存在一个问题，我们要在按钮组添加一个变量为index，如果我们不想要这个index，我们能不能用其他方法实现呢，答案是我们能，可以用es6的块级作用域来实现，当然我们也可以用闭包来实现\u003c/p\u003e\u003cp\u003e如图：通常实现tab选项卡的方法\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/23/160834f8c4db4145?w=721\u0026amp;h=306\u0026amp;f=png\u0026amp;s=35478\"\u003e\u003c/p\u003e\u003cp\u003e利用闭包来实现\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e(){\n    var wrap = document.querySelector(\u003cspan class=\"hljs-string\"\u003e'#wrap'\u003c/span\u003e);\n    var pic = document.querySelector(\u003cspan class=\"hljs-string\"\u003e'#wrap'\u003c/span\u003e);\n    var aBtn = wrap.getElementsByTagName(\u003cspan class=\"hljs-string\"\u003e'li'\u003c/span\u003e); //获取所有li组\n    var aPic = pic.getElementsByTagName(\u003cspan class=\"hljs-string\"\u003e'div'\u003c/span\u003e); //获取所有div组\n    \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(var i = 0;i\u0026lt;aBtn.length;i++){\n       !\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(n){\n             aBtn[n].onclick = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e(){\n             aBtn[n].style.display = \u003cspan class=\"hljs-string\"\u003e'block'\u003c/span\u003e\n            }\n        }(i)\n    }\n}()\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003e是不是很神奇，就用了一个变量i。本来变量i\u0026nbsp; \u0026nbsp;for循环了就变成9（因为事件会产生异步）；嘿嘿嘿嘿....利用闭包，巧妙了实现了i值得再次利用\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003cb\u003e作用2:保密\u003c/b\u003e\u003c/p\u003e\u003cp\u003edemo：写一段js代码，实现模拟汽车驾驶证科目一考试，做完一题，显示出答案的效果\u003c/p\u003e\u003cp\u003e想必大家思路是有的，把答案全放进一个数组里，数组的长度和题目的长度一样，数组了存放正确答案，当用户点击按钮时，在旁边显示的出此时此刻这个题目的答案，但是这样数据不安全啊，稍微懂点代码的人在控制台输出答案；怎么做到数据的保密性呢，--闭包\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e!\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e(){\nvar aBtn = document.getElementsByClassName(\u003cspan class=\"hljs-string\"\u003e'btn'\u003c/span\u003e);//获取所有按钮\nvar arr = [\u003cspan class=\"hljs-string\"\u003e\"A\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"B\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"C\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"A\"\u003c/span\u003e...........]  //存放答案数\n\n\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(var i = 0;i\u0026lt;aBtn.length;i++){\n   !\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(n){\n        aBtn[n].onclick = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e(){\n            console.log(\u003cspan class=\"hljs-string\"\u003e\"正确答案是:\"\u003c/span\u003e+arr[n])\n        }\n    }()\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003e就这样写出来了。利用匿名函数/立执行函数，数据不外泄，保密妥妥的，\u003c/p\u003e\u003cp\u003e其实说白了，闭包只是一种垃圾回收机制，有点像我们电脑中的回收站一样。变量声明要被销毁时，利用闭包可以收集即将被销毁的数据。\u003c/p\u003e\u003cp\u003e然后说下异步：上文也提及到了异步；我们的js代码是单线程执行的，从上到下执行；但是异步时候出现时。异步的执行代码会让同步的执行代码有限通过；就好比红绿灯一样，等红灯过去了我们才能通过，异步就是这样，等同步的代码执行完了才会通过，所以，同步总是优先于异步！\u003c/p\u003e\u003cp\u003e触发异步的条件\u003c/p\u003e\u003col\u003e\u003cli\u003eajax\u003c/li\u003e\u003cli\u003e事件\u003c/li\u003e\u003cli\u003esetTimeout() setInterval()\u003c/li\u003e\u003c/ol\u003e异步就将这么多，想听后续如何，请听下回分解！\u003cdiv\u003e\u003cblockquote\u003e\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; ___以上均为本人原创，如有纰漏，望能矫正。\u003c/blockquote\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003c/div\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e","buildTime":"1514377987.0831","__v":0}
{"_id":{"$oid":"5a43938e51fb4902b066152a"},"id":"5a3c73c2f265da4310488f20","author":{"$oid":"5a43938e51fb4902b0661519"},"title":"关于 vue 全家桶的四个 “最佳实践”","meta":{"likeCount":0},"tag":["Vue.js"],"comment":[],"content":"\u003ch1 class=\"heading\"\u003e前言\u003c/h1\u003e\n\u003cp\u003e在读这篇文章之前，我想先安利大家一个东西：\n\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"Vue.js 组件编码规范\" src=\"https://user-gold-cdn.xitu.io/2017/12/22/1607c25dec59cc58?w=463\u0026amp;h=463\u0026amp;f=png\u0026amp;s=30092\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e看到这副黑框眼镜，你是不是想到了什么？\u003c/p\u003e\n\u003cp\u003e对，就是它：\u003ca target=\"_blank\" href=\"https://github.com/pablohpsilva/vuejs-component-style-guide/blob/master/README-CN.md\"\u003eVue.js 组件编码规范\u003c/a\u003e。读过的同学忽略，没读过的同学有时间的话请花 20 分钟认真看看，文章的内容都是在认可这篇规范的基础上展开的。\u003c/p\u003e\n\u003cp\u003e另外，本文中的“最佳实践”（注意引号），全都是一家之言，不一定对，欢迎各路大佬讨论拍砖。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e实践一：如何分类组件\u003c/h2\u003e\n\u003cp\u003e组件（component）是 vue 最核心的概念之一，但是正因为这一概念太过宽泛，我们会在实际开发中看到各种各样的组件，对开发和维护的同学带来了很大的困惑和混乱。这里我把组件分成四类：\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003eview\u003c/h3\u003e\n\u003cp\u003e顾名思义，view 指的是页面，你也可以把它叫做 page。它的定义是：和具体的某一条路由对应，在 vue-router 配置中指定。view 是页面的容器，是其他组件的入口。它可以和 vuex store 通信，再把数据分发给普通组件。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003eglobal component\u003c/h3\u003e\n\u003cp\u003e全局组件，作为小工具而存在。例如 toast、alert 等。他的特点是具备全局性，直接嵌套在 root 下，而不从属于哪个 view。global component 也和 vuex store 通信，它单独地使用 state 中的一个 module，这个 state 中的数据专门用来控制 gloabl component 的显隐和展示，不和其他业务实体用到的 state 混淆。\u003cbr\u003e\n其他组件想修改它，可以直接派发相应的 mutation。而要监听它的变化（比如一个全局的confirm，确认之后在不同的组件中触发不同的操作），则使用全局事件总线（event bus）。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003esimple component\u003c/h3\u003e\n\u003cp\u003e简单组件。这种组件对应的是 vue 中最传统的组件概念。它的交互和数据都不多，基本上就是起到一个简单展示，拆分父组件的作用。这种组件和父组件之间通过最传统的方式进行通讯：父组件将 props 传入它，而它通过 $emit 触发事件到父组件。\u003cbr\u003e\n简单组件内部是不写什么业务逻辑的，它可以说是生活不能自理，要展示什么就等着父组件传入，要干什么就 $emit 事件出去让父组件干，父组件够操心的。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003ecomplex component\u003c/h3\u003e\n\u003cp\u003e复杂组件。这种组件的特点是，内部包含有很多交互逻辑，常常需要访问接口。另外，展示的数据也往往比较多。如下图。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/22/1607d5d47b481aec?w=1202\u0026amp;h=940\u0026amp;f=png\u0026amp;s=236701\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n图中红框内部的就是一个复杂组件的实例。它是一个大列表的列表项，展示的数据很多，而且点击左下角的几个 button，还会弹出相应的弹窗，弹窗内有复杂的表单需要填写提交···逻辑可以说是相当复杂了。如果这时我们还拘泥于简单组件的那种通信方式，衣来伸手饭来张口，啥事儿不干，那么：\u003cbr\u003e\n1.所有的 props 都由父组件一一传入，如果有十几个乃至几十个要展示的数据，那么父组件 \u003ccode\u003e\u0026lt;template\u0026gt;\u003c/code\u003e 内的代码可不得上天了？\u003cbr\u003e\n2.所有的业务流程都要 $emit 出去要父组件处理，那么父组件 \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e 内的代码可不得上天了？\u003cbr\u003e\n所以，对于这种复杂组件，我们应该允许它有一定的“自主权”。可以跳过父组件，自行和 vuex 通信，获取一下 state，派发一下 mutation 和 action，不是很开心么。\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e我画了一张图来说明上面这四种 component 的关系，希望能帮助大家更好理解。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/22/1607d897d070780a?w=780\u0026amp;h=542\u0026amp;f=png\u0026amp;s=35572\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e在区分了这四种 component 后，我们在编码时就能做到心里有数，现在在写的组件，到底属于哪一类？每一类以特定的方式编写和交互，逻辑上就会清晰很多。\n使用 vue-cli 构建的项目中都会有一个目录叫做 component，以前是一股脑往里塞，现在可以在此基础上再设置几个子目录，放置不同类型的组件。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e实践二：如何优雅地修改 props\u003c/h2\u003e\n\u003cp\u003e先来看一个栗子🌰\u003cbr\u003e\n假设有一个模态对话框的组件。父组件为了能够打开模态框，给模态框传入了一个控制其显隐的 props，命名为 visible，type 为 Boolean，绑定模态框外层的 v-if 指令。那么，问题来了，如果我们点击了模态框内部的关闭按钮，关闭自身，应该怎么写？\u003cbr\u003e\n当然，最传统的方式自然还是模态框抛出事件，父组件中设置监听，然后修改值。但这种方式无疑有很强的侵入性，无端增加了很多的代码量。关闭按钮在模态框内部，关闭自己是我自己的事儿，能不能不让父组件管这些？\u003cbr\u003e\n有同学说了，直接在模态框内部修改 visible 啊。\u003ccode\u003ethis.visible = false\u003c/code\u003e ，不行吗？\u003cbr\u003e\n还真不行。如果这么干，你会看到以下一堆报错：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e[Vue warn]: Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003evue 很明确地告诉你了，作为子组件，你要安分守己，不许随便修改老爹传给你的 props。\u003cbr\u003e\n那么我们应该怎么办？\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e方法一\u003c/h3\u003e\n\u003cp\u003e我们思考一下，如果不允许修改 props 的值，那我们修改 porps 的······属性如何？\u003cbr\u003e\n事实证明，是可以的。\u003cbr\u003e\n我们可以把上面 visible 的 type 设为 Object，模态框的显隐决定于 visible.value。当模态框想要关闭自身时，只需 \u003ccode\u003ethis.visible.value = false\u003c/code\u003e 即可。\n这种方式看起来相当方便，但实际是一种投机取巧的方法。上面安利的 Vue.js 组件编码规范中明确有一条规范，就是 props 原子化，也就是说，props 里的字段必须是简单的 String，Number 或 Boolean。这么做的原因是：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e使得组件 API 清晰直观。\u003c/li\u003e\n\u003cli\u003e只使用原始类型和函数作为 props 使得组件的 API 更接近于 HTML(5) 原生元素。\u003c/li\u003e\n\u003cli\u003e其它开发者更好的理解每一个 prop 的含义、作用。\u003c/li\u003e\n\u003cli\u003e传递过于复杂的对象使得我们不能够清楚的知道哪些属性或方法被自定义组件使用，这使得代码难以重构和维护。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e所以，我们把 visible 改为 Object，本来就是违反规范的。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e方法二\u003c/h3\u003e\n\u003cp\u003evue 中有种已经存在的机制，和现有需求很像，这就是 v-model。在表单中，每一个 input，就像一个子组件。在外层通过 v-model 绑定的值可以在 input 中回显，而 input 本身的值也能改变。\u003cbr\u003e\n事实上，v-model 仅仅是一个语法糖，\u003ccode\u003ev-model=\"xxx\"\u003c/code\u003e,就相当于 \u003ccode\u003e:value=\"xxx\" @input=\"val=\u0026gt;xxx=val\"\u003c/code\u003e。那么，我们就可以利用 v-model 的这种特性来实现我们的需求。我们只需要在模态框内部抛出一个 input 事件 \u003ccode\u003ethis.$emit('input', false)\u003c/code\u003e,就能关闭自身了。\u003cbr\u003e\n这种方式比较简洁，也不违反规范，但是容易让人困惑，以为这里是要进行什么表单操作。\u003cbr\u003e\n我们还有没有什么更好的方式呢？\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e方法三\u003c/h3\u003e\n\u003cp\u003e如果你是从大版本为 1 时就开始接触 vue，那你可以知道一个修饰符，叫做.sync。如果你是从 2.0 开始接触的，则很可能不熟悉它。这是因为，vue 在 2.0 版本时把它删除了，不过好在， 2.3 版本之后，\u003ca target=\"_blank\" href=\"https://cn.vuejs.org/v2/guide/components.html#sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6\"\u003e它又回来了\u003c/a\u003e。\u003cbr\u003e\n这个修饰符简直就是为我们这个需求量身定制的。它本身是一个和 v-model 类似的语法糖，我们要做的，仅仅是在组件内部需要改动值的地方，抛出一个 update 事件。\u003ccode\u003ethis.$emit('update:foo', newValue)\u003c/code\u003e。既不违反规范，也足够清晰，可以说是最佳的解决方案了。唯一的不足之处，就是对版本有一点要求。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e实践三：如何封装请求接口\u003c/h2\u003e\n\u003cp\u003e数据是 SPA 的核心，而数据的来源都是接口。如何优雅、高效地通过接口请求数据，是开发者必须要关心的问题。在实践中，我是这样封装接口的：\n\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/23/160812ea96ca6815?w=307\u0026amp;h=599\u0026amp;f=png\u0026amp;s=18405\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n从高层到底层，依次说明。\u003cbr\u003e\n第一层就是组件。\u003cbr\u003e\n第二层则是 vuex 中的 action，我们在组件中调用 action，基本操作。\u003cbr\u003e\n第三层是 api。在这里，我们预先定义了每一个接口。包括接口的 url、type、content-type，以及写死的请求参数。在 action 中，我们调用 api 请求接口。\u003cbr\u003e\n第四层是 request，这是我们请求的公共方法，作用就是对特定的 http client。   进行封装，实现一套统一的接口请求——处理流程。\u003cbr\u003e\n第五层则是以 axios 为代表的各种 http client。\u003cbr\u003e\n我们主要进行编码的是第三层和第四层，也就是 api 和 request。api 的编写没有什么难点，主要谈谈 request 的代码。这部分代码，我们要关心以下几个方面。\u003cp\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eloading 处理。当请求时间比较长时，要跳出全局的 loading 让用户知晓。\u003c/li\u003e\n\u003cli\u003e错误处理。有两种错误，第一种是 http 请求直接返回错误码。第二种，虽然请求的返回值是 200，但是返回结果中提示错误。比如返回的 json 中 \u003ccode\u003esuccess: false\u003c/code\u003e。对于这两种错误，我们都要捕获并处理。\u003c/li\u003e\n\u003cli\u003eapi 一致性处理。http client 接受的参数是有讲究的，以 axios为例，get 请求的请求参数为 params，而 post 请求的参数则为 data。对于这种差异，request 这层需要将其抹平，api 层不需要在定义接口时关心这些。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e下面是示例代码，可供参考。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e  \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (opt.method === \u003cspan class=\"hljs-string\"\u003e'post'\u003c/span\u003e) {\n    axiosOpt.data = opt.payload\n  } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (opt.method === \u003cspan class=\"hljs-string\"\u003e'get'\u003c/span\u003e) {\n    axiosOpt.params = opt.payload\n  }\n  \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (opt.withFile) {\n    Object.assign(axiosOpt, { headers: {\n      \u003cspan class=\"hljs-string\"\u003e'Content-Type'\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'multipart/form-data'\u003c/span\u003e\n    }})\n  }\n\n  // 全局请求的 loading，当请求 300 ms 后还没返回，才会出现 loading\n  const timer = \u003cspan class=\"hljs-built_in\"\u003eset\u003c/span\u003eTimeout(() =\u0026gt; {\n    store.dispatch(\u003cspan class=\"hljs-string\"\u003e'showLoading'\u003c/span\u003e, {\n      text: \u003cspan class=\"hljs-string\"\u003e'加载数据中'\u003c/span\u003e\n    })\n  }, 300)\n\n  try {\n    // 开始请求\n    const result = await axios(axiosOpt)\n    // 如果 300 ms 还没到，就取消定时器\n    clearTimeout(timer)\n    store.dispatch(\u003cspan class=\"hljs-string\"\u003e'closeLoading'\u003c/span\u003e)\n\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (result.status === 200 \u0026amp;\u0026amp; result.statusText === \u003cspan class=\"hljs-string\"\u003e'OK'\u003c/span\u003e) {\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (result.data.success) {\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e result.data.results || \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\n      } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n        // 请求失败的 toast\n        store.dispatch(\u003cspan class=\"hljs-string\"\u003e'showAlert'\u003c/span\u003e, {\n          \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'error'\u003c/span\u003e,\n          text: `请求失败\u003cspan class=\"hljs-variable\"\u003e${result.data.message ? `,信息：${result.data.message}\u003c/span\u003e`: \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e}`\n        })\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\n      }\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n      \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\n    }\n  } catch(e) {\n    clearInterval(timer)\n    // 请求失败的 toast\n    store.dispatch(\u003cspan class=\"hljs-string\"\u003e'closeLoading'\u003c/span\u003e)\n    store.dispatch(\u003cspan class=\"hljs-string\"\u003e'showAlert'\u003c/span\u003e, {\n      \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'error'\u003c/span\u003e,\n      text: \u003cspan class=\"hljs-string\"\u003e'请求失败'\u003c/span\u003e\n    })\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\n  }\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e实践四：如何决定请求数据的时机\u003c/h2\u003e\n\u003cp\u003eSPA中，每一个 view 中的都有很多数据是需要通过接口请求获得的，如果没有获得，页面中就会有很多空白。上面，我们讨论了如何封装好接口请求，下一步就是决定什么时候请求初始化数据，即，代码在哪里写的问题。实践下来，有两个时机是比较理想的。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003ebeforeRouteEnter/Update\u003c/h3\u003e\n\u003cp\u003evue-router 提供了以上两个生命周期钩子，分别会在进入路由和路由改变时触发。这两个钩子是写的 view 中的。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003erouter.beforeEach\u003c/h3\u003e\n\u003cp\u003evue-router还提供了一个全局性的 beforeEach 方法，任何一个路由改变时，都会被这个方法拦截，我们可以在这个方法中加入我们自己的代码，做统一处理。比如，对于所有 view 初始化请求的 action，我们可以以特定的名称命名，如以 _init 作为后缀等。在 beforeEach 方法内，我们对当前 view 对应的 store 进行监听，查找到其中以 _init 命名的 action 并派发。\u003cbr\u003e\n以上两种方式各有特点。\u003cbr\u003e\n对于前者，优点是数据获取的代码和具体的 view 是绑定在一起的，我们可以在 view 内部就清晰地看到数据获取的流程。缺点是，每增加一个页面，都要在其内部写一堆初始化代码，增加了代码量。\n对于后者。优点是，代码统一且规整，使用了配置的方式，写一次即可，不需要每次增加额外的代码。缺点是比较隐晦，且初始化代码和 view 本身割裂了。\u003cbr\u003e\n对于以上两种方式如何取舍的问题，我倾向于，大型项目用后者，小型项目用前者。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003eOther Tips\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e多使用 mixing，能够在组件级别抽离公共部分，减少冗余，极好的机制。\u003c/li\u003e\n\u003cli\u003e多使用常量，这点和 vue 本身没有关系，但是能极大地提升代码的健壮性。\u003c/li\u003e\n\u003cli\u003e链接如果是在项目内部跳转，多使用 ，而不是去拼 a 标签的 href。\u003c/li\u003e\n\u003cli\u003e不要用 dom 操作。但如果迫不得已，比如你要获得某个 dom 的 scrollTop 属性，用 $ref,而不是用选择器去取。\u003c/li\u003e\n\u003cli\u003e能想到的就这些，欢迎大佬们讨论补充。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e作者：丁香园前端团队-㍿社长\u003c/p\u003e\n\u003c/blockquote\u003e\n","buildTime":"1514378071.4343","__v":0}
{"_id":{"$oid":"5a43938e51fb4902b066152b"},"id":"5a3f7a9f6fb9a04525785590","author":{"$oid":"5a43938e51fb4902b066151a"},"title":"NodeJs爬虫抓取古代典籍，共计16000个页面心得体会总结，附带对应的React+ Redux 前端 和 Koa2服务端代码","meta":{"likeCount":0},"tag":["React.js","Node.js","MongoDB","前端","koa","爬虫"],"comment":[],"content":"\u003ch3 class=\"heading\"\u003e前言\u003c/h3\u003e\n\u003cp\u003e之前研究数据，零零散散的写过一些数据抓取的爬虫，不过写的比较随意。有很多地方现在看起来并不是很合理 这段时间比较闲，本来是想给之前的项目做重构的。\n后来 利用这个周末，索性重新写了一个项目，就是本项目 guwen-spider。目前这个爬虫还是比较简单的类型的， 直接抓取页面，然后在页面中提取数据，保存数据到数据库。\n通过与之前写的对比，我觉得难点在于整个程序的健壮性，以及相应的容错机制。在昨天写代码的过程中其实也有反映， 真正的主体代码其实很快就写完了 ，花了大部分时间是在\n做稳定性的调试， 以及寻求一种更合理的方式来处理数据与流程控制的关系。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608b73f462614db?w=1188\u0026amp;h=688\u0026amp;f=png\u0026amp;s=285324\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e背景\u003c/h3\u003e\n\u003cp\u003e项目的背景是抓取一个一级页面是目录列表 ，点击一个目录进去 是一个章节 及篇幅列表 ，点击章节或篇幅进入具体的内容页面。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e概述\u003c/h3\u003e\n\u003cp\u003e本项目github地址 : \u003ca target=\"_blank\" href=\"https://github.com/yangfan0095/guwen-spider\"\u003eguwen-spider\u003c/a\u003e  （PS:最后面还有彩蛋 ~~逃\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e项目技术细节\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e项目大量用到了 ES7 的async 函数, 更直观的反应程序了的流程。为了方便，在对数据遍历的过程中直接使用了著名的async这个库，所以不可避免的还是用到了回调promise ，因为数据的处理发生在回调函数中，不可避免的会遇到一些数据传递的问题，其实也可以直接用ES7的async await 写一个方法来实现相同的功能。这里其实最赞的一个地方是使用了 Class 的 static 方法封装对数据库的操作， static 顾名思义 静态方法 就跟 prototype 一样 ，不会占用额外空间。\n项目主要用到了\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e1 ES7的 async await 协程做异步有关的逻辑处理。\u003c/li\u003e\n\u003cli\u003e2 使用 npm的 async库 来做循环遍历，以及并发请求操作。\u003c/li\u003e\n\u003cli\u003e3 使用 log4js 来做日志处理\u003c/li\u003e\n\u003cli\u003e4 使用 cheerio 来处理dom的操作。\u003c/li\u003e\n\u003cli\u003e5 使用 mongoose 来连接mongoDB 做数据的保存以及操作。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e目录结构\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e├── bin              // 入口\n│\u0026nbsp;  ├── booklist.js         // 抓取书籍逻辑\n│\u0026nbsp;  ├── chapterlist.js      // 抓取章节逻辑\n│\u0026nbsp;  ├── content.js          // 抓取内容逻辑\n│\u0026nbsp;  └── index.js            // 程序入口\n├── config             // 配置文件\n├── dbhelper           // 数据库操作方法目录\n├── logs             // 项目日志目录\n├── model         // mongoDB 集合操作实例\n├── node_modules         \n├── utils         // 工具函数\n├── package.json       \n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e项目实现方案分析\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e项目是一个典型的多级抓取案例，目前只有三级，即 书籍列表， 书籍项对应的 章节列表，一个章节链接对应的内容。 抓取这样的结构可以采用两种方式， 一是 直接从外层到内层 内层抓取完以后再执行下一个外层的抓取， 还有一种就是先把外层抓取完成保存到数据库，然后根据外层抓取到所有内层章节的链接，再次保存，然后从数据库查询到对应的链接单元 对之进行内容抓取。这两种方案各有利弊，其实两种方式我都试过， 后者有一个好处，因为对三个层级是分开抓取的， 这样就能够更方便，尽可能多的保存到对应章节的相关数据。 可以试想一下 ，如果采用前者 按照正常的逻辑\n对一级目录进行遍历抓取到对应的二级章节目录， 再对章节列表进行遍历 抓取内容，到第三级 内容单元抓取完成 需要保存时，如果需要很多的一级目录信息，就需要 这些分层的数据之间进行数据传递 ，想想其实应该是比较复杂的一件事情。所以分开保存数据 一定程度上避开了不必要的复杂的数据传递。\u003c/p\u003e\n\u003cp\u003e目前我们考虑到 其实我们要抓取到的古文书籍数量并不多，古文书籍大概只有180本囊括了各种经史。其和章节内容本身是一个很小的数据 ，即一个集合里面有180个文档记录。 这180本书所有章节抓取下来一共有一万六千个章节，对应需要访问一万六千个页面爬取到对应的内容。所以选择第二种应该是合理的。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e项目实现\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e主程有三个方法 bookListInit ,chapterListInit,contentListInit, 分别是抓取书籍目录，章节列表，书籍内容的方法对外公开暴露的初始化方法。通过async 可以实现对这三个方法的运行流程进行控制，书籍目录抓取完成将数据保存到数据库，然后执行结果返回到主程序，如果运行成功 主程序则执行根据书籍列表对章节列表的抓取，同理对书籍内容进行抓取。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e项目主入口\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e/**\n * 爬虫抓取主入口\n */\nconst start = async() =\u0026gt; {\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e booklistRes = await bookListInit();\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!booklistRes) {\n        logger.warn(\u003cspan class=\"hljs-string\"\u003e'书籍列表抓取出错，程序终止...'\u003c/span\u003e);\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e;\n    }\n    logger.info(\u003cspan class=\"hljs-string\"\u003e'书籍列表抓取成功，现在进行书籍章节抓取...'\u003c/span\u003e);\n\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e chapterlistRes = await chapterListInit();\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!chapterlistRes) {\n        logger.warn(\u003cspan class=\"hljs-string\"\u003e'书籍章节列表抓取出错，程序终止...'\u003c/span\u003e);\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e;\n    }\n    logger.info(\u003cspan class=\"hljs-string\"\u003e'书籍章节列表抓取成功，现在进行书籍内容抓取...'\u003c/span\u003e);\n\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e contentListRes = await contentListInit();\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!contentListRes) {\n        logger.warn(\u003cspan class=\"hljs-string\"\u003e'书籍章节内容抓取出错，程序终止...'\u003c/span\u003e);\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e;\n    }\n    logger.info(\u003cspan class=\"hljs-string\"\u003e'书籍内容抓取成功'\u003c/span\u003e);\n}\n// 开始入口\n\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (typeof bookListInit === \u003cspan class=\"hljs-string\"\u003e'function'\u003c/span\u003e \u0026amp;\u0026amp; typeof chapterListInit === \u003cspan class=\"hljs-string\"\u003e'function'\u003c/span\u003e) {\n    // 开始抓取\n    start();\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e引入的 bookListInit ,chapterListInit,contentListInit,  三个方法\u003c/p\u003e\n\u003cp\u003ebooklist.js\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e/**\n * 初始化方法 返回抓取结果 \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e 抓取成果 \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e 抓取失败\n */\nconst bookListInit = async() =\u0026gt; {\n    logger.info(\u003cspan class=\"hljs-string\"\u003e'抓取书籍列表开始...'\u003c/span\u003e);\n    const pageUrlList = getPageUrlList(totalListPage, baseUrl);\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e res = await getBookList(pageUrlList);\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e res;\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003echapterlist.js\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e/**\n * 初始化入口\n */\nconst chapterListInit = async() =\u0026gt; {\n    const list = await bookHelper.getBookList(bookListModel);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!list) {\n        logger.error(\u003cspan class=\"hljs-string\"\u003e'初始化查询书籍目录失败'\u003c/span\u003e);\n    }\n    logger.info(\u003cspan class=\"hljs-string\"\u003e'开始抓取书籍章节列表，书籍目录共：'\u003c/span\u003e + list.length + \u003cspan class=\"hljs-string\"\u003e'条'\u003c/span\u003e);\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e res = await asyncGetChapter(list);\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e res;\n};\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003econtent.js\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e/**\n * 初始化入口\n */\nconst contentListInit = async() =\u0026gt; {\n    //获取书籍列表\n    const list = await bookHelper.getBookLi(bookListModel);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!list) {\n        logger.error(\u003cspan class=\"hljs-string\"\u003e'初始化查询书籍目录失败'\u003c/span\u003e);\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e;\n    }\n    const res = await mapBookList(list);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!res) {\n        logger.error(\u003cspan class=\"hljs-string\"\u003e'抓取章节信息，调用 getCurBookSectionList() 进行串行遍历操作，执行完成回调出错，错误信息已打印，请查看日志!'\u003c/span\u003e);\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e;\n    }\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e res;\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e内容抓取的思考\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e书籍目录抓取其实逻辑非常简单，只需要使用async.mapLimit做一个遍历就可以保存数据了,但是我们在保存内容的时候 简化的逻辑其实就是 遍历章节列表 抓取链接里的内容。但是实际的情况是链接数量多达几万 我们从内存占用角度也不能全部保存到一个数组中，然后对其遍历，所以我们需要对内容抓取进行单元化。\n普遍的遍历方式 是每次查询一定的数量，来做抓取，这样缺点是只是以一定数量做分类，数据之间没有关联，以批量方式进行插入，如果出错 则容错会有一些小问题，而且如果我们想要把一本书作为一个集合单独保存会遇到问题。因此我们采用第二种就是以一个书籍单元进行内容抓取和保存。\n这里使用了 \u003ccode\u003easync.mapLimit(list, 1, (series, callback) =\u0026gt; {})\u003c/code\u003e这个方法来进行遍历，不可避免的用到了回调，感觉很恶心。async.mapLimit()的第二个参数可以设置同时请求数量。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e /* \n * 内容抓取步骤：\n * 第一步得到书籍列表， 通过书籍列表查到一条书籍记录下 对应的所有章节列表， \n * 第二步 对章节列表进行遍历获取内容保存到数据库中 \n * 第三步 保存完数据后 回到第一步 进行下一步书籍的内容抓取和保存\n */\n\n/**\n * 初始化入口\n */\nconst contentListInit = async() =\u0026gt; {\n    //获取书籍列表\n    const list = await bookHelper.getBookList(bookListModel);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!list) {\n        logger.error(\u003cspan class=\"hljs-string\"\u003e'初始化查询书籍目录失败'\u003c/span\u003e);\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e;\n    }\n    const res = await mapBookList(list);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!res) {\n        logger.error(\u003cspan class=\"hljs-string\"\u003e'抓取章节信息，调用 getCurBookSectionList() 进行串行遍历操作，执行完成回调出错，错误信息已打印，请查看日志!'\u003c/span\u003e);\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e;\n    }\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e res;\n}\n/**\n * 遍历书籍目录下的章节列表\n * @param {*} list \n */\nconst mapBookList = (list) =\u0026gt; {\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e new Promise((resolve, reject) =\u0026gt; {\n        async.mapLimit(list, 1, (series, callback) =\u0026gt; {\n            \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e doc = series._doc;\n            getCurBookSectionList(doc, callback);\n        }, (err, result) =\u0026gt; {\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (err) {\n                logger.error(\u003cspan class=\"hljs-string\"\u003e'书籍目录抓取异步执行出错!'\u003c/span\u003e);\n                logger.error(err);\n                reject(\u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n                \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e;\n            }\n            resolve(\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e);\n        })\n    })\n}\n\n/**\n * 获取单本书籍下章节列表 调用章节列表遍历进行抓取内容\n * @param {*} series \n * @param {*} callback \n */\nconst getCurBookSectionList = async(series, callback) =\u0026gt; {\n\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e num = Math.random() * 1000 + 1000;\n    await sleep(num);\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e key = series.key;\n    const res = await bookHelper.querySectionList(chapterListModel, {\n        key: key\n    });\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!res) {\n        logger.error(\u003cspan class=\"hljs-string\"\u003e'获取当前书籍: '\u003c/span\u003e + series.bookName + \u003cspan class=\"hljs-string\"\u003e' 章节内容失败，进入下一部书籍内容抓取!'\u003c/span\u003e);\n        callback(null, null);\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e;\n    }\n    //判断当前数据是否已经存在\n    const bookItemModel = getModel(key);\n    const contentLength = await bookHelper.getCollectionLength(bookItemModel, {});\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (contentLength === res.length) {\n        logger.info(\u003cspan class=\"hljs-string\"\u003e'当前书籍：'\u003c/span\u003e + series.bookName + \u003cspan class=\"hljs-string\"\u003e'数据库已经抓取完成，进入下一条数据任务'\u003c/span\u003e);\n        callback(null, null);\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e;\n    }\n    await mapSectionList(res);\n    callback(null, null);\n}\n\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e数据抓取完了 怎么保存是个问题\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e这里我们通过key 来给数据做分类，每次按照key来获取链接，进行遍历，这样的好处是保存的数据是一个整体，现在思考数据保存的问题\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e1 可以以整体的方式进行插入\u003c/p\u003e\n\u003cp\u003e优点 : 速度快 数据库操作不浪费时间。\u003c/p\u003e\n\u003cp\u003e缺点 : 有的书籍可能有几百个章节 也就意味着要先保存几百个页面的内容再进行插入，这样做同样很消耗内存，有可能造成程序运行不稳定。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e2可以以每一篇文章的形式插入数据库。\u003c/p\u003e\n\u003cp\u003e优点 : 页面抓取即保存的方式 使得数据能够及时保存，即使后续出错也不需要重新保存前面的章节，\u003c/p\u003e\n\u003cp\u003e缺点 : 也很明显 就是慢 ，仔细想想如果要爬几万个页面 做 几万次*N 数据库的操作 这里还可以做一个缓存器一次性保存一定条数 当条数达到再做保存这样也是一个不错的选择。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e/**\n * 遍历单条书籍下所有章节 调用内容抓取方法\n * @param {*} list \n */\nconst mapSectionList = (list) =\u0026gt; {\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e new Promise((resolve, reject) =\u0026gt; {\n        async.mapLimit(list, 1, (series, callback) =\u0026gt; {\n            \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e doc = series._doc;\n            getContent(doc, callback)\n        }, (err, result) =\u0026gt; {\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (err) {\n                logger.error(\u003cspan class=\"hljs-string\"\u003e'书籍目录抓取异步执行出错!'\u003c/span\u003e);\n                logger.error(err);\n                reject(\u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n                \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e;\n            }\n            const bookName = list[0].bookName;\n            const key = list[0].key;\n\n            // 以整体为单元进行保存\n            saveAllContentToDB(result, bookName, key, resolve);\n\n            //以每篇文章作为单元进行保存\n            // logger.info(bookName + \u003cspan class=\"hljs-string\"\u003e'数据抓取完成，进入下一部书籍抓取函数...'\u003c/span\u003e);\n            // resolve(\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e);\n\n        })\n    })\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e两者各有利弊，这里我都做了尝试。 准备了两个错误保存的集合,errContentModel, errorCollectionModel,在插入出错时 分别保存信息到对应的集合中，二者任选其一即可。增加集合来保存数据的原因是 便于一次性查看以及后续操作， 不用看日志。\u003c/p\u003e\n\u003cp\u003e（PS ，其实完全用 errorCollectionModel 这个集合就可以了  ，errContentModel这个集合可以完整保存章节信息）\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e//保存出错的数据名称\nconst errorSpider = mongoose.Schema({\n    chapter: String,\n    section: String,\n    url: String,\n    key: String,\n    bookName: String,\n    author: String,\n})\n// 保存出错的数据名称 只保留key 和 bookName信息\nconst errorCollection = mongoose.Schema({\n    key: String,\n    bookName: String,\n})\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我们将每一条书籍信息的内容 放到一个新的集合中，集合以key来进行命名。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e总结\u003c/h2\u003e\n\u003cp\u003e写这个项目 其实主要的难点在于程序稳定性的控制，容错机制的设置，以及错误的记录，目前这个项目基本能够实现直接运行 一次性跑通整个流程。 但是程序设计也肯定还存在许多问题 ，欢迎指正和交流。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e彩蛋\u003c/h2\u003e\n\u003cp\u003e写完这个项目 做了一个基于React开的前端网站用于页面浏览 和一个基于koa2.x开发的服务端, 整体技术栈相当于是 React + Redux + Koa2 ,前后端服务是分开部署的，各自独立可以更好的去除前后端服务的耦合性，比如同一套服务端代码，不仅可以给web端 还可以给 移动端 ，app 提供支持。目前整个一套还很简陋，但是可以满足基本的查询浏览功能。希望后期有时间可以把项目变得更加丰富。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e本项目地址  地址 : \u003ca target=\"_blank\" href=\"https://github.com/yangfan0095/guwen-spider\"\u003eguwen-spider\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e对应前端 React + Redux + semantic-ui   地址 : \u003ca target=\"_blank\" href=\"https://github.com/yangfan0095/guwen-react\"\u003eguwen-react\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e对应Node端 Koa2.2 + mongoose  地址 : \u003ca target=\"_blank\" href=\"https://github.com/yangfan0095/guwen-node\"\u003eguwen-node\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e项目挺简单的 ，但是多了一个学习和研究 从前端到服务端的开发的环境。\u003c/p\u003e\n\u003cp\u003e以上です\u003c/p\u003e\n","buildTime":"1514374576.1858","__v":0}
{"_id":{"$oid":"5a4393bf95a5f32670e69c43"},"id":"5a430b216fb9a045263bdc00","author":{"$oid":"5a4393bf95a5f32670e69c40"},"title":"一稿设计多端适配优雅的解决方案 - rem ","meta":{"likeCount":0},"tag":[],"comment":[],"content":"\u003cblockquote\u003e\n\u003cp\u003e规范目的\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e为提高前端团队开发效率，输出高质量的前端页面代码，提高UI设计还原度，特编写该规范文档。本文档如有不对或者不合适的地方请及时提出。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eJS代码块\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e（\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (doc, win) {\n    var docEl = doc.documentElement,\n        resizeEvt = \u003cspan class=\"hljs-string\"\u003e'orientationchange'\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e window ? \u003cspan class=\"hljs-string\"\u003e'orientationchange'\u003c/span\u003e : \u003cspan class=\"hljs-string\"\u003e'resize'\u003c/span\u003e,\n        recalc = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e () {\n            var clientWidth = docEl.clientWidth;\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!clientWidth) \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e;\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (clientWidth \u0026gt;= 750) {\n                docEl.style.fontSize = \u003cspan class=\"hljs-string\"\u003e'100px'\u003c/span\u003e;\n            } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n                docEl.style.fontSize = 100 * (clientWidth / 750) + \u003cspan class=\"hljs-string\"\u003e'px'\u003c/span\u003e;\n            }\n        };\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!doc.addEventListener) \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e;\n    win.addEventListener(resizeEvt, recalc, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n    doc.addEventListener(\u003cspan class=\"hljs-string\"\u003e'DOMContentLoaded'\u003c/span\u003e, recalc, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n})(document, window);\n\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\n\u003cp\u003e使用方法\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eui设计师设计界面时建议以iphone6的两倍尺寸（750px）为设计标准尺寸，前端开发在开发页面先引用上述代码块，前端开发在选择标注时仍按照标准px来标注，为了计算方便js代码块中乘以100，在css中为实际尺寸只／100（rem）。\u003c/p\u003e\n\u003cp\u003e如图：标题栏在标注中高度为88px在页面css里实际为88/100=0.88rem\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"image\" src=\"https://user-gold-cdn.xitu.io/2017/12/27/16095e3baceab768?w=664\u0026amp;h=410\u0026amp;f=png\u0026amp;s=78730\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e注意事项\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e如果设计稿尺寸为其他则代码块要做相应修改。\u003c/li\u003e\n\u003cli\u003e此适配方法只适合在移动端开发前端web页面。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e参考文档\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"http://23jt.net/kun/?post=28\"\u003e移动端网页字体单位rem详解\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","buildTime":"1514378130.8766","__v":0}
{"_id":{"$oid":"5a4393bf95a5f32670e69c44"},"id":"5a41f3a451882560b76c6d05","author":{"$oid":"5a4393bf95a5f32670e69c38"},"title":"你不知道的前端算法之热力图的实现","meta":{"likeCount":0},"tag":["前端","算法","Canvas","GitHub"],"comment":[],"content":"\u003cblockquote\u003e\n\u003cp\u003e本文作者：TalkingData 可视化工程师李凤禄\u003c/p\u003e\n\u003cp\u003e编辑：Aresn\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003einMap 是一款基于 canvas 的大数据可视化库，专注于大数据方向点线面的可视化效果展示。目前支持散点、围栏、热力、网格、聚合等方式；致力于让大数据可视化变得简单易用。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003eGitHub 地址：\u003ca target=\"_blank\" href=\"https://github.com/TalkingData/inmap\"\u003ehttps://github.com/TalkingData/inmap\u003c/a\u003e (点个 Star 支持下作者吧！)\u003c/h3\u003e\n\u003cp\u003e热力图这个名字听起来很高大上，其实等同于我们常说的密度图。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"image\" src=\"https://user-gold-cdn.xitu.io/2017/12/26/160909bd5c440464?w=706\u0026amp;h=494\u0026amp;f=gif\u0026amp;s=2346381\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e如图表示，红色区域表示分析要素的密度大，而蓝色区域表示分析要素的密度小。只要点密集，就会形成聚类区域。\n看到这么炫的效果，是不是自己也很想实现一把？接下来手把手实现一个热力（带你装逼带你飞、 哈哈），郑重声明：下面代码片段均来自 \u003ca target=\"_blank\" href=\"https://github.com/TalkingData/inmap\"\u003einMap\u003c/a\u003e。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e准备数据\u003c/h3\u003e\n\u003cp\u003einMap 接收的是经纬度数据，需要把它映射到 canvas 的像素坐标，这就用到了墨卡托转换，墨卡托算法很复杂，以后我们会有单独的一篇文章来讲讲他的原理。经过转换，你得到的数据应该是这样的：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e[\n  {\n    \u003cspan class=\"hljs-string\"\u003e\"lng\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"116.395645\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-string\"\u003e\"lat\"\u003c/span\u003e: 39.929986,\n    \u003cspan class=\"hljs-string\"\u003e\"count\"\u003c/span\u003e: 6,\n    \u003cspan class=\"hljs-string\"\u003e\"pixel\"\u003c/span\u003e: { //像素坐标\n      \u003cspan class=\"hljs-string\"\u003e\"x\"\u003c/span\u003e: 689,\n      \u003cspan class=\"hljs-string\"\u003e\"y\"\u003c/span\u003e: 294\n    }\n  },\n  {\n    \u003cspan class=\"hljs-string\"\u003e\"lng\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"121.487899\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-string\"\u003e\"lat\"\u003c/span\u003e: 31.249162,\n    \u003cspan class=\"hljs-string\"\u003e\"count\"\u003c/span\u003e: 10,\n    \u003cspan class=\"hljs-string\"\u003e\"pixel\"\u003c/span\u003e: { //像素坐标\n      \u003cspan class=\"hljs-string\"\u003e\"x\"\u003c/span\u003e: 759,\n      \u003cspan class=\"hljs-string\"\u003e\"y\"\u003c/span\u003e: 439\n    }\n  },\n  ...\n]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e好了，我们得到转换后的像素坐标数据(x、y),就可以做下面的事情了。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e创建 canvas 渐变填充\u003c/h3\u003e\n\u003cp\u003e创建一个由黑到白的渐变圆\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e gradient = ctx.createRadialGradient(x, y, 0, x, y, radius);\ngradient.addColorStop(0, \u003cspan class=\"hljs-string\"\u003e'rgba(0,0,0,1)'\u003c/span\u003e);\ngradient.addColorStop(1, \u003cspan class=\"hljs-string\"\u003e'rgba(0,0,0,0)'\u003c/span\u003e);\nctx.fillStyle = gradient;\nctx.arc(x, y, radius, 0, Math.PI * 2, \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e);\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003ecreateRadialGradient() 创建线性的渐变对象\u003c/li\u003e\n\u003cli\u003eaddColorStop() 定义一个渐变的颜色带\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e效果如图：\n\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"image\" src=\"https://user-gold-cdn.xitu.io/2017/12/26/160909bd5ae9cb72?w=778\u0026amp;h=584\u0026amp;f=gif\u0026amp;s=3396994\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n那么问题就来了，如果每个数据权重值 count 不一样，我们该如何表示呢？\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e设置 globalAlpha\u003c/h3\u003e\n\u003cp\u003e根据不同的count值设置不同的Alpha，假设最大的count的Alpha等于1，最小的count的Alpha为0，那么我根据count求出Alpha。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e alpha = (count - minValue) / (maxValue - minValue);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e然后我们代码如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003edrawPoint(x, y, radius, alpha) {\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e ctx = this.ctx;\n    ctx.globalAlpha = alpha; //设置 Alpha 透明度\n    ctx.beginPath();\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e gradient = ctx.createRadialGradient(x, y, 0, x, y, radius);\n    gradient.addColorStop(0, \u003cspan class=\"hljs-string\"\u003e'rgba(0,0,0,1)'\u003c/span\u003e);\n    gradient.addColorStop(1, \u003cspan class=\"hljs-string\"\u003e'rgba(0,0,0,0)'\u003c/span\u003e);\n    ctx.fillStyle = gradient;\n    ctx.arc(x, y, radius, 0, Math.PI * 2, \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e);\n    ctx.closePath();\n    ctx.fill();\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e效果跟上一个截图有很大区别，可以对比一下透明度的变化。\n\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"image\" src=\"https://user-gold-cdn.xitu.io/2017/12/26/160909bd5b32d0dd?w=1634\u0026amp;h=1264\u0026amp;f=png\u0026amp;s=1408517\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n（这么黑乎乎的一团，跟热力差距好大啊）\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"image\" src=\"https://user-gold-cdn.xitu.io/2017/12/26/160909bd53d6e276?w=253\u0026amp;h=172\u0026amp;f=png\u0026amp;s=70058\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e重置 canvas 画布颜色\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003egetImageData() 复制画布上指定矩形的像素数据\u003c/li\u003e\n\u003cli\u003eputImageData() 将图像数据放回画布：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003egetImageData()返回的数据格式如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e{\n  \u003cspan class=\"hljs-string\"\u003e\"data\"\u003c/span\u003e: {\n    \u003cspan class=\"hljs-string\"\u003e\"0\"\u003c/span\u003e: 0,   //R\n    \u003cspan class=\"hljs-string\"\u003e\"1\"\u003c/span\u003e: 128, //G\n    \u003cspan class=\"hljs-string\"\u003e\"2\"\u003c/span\u003e: 0,   //B\n    \u003cspan class=\"hljs-string\"\u003e\"3\"\u003c/span\u003e: 255, //Aplah\n    \u003cspan class=\"hljs-string\"\u003e\"4\"\u003c/span\u003e: 0, //R\n    \u003cspan class=\"hljs-string\"\u003e\"5\"\u003c/span\u003e: 128, //G\n    \u003cspan class=\"hljs-string\"\u003e\"6\"\u003c/span\u003e: 0,  //B\n    \u003cspan class=\"hljs-string\"\u003e\"7\"\u003c/span\u003e: 255, //Aplah\n    \u003cspan class=\"hljs-string\"\u003e\"8\"\u003c/span\u003e: 0,\n    \u003cspan class=\"hljs-string\"\u003e\"9\"\u003c/span\u003e: 128,\n    \u003cspan class=\"hljs-string\"\u003e\"10\"\u003c/span\u003e: 0,\n    \u003cspan class=\"hljs-string\"\u003e\"11\"\u003c/span\u003e: 255,\n    \u003cspan class=\"hljs-string\"\u003e\"12\"\u003c/span\u003e: 0,\n    \u003cspan class=\"hljs-string\"\u003e\"13\"\u003c/span\u003e: 128,\n    \u003cspan class=\"hljs-string\"\u003e\"14\"\u003c/span\u003e: 0,\n    \u003cspan class=\"hljs-string\"\u003e\"15\"\u003c/span\u003e: 255,\n    \u003cspan class=\"hljs-string\"\u003e\"16\"\u003c/span\u003e: 0,\n    \u003cspan class=\"hljs-string\"\u003e\"17\"\u003c/span\u003e: 128,\n    \u003cspan class=\"hljs-string\"\u003e\"18\"\u003c/span\u003e: 0,\n    \u003cspan class=\"hljs-string\"\u003e\"19\"\u003c/span\u003e: 255,\n    \u003cspan class=\"hljs-string\"\u003e\"20\"\u003c/span\u003e: 0,\n    \u003cspan class=\"hljs-string\"\u003e\"21\"\u003c/span\u003e: 128,\n    \u003cspan class=\"hljs-string\"\u003e\"22\"\u003c/span\u003e: 0\n    ...\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e返回的数据是一维数组，每四个元素表示一个像素（rgba）值。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e实现热力原理：读取每个像素的alpha值(透明度)，做一个颜色映射。\u003c/h3\u003e\n\u003cp\u003e代码如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e palette = \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.getColorPaint(); \u003cspan class=\"hljs-comment\"\u003e//取色面板\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e img = ctx.getImageData(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, container.width, container.height);\n    \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e imgData = img.data;\n    \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e max_opacity = normal.maxOpacity * \u003cspan class=\"hljs-number\"\u003e255\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e min_opacity = normal.minOpacity * \u003cspan class=\"hljs-number\"\u003e255\u003c/span\u003e;\n    \u003cspan class=\"hljs-comment\"\u003e//权重区间\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e max_scope = (normal.maxScope \u0026gt; \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ? \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e : normal.maxScope) * \u003cspan class=\"hljs-number\"\u003e255\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e min_scope = (normal.minScope \u0026lt; \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ? \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e : normal.minScope) * \u003cspan class=\"hljs-number\"\u003e255\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e len = imgData.length;\n    \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e; i \u0026lt; len; i += \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e) {\n        \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e alpha = imgData[i]; \n        \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e offset = alpha * \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!offset) {\n            \u003cspan class=\"hljs-keyword\"\u003econtinue\u003c/span\u003e;\n        }\n        \u003cspan class=\"hljs-comment\"\u003e//映射颜色\u003c/span\u003e\n        imgData[i - \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e] = palette[offset];\n        imgData[i - \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e] = palette[offset + \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e];\n        imgData[i - \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e] = palette[offset + \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e];\n\n        \u003cspan class=\"hljs-comment\"\u003e// 范围区间\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (imgData[i] \u0026gt; max_scope) {\n            imgData[i] = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n        }\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (imgData[i] \u0026lt; min_scope) {\n            imgData[i] = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n        }\n\n        \u003cspan class=\"hljs-comment\"\u003e// 透明度\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (imgData[i] \u0026gt; max_opacity) {\n            imgData[i] = max_opacity;\n        }\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (imgData[i] \u0026lt; min_opacity) {\n            imgData[i] = min_opacity;\n        }\n    }\n    \u003cspan class=\"hljs-comment\"\u003e//将设置后的像素数据放回画布\u003c/span\u003e\nctx.putImageData(img, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, container.width, container.height);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e创建颜色映射，一个好的颜色映射决定最终效果。\ninMap 创建一个长256px的调色面板：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e paletteCanvas = document.createElement(\u003cspan class=\"hljs-string\"\u003e'canvas'\u003c/span\u003e);\n\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e paletteCtx = paletteCanvas.getContext(\u003cspan class=\"hljs-string\"\u003e'2d'\u003c/span\u003e);\npaletteCanvas.width = 256;\npaletteCanvas.height = 1;\n\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e gradient = paletteCtx.createLinearGradient(0, 0, 256, 1);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003einMap 默认颜色如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003ethis.gradient = {\n    0.25: \u003cspan class=\"hljs-string\"\u003e'rgb(0,0,255)'\u003c/span\u003e,\n    0.55: \u003cspan class=\"hljs-string\"\u003e'rgb(0,255,0)'\u003c/span\u003e,\n    0.85: \u003cspan class=\"hljs-string\"\u003e'yellow'\u003c/span\u003e,\n    1.0: \u003cspan class=\"hljs-string\"\u003e'rgb(255,0,0)'\u003c/span\u003e\n};\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e将gradient颜色设置到调色面板对象中\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e key \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e gradient) {\n    gradient.addColorStop(key, gradientConfig[key]);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e返回调色面板的像素点数据：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e paletteCtx.getImageData(0, 0, 256, 1).data;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e创建出来的调色面板效果图如下：（看起来像一个渐变颜色条）\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"image\" src=\"https://user-gold-cdn.xitu.io/2017/12/26/160909bd53eabc0d?w=472\u0026amp;h=30\u0026amp;f=png\u0026amp;s=15407\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e最终我们实现的热力图如下：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"image\" src=\"https://user-gold-cdn.xitu.io/2017/12/26/160909bd7f642dca?w=1578\u0026amp;h=1234\u0026amp;f=png\u0026amp;s=1438477\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e下节预告\u003c/h3\u003e\n\u003cp\u003e下一节，我们将重点介绍 inMap 文字避让算法的实现。\u003c/p\u003e\n","buildTime":"1514377737.1315","__v":0}
{"_id":{"$oid":"5a4393bf95a5f32670e69c45"},"id":"5a435f006fb9a0452207c97b","author":{"$oid":"5a4393bf95a5f32670e69c3b"},"title":"不可思议的混合模式 background-blend-mode","meta":{"likeCount":0},"tag":["CSS"],"comment":[],"content":"\u003cp\u003e本文接前文：\u003ca target=\"_blank\" href=\"https://github.com/chokcoco/iCSS/issues/16\"\u003e不可思议的混合模式 mix-blend-mode\u003c/a\u003e 。由于 \u003ccode\u003emix-blend-mode\u003c/code\u003e 这个属性的强大，很多应用场景和动效的制作不断完善和被发掘出来，遂另起一文继续介绍一些使用 \u003ccode\u003emix-blend-mode\u003c/code\u003e 制作的酷炫动画。\u003c/p\u003e\n\u003cp\u003eCSS3 新增了一个很有意思的属性 -- \u003ccode\u003emix-blend-mode\u003c/code\u003e ，其中 mix 和 blend 的中文意译均为混合，那么这个属性的作用直译过来就是混合混合模式，当然，我们我们通常称之为\u003cstrong\u003e混合模式\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e混合模式最常见于 photoshop 中，是 PS 中十分强大的功能之一。当然，瞎用乱用混合模式谁都会，利用混合模式将多个图层混合得到一个新的效果，只是要用到恰到好处，或者说在 CSS 中利用混合模式制作出一些效果则需要对混合模式很深的理解及不断的尝试。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003emix-blend-mode 简介\u003c/h2\u003e\n\u003cp\u003e关于 \u003ccode\u003emix-blend-mode\u003c/code\u003e 最基本的用法和描述，可以简单看看上篇文章 \u003ca target=\"_blank\" href=\"https://github.com/chokcoco/iCSS/issues/16\"\u003e不可思议的混合模式 mix-blend-mode\u003c/a\u003e 。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003ebackground-blend-mode 简介\u003c/h2\u003e\n\u003cp\u003e除了 \u003ccode\u003emix-blend-mode\u003c/code\u003e ，CSS 还提供一个 \u003ccode\u003ebackground-blend-mode\u003c/code\u003e 。也就是背景的混合模式。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e可以是背景图片与背景图片的混合，\u003c/li\u003e\n\u003cli\u003e也可以是背景图片和背景色的之间的混合。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003ebackground-blend-mode\u003c/code\u003e 的可用取值与 \u003ccode\u003emix-blend-mode\u003c/code\u003e一样，不重复介绍，下面直接进入应用阶段。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003ebackground-blend-mode 基础应用\u003c/h2\u003e\n\u003cp\u003e对于 \u003ccode\u003ebackground-blend-mode\u003c/code\u003e ，最简单的应用就是将两个或者多个图片利用混合模式叠加在一起。假设我们存在下述两张图片，可以利用背景混合模式 \u003ccode\u003ebackground-blend-mode\u003c/code\u003e 叠加在一起：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"person\" src=\"https://user-gold-cdn.xitu.io/2017/12/27/16096624e09d0e18?w=400\u0026amp;h=500\u0026amp;f=jpeg\u0026amp;s=39730\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\u003cfigure\u003e\u003cimg alt=\"timg\" src=\"https://user-gold-cdn.xitu.io/2017/12/27/16096624df7ef6fe?w=400\u0026amp;h=500\u0026amp;f=jpeg\u0026amp;s=119066\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e经过背景混合模式 \u003ccode\u003ebackground-blend-mode:lighten\u003c/code\u003e 处理之后：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"image\" src=\"https://user-gold-cdn.xitu.io/2017/12/27/16096624df87d6dc?w=397\u0026amp;h=497\u0026amp;f=png\u0026amp;s=363553\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://codepen.io/Chokcoco/pen/OzWvNN\"\u003eCodePen Demo -- image mix by bg-blend-mode\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e当然，这里使用的是 \u003ccode\u003ebackground-blend-mode:lighten\u003c/code\u003e 变亮这个混合模式，核心代码如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs HTML\" lang=\"HTML\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode class=\"hljs CSS\" lang=\"CSS\"\u003e\u003cspan class=\"hljs-selector-class\"\u003e.container\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ebackground\u003c/span\u003e: \u003cspan class=\"hljs-built_in\"\u003eurl\u003c/span\u003e($pic1), \u003cspan class=\"hljs-built_in\"\u003eurl\u003c/span\u003e($pic2);\n    \u003cspan class=\"hljs-attribute\"\u003ebackground-size\u003c/span\u003e: cover;\n    \u003cspan class=\"hljs-attribute\"\u003ebackground-blend-mode\u003c/span\u003e: lighten;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我们可以尝试其他的组合，也就是改变 \u003ccode\u003ebackground-blend-mode\u003c/code\u003e 的各种取值，将会得到各种不同的感官效果。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e使用 \u003ccode\u003ebackground-blend-mode: difference\u003c/code\u003e 制作黑白反向动画\u003c/h2\u003e\n\u003cp\u003e黑色白色这两种颜色，无疑是使用频率最高也是我认为最搭的两个颜色。当这两种颜色结合在一起，总是能碰撞出不一样的火花。\u003c/p\u003e\n\u003cp\u003e扯远了，借助 \u003ccode\u003edifference\u003c/code\u003e 差值混合模式，配合黑白 GIF，能产生奇妙的效果，假设我们拥有这样一张 GIF 图（图片来自网络，侵删）：：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"timg\" src=\"https://user-gold-cdn.xitu.io/2017/12/27/16096624df9bd88a?w=300\u0026amp;h=300\u0026amp;f=gif\u0026amp;s=285949\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e利用 \u003ccode\u003ebackground-blend-mode: difference\u003c/code\u003e ，将它叠加到不同的黑白背景之下（黑白背景由 CSS 画出来）：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/1609730f636c95fc?w=731\u0026amp;h=218\u0026amp;f=png\u0026amp;s=26075\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n产生的效果如下：\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"bg-gif\" src=\"https://user-gold-cdn.xitu.io/2017/12/27/16096625671a3ad6?w=1120\u0026amp;h=320\u0026amp;f=gif\u0026amp;s=767495\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://codepen.io/Chokcoco/pen/vpLWBW\"\u003eCodePen Demo -- https://codepen.io/Chokcoco/pen/vpLWBW\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e我们可以尝试其他的组合，将会得到各种不同的感官效果。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e使用 \u003ccode\u003ebackground-blend-mode\u003c/code\u003e 制作 hover 效果\u003c/h2\u003e\n\u003cp\u003e想象一下，在上面第一个例子中，如果背景的黑白蒙层不是一开始就叠加在 GIF 图下，而是通过某些交互手段叠加上去。\u003c/p\u003e\n\u003cp\u003e应用这种方式，我们可以使用 \u003ccode\u003ebackground-blend-mode\u003c/code\u003e 来制作点击或者 hover 时候的蒙板效果。\u003c/p\u003e\n\u003cp\u003e假设我们有这样一张原图（黑白效果较好）：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/1609731da83f5d3d?w=716\u0026amp;h=469\u0026amp;f=png\u0026amp;s=288983\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e通过混合渐变背景色，配合 Hover 效果，我们可以给这些图配上一些我们想要的色彩：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"bgblendmodehover\" src=\"https://user-gold-cdn.xitu.io/2017/12/27/1609662580170013?w=1401\u0026amp;h=241\u0026amp;f=gif\u0026amp;s=3708492\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://codepen.io/Chokcoco/pen/baejNL\"\u003eCodePen Demo --background-blend-mode \u0026amp;\u0026amp; Hover\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e代码非常简单，示意如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs CSS\" lang=\"CSS\"\u003e\u003cspan class=\"hljs-selector-class\"\u003e.pic\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e300px\u003c/span\u003e;\n    \u003cspan class=\"hljs-attribute\"\u003eheight\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e200px\u003c/span\u003e;\n    \u003cspan class=\"hljs-attribute\"\u003ebackground\u003c/span\u003e: \u003cspan class=\"hljs-built_in\"\u003eurl\u003c/span\u003e($img),\n        \u003cspan class=\"hljs-built_in\"\u003elinear-gradient\u003c/span\u003e(#f00, #00f);\n    \u003cspan class=\"hljs-attribute\"\u003ebackground-size\u003c/span\u003e: cover, \u003cspan class=\"hljs-number\"\u003e100%\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e100%\u003c/span\u003e;\n    \u003cspan class=\"hljs-attribute\"\u003ebackground-position\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, -\u003cspan class=\"hljs-number\"\u003e300px\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n    \u003cspan class=\"hljs-attribute\"\u003ebackground-blend-mode\u003c/span\u003e: luminosity;\n    \u003cspan class=\"hljs-attribute\"\u003ebackground-repeat\u003c/span\u003e: no-repeat;\n    \u003cspan class=\"hljs-attribute\"\u003etransition\u003c/span\u003e: .\u003cspan class=\"hljs-number\"\u003e5s\u003c/span\u003e background-position linear;\n}\n\n\u003cspan class=\"hljs-selector-class\"\u003e.pic\u003c/span\u003e\u003cspan class=\"hljs-selector-pseudo\"\u003e:hover\u003c/span\u003e { \n    \u003cspan class=\"hljs-attribute\"\u003ebackground-position\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; \n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这里有几点需要注意的：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e这里使用了\u003cstrong\u003e背景色渐变动画\u003c/strong\u003e，\u003ca target=\"_blank\" href=\"https://github.com/chokcoco/iCSS/issues/10\"\u003e背景色的渐变动画\u003c/a\u003e有几种方式实现（戳这里了解更多方法），这里使用的是位移 \u003ccode\u003ebackground-position\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e实现上述效果使用的 \u003ccode\u003ebackground-blend-mode\u003c/code\u003e 不限制具体某一种混合模式，可以自己多尝试\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 class=\"heading\"\u003e使用 mix-blend-mode || background-blend-mode 改变图标的颜色\u003c/h2\u003e\n\u003cp\u003e如果再运用上上一篇文章介绍的知识 \u003ca target=\"_blank\" href=\"https://github.com/chokcoco/iCSS/issues/32\"\u003e两行 CSS 代码实现图片任意颜色赋色技术\u003c/a\u003e ，我们可以实现 ICON 的颜色的动态改变。\u003c/p\u003e\n\u003cp\u003e假设我们有这样一张 ICON 图，注意\u003cstrong\u003e主色是黑色，底色的白色\u003c/strong\u003e（底色不是透明色），所以符合要求的 JPG、PNG、GIF 图都可以：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/1609732cd9d06072?w=269\u0026amp;h=283\u0026amp;f=png\u0026amp;s=11995\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e利用 \u003ccode\u003ebackground-blend-mode: lighten\u003c/code\u003e 可以实现动态改变图标主色的效果：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/16097332062fd4a1?w=157\u0026amp;h=116\u0026amp;f=gif\u0026amp;s=74629\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e而且这里的具体颜色（渐变、纯色皆可），动画方向都可以可以随意控制的。\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://codepen.io/Chokcoco/pen/KZapjq\"\u003eCodePen Demo -- bg-blend-mode \u0026amp;\u0026amp; hover\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e又或者是这种 hover fadeIn 效果：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/16097334679989d8?w=159\u0026amp;h=118\u0026amp;f=gif\u0026amp;s=79622\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://codepen.io/Chokcoco/pen/opBLKx\"\u003eCodePen Demo -- mix-blend-mode \u0026amp;\u0026amp; hover\u003c/a\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e使用 \u003ccode\u003emix-blend-mode\u003c/code\u003e 制作文字背景图\u003c/h2\u003e\n\u003cp\u003e我们将上面 ICON 这个场景延伸一下，ICON 图可以延伸为任意黑色主色白色底色图片，而颜色则可以是纯色、渐变色、或者是图片。\u003c/p\u003e\n\u003cp\u003e那么我们可以尝试让文字带上渐变色，或者说让文字透出图片。当然这个效果有一些 CSS 属性也可以完成。\u003c/p\u003e\n\u003cp\u003e譬如 \u003ccode\u003ebackground-clip: text\u003c/code\u003e 背景裁剪就可以让文字带上渐变色或者展示图片，可以戳这里看看 \u003ca target=\"_blank\" href=\"https://codepen.io/Chokcoco/pen/oWwRmE?q=clip\u0026amp;limit=mine\"\u003e使用 background-clip 实现文字渐变\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e这里我们使用 \u003ccode\u003emix-blend-mode\u003c/code\u003e 也能够轻易实现，我们只需要构造出黑色文字，白色底色的文字 div ，叠加上图片，再运用 \u003ccode\u003emix-blend-mode\u003c/code\u003e 即可，简单原理如下：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"image\" src=\"https://user-gold-cdn.xitu.io/2017/12/27/1609662721755187?w=1055\u0026amp;h=154\u0026amp;f=png\u0026amp;s=133825\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e核心代码如下，可以看看：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"pic\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003eIMAGE\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode class=\"hljs CSS\" lang=\"CSS\"\u003e\u003cspan class=\"hljs-selector-class\"\u003e.pic\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eposition\u003c/span\u003e: relative;\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e100%\u003c/span\u003e;\n    \u003cspan class=\"hljs-attribute\"\u003eheight\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e100%\u003c/span\u003e;\n    \u003cspan class=\"hljs-attribute\"\u003ebackground\u003c/span\u003e: \u003cspan class=\"hljs-built_in\"\u003eurl\u003c/span\u003e($img);\n    \u003cspan class=\"hljs-attribute\"\u003ebackground-repeat\u003c/span\u003e: no-repeat;\n    \u003cspan class=\"hljs-attribute\"\u003ebackground-size\u003c/span\u003e: cover;\n}\n\n\u003cspan class=\"hljs-selector-class\"\u003e.text\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eposition\u003c/span\u003e: absolute;\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e100%\u003c/span\u003e;\n    \u003cspan class=\"hljs-attribute\"\u003eheight\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e100%\u003c/span\u003e;\n    \u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e#000\u003c/span\u003e;\n    \u003cspan class=\"hljs-attribute\"\u003emix-blend-mode\u003c/span\u003e: lighten;\n    \u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e#fff\u003c/span\u003e;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ca target=\"_blank\" href=\"https://codepen.io/Chokcoco/pen/xpgwPN\"\u003eCodePen Demo -- mix-blend-mode \u0026amp;\u0026amp; TEXT IMAGE\u003c/a\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e最后\u003c/h2\u003e\n\u003cp\u003e更多精彩 CSS 技术文章汇总在我的 \u003ca target=\"_blank\" href=\"https://github.com/chokcoco/iCSS\"\u003eGithub -- iCSS\u003c/a\u003e ，持续更新，欢迎点个 star 订阅收藏。\u003c/p\u003e\n\u003cp\u003e好了，本文到此结束，希望对你有帮助 :)\u003c/p\u003e\n\u003cp\u003e如果还有什么疑问或者建议，可以多多交流，原创文章，文笔有限，才疏学浅，文中若有不正之处，万望告知。\u003c/p\u003e\n","buildTime":"1514377782.5229","__v":0}
{"_id":{"$oid":"5a4393bf95a5f32670e69c46"},"id":"5a41c9e8f265da430406dde3","author":{"$oid":"5a4393bf95a5f32670e69c3f"},"title":"摧枯拉朽，说说ES6的三把火","meta":{"likeCount":0},"tag":["JavaScript","前端","编程语言","Java"],"comment":[],"content":"\u003ch1 class=\"heading\"\u003e我是 Jser 我骄傲\u003c/h1\u003e\n\u003cp\u003eJavaScript 如今可谓是屌丝逆袭高富帅的代名词哈，从当初闹着玩似的诞生到现在 Github 上力压群雄的人气王，JS 搭着互联网的顺风车一路高歌，本身也从一个爷爷不疼奶奶不爱的杀马特小脚本蜕变为一门高大上的主流编程语言。运气固然重要，ES6 也让大家看到了这门语言自身的努力和上进，相信 JavaScript 定大有可为。\u003c/p\u003e\n\u003cp\u003eES6 发布于 2015 年 6 月，因此也叫 ES2015，距今已有两年多。2015 年是铭心刻骨的一年，这一年，股市崩盘，千古跌停，手里的两个票更是挨了腰斩，宝宝心里苦。同是这一年，ES6 标准落地，作为一名前端开发，宝宝心里乐开了花。\u003c/p\u003e\n\u003cp\u003eES6 的新语法很多很碎，如果想系统地学习一遍，强烈推荐阮一峰老师的 \u003ca target=\"_blank\" href=\"http://es6.ruanyifeng.com/\"\u003eECMAScript 6 入门\u003c/a\u003e。本文的目的不是要介绍 ES6 的新语法，而是想谈谈 ES6 为JavaScript 这门语言带来了什么，这也是在咱看来 ES6 最重要最激动人心的特性。\u003c/p\u003e\n\u003ch1 class=\"heading\"\u003e作用域\u003c/h1\u003e\n\u003cp\u003e作用域一直是程序设计语言的基础设施。JavaScript 也有作用域，但它的作用域有点怪，稍不留神就会掉到坑里。\u003c/p\u003e\n\u003cp\u003eJavaScript 的作用域(scope)有三种类型，分别是 Local，Closure，Global，对应的就是三种作用域变量类型，分别是局部变量，闭包变量和全局变量。\u003c/p\u003e\n\u003cp\u003e比如下面一段代码：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e a = \u003cspan class=\"hljs-string\"\u003e'global'\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eouter\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e b = \u003cspan class=\"hljs-string\"\u003e'closure'\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003einner\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e c = \u003cspan class=\"hljs-string\"\u003e'local'\u003c/span\u003e\n\n        \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(a + \u003cspan class=\"hljs-string\"\u003e':'\u003c/span\u003e + b + \u003cspan class=\"hljs-string\"\u003e':'\u003c/span\u003e + c)\n    }\n}\nouter()()\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在 Chrome 控制台执行上面代码，在执行 \u003ccode\u003eouter()()\u003c/code\u003e 时，\u003ccode\u003ea\u003c/code\u003e，\u003ccode\u003eouter\u003c/code\u003e 都是全局变量，浏览器环境中的全局变量全部挂在全局 \u003ccode\u003ewindow\u003c/code\u003e 对象上。\u003ccode\u003eb\u003c/code\u003e 是闭包变量， 对 \u003ccode\u003etemp\u003c/code\u003e 函数内定义的函数保持可见。\u003ccode\u003ec\u003c/code\u003e 是局部变量，只对 \u003ccode\u003einner\u003c/code\u003e 函数内部可见。\u003c/p\u003e\n\u003cp\u003e看上去似乎没什么问题，接下来看点有问题的：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e){\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e _a = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e\n}\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(_a)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e正常情况，\u003ccode\u003e_a\u003c/code\u003e 应该是 \u003ccode\u003eundefined\u003c/code\u003e 的才对，然而不要以为你以为就是你以为的。\u003ccode\u003eif\u003c/code\u003e 语句块里定义的变量 \u003ccode\u003e_a\u003c/code\u003e 直接变成了全局变量。如果是从C语言，Java等主流编程语言转过来的就更加迷惑了，这简直就是TMD不科学。\u003c/p\u003e\n\u003cp\u003e诸如 \u003ccode\u003efor\u003c/code\u003e，\u003ccode\u003ewhile\u003c/code\u003e，\u003ccode\u003eswitch\u003c/code\u003e 等可接大括号的代码块都是不能定义局部变量的，定义的通通是全局变量，能够定义局部变量的只有函数这个第一公民。这不科学，不合理，不符合社会主义核心价值观\\抓狂。\u003c/p\u003e\n\u003cp\u003e一声霹雳，ES6 落地，完美地弥补了上面 JavaScript 暴露的缺陷。从此以后你可以以为你以为的就是你以为的了。ES6 为了向后兼容，\u003ccode\u003evar\u003c/code\u003e 还是原来的 \u003ccode\u003evar\u003c/code\u003e 保持不变，在此基础上又新添了一个声明变量的关键字 \u003ccode\u003elet\u003c/code\u003e 和一个声明常量的关键字 \u003ccode\u003econst\u003c/code\u003e。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e a = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e\n}\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(a)\n\u003cspan class=\"hljs-comment\"\u003e// Uncaught ReferenceError: a is not defined\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e完善的作用域机制可有效地避免命名污染，提高程序的可靠性，减少隐晦的bug，尤其是开发大型多人协作项目时作用尤为明显。所以最佳实践就是自始至终地使用 \u003ccode\u003elet\u003c/code\u003e，而不要再让 \u003ccode\u003evar\u003c/code\u003e 这个混小子出现在视线里。\u003c/p\u003e\n\u003ch1 class=\"heading\"\u003e模块系统\u003c/h1\u003e\n\u003cp\u003e模块化，模块化，模块化，重要的事情说三遍，这是工程化的第一要务，是控制软件复杂度的最重要措施，没有之一。然而 2015 年之前的 JavaScript 语言是没有模块系统的。C 有 \u003ccode\u003einclude\u003c/code\u003e，Java 有 \u003ccode\u003eimport\u003c/code\u003e，连 CSS 都有个蹩脚的 \u003ccode\u003e@import\u003c/code\u003e，wrnmmp，JavaScript 却只有 \u003ccode\u003eundefined\u003c/code\u003e。有条件要上，没条件创造条件也要上。于是乎，JavaScript 社区里的各位勇士造出了各种各样实现模块化的轮子，AMD，CMD，UMD 全蹦出来了。不想用又苦于没有好的解决方案，只能在内心呐喊，这不科学，不合理，不符合···\\抓狂。\u003c/p\u003e\n\u003cp\u003e霹雳哗啦，ES6 落地，带来了原生的模块系统，优雅又简单，丝滑般的体验冲淡了腰斩给咱带来的痛，脸上又洋溢出了久违的笑容。\u003c/p\u003e\n\u003cp\u003e最基本的使用：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-comment\"\u003e/* add.js */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eadd\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ea, b\u003c/span\u003e)\u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e a + b\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e上面定义并导出了一个 ES 模块。接下来就可以在任一个逻辑文件里引用：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-comment\"\u003e/* main.js */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {add} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./add'\u003c/span\u003e\n\nadd(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e模块系统哪家强，ES6 最猖狂。ES6 一出，快刀斩乱麻，直接终结了前端长期的模块化乱象，实现了大一统。唯一的遗憾是 Node.js 对 ES6 模块系统的支持还不是无缝过渡。不过这个还好，毕竟 Node.js 的 CommonJS 用起来还是相当顺手的。\u003c/p\u003e\n\u003cp\u003e有了语言层面的模块系统，JavaScript 也在语言性质上完成了蜕变，不再是一个打遍互联网酱油的小脚本，而成长为一门举重若轻的主流编程语言。模块系统是大型项目不可或缺的标准配置，对项目的开发和维护都非常重要。所以把它列为 ES6 所带来的最重要特性丝毫不为过。\u003c/p\u003e\n\u003ch1 class=\"heading\"\u003e类(Class)\u003c/h1\u003e\n\u003cp\u003e其实这个特性相比前两个倒是没那么重要，说白了，类(Class)做的就是 JS 原型(prototype)做的那点事——继承，咱觉得这是一个没它也行，有它更好的语法糖功能。之所以把它列在这是因为咱看 prototype 不爽很久了。\u003c/p\u003e\n\u003cp\u003eJS 基于原型的继承机制借鉴自 Self 语言。正如 JS 的设计者所言“它是 C 语言和 Self 语言一夜情的产物”。原型继承是很不直观的，或者可以说是非主流的。面向对象程序设计中典型的继承是基于类的继承，例如 Java，C++ 等主流编程语言实现的均是基于类的继承。\u003c/p\u003e\n\u003cp\u003e使用 prototype 会出现 jQuery 的 \u003ccode\u003ejQuery.prototype.init.prototype = jQuery.prototype\u003c/code\u003e 这种让人瞬间石化的代码。况且咱左看右看，上看下看也没看出来原型继承相较于类式继承有什么优点可言，反而是越看越拙。咱第一眼看到 prototype 这货就很不顺眼，也许是因为从 C++ 开发过来的缘故吧。\u003c/p\u003e\n\u003cp\u003e好在 ES6 带来了 \u003ccode\u003eclass\u003c/code\u003e，不知道大家怎么看，反正咱心里是乐坏了，有一种久别重逢，相见恨晚感觉。\u003c/p\u003e\n\u003cp\u003e来看个最简单示例：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-comment\"\u003e/* Point.js */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eShape\u003c/span\u003e\u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.x = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.y = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e英雄联盟里的盲僧说过“如果类不是为了继承，那将毫无意义”。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {Point} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"./Point\"\u003c/span\u003e\n\n\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eTriangle\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ePoint\u003c/span\u003e\u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003econstructor\u003c/span\u003e(){\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e()\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.sides = \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e\n    }\n}\n\u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e a = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Triangle()\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这代码看着多直观，多大方，多舒坦。面向对象的概念已经在前端被越来越广泛的传播开来，咱也是非常推崇 \u003ccode\u003eclass\u003c/code\u003e 的继承方式的，不知道喜欢用哪个，反正在咱的代码里已经是看不到 prototype 的影子了。\u003c/p\u003e\n\u003cp\u003e本文属原创文章，转载注明出处，\u003ca target=\"_blank\" href=\"http://www.cnblogs.com/iovec/p/8111677.html\"\u003e点击查看更好的排版\u003c/a\u003e。\u003c/p\u003e\n","buildTime":"1514378168.7637","__v":0}
{"_id":{"$oid":"5a4393bf95a5f32670e69c47"},"id":"5a4387af6fb9a045186b04d1","author":{"$oid":"5a4393bf95a5f32670e69c37"},"title":"论原子 CSS 的日益普及","meta":{"likeCount":0},"tag":["掘金翻译计划"],"comment":[],"content":"\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e原文地址：\u003ca target=\"_blank\" href=\"https://css-tricks.com/growing-popularity-atomic-css/?utm_source=SitePoint\u0026amp;utm_medium=email\u0026amp;utm_campaign=Versioning\"\u003eOn the Growing Popularity of Atomic CSS\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e原文作者：\u003ca target=\"_blank\" href=\"https://css-tricks.com/author/olliew/\"\u003eOLLIE WILLIAMS\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e译文出自：\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner\"\u003e掘金翻译计划\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e本文永久链接：\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner/blob/master/TODO/growing-popularity-atomic-css.md\"\u003ehttps://github.com/xitu/gold-miner/blob/master/TODO/growing-popularity-atomic-css.md\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e译者：\u003ca target=\"_blank\" href=\"https://github.com/sunshine940326\"\u003eCherry\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e校对者：\u003ca target=\"_blank\" href=\"https://github.com/Tina92\"\u003eTina92\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/ClarenceC\"\u003eClarenceC\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch1 class=\"heading\"\u003e论原子 CSS 的日益普及\u003c/h1\u003e\n\u003cp\u003e即使你自认为是 CSS 方面的专家，也很可能在某一大型项目中，处理一个错综复杂并且越来越庞大的样式表，它们中一些样式表看起来就像一张相互继承并且混乱缠绕的网。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"意大利面怪物\" src=\"https://user-gold-cdn.xitu.io/2017/12/27/16097ca21a1c67de?w=1790\u0026amp;h=1237\u0026amp;f=jpeg\u0026amp;s=388510\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e级联的作用非常强大。微小的改变可能会引起很大的改变，这就导致了很难知道下一秒会发生什么。重构、更改和移除 CSS 都是高危动作，因为很难知道这个 CSS 在哪里被引用。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e你什么时候可以做到改变 CSS 不引起不必要的改动？\u003c/strong\u003e 答案是无论在何种情况下，你都很少有这种想法。\u003c/p\u003e\n\u003cp\u003e在我有限的经验中，其中的一种情况是，在大型团队的大型代码库中，\u003cstrong\u003e给人的感觉是 CSS 太大了以至于团队的成员开始对 CSS 很敏感并且对 CSS 感到害怕，但是实际上只是让你增加 CSS。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e由此产生一个工具，它能做的事情远远少于 CSS，但是在某种程度上（在你学会之后），没有人在对其感到害怕，我认为这非常棒。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://css-tricks.com/lets-define-exactly-atomic-css/#comment-1607914\"\u003eChris Coyier\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch3 class=\"heading\"\u003e原子 CSS 让事情变得简单\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003e我不在需要去考虑如何组织我的 CSS。我也不需要考虑如何给我的组件起名，也不需要考虑将一个组件和另一个组件完全分离，应该将其放在哪里，最重要的，当有新的需求是怎么进行重构。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://madebymany.com/stories/takeaways-from-trying-out-tachyons-css-after-ages-using-bem\"\u003eCallum Jefferies 在尝试通过 BEM 命名方式使用超分子 CSS 之后发表的言论\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://css-tricks.com/lets-define-exactly-atomic-css/\"\u003e原子 CSS\u003c/a\u003e 提供了一套直接、明显并且简单的方法论。类是不可变的，你不可以改变类名。这使得s使用 CSS 是可预见的和可靠的，因为类总是做\u003cstrong\u003e完全\u003c/strong\u003e相同的事情。在 HTML 文件中添加或者移除一个有作用域范围的公用类是明确的，它让你确信你不会破坏其他任何东西。这可以减少认知负荷和精神负担。\u003c/p\u003e\n\u003cp\u003e给组件命名是出了的困难。想出一个既有意义又足够通用的类名费时又费力。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e计算机科学中只有两个难题：缓存失效和命名问题。\u003c/p\u003e\n\u003cp\u003e– Phil Karlton\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e提出适当的抽象是困难的。相比之下，命名工具类就简单直接一些。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e/* 工具类命名 */\n.relative {\n  position: relative;\n}\n.mt10 {\n  margin-top: 10px;\n}\n.pb10 {\n  padding-bottom: 10px;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e原子的类从名字就可以知道它们的功能。意图和效果显而易见。而包含无数类名的 HTML 会显得很乱，HTML 比一个庞大并且错综复杂的样式要容易一些。\u003c/p\u003e\n\u003cp\u003e在一个前后端混合的团队中，可能参与开发的后台人员对 CSS 知识有限，很少有人将样式表搞乱。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"来自 ryanair.com —— 整个 CSS 都在完成一个效果\" src=\"https://user-gold-cdn.xitu.io/2017/12/27/16097ca219d3e183?w=2200\u0026amp;h=1468\u0026amp;f=png\u0026amp;s=695543\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e样式差异处理\u003c/h3\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://css-tricks.com/need-css-utility-library/\"\u003e工具类\u003c/a\u003e 非常适合处理小的样式差异。虽然设计系统和模式库现在可能风靡一时，但是你要意识到将会有不断的新需求和变化。所有组件的可重用性往往不是体现在设计模拟。虽然实现和设计稿一致是最好的，但是一个大型网站繁多的上下环境一定会有很多的不可避免的不同。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/16097ca21571e614?w=1214\u0026amp;h=896\u0026amp;f=png\u0026amp;s=176533\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eMedium 的开发团队已经不使用 BEM 了，在 \u003ca target=\"_blank\" href=\"https://medium.engineering/simple-style-sheets-c3b588867899\"\u003e他们的博文中\u003c/a\u003e 有提到。\u003c/p\u003e\n\u003cp\u003e如果我们希望组件通过简单的方式和另一个组件只有细微的差别，该怎么去做呢？如果你使用的 BEM 的命名方式，修饰符类很可能会不起作用。无数的修饰符往往只有一个效果。我们以边距（\u003ccode\u003emargin\u003c/code\u003e）为例。不同组件的边框大部分都不相同，让所有组件的边框保持一致也不太可能。这个距离不仅取决于组件，还取决于组件在页面中的位置和它相对于其他元素的相对位置。大部分的设计都包含相似但是\u003cstrong\u003e不完全相同\u003c/strong\u003e的 UI 元素，使用传统的 CSS 很难处理。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e很多人都不喜欢它\u003c/h3\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"Aaron Gustafson，《A List Apart》的总编辑，Web Standards Project 的前任项目经理，微软员工\" src=\"https://user-gold-cdn.xitu.io/2017/12/27/16097ca219a3672c?w=1225\u0026amp;h=586\u0026amp;f=png\u0026amp;s=120545\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"Soledad Penades，来自 Mozilla 的工程师\" src=\"https://user-gold-cdn.xitu.io/2017/12/27/16097ca219c29083?w=1290\u0026amp;h=414\u0026amp;f=png\u0026amp;s=97739\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"CSS 禅意花园的创办者\" src=\"https://user-gold-cdn.xitu.io/2017/12/27/16097ca2155d7bc9?w=1202\u0026amp;h=497\u0026amp;f=png\u0026amp;s=106809\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e原子 CSS 和行内样式有什么不同？\u003c/h3\u003e\n\u003cp\u003e这是质疑原子 CSS 的人经常会问到的问题。长期以来大家都认为行内样式不利于实践，自 Web 时代初期就很少有人使用了。**那些批评者将原子 CSS 与行内样式等同也是有道理的，因为行内元素和原子 CSS 有相同的弊端。**举个例子，如果我们想要将所有的 \u003ccode\u003e.block\u003c/code\u003e 类中的 \u003ccode\u003ecolor\u003c/code\u003e 改变为 \u003ccode\u003enavy\u003c/code\u003e 会怎样？如果这样做：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e.black {\n  color: navy;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e很明显，这是\u003cstrong\u003e不对\u003c/strong\u003e的。\u003c/p\u003e\n\u003cp\u003e现在的编辑器很复杂。使用查找和替换将所有的 \u003ccode\u003e.black\u003c/code\u003e 类换成一个新的 \u003ccode\u003e.navy\u003c/code\u003e 类十分的简单，但是却是很危险的。问题是，你只是想将 \u003cstrong\u003e某些\u003c/strong\u003e \u003ccode\u003e.block\u003c/code\u003e 类变为 \u003ccode\u003e.naby\u003c/code\u003e 类。\u003c/p\u003e\n\u003cp\u003e在传统的 CSS 方法中，调整组件的样式和在一个 CSS 文件中更新一个类的一个值一样简单。使用原子 CSS，这就变成了一项单调乏味的任务，它通过搜索每一块 HTML 来更新所述组件的每一个实例。然而所有的高级编辑器都是这样。即使你将标记分离为可重用的模板，这仍然是一个主要缺点。\u003cstrong\u003e也许这种手动操作对于这种简单的方法是值得的。用不同的类更新 HTML 文件可能很乏味，但并不困难。\u003c/strong\u003e（虽然有一些时候我在手动更新时遗漏了相关组件的某些实例，暂时引入了风格不一致）。如果改变了设计，你可能需要从 HTML 中手动编辑类。\u003c/p\u003e\n\u003cp\u003e虽然原子 CSS 和内联样式一样有很大的缺陷，但是这不是一种退后。工具类以各种方式优于内联样式。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e原子 CSS vs. 行内样式\u003c/h3\u003e\n\u003ch4 class=\"heading\"\u003e原子类允许抽象，内联样式不允许\u003c/h4\u003e\n\u003cp\u003e原子类可以创建抽象类，内联样式不行。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;p style=\u003cspan class=\"hljs-string\"\u003e\"font-family: helvetica; color: rgb(20, 20, 20)\"\u003c/span\u003e\u0026gt;\n  Inline styles suck.\n\u0026lt;/p\u0026gt;\n\u0026lt;p class=\u003cspan class=\"hljs-string\"\u003e\"helvetica rgb202020\"\u003c/span\u003e\u0026gt;\n  Badly written CSS isn\u003cspan class=\"hljs-string\"\u003e't very different.\n\u0026lt;/p\u0026gt;\n\u0026lt;p class=\"sans-serif color-dark\"\u0026gt;\n  Utility classes allow for abstraction.\n\u0026lt;/p\u0026gt;\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e当改变设计的时候，上面例子的前两个需要手动的修改和替换。第三个例子可以只调整一处样式表。\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003e工具\u003c/h4\u003e\n\u003cp\u003eCSS 社区已经创建了很多用于行内样式的无用的工具例如：Sass， Less， PostCSS， Autoprefixer 等。\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003e更加简洁\u003c/h4\u003e\n\u003cp\u003e与其写出冗余的行内样式，倒不如像原子 CSS 一样写出简洁的声明缩写。相比之下少打了一些字符：\u003ccode\u003emt0\u003c/code\u003e 和 \u003ccode\u003emargin-top: 0\u003c/code\u003e，\u003ccode\u003eflex\u003c/code\u003e 和 \u003ccode\u003edisplay: flex\u003c/code\u003e，等等。\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003e差异性\u003c/h4\u003e\n\u003cp\u003e这是一个有争议的话题。如果一个类或者行内样式仅仅只做一件事情，\u003cstrong\u003e那么你是否希望它只做一件事情\u003c/strong\u003e，很多人提倡使用 \u003ccode\u003e!importent\u003c/code\u003e 来保证不被其他的除了 \u003ccode\u003e!important\u003c/code\u003e 的样式重写，这也就意味着这个样式肯定会被应用。但是，一个类本身是足够具体的，可以覆盖其他的基本类。和行内样式相比，原子类特异性较低是一件好事。它允许更多的通用性。都可以使用 JavaScript 来改变样式。如果是行内样式的话就比较困难。\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003e样式表的类比行内样式能做的更多\u003c/h4\u003e\n\u003cp\u003e行内样式不支持媒体查询、伪选择器、\u003ccode\u003e@supports\u003c/code\u003e 和 CSS 动画。也许你有一个单独的悬停效果你想要应用在不同的元素而不是一个组件。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e.circle {\n  border-radius: 50%;\n}\n\n.hover-radius0:hover {\n  border-radius: 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e简单的可重用媒体查询规则也可以转换成实用的工具类，其常用的类名前缀表示小型、中型和大型的屏幕尺寸。下面有一个 flexbox 类的实例，只能对中型和大型屏幕尺寸有效：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e@media (min-width: 600px) {\n  .md-flex {\n    display: flex;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这在内联样式中是不可能的。\u003c/p\u003e\n\u003cp\u003e你是不是想要一个可重用的有伪内容的图标或标签？\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e.with-icon::after {\n  content: \u003cspan class=\"hljs-string\"\u003e'some icon goes here!'\u003c/span\u003e;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 class=\"heading\"\u003e有限的选择可能会更好\u003c/h4\u003e\n\u003cp\u003e行内样式可以做\u003cstrong\u003e任何事情\u003c/strong\u003e。这过于自由以至于很容易导致显示效果混乱和不一致。通过每一个预定类，原子 CSS 可以保证一定程度的风格一致。而不是杂乱的颜色值和不确定的颜色值，工具类提供了一个预定义设置选项。开发者从有限的设置中选择单一功能的工具类，这种约束既可以消除日益增加的样式问题，保持视觉的一致性。\u003c/p\u003e\n\u003cp\u003e我们来看一个 \u003ccode\u003ebox-shadow\u003c/code\u003e 的例子。一个行内样式可以随意使用偏移量、范围、颜色、透明度和模糊半径。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;div style=\u003cspan class=\"hljs-string\"\u003e\"box-shadow: 2px 2px 2px rgba(10, 10, 250, .4)\"\u003c/span\u003e\u0026gt;stuff\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e使用原子方法，CSS 作者可以定义首选样式，然后简单应用，不可能出现风格不一致。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"box-shadow\"\u003c/span\u003e\u0026gt;stuff\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e原子 CSS 既不是全能也不是一无是处\u003c/h3\u003e\n\u003cp\u003e毫无疑问，像 Tachyons 这样的原子类框架越来越受欢迎。然而，CSS 方法并不是互斥的。很多情况下，工具类并不是最好的选择：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果你需要在媒体查询中改变特定组件里面大量的样式。\u003c/li\u003e\n\u003cli\u003e如果你想要使用 JavaScript 改变很多样式，将其抽象为一个单独的类是非常容易的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e原子类可以和其他样式方法共存。我们应该将设置一些基础类和稳健的全局样式。如果你继续复制工具类的相似字符串，这些样式很可能被抽象为一个类。你可以在组件类中将其合并，但是你只能在知道它们不会被重用时才可以这样。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e以组件为先的方法去写 CSS 意味着你创建一个组件事物即使他们不会再被重用。这种过早的抽象就是使样式表变得冗余和复杂的原因。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://adamwathan.me/css-utility-classes-and-separation-of-concerns/\"\u003eAdam Wathan\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e单位越小，它的可重用性就越强。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"http://www.smashingmagazine.com/2013/10/challenging-css-best-practices-atomic-approach\"\u003eThierry Koblentz\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e看一下 Bootstrap 的最新版本，现在提供了一整套的工具类，仍然包括其传统的组件。未来，越来越多的流行框架采用这种混合方法。\u003c/p\u003e\n\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner\"\u003e掘金翻译计划\u003c/a\u003e 是一个翻译优质互联网技术文章的社区，文章来源为 \u003ca target=\"_blank\" href=\"https://juejin.im\"\u003e掘金\u003c/a\u003e 上的英文分享文章。内容覆盖 \u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#android\"\u003eAndroid\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#ios\"\u003eiOS\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E5%89%8D%E7%AB%AF\"\u003e前端\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E5%90%8E%E7%AB%AF\"\u003e后端\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E5%8C%BA%E5%9D%97%E9%93%BE\"\u003e区块链\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E4%BA%A7%E5%93%81\"\u003e产品\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E8%AE%BE%E8%AE%A1\"\u003e设计\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD\"\u003e人工智能\u003c/a\u003e等领域，想要查看更多优质译文请持续关注 \u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner\"\u003e掘金翻译计划\u003c/a\u003e、\u003ca target=\"_blank\" href=\"http://weibo.com/juejinfanyi\"\u003e官方微博\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://zhuanlan.zhihu.com/juejinfanyi\"\u003e知乎专栏\u003c/a\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n","buildTime":"1514378175.3449","__v":0}
{"_id":{"$oid":"5a4393bf95a5f32670e69c48"},"id":"5a3e121451882533f01ec66d","author":{"$oid":"5a4393bf95a5f32670e69c3a"},"title":"2017前端监控系统探索总结","meta":{"likeCount":0},"tag":["前端","API","数据分析","产品"],"comment":[],"content":"\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003ch2\u003e背景\n\u003c/h2\u003e\u003cp\u003e在当下互联网行业，监控概念与重要性已经不需要再进行阐述，然而监控分为多种，对物理层（机房，云主机）的监控，对传输链路的监控，对已部署服务的监控等等，而后端的代码通常直接运行在服务器并处于24小时实时的监控状态之下，一旦服务的可用性出现问题，SRE和DEV往往在第一时间就会收到告警，并根据告警信息在第一时间解决故障。相比之下，前端代码则运行在客户端上，为了让前端能够和后端一样，需要将客户端的前端代码监控起来，当客户端出现故障时，能第一时间通知到前端负责人，定位故障，及时止损。\u003c/p\u003e\u003cp\u003e那\u003cb\u003e前端监控系统\u003c/b\u003e都需要监控什么？在前端应用日渐复杂的今天，我认为对于前端的监控主要分为三个方面：\u003c/p\u003e\u003cp\u003e\u003cb\u003e性能监控\u003c/b\u003e\u003c/p\u003e\u003cp\u003e为什么要监控性能呢？因为对于任何一家互联网公司，性能往往与利益直接相关。有数据调查显示：当Google 延迟 \u003cb\u003e400ms时，\u003c/b\u003e搜索量下降 \u003cb\u003e0.59%\u003c/b\u003e、Bing 延迟 \u003cb\u003e2s\u003c/b\u003e，收入下降 \u003cb\u003e4.3%、\u003c/b\u003eYahoo 延迟 \u003cb\u003e400ms\u003c/b\u003e，流量下降 \u003cb\u003e5-9%，\u003c/b\u003e所以，很多公司在做用户体验分析时，第一个看的就是性能监控指标，\u003cspan\u003e在前端领域，性能无非是以下参考指标：\u003c/span\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003e白屏时间；\u003c/li\u003e\u003cli\u003e首屏时间；\u003c/li\u003e\u003cli\u003e用户可交互时间；\u003c/li\u003e\u003cli\u003e总下载时间；\u003c/li\u003e\u003cli\u003eTCP连接时间；\u003c/li\u003e\u003cli\u003eHTTP请求时间；\u003c/li\u003e\u003cli\u003eHTTP响应时间；\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cspan\u003e而且很重要的一点，也是大家往往最容易忽视的：\u003c/span\u003e\u003cb\u003e性能会伴随产品的迭代而有所衰减\u003c/b\u003e。特别在移动端，网络条件十分不稳定的情况下。性能优化不存在“黄金法则”，我们需要一套性能监控系统持续监控、评估、预警页面性能状况、发现瓶颈，更有针对性的指导优化工作的进行。\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003cb\u003e异常监控\u003c/b\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e除了性能之外，我们还要监控客户端脚本发生的报错，前端报错受\u003cb\u003e网络，机型，业务逻辑\u003c/b\u003e影响而且大部分错误难以还原现场，比如我们团队时时收到用户的反馈和投诉：\u003c/p\u003e\u003cul\u003e\u003cli\u003e甲用户 : 点击XX按钮之后页面白屏了\u0026nbsp;\u003cbr\u003e\u003c/li\u003e\u003cli\u003e乙用户:\u0026nbsp; 优惠劵消费后，支付金额显示不正确\u003c/li\u003e\u003cli\u003e丙用户：最近页面特别卡，点击tab好久才能反应过来\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e面对用户的反馈，开发经常感到困惑：到底有多卡，哪个步骤卡？是个别现象还是大面积都受到了影响？白屏时页面请求的返回码是多少？是被运行商劫持还是CDN出了问题？能让用户用Charles配合抓个包么？如何做有针对性的优化？优化的结果怎么去衡量？\u003c/p\u003e\u003cp\u003e为了解决这些痛点，我们需要对客户端服务进行\u003cb\u003e\u003ci\u003e基于用户行为\u003c/i\u003e\u003c/b\u003e的监控。\u003c/p\u003e\u003cp\u003e\u003cb\u003e数据监控\u003c/b\u003e\u003c/p\u003e\u003cp\u003e互联网公司的产品，每一个决策，每一个迭代都需要分析各种数据，数据中往往会有我们需要的答案：\u003c/p\u003e\u003col\u003e\u003cli\u003e页面PV,UV可能直接影响转化率\u003c/li\u003e\u003cli\u003e从用户访问页面的顺序挖掘使用习惯（等等）\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e这部分监控数据主要供PM/PD使用，业务数据可以驱动业务自身的增长，有人曾说：“要降低创业失败的可能性只有两种方法：一是未卜先知，另一个是做精益的数据分析”，由此可见数据分析的重要性。\u003c/p\u003e\u003ch2\u003e传统解决方案及缺陷\u003c/h2\u003e\u003cp\u003e目前已经存在了一些针对前端监控解决方案：Sentry,Badjs,jsTracker,GrowingIo等等，在公司内部也有自研的监控系统。它们都从不同维度试着解决前端在监控方面的问题，大家的实现思路都很类似、要实现监控，首先要采集指标：\u003c/p\u003e\u003ch3\u003e性能指标\u003c/h3\u003e\u003cp\u003e这里要针对的主要是白屏时间、首屏时间、用户可操作、总下载时间。\u003c/p\u003e\u003cp\u003e这里以首屏时间为例：高版本chrome浏览器中可以直接通过 firstPaintTime 接口来获取load time，但大部分浏览器并不支持，必须想其他办法来监测。谨记一点，在做时间相关测量时，千万不要使用setTimeout和setInterval方法，因为在单线程执行引擎中，异步队列的执行是\u003cb\u003e不能确保执行时间\u003c/b\u003e的。这边给出一种可行的测量方案，准确率在99成以上。\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e\u0026lt;doctype html\u0026gt;\n\u0026lt;html\u0026gt;\n    \u0026lt;head\u0026gt;\n        \u0026lt;script \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"text/javascript\"\u003c/span\u003e\u0026gt;\n            var timerStart = Date.now();\n        \u0026lt;/script\u0026gt;\n        \u0026lt;!-- 加载其他资源，执行代码blabla --\u0026gt;\n    \u0026lt;/head\u0026gt;\n    \u0026lt;body\u0026gt;\n        \u0026lt;!-- 路由框架挂载节点 --\u0026gt;\n\n        \u0026lt;script \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"text/javascript\"\u003c/span\u003e\u0026gt;\n             $(document).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n                 console.log(\u003cspan class=\"hljs-string\"\u003e\"DOMready 时间 \"\u003c/span\u003e, Date.now()-timerStart);\n             });\n             $(window).load(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n                 console.log(\u003cspan class=\"hljs-string\"\u003e\"所有资源加载完成 时间: \"\u003c/span\u003e, Date.now()-timerStart);\n             });\n        \u0026lt;/script\u0026gt;\n    \u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e另一种优雅的解决方案是直接使用window.performance接口：\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003econnectEnd                 Time when server connection is finished.\nconnectStart               Time just before server connection begins.\ndomComplete                Time just before document readiness completes.\ndomContentLoadedEventEnd   Time after DOMContentLoaded event completes.\ndomContentLoadedEventStart Time just before DOMContentLoaded starts.\ndomInteractive             Time just before readiness \u003cspan class=\"hljs-built_in\"\u003eset\u003c/span\u003e to interactive.\ndomLoading                 Time just before readiness \u003cspan class=\"hljs-built_in\"\u003eset\u003c/span\u003e to loading.\ndomainLookupEnd            Time after domain name lookup.\ndomainLookupStart          Time just before domain name lookup.\nfetchStart                 Time when the resource starts being fetched.\nloadEventEnd               Time when the load event is complete.\nloadEventStart             Time just before the load event is fired.\nnavigationStart            Time after the previous document begins unload.\nredirectCount              Number of redirects since the last non-redirect.\nredirectEnd                Time after last redirect response ends.\nredirectStart              Time of fetch that initiated a redirect.\nrequestStart               Time just before a server request.\nresponseEnd                Time after the end of a response or connection.\nresponseStart              Time just before the start of a response.\ntiming                     Reference to a performance timing object.\nnavigation                 Reference to performance navigation object.\nperformance                Reference to performance object \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e a window.\n\u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e                       Type of the last non-redirect navigation event.\nunloadEventEnd             Time after the previous document is unloaded.\nunloadEventStart           Time just before the unload event is fired.\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e接口兼容性：\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/23/160840e071212dc6?w=2574\u0026amp;h=628\u0026amp;f=png\u0026amp;s=110801\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003cb\u003e异常指标\u003c/b\u003e\u003c/p\u003e\u003cp\u003e主动捕获异常方案主要是 onError 和 addEventListener，onError 在 IE6 开始就支持了，所以 大部分系统的主动采集是使用的 onError。这里注意\u003cb\u003e浏览器的同源性策略（CORS），\u003c/b\u003e在高级浏览器中如果浏览器捕获到了错误信息，如果 JS 文件所在的域名（如：meituan.com）和当前的页面地址（如：dianping.com)是跨域的，那么引擎会自动把onError 中的参数 替换为 script error，此时无法获取行列数以及报错详细信息。解决方案是在标签引入时加上crossorigin字段。\u003cb\u003e\u003cbr\u003e\u003c/b\u003e\u003c/p\u003e\u003cp\u003e虽然传统方法能够自动catch大部分错误，但是也伴随着以下\u003cb\u003e缺陷\u003c/b\u003e：\u003c/p\u003e\u003col\u003e\u003cli\u003e部分应用在不同网络，机型上表现不同，开发人员需要获取到更详细的分类信息，传统系统很难做分类聚合，开发面对几十页分类的table无从下手。\u003c/li\u003e\u003cli\u003e错误与错误之间往往成相关性，但是在传统系统中catch到的错误都是孤立的，没有基于用户行为的分析。\u003c/li\u003e\u003cli\u003e针对异常的告警配置不够灵活，无法满足开发需求：大部分异常告警指标伴随高低峰期波动，没有一成不变的指标，而传统告警平台都是采用绝对阈值的告警方案，要么高峰期误报太多，要么低峰期错误无法发现。\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e\u003cb\u003e数据指标\u003c/b\u003e\u003c/p\u003e\u003cp\u003e传统监控方案采用的都是手动埋点上报，但是缺点十分明显：手动埋点往往会出现\u003cb\u003e埋点混乱\u003c/b\u003e，甚至\u003cb\u003e埋错、漏埋\u003c/b\u003e的问题，埋点沟通过程中，数据团队和业务工程团队配合困难，新功能的开发往往伴随着新埋点的增加，而且数据团队的需求优先级往往靠后，导致很多新上线功能得不到数据的验证。\u003c/p\u003e\u003cp\u003e而有些基于关系型数据库的系统\u003cb\u003e实时性差\u003c/b\u003e，数据要隔天才能查看，查询命令执行一次动辄耗费几十分钟乃至上小时，已经没有效率可言。\u003c/p\u003e\u003ch2\u003e新解决方案\u003c/h2\u003e\u003cp\u003e伴随着上面讨论的问题，我们寻求新的解决方案，一种\u003cb\u003e高可用\u003c/b\u003e的监控方案。它应该具有如下特征：\u003c/p\u003e\u003col\u003e\u003cli\u003e\u003cb\u003e全量采集\u003c/b\u003e：监控指标健全，端到端采集全量的性能指标，关键执行方法，业务指标，覆盖率做到2个9以上。\u003c/li\u003e\u003cli\u003e\u003cb\u003e无需埋点\u003c/b\u003e：全量上报，无需开发人员手动埋点，从根本上杜绝错埋和漏埋\u003c/li\u003e\u003cli\u003e\u003cb\u003e查询便捷\u003c/b\u003e：能够按照地域，机型，操作系统，浏览器版本，网络状况等多个维度进行数据查询，最好支持全文搜索，分类聚合。\u003c/li\u003e\u003cli\u003e\u003cb\u003e场景还原\u003c/b\u003e：根据打点信息，还原用户从登陆开始一系列操作，建立基于用户行为的时序图。\u003c/li\u003e\u003cli\u003e\u003cb\u003e实时性强\u003c/b\u003e：秒级查询，上线后能立即看到优化效果并指导下一步优化。\u003c/li\u003e\u003cli\u003e\u003cb\u003e智能告警\u003c/b\u003e：采用静态阈值和动态阈值结合的方式，兼顾高低峰，减少误报漏报。并针对业务数据建立告警指标，发现系统深层次问题。\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e根据这些需求，我们团队打造了一套全新的监控体系，新系统采用了\u003cb\u003e无埋点SDK\u003c/b\u003e（小程序），\u003cb\u003eELK\u003c/b\u003e做本地化日志存储，并使用了基于\u003cb\u003e动态阈值\u003c/b\u003e的告警策略。下面是系统架构图：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/24/16087e2e000f7091?w=1346\u0026amp;h=928\u0026amp;f=png\u0026amp;s=261795\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e开发人员在本地通过代码接入SDK后，即可使用监控体系的全部功能：数据采集，上报，聚合分析，智能告警等功能，而且所有数据均是实时上报，秒级查询。\u003c/p\u003e\u003cp\u003e在最开始探索过程中，我们使用webpack插件+npm包下载方式，但是由于两部分上报逻辑在网络极差的情况下，会出现写缓存冲突的问题，导致重复上报或错误上报，现已将架构调整为单一script标签引入的方式，部分保留下来的主动上报接口，开发可以根据自己需要在业务代码中再次封装：\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e...\nmoduleClick(options) {\n        const { name, ...otherOptions } = options;\n        M.moduleClick(name, otherOptions);\n    },\n    /**\n     * 曝光事件\n     * @param options\n     */\n    moduleView(options) {\n        const { name, ...otherOptions } = options;\n        M.moduleView(name, otherOptions);\n    },\n    /**\n     * 编辑事件\n     * @param options\n     */\n    moduleEdit(options) {\n        const { name, ...otherOptions } = options;\n        M.moduleEdit(name, otherOptions);\n    },\n...\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u0026nbsp;接入后，新版系统和之前相比有哪些变化？\u003c/p\u003e\u003cp\u003e1.因为采集是无埋点全量的，关键方法都会进行参数上报，然后可以通过分类聚合建立用户的操作时序，通过故障上下文准确定位问题。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/24/1608802bb17017bb?w=1328\u0026amp;h=1062\u0026amp;f=png\u0026amp;s=445377\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e2. 对resource和ajax请求指标做采集，可以筛选出故障用户当时的场景信息：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/24/16087ff57e7be943?w=1522\u0026amp;h=972\u0026amp;f=png\u0026amp;s=307385\"\u003e\u003c/p\u003e\u003cp\u003e3.告警采用动态阈值，对于周期性强的数据，通过机器学习的算法进行环比告警，大大降低了误报和漏报：\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/24/1608806a8c9f64b5?w=1562\u0026amp;h=650\u0026amp;f=png\u0026amp;s=245799\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e在做日志存储的时候，数据量是一个挑战，我们采用的是集群架构，但是一个用户量很大的站点，日志的上报量是非常高的，高峰期时，一个1万日活APP可能会突破3000的qps,这对日志系统并发能力和稳定性是很大的挑战。我们选择了全量master+data节点的方式，对数据副本分片设置为1，任意一台节点挂掉，会由副本选举出新的主分片，不会造成日志丢失。在写入方面，我们选择了bulk方式批量写入，通过反复试验，批量写入线程大小在5MB-15MB之间。由于日志系统是主要面对写入的，所以关闭了_all查询，写入性能优化1倍，同时gc新老分配为1：4，保证了批量写入的稳定。\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003ch2\u003e总结与未来规划\u003c/h2\u003e\u003cp\u003e通过对新监控解决方案的探索，我们积累了比较宝贵的数据分析经验，对于终端哪些数据对于故障处理，性能优化起到重要作用有了新的认识，不过目前系统仍处于迭代过程中，距离预定的目标还有比较大的优化空间。\u003c/p\u003e\u003cp\u003e在未来，我们将重点攻克以下几个问题：\u003c/p\u003e\u003cdiv\u003e\u003cdiv\u003e1.系统轻量化\u003c/div\u003e\u003cp\u003e减少上报量：合并数据结构，释放更多上行带\u003c/p\u003e\u003cp\u003e优化SDK性能：减少缓存写入频率，做到业务对监控模块无感\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cdiv\u003e2.让监控更智能\u003c/div\u003e\u003cp\u003e识别周高峰和节假日，同时增强数据清洗能力，提高数据的可用性\u003c/p\u003e\u003c/div\u003e\u003cp\u003e3.优化数据分析体验\u003c/p\u003e\u003cp\u003e开放埋点配置平台，让产品自主配置业务埋点，通过配置文件转化成埋点，省时高效。\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e","buildTime":"1514378062.8","__v":0}
{"_id":{"$oid":"5a4393bf95a5f32670e69c49"},"id":"5a41abb35188252a3d383eb8","author":{"$oid":"5a4393bf95a5f32670e69c3e"},"title":"前端性能优化之性能测试","meta":{"likeCount":0},"tag":["前端","JavaScript","单元测试","浏览器"],"comment":[],"content":"\u003cblockquote\u003e\n\u003cp\u003e前端性能优化是一个很宽泛的概念，有很多教程都有前端性能优化的方法，这也是我们一直在关注的一件重要事情。配合各种方式、手段、辅助系统，前端优化的最终目的都是提升用户体验，改善页面性能，我们常常竭尽全力进行前端页面优化，但却忽略了这样做的效果和意义。先不急于探究前端优化具体可以怎样去做，先看看什么是前端性能，应该怎样去了解和评价前端页面的性能。\u003c/p\u003e\n\u003cp\u003e通常前端性能可以认为是用户获取所需要页面数据或执行某个页面动作的一个实时性指标，一般以用户希望获取数据的操作到用户实际获得数据的时间间隔来衡量。例如用户希望获取数据的操作是打开某个页面，那么这个操作的前端性能就可以用该用户操作开始到屏幕展示页面内容给用户的这段时间间隔来评判。用户的等待延时可以分成两部分：\u003cstrong\u003e可控\u003c/strong\u003e 等待延时和 \u003cstrong\u003e不可控\u003c/strong\u003e 等待延时。\u003cstrong\u003e可控\u003c/strong\u003e 等待延时可以理解为能通过技术手段和优化来改进缩短时间的部分，例如减小图片大小让请求加载更快、减少 \u003cstrong\u003eHTTP\u003c/strong\u003e 请求数等。\u003cstrong\u003e不可控\u003c/strong\u003e 等待延时则是不能或很难通过前后端技术手段来改进优化的，例如鼠标点击延时、\u003cstrong\u003eCPU\u003c/strong\u003e 计算时间延时、\u003cstrong\u003eISP(Internet Service Provider，互联网服务提供商)\u003c/strong\u003e 网络传输延时等。所以要知道的是，前端中的所有优化都是针对 \u003cstrong\u003e可控等待延时\u003c/strong\u003e 这部分来进行的，下面来了解一下如何获取和评价一个页面的具体性能。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 class=\"heading\"\u003e前端性能测试\u003c/h2\u003e\n\u003cp\u003e获取和衡量一个页面的性能，主要可以通过以下几个方面：\u003ccode\u003ePerformance Timing API\u003c/code\u003e、\u003ccode\u003ePrpfile\u003c/code\u003e 工具、页面埋点计时、资源加载时序图分析。\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003ePerformance Timing  API\u003c/h4\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://www.w3.org/TR/resource-timing/\"\u003ePerformance Timing API\u003c/a\u003e 是一个支持 \u003ccode\u003eInternet Explorer 9\u003c/code\u003e 以上版本及 \u003ccode\u003eWebKit\u003c/code\u003e\n内核浏览器中用于记录页面加载和解析过程中关键时间点的机制，它可以详细记录每个页面资源从开始加载到解析完成这一过程中具体操作发生的时间点，这样根据开始和结束时间戳就可以计算出这个过程所花的时间了。\u003c/p\u003e\n\u003cp\u003e图 \u003cstrong\u003e1-1\u003c/strong\u003e为 \u003cstrong\u003eW3C\u003c/strong\u003e标准中 \u003ccode\u003ePerformance Timing\u003c/code\u003e 资源加载和解析过程记录各个关键点的示意图，浏览器中加载和解析一个 \u003cstrong\u003eHTML\u003c/strong\u003e 文件的详细过程先后经历 \u003cstrong\u003eunload、redirect、App Cache、DNS、TCP、Request、Response、Processing、onload\u003c/strong\u003e 几个阶段，每个过程中开始和结束的关键时间戳浏览器已经使用 \u003ccode\u003eperformance.timing\u003c/code\u003e 来记录了，所以根据这个记录并结合简单的计算，我们就可以得到页面中每个过程所消耗的时间。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"Performance Timing API 关键时间点记录\" src=\"https://user-gold-cdn.xitu.io/2017/12/26/1609184e525a8133?w=1473\u0026amp;h=879\u0026amp;f=png\u0026amp;s=62923\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003cstrong\u003e图1-1\u003c/strong\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003cstrong\u003ePerformance Timing API 关键时间点记录\u003c/strong\u003e\u003cp\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003eperformanceTest\u003c/span\u003e\u003c/span\u003e(){\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e timing = performance.timing,\n\u0009readyStart = timing.fetchStart - timing.navigationStart,\n\u0009redirectTime = timing.redirectEnd - timing.redirectStart,\n\u0009appcacheTime = timing.domainLookupStart - timing.fetchStart,\n\u0009unloadEventTime = timing.unloadEventEnd - timing.unloadEventStart,\n\u0009lookupDomainTime = timing.domainLookupEnd - timing.domainLookupStart,\n\u0009connectTime = timing.connectEnd - timing.connectStart,\n\u0009requestTime = timing.responseEnd - timing.requestStart,\n\u0009initDomTreeTime = timing.domInteractive - timing.responseEnd,\n\u0009domReadyTime = timing.domComplete - timing.domInteractive,\n\u0009loadEventTime = timing.loadEventEnd - timing.loadEventStart,\n\u0009loadTime = timing.loadEventEnd - timing.navigationStart;\n\u0009\u0009\u0009\n    console.log(\u003cspan class=\"hljs-string\"\u003e'准备新页面时间耗时：'\u003c/span\u003e+readyStart);\n    console.log(\u003cspan class=\"hljs-string\"\u003e'redirect 重定向耗时：'\u003c/span\u003e+redirectTime);\n    console.log(\u003cspan class=\"hljs-string\"\u003e'Appcache 耗时'\u003c/span\u003e+appcacheTime);\n    console.log(\u003cspan class=\"hljs-string\"\u003e'unload 前文档耗时：'\u003c/span\u003e+unloadEventTime);\n    console.log(\u003cspan class=\"hljs-string\"\u003e'DNS 查询耗时：'\u003c/span\u003e+lookupDomainTime);\n    console.log(\u003cspan class=\"hljs-string\"\u003e'TCP 连接耗时：'\u003c/span\u003e+connectTime);\n    console.log(\u003cspan class=\"hljs-string\"\u003e'request 请求耗时：'\u003c/span\u003e+requestTime);\n    console.log(\u003cspan class=\"hljs-string\"\u003e'请求完毕至DOM加载：'\u003c/span\u003e+initDomTreeTime);\n    console.log(\u003cspan class=\"hljs-string\"\u003e'解析DOM树耗时：'\u003c/span\u003e+domReadyTime);\n    console.log(\u003cspan class=\"hljs-string\"\u003e'Load事件耗时：'\u003c/span\u003e+loadEventTime);\n    console.log(\u003cspan class=\"hljs-string\"\u003e'加载时间耗时：'\u003c/span\u003e+loadTime);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e通过上面的时间戳计算可以得到几个关键步骤所消耗的时间，对前端有意义的几个过程主要是解析 \u003cstrong\u003eDOM\u003c/strong\u003e 树耗时、\u003cstrong\u003eload\u003c/strong\u003e 事件耗时和整个加载过程耗时等，不过在页面性能获取时我们可以尽量获取更详细的数据信息，以供后面分析。除了资源加载解析的关键点计时，\u003cstrong\u003epreformance\u003c/strong\u003e 还提供了一些其他方面的功能，我们可以根据具体需要进行选择使用。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eperformance.memory      //内存占用的具体数据\nperformance.now()       //performance.now()方法返回当前网页自performance.timing到现在的时间，可以精确到微秒，用于更加精确的计数。但实际上，目前网页性能通过毫秒来计算就足够了\nperformance.getEntries()        //获取页面所有加载资源的performance timing 情况。浏览器获取网页时，会对网页中每一个对象(脚本文件、样式表、图片文件等)发出一个HTTP请求。performance.getEntries 方法以数组形式返回所有请求的时间统计信息\nperformance.navigation      //performance 还可以提供用户行为信息，例如网络请求的类型和重定向次数等，一般都存放在performance.navigation对象里面\nperformance.navigation.redirectCount        //记录当前网页重定向跳转的次数\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 class=\"heading\"\u003eProfile 工具\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003ePerformance Timing API\u003c/strong\u003e 描述了页面资源从加载到解析各个阶段的执行关键点时间记录，但是无法统计 \u003cstrong\u003eJavaScript\u003c/strong\u003e 执行过程中系统资源的占用情况。\u003cstrong\u003eProfile\u003c/strong\u003e 是 \u003cstrong\u003eChrome\u003c/strong\u003e 和 \u003cstrong\u003eFirefox\u003c/strong\u003e 等标准浏览器提供的一种用于测试页面脚本运行时系统内存和 \u003cstrong\u003eCPU\u003c/strong\u003e 资源占用情况的 \u003cstrong\u003eAPI\u003c/strong\u003e，以 \u003cstrong\u003eChrome\u003c/strong\u003e 浏览器为例，结合 \u003cstrong\u003eProfile\u003c/strong\u003e，可以实现以下几个功能。\u003c/p\u003e\n\u003cp\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.分析页面脚本执行过程中最耗资源的操作\u003c/p\u003e\n\u003cp\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.记录页面脚本执行过程中 \u003cstrong\u003eJavaScript\u003c/strong\u003e 对象消耗的内存与堆栈的使用情况\u003c/p\u003e\n\u003cp\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.检测页面脚本执行过程中 \u003cstrong\u003eCPU\u003c/strong\u003e 占用情况\u003c/p\u003e\n\u003cp\u003e使用 \u003ccode\u003econsole.profile()\u003c/code\u003e 和\u003ccode\u003econsole.profileEnd()\u003c/code\u003e 就可以分析中间一段代码执行时系统的内存或 \u003cstrong\u003eCPU\u003c/strong\u003e 资源的消耗情况，然后配合浏览器的 \u003cstrong\u003eProfile\u003c/strong\u003e 查看比较消耗系统内存或 \u003cstrong\u003eCPU\u003c/strong\u003e 资源的操作，这样就可以有针对性的进行优化了。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003econsole.profile();\n//TODOS,需要测试的页面逻辑动作\n\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e i = 0; i \u0026lt; 100000; i ++){\n    console.log(i * i);\n}\nconsole.profileEnd();\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 class=\"heading\"\u003e页面埋点计时\u003c/h4\u003e\n\u003cp\u003e使用\u003cstrong\u003eProfile\u003c/strong\u003e可以在一定程度上帮助我们分析页面的性能，但缺点是不够灵活。实际项目中，我们不会多关注页面的内存或\u003cstrong\u003eCPU\u003c/strong\u003e资源的消耗情况，因为\u003cstrong\u003eJavaScript\u003c/strong\u003e有自动内存回收机制。我们关注更多的是页面脚本逻辑执行的时间。除了\u003cstrong\u003ePerformance Timing\u003c/strong\u003e 的关键过程耗时计算，我们还希望检测代码的具体解析或执行时间，这就不能写很多的\u003ccode\u003econsole.profile()\u003c/code\u003e 和\u003ccode\u003econsole.profileEnd()\u003c/code\u003e来逐段实现，为了更加简单地处理这种情况，往往选择通过脚本埋点计时的方式来统计没部分代码的运行时间。\u003c/p\u003e\n\u003cp\u003e页面 \u003cstrong\u003eJavaScript\u003c/strong\u003e 埋点计时比较容易实现，和 \u003cstrong\u003ePerformance Timing\u003c/strong\u003e 记录时间戳有点类似，我们可以记录 \u003cstrong\u003eJavaScript\u003c/strong\u003e 代码开始执行的时间戳，后面在需要记录的地方埋点记录结束时的时间戳，最后通过差值来计算一段 \u003cstrong\u003eHTML\u003c/strong\u003e 解析或 \u003cstrong\u003eJavaScript\u003c/strong\u003e 解析执行的时间。为了方便操作，可以将某个操作开始和结束的时间戳记录到一个数组中，然后分析数组之间的间隔就得到每个步骤的执行时间，下面来看一个时间点记录和分析的例子。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e timeList = [];\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e addTime(tag) {timeList.push({\u003cspan class=\"hljs-string\"\u003e\"tag\"\u003c/span\u003e:tag,\u003cspan class=\"hljs-string\"\u003e\"time\"\u003c/span\u003e:+new Date()});}\n\naddTime(\u003cspan class=\"hljs-string\"\u003e\"loading\"\u003c/span\u003e);\n\ntimeList.push({\u003cspan class=\"hljs-string\"\u003e\"tag\"\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e\"load\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"time\"\u003c/span\u003e:+new Date()});\n//TODOS,load加载时的操作\ntimeList.push({\u003cspan class=\"hljs-string\"\u003e\"tag\"\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e\"load\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"time\"\u003c/span\u003e:+new Date()});\n\ntimeList.push({\u003cspan class=\"hljs-string\"\u003e\"tag\"\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e\"process\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"time\"\u003c/span\u003e:+new Date()});\n//TODOS,process处理时的操作\ntimeList.push({\u003cspan class=\"hljs-string\"\u003e\"tag\"\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e\"process\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"time\"\u003c/span\u003e:+new Date()});\n\nconsole.log(parseTime(timeList));\u0009//输出{load：时间毫秒数，process: 时间毫秒数}\n\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e parseTime(time) {\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e timeStep={},\n\u0009endTime;\n\u0009\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e i = 0,len = time.length; i \u0026lt; len; i ++){\n\u0009    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(!time[i]) \u003cspan class=\"hljs-built_in\"\u003econtinue\u003c/span\u003e;\n\n\u0009\u0009endTime = {};\n\u0009\u0009\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e j = i+1; j \u0026lt; len; j++){\n\u0009\u0009    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(time[j] \u0026amp;\u0026amp; time[i].tag == time[j].tag){\n\u0009\u0009\u0009    endTime.tag = time[j].tag;\n\u0009\u0009\u0009    endTime.time = time[j].time;\n\u0009\u0009\u0009    time[j] = null;\n\u0009\u0009\u0009}\n\u0009\u0009}\n\n\u0009\u0009\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(endTime.time \u0026gt;= 0 \u0026amp;\u0026amp; endTime.tag){\n\u0009\u0009    timeStep[endTime.tag] = endTime.time - time[i].time;\n\u0009\u0009}\n\u0009}\n\u0009\u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e timeStep;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这种方式常常在移动端页面中使用，因为移动端浏览器 \u003cstrong\u003eHTML\u003c/strong\u003e 解析和 \u003cstrong\u003eJavaScript\u003c/strong\u003e 执行相对较慢，通常为了性能优化，我们需要找到页面中执行 \u003cstrong\u003eJavaScript\u003c/strong\u003e 耗时的操作，如果将关键 \u003cstrong\u003eJavaScript\u003c/strong\u003e 的执行过程进行埋点计时并上报，就可以轻松找出 \u003cstrong\u003eJavaScript\u003c/strong\u003e 执行慢的地方，并有针对性地进行优化。\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003e资源加载时序图\u003c/h4\u003e\n\u003cp\u003e我们还可以借助浏览器或其他工具的资源加载时序图来帮助分析页面资源加载过程中的性能问题。这种方法可以粗粒度地宏观分析浏览器的所有资源文件请求耗时和文件加载顺序情况，如保证 \u003cstrong\u003eCSS\u003c/strong\u003e 和数据请求等关键资源优先加载，\u003cstrong\u003eJavaScript\u003c/strong\u003e 文件和页面中非关键性图片等内容延后加载。如果因为某个资源的加载十分耗时而阻塞了页面的内容展示，那就要着重考虑。所以，我们需要通过资源加载时序图来辅助分析页面上资源加载顺序的问题。\u003c/p\u003e\n\u003cp\u003e图 \u003cstrong\u003e1-2\u003c/strong\u003e 为使用 \u003ca target=\"_blank\" href=\"https://www.telerik.com/fiddler\"\u003eFiddler\u003c/a\u003e 抓取浏览器访问地址时的资源加载时序图，图 \u003cstrong\u003e1-3\u003c/strong\u003e 为 \u003cstrong\u003eChrome\u003c/strong\u003e 浏览器访问\u003ca target=\"_blank\" href=\"https://maoyan.com/\"\u003e猫眼电影官网\u003c/a\u003e时的资源加载时序图.根据资源加载时序图我们可以很直观地看到页面上各个资源加载过程所需要的时间和先后顺序，有利于找出加载过程中比较耗时的文件资源，帮助我们有针对性地进行优化。\n\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/16096042768dd0de?w=600\u0026amp;h=198\u0026amp;f=jpeg\u0026amp;s=23478\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003cstrong\u003e图1-2\u003c/strong\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003cstrong\u003eFiddler 页面加载文件资源时序图\u003c/strong\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/160960653e011768?w=1271\u0026amp;h=670\u0026amp;f=png\u0026amp;s=107043\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003cstrong\u003e图1-3\u003c/strong\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003cstrong\u003eChrome浏览器 猫眼电影官网页面加载文件资源时序图\u003c/strong\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003e总结\u003c/h4\u003e\n\u003cblockquote\u003e\n\u003cp\u003e通过上文介绍的利用\u003ccode\u003ePerformance Timing API\u003c/code\u003e、\u003ccode\u003ePrpfile\u003c/code\u003e工具、页面埋点计时、资源加载时序图分析几个方面来获取和衡量一个页面的性能，找出加载过程中比较耗时的文件资源，帮助我们有针对性地进行优化。医病必须诊断找到病因，前端性能测试在前端性能优化中属于诊断工作，只有找到病因，才能进行针对性治疗优化。在此欢迎大家加入QQ前端技术交流群 \u003ccode\u003e544587175\u003c/code\u003e ,在后续我会从桌面浏览器和移动端浏览器两个方面详细讲解不同终端的优化策略，敬请关注......\u003c/p\u003e\n\u003c/blockquote\u003e\n","buildTime":"1514378126.8069","__v":0}
{"_id":{"$oid":"5a4393bf95a5f32670e69c4a"},"id":"5a425cb4f265da43294e4f2e","author":{"$oid":"5a4393bf95a5f32670e69c39"},"title":"webpack 搭建 vue 项目","meta":{"likeCount":0},"tag":["Vue.js","Webpack"],"comment":[],"content":"\u003ch2 class=\"heading\"\u003e前期准备\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://doc.webpack-china.org/concepts\"\u003ewebpack\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://cn.vuejs.org\"\u003evue.js\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003enpm\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://nodejs.org/zh-cn\"\u003enodejs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"http://es6.ruanyifeng.com\"\u003eES6语法\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e由于本文内容是通过npm来加载vue，所以开始之前需安装nodejs环境，安装完成之后再执行以下步骤：\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e创建项目\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e    mkdir  vue-demo\n    \u003cspan class=\"hljs-built_in\"\u003ecd\u003c/span\u003e vue-demo\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e使用 npm init 命令  生成package.json文件\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003enpm init\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e大概生成的package.json 如下:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e{\n  \u003cspan class=\"hljs-string\"\u003e\"name\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"vue-demo\"\u003c/span\u003e,\n  \u003cspan class=\"hljs-string\"\u003e\"version\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"1.0.0\"\u003c/span\u003e,\n  \u003cspan class=\"hljs-string\"\u003e\"description\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"this is a vue demo\"\u003c/span\u003e,\n  \u003cspan class=\"hljs-string\"\u003e\"main\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"index.js\"\u003c/span\u003e,\n  \u003cspan class=\"hljs-string\"\u003e\"scripts\"\u003c/span\u003e: {\n    \u003cspan class=\"hljs-string\"\u003e\"test\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"echo \\\"Error: no test specified\\\" \u0026amp;\u0026amp; exit 1\"\u003c/span\u003e\n  },\n  \u003cspan class=\"hljs-string\"\u003e\"license\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"ISC\"\u003c/span\u003e,\n  \u003cspan class=\"hljs-string\"\u003e\"dependencies\"\u003c/span\u003e: {\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e引入webpack  ，关于如何使用webpack 请参考\u003ca target=\"_blank\" href=\"https://doc.webpack-china.org/concepts/\"\u003e官网\u003c/a\u003e\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e    npm install webpack \u0026amp;nbsp;--save-dev\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e如果使用npm下载的速度过慢，可以使用淘宝的cnpm 镜像\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e    npm install -g cnpm –registry=https://registry.npm.taobao.org\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e输入以上命令即可将npm指向国内镜像，使用时需将npm 替换成cnpm即可， 其他不变\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e在项目中创建webpack.config.js 文件\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003econst path = require(\u003cspan class=\"hljs-string\"\u003e'path'\u003c/span\u003e)\nmodule.exports ={\n    entry:\u003cspan class=\"hljs-string\"\u003e'./src/main.js'\u003c/span\u003e,\n    output:{\n        path:path.resolve(__dirname,\u003cspan class=\"hljs-string\"\u003e'dist'\u003c/span\u003e),\n        filename:\u003cspan class=\"hljs-string\"\u003e\"demo.js\"\u003c/span\u003e\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e使用webpack 命令编译\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003ewebpack\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e编译之后的项目目录大概如下:\n\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/160934997ed72579?w=292\u0026amp;h=191\u0026amp;f=png\u0026amp;s=5249\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e注意：在使用webpack命令之前 需先创建 index.html 和  main.js 文件 其中 main.js文件位于src 目录下\u003c/p\u003e\n\u003cp\u003eindex.html 的内容如下\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\n\u0026lt;html lang=\u003cspan class=\"hljs-string\"\u003e\"en\"\u003c/span\u003e\u0026gt;\n\u0026lt;head\u0026gt;\n    \u0026lt;meta charset=\u003cspan class=\"hljs-string\"\u003e\"UTF-8\"\u003c/span\u003e\u0026gt;\n    \u0026lt;title\u0026gt;vue demo\u0026lt;/title\u0026gt;\n\u0026lt;/head\u0026gt;\n\u0026lt;body\u0026gt;\n    \u0026lt;script src=\u003cspan class=\"hljs-string\"\u003e\"./dist/demo.js\"\u003c/span\u003e\u0026gt;\u0026lt;/script\u0026gt;\n\u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003emain.js 的内容如下\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003ealert(\u003cspan class=\"hljs-string\"\u003e'hello world'\u003c/span\u003e);\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e引入vue\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e    npm install vue --save\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e执行命令后会在package.json中新增如下代码\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\"dependencies\": {\n\"vue\": \"^2.4.2\"\n}\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e将main.js中的内容修改为如下代码\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eimport Vue from \u003cspan class=\"hljs-string\"\u003e'vue'\u003c/span\u003e\nvar vm = new Vue({\n    el:\u003cspan class=\"hljs-string\"\u003e'#app'\u003c/span\u003e,\n    data:{\n        msg:\u003cspan class=\"hljs-string\"\u003e'hello vue'\u003c/span\u003e\n    }\n})\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e引入babel\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003enpm install --save-dev babel-core babel-loader\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e由于在使用vue时会用到很多es6的语法，但是现在很多浏览器对es6的支持不是很好，所以在编译时需要将这些语法转换es5的语法，此时我们使用babel来进行编译。\u003c/p\u003e\n\u003cp\u003ebabel的使用请阅读官网文档http://babeljs.cn/。\u003c/p\u003e\n\u003cp\u003e将babel加入到webpack.config.js 配置文件中：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003econst path = require(\u003cspan class=\"hljs-string\"\u003e'path'\u003c/span\u003e)\n\nmodule.exports ={\n    entry:\u003cspan class=\"hljs-string\"\u003e'./src/main.js'\u003c/span\u003e,\n    output:{\n        path:path.resolve(__dirname,\u003cspan class=\"hljs-string\"\u003e'dist'\u003c/span\u003e),\n        filename:\u003cspan class=\"hljs-string\"\u003e\"demo.js\"\u003c/span\u003e\n    },\n    module:{\n        rules:[\n            {\n                \u003cspan class=\"hljs-built_in\"\u003etest\u003c/span\u003e: /\\.js$/,\n                loader:\u003cspan class=\"hljs-string\"\u003e\"babel-loader\"\u003c/span\u003e,\n                exclude: /node_modules/\n            }\n        ]\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e然后命令行输入 webpack 命令即可进行编译，再编译完成后用浏览器打开index.html 文件，此时会发现浏览器控制台出现以下错误：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e[Vue warn]: You are using the runtime-only build of Vue \u003cspan class=\"hljs-built_in\"\u003ewhere\u003c/span\u003e the template compiler is not available. Either pre-compile the templates into render \u003cspan class=\"hljs-built_in\"\u003efunctions\u003c/span\u003e, or use the compiler-included build.\n\n(found \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0026lt;Root\u0026gt;)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这是因为正在使用的是vue的运行时版本，而此版本中的编译器时不可用的，我们需要把它切换成运行时 + 编译的版本，需要在配置文件中添加如下代码\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e resolve: {\n    \u003cspan class=\"hljs-built_in\"\u003ealias\u003c/span\u003e: {\n       \u003cspan class=\"hljs-string\"\u003e'vue$'\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'vue/dist/vue.esm.js'\u003c/span\u003e // \u003cspan class=\"hljs-string\"\u003e'vue/dist/vue.common.js'\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e webpack 1\n    }\n }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e此时在运行webpack 命令重新编译，编译后在访问index.html页面，页面内容如下图\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/1609353959e1e592?w=600\u0026amp;h=171\u0026amp;f=png\u0026amp;s=4239\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n此时一个基于webpack的vue 项目就搭建好。\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003ewebpack的一些常用配置\u003c/h3\u003e\n\u003cp\u003e在项目的实际开发中我们还会引入css、图片以及字体等资源文件。这些文件的引入都需要相应的加载器才能将其加载到项目中并正常使用。\u003c/p\u003e\n\u003cp\u003e下面只介绍部分我们需要的加载器的使用方法,\n更多信息请查阅\u003ca target=\"_blank\" href=\"https://doc.webpack-china.org/loaders\"\u003ewebpack加载器文档\u003c/a\u003e。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003ecss加载器\u003c/h3\u003e\n\u003cp\u003e我们需要引入css-loader、和style-loader  (安装style-loader的目的是为了在html中以style的方式嵌入css )。\u003c/p\u003e\n\u003cp\u003e执行命令\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e    npm install --save-dev css-loader style-loader\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在 webpack.config.js  中进行如下配置\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e    module: {\n        rules: [{\n            \u003cspan class=\"hljs-built_in\"\u003etest\u003c/span\u003e: /\\.js$/,\n            loader: \u003cspan class=\"hljs-string\"\u003e\"babel-loader\"\u003c/span\u003e,\n            exclude: /node_modules/\n        }, {\n            \u003cspan class=\"hljs-built_in\"\u003etest\u003c/span\u003e: /\\.css$/,\n            loader: \u003cspan class=\"hljs-string\"\u003e'style-loader!css-loader'\u003c/span\u003e\n        }]\n    },\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e然后再src 目录下 新建一个styles的文件夹并在里面添加一个main.css的文件,写上以下内容\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-comment\"\u003e#app{\u003c/span\u003e\n    color:red;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e然后再运行 webpack 命令, 并重新加载index.html 文件 ,可见css已经生效,效果如下图\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/160935cfa424a6e3?w=517\u0026amp;h=79\u0026amp;f=png\u0026amp;s=3628\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e图片资源的加载\u003c/h3\u003e\n\u003cp\u003e使用file-loader或者url-loader加载器进行加载，他们都是用于打包文件和图片资源的，两者的区别是url-loader在file-loader的基础上进行了一次封装。\u003c/p\u003e\n\u003cp\u003e在访问网站时如果图片较多，会发很多http请求，会降低页面性能。这个问题可以通过url-loader解决。url-loader会将引入的图片编码，生成dataURl。相当于把图片数据翻译成一串字符,再把这串字符打包到文件中，最终只需要引入这个文件就能访问图片了。\u003c/p\u003e\n\u003cp\u003e当然，如果图片较大，编码会消耗性能。因此url-loader提供了一个limit参数，小于limit字节的文件会被转为DataURl，大于limit的还会使用file-loader进行copy。\u003c/p\u003e\n\u003cp\u003e此处我们使用url-loader,由于它是基于file-loader的封装，所以也需要引入file-loader。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003enpm install --save-dev file-loader url-loader\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ewebpack.config.js 的rules 中增加如下配置\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e{\n    \u003cspan class=\"hljs-built_in\"\u003etest\u003c/span\u003e: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n    loader: \u003cspan class=\"hljs-string\"\u003e'url-loader'\u003c/span\u003e,\n    options: {\n      \u003cspan class=\"hljs-built_in\"\u003elimit\u003c/span\u003e: 10000\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e接下来就是将图片引入到代码中，需要在main.js和index.html 分别作如下修改:\u003c/p\u003e\n\u003cp\u003emain.js\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eimport Vue from \u003cspan class=\"hljs-string\"\u003e'vue'\u003c/span\u003e\nimport \u003cspan class=\"hljs-string\"\u003e'./styles/main.css'\u003c/span\u003e\nimport logo from\u003cspan class=\"hljs-string\"\u003e'./images/logo.png'\u003c/span\u003e\n\nvar vm = new Vue({\n    el:\u003cspan class=\"hljs-string\"\u003e'#app'\u003c/span\u003e,\n    data:{\n        logo:logo,\n        msg:\u003cspan class=\"hljs-string\"\u003e'hello vue'\u003c/span\u003e\n    }\n})\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eindex.html\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\n\u0026lt;html lang=\u003cspan class=\"hljs-string\"\u003e\"en\"\u003c/span\u003e\u0026gt;\n\u0026lt;head\u0026gt;\n    \u0026lt;meta charset=\u003cspan class=\"hljs-string\"\u003e\"UTF-8\"\u003c/span\u003e\u0026gt;\n    \u0026lt;title\u0026gt;vue demo\u0026lt;/title\u0026gt;\n\u0026lt;/head\u0026gt;\n\u0026lt;body\u0026gt;\n    \u0026lt;div id=\u003cspan class=\"hljs-string\"\u003e\"app\"\u003c/span\u003e\u0026gt;\n        \u0026lt;img :src=\u003cspan class=\"hljs-string\"\u003e\"logo\"\u003c/span\u003e alt=\u003cspan class=\"hljs-string\"\u003e\"logo\"\u003c/span\u003e class=\u003cspan class=\"hljs-string\"\u003e\"logo\"\u003c/span\u003e\u0026gt;\n        {{msg}}\n    \u0026lt;/div\u0026gt;\n    \u0026lt;script src=\u003cspan class=\"hljs-string\"\u003e\"./dist/demo.js\"\u003c/span\u003e\u0026gt;\u0026lt;/script\u0026gt;\n\u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e最后运行webpack 命令并访问 index.html ，结果如下\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/1609361c9c1278c2?w=529\u0026amp;h=278\u0026amp;f=png\u0026amp;s=11203\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e在测试中发现当图片大于10KB的时候发现加载图片失败，找不到图片，但此时在dist目录下面是能看到已经通过加载器加载成功了的图片，再通过浏览器的开发者工具对图片的引用路径进行检查时，可以发现页面中img的路径不对，路径中只有文件名缺失了前面的dist目录,所以此时我们需要将main.js中的代码进行如下修改\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003elogo:\u003cspan class=\"hljs-string\"\u003e\"./dist/\"\u003c/span\u003e+logo,\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e重新编译后图片就显示出来了。但是现在新的问题又出来了，由于我们在配置文件中配置了小于10kb的代码将以 base64的形式内联在代码中。所以此时是不需要 \"./dist\" 这个前缀的。\n解决此问题有两种办法：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e不使用base64的形式将图片内嵌到代码中\u003c/li\u003e\n\u003cli\u003e将html文件放到dist目录中\n既然用了url-loader加载器则不推荐使用第一种。所以我们使用第二种方式。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e将html文件放到dist目录中最简单的办法就是把index.html文件复制到dist目录中，然后将引入就是的代码改为：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e    \u0026lt;script src=\u003cspan class=\"hljs-string\"\u003e\"./demo.js\"\u003c/span\u003e \u0026gt; \u0026lt;/script\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003emain.js中改回原来的设置\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003elogo:logo,\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e重新编译后图片在两种情况下都可以加载出来了。\u003c/p\u003e\n\u003cp\u003e还有一中比较常用的方式是在编译时自动在dist的目录中创建一个html文件并将index.html中的内容复制过去。此时我们需要时webpack的 HtmlWebpackPlugin 插件。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003eHtmlWebpackPlugin 插件\u003c/h3\u003e\n\u003cp\u003e引入插件\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e    npm install --save-dev html-webpack-plugin\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ewebpack.config.js 中增加如下配置\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003econst HtmlWebpackPlugin = require(\u003cspan class=\"hljs-string\"\u003e'html-webpack-plugin'\u003c/span\u003e)\n...\n\nplugins:[\n     new HtmlWebpackPlugin()\n]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e重新编译后发现在dist目录下生成了如下内容的html的文件\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\n\u0026lt;html\u0026gt;\n  \u0026lt;head\u0026gt;\n    \u0026lt;meta charset=\u003cspan class=\"hljs-string\"\u003e\"UTF-8\"\u003c/span\u003e\u0026gt;\n    \u0026lt;title\u0026gt;Webpack App\u0026lt;/title\u0026gt;\n  \u0026lt;/head\u0026gt;\n  \u0026lt;body\u0026gt;\n  \u0026lt;script \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"text/javascript\"\u003c/span\u003e src=\u003cspan class=\"hljs-string\"\u003e\"demo.js\"\u003c/span\u003e\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e与我们原来自己的写index.html相比，该文件缺少了下面这些这些内容\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e    \u0026lt;div id=\u003cspan class=\"hljs-string\"\u003e\"app\"\u003c/span\u003e\u0026gt;\n        \u0026lt;img :src=\u003cspan class=\"hljs-string\"\u003e\"logo\"\u003c/span\u003e alt=\u003cspan class=\"hljs-string\"\u003e\"logo\"\u003c/span\u003e class=\u003cspan class=\"hljs-string\"\u003e\"logo\"\u003c/span\u003e\u0026gt;\n        {{msg}}\n    \u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e现在需要对配置文件做稍微的修改，让html文件在创建的时候自动将index.html的中内容复制过去。通过查阅该插件的文档，可知需做如下修改：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eplugins:[\n     new HtmlWebpackPlugin({\n          title: \u003cspan class=\"hljs-string\"\u003e'vue demo'\u003c/span\u003e,\n          template: \u003cspan class=\"hljs-string\"\u003e'index.html'\u003c/span\u003e         \n     })\n]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eindex.html 文件中 去除 script代码，在重新编译后，即可获取我们需要的html文件\u003c/p\u003e\n\u003cp\u003e详细参数配置请参考\u003ca target=\"_blank\" href=\"https://github.com/jantimon/html-webpack-plugin#configuration\"\u003e官方文档\u003c/a\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003ewebpack-dev-server\u003c/h3\u003e\n\u003cp\u003e在我们实际开发中需要将代码部署在server中，而不是在浏览器中直接打开文件。此时我们需要使用webpack的 webpack-dev-server 。\u003c/p\u003e\n\u003cp\u003ewebpack-dev-server 为我们提供了一个简单的web服务器，并且能够实时重新加载（live reloading）。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e    npm install --save-dev \u0026amp;nbsp;webpack-dev-server\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在webpack.config.js 文件中需要指定一个文件夹,告诉开发服务器需要从哪儿加载文件\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003econst path = require(\u003cspan class=\"hljs-string\"\u003e'path'\u003c/span\u003e)\nconst HtmlWebpackPlugin = require(\u003cspan class=\"hljs-string\"\u003e'html-webpack-plugin'\u003c/span\u003e)\n\nmodule.exports = {\n    entry: \u003cspan class=\"hljs-string\"\u003e'./src/main.js'\u003c/span\u003e,\n    output: {\n        path: path.resolve(__dirname, \u003cspan class=\"hljs-string\"\u003e'dist'\u003c/span\u003e),\n        filename: \u003cspan class=\"hljs-string\"\u003e\"demo.js\"\u003c/span\u003e\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            title: \u003cspan class=\"hljs-string\"\u003e'vue demo'\u003c/span\u003e,\n            template: \u003cspan class=\"hljs-string\"\u003e'index.html'\u003c/span\u003e\n        })\n    ],\n    devServer:{\n        contentBase:\u003cspan class=\"hljs-string\"\u003e\"./dist\"\u003c/span\u003e\n    },\n    module: {\n        rules: [{\n                \u003cspan class=\"hljs-built_in\"\u003etest\u003c/span\u003e: /\\.js$/,\n                loader: \u003cspan class=\"hljs-string\"\u003e\"babel-loader\"\u003c/span\u003e,\n                exclude: /node_modules/\n            }, {\n                \u003cspan class=\"hljs-built_in\"\u003etest\u003c/span\u003e: /\\.css$/,\n                loader: \u003cspan class=\"hljs-string\"\u003e'style-loader!css-loader'\u003c/span\u003e\n            }, {\n                \u003cspan class=\"hljs-built_in\"\u003etest\u003c/span\u003e: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n                loader: \u003cspan class=\"hljs-string\"\u003e'url-loader'\u003c/span\u003e,\n                options: {\n                    \u003cspan class=\"hljs-built_in\"\u003elimit\u003c/span\u003e: 10000\n                }\n            },\n            {\n                \u003cspan class=\"hljs-built_in\"\u003etest\u003c/span\u003e: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,\n                loader: \u003cspan class=\"hljs-string\"\u003e'url-loader'\u003c/span\u003e,\n                options: {\n                    \u003cspan class=\"hljs-built_in\"\u003elimit\u003c/span\u003e: 10000\n                }\n            }\n        ]\n    },\n    resolve: {\n        \u003cspan class=\"hljs-built_in\"\u003ealias\u003c/span\u003e: {\n            \u003cspan class=\"hljs-string\"\u003e'vue$'\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'vue/dist/vue.esm.js'\u003c/span\u003e // \u003cspan class=\"hljs-string\"\u003e'vue/dist/vue.common.js'\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e webpack 1\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e上面红色字体的配置信息是告知webpack-dev-server， 在localhost:8080 下建立服务，将 dist 目录下的文件，作为可访问文件。\u003c/p\u003e\n\u003cp\u003e让我们在package.json中添加一个script脚本,可以直接运行开发服务器(dev server)：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e \u003cspan class=\"hljs-string\"\u003e\"scripts\"\u003c/span\u003e: {\n    \u003cspan class=\"hljs-string\"\u003e\"test\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"echo \\\"Error: no test specified\\\" \u0026amp;\u0026amp; exit 1\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-string\"\u003e\"dev\"\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e\"webpack-dev-server --open\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-string\"\u003e\"build\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"webpack\"\u003c/span\u003e\n  },\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e然后输入如下命令\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e    npm run dev\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e启动完成后，浏览器会自动打开一个访问 http://localhost:8080/ 的页面\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/160938614cf6772e?w=323\u0026amp;h=294\u0026amp;f=png\u0026amp;s=9101\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e此时服务已启动成功。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e字体的加载\u003c/h3\u003e\n\u003cp\u003e字体的加载方式与图片的一样也是用url-loader，配置如下\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e{\n    \u003cspan class=\"hljs-built_in\"\u003etest\u003c/span\u003e: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,\n    loader: \u003cspan class=\"hljs-string\"\u003e'url-loader'\u003c/span\u003e,\n    options: {\n        \u003cspan class=\"hljs-built_in\"\u003elimit\u003c/span\u003e: 10000\n    }\n }\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003evue-loader\u003c/h3\u003e\n\u003cp\u003e在vue的开发过程中，通常我们需要写.vue结尾的文件即组件，如app.vue\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;template\u0026gt;\n    \u0026lt;div id=\u003cspan class=\"hljs-string\"\u003e\"app\"\u003c/span\u003e\u0026gt;\n        \u0026lt;img src=\u003cspan class=\"hljs-string\"\u003e\"./images/logo2.jpg\"\u003c/span\u003e alt=\u003cspan class=\"hljs-string\"\u003e\"logo\"\u003c/span\u003e \u0026gt;\n        {{msg}}\n    \u0026lt;/div\u0026gt;\n\u0026lt;/template\u0026gt;\n\u0026lt;script\u0026gt;\n    \u003cspan class=\"hljs-built_in\"\u003eexport\u003c/span\u003e default {\n        name:\u003cspan class=\"hljs-string\"\u003e'app'\u003c/span\u003e,\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003edata\u003c/span\u003e\u003c/span\u003e(){\n            \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e {\n                msg:\u003cspan class=\"hljs-string\"\u003e\"hello vue !!\"\u003c/span\u003e\n            }\n        }\n    }\n\u0026lt;/script\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e该文件需要通过vue-loader来进行加载，现在我们需要做如下配置。通过 vue-loader 和vue-template-compiler来加载并编译.vue文件\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003enpm install --save-dev vue-loader\u0026amp;nbsp;vue-template-compiler\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ewebpack.config.js 中\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e{\n    \u003cspan class=\"hljs-built_in\"\u003etest\u003c/span\u003e: /\\.vue$/,\n    loader: \u003cspan class=\"hljs-string\"\u003e'vue-loader'\u003c/span\u003e\n }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e为了在vue中引入对.vue的使用，我们需进行如下修改\u003c/p\u003e\n\u003cp\u003eindex.html\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\n\u0026lt;html lang=\u003cspan class=\"hljs-string\"\u003e\"en\"\u003c/span\u003e\u0026gt;\n\u0026lt;head\u0026gt;\n    \u0026lt;meta charset=\u003cspan class=\"hljs-string\"\u003e\"UTF-8\"\u003c/span\u003e\u0026gt;\n    \u0026lt;title\u0026gt;vue demo\u0026lt;/title\u0026gt;\n\u0026lt;/head\u0026gt;\n\u0026lt;body\u0026gt;\n    \u0026lt;div id=\u003cspan class=\"hljs-string\"\u003e\"app\"\u003c/span\u003e\u0026gt;\n    \u0026lt;/div\u0026gt;\n\u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003emain.js\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eimport Vue from \u003cspan class=\"hljs-string\"\u003e'vue'\u003c/span\u003e\nimport \u003cspan class=\"hljs-string\"\u003e'./styles/main.css'\u003c/span\u003e\nimport App from \u003cspan class=\"hljs-string\"\u003e'./app.vue'\u003c/span\u003e\n\nnew Vue({\n    el: \u003cspan class=\"hljs-string\"\u003e'#app'\u003c/span\u003e,\n    template: \u003cspan class=\"hljs-string\"\u003e'\u0026lt;App/\u0026gt;'\u003c/span\u003e,\n    components: { App }\n})\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eapp.vue\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;template\u0026gt;\n    \u0026lt;div id=\u003cspan class=\"hljs-string\"\u003e\"app\"\u003c/span\u003e\u0026gt;\n        \u0026lt;img src=\u003cspan class=\"hljs-string\"\u003e\"./images/logo.png\"\u003c/span\u003e alt=\u003cspan class=\"hljs-string\"\u003e\"logo\"\u003c/span\u003e \u0026gt;\n        {{msg}}\n    \u0026lt;/div\u0026gt;\n\u0026lt;/template\u0026gt;\n\u0026lt;script\u0026gt;\n    \u003cspan class=\"hljs-built_in\"\u003eexport\u003c/span\u003e default {\n        name:\u003cspan class=\"hljs-string\"\u003e'app'\u003c/span\u003e,\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003edata\u003c/span\u003e\u003c/span\u003e(){\n            \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e {\n                msg: \u003cspan class=\"hljs-string\"\u003e'hello vue !!'\u003c/span\u003e\n            }\n        }\n    }\n\u0026lt;/script\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e修改完成后 运行 npm run dev 命令 ，获得如下效果的页面\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/160938b83b51babd?w=438\u0026amp;h=273\u0026amp;f=png\u0026amp;s=9619\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e热部署\u003c/h3\u003e\n\u003cp\u003e在上一步中，如果我们修改app.vue文件中的msg的参数，可以看到页面会自动刷新。但是此时是页面全局刷新的，如果我们只想局部刷新即只刷新修改的部分，需要使用webpack的HotModuleReplacementPlugin插件，在webpack.config.js的plugins中添加下面的信息:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003enew webpack.HotModuleReplacementPlugin()\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e然后去package.json中，script 里面dev的值中加上 --hot -only\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e    \u003cspan class=\"hljs-string\"\u003e\"dev\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"webpack-dev-server  --hot-only --open\"\u003c/span\u003e,\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e然后重启服务，再修改 msg 的值，会发现此时值的改变是局部刷新的。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e生产环境\u003c/h3\u003e\n\u003cp\u003e如果我们在浏览器的控制台中发现有如下提示\n\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/16093904b1682b50?w=516\u0026amp;h=143\u0026amp;f=png\u0026amp;s=8665\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n意思时说项目现在运行在开发环境中，在部署到正式环境下时，要确保它是处于production的模式。需要将代码打包部署到生产环境时需要进行如下配置：\u003cp\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003evar webpack = require(\u003cspan class=\"hljs-string\"\u003e'webpack'\u003c/span\u003e)\nmodule.exports = {\n// ...\nplugins: [\n// ...\n    new webpack.DefinePlugin({\n        \u003cspan class=\"hljs-string\"\u003e'process.env'\u003c/span\u003e: {\n            NODE_ENV: \u003cspan class=\"hljs-string\"\u003e'\"production\"'\u003c/span\u003e\n        }\n    }),\n    new webpack.optimize.UglifyJsPlugin({\n        compress: {\n            warnings: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\n        }\n    })\n]}\n\u003c/code\u003e\u003c/pre\u003e","buildTime":"1514378131.3982","__v":0}
{"_id":{"$oid":"5a4393bf95a5f32670e69c4b"},"id":"5a3b56b4518825089e501fe1","author":{"$oid":"5a4393bf95a5f32670e69c3c"},"title":"2017下半年掘金日报优质文章合集：前端篇","meta":{"likeCount":0},"tag":["Vue.js","JavaScript"],"comment":[],"content":"\u003cblockquote\u003e\n\u003cp\u003e在掘金微信群里的小伙伴应该都有看每日小报吧！这是小饼每天为大家精选的优质掘金文章（大家都很爱学习，我已经跟不上了QAQ..）小饼已经被N位群友连续几周催着出小报合集了，2017年马上就要结束了，拖延症绝不拖到明年！这就给大家整理出来——掘金2017下半年优质小报合集。）\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 class=\"heading\"\u003eCSS／页面布局\u003c/h3\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYyiIf2\"\u003eborder属性的多方位应用和实现自适应三角形 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RjFdISV\"\u003eBEM实战之扒一扒淘票票页面\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RY2wco5\"\u003e一劳永逸的搞定 flex 布局\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYVuxkd\"\u003e20个CSS高级技巧汇总\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RTtdx6q\"\u003e从a标签为什么不能包含div标签-了解HTML5元素分类与内容模型 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RjtyaIo\"\u003e聊聊为什么淘宝要提出「双飞翼」布局\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/R0Y5PwW\"\u003e前端切图 | 百度EUX\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RW6lCf9\"\u003eCSS盒模型详解\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/R08tFl6\"\u003e前端最佳实践（一）——DOM操作\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RWaRwrw\"\u003eRem布局的原理解析\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RWrDAWV\"\u003e移动端字体放大问题的研究\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RlS3zGw\"\u003e我不知道你知不知道的伪元素小技巧 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYYW0SB\"\u003e个人总结（css3新特性） \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RlXkmkd\"\u003e10 个独特的 CSS 背景视觉效果 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RlhTc6K\"\u003e我只是想在页面上加个链接\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYYWCNN\"\u003e2.5分钟学会 CSS Grid 布局\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYu7wNk\"\u003e编写自己的代码库(css3常用动画的实现) \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYMFsTZ\"\u003e一步步打造自己的纯CSS单标签图标库\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RY8TyIo\"\u003eWeb自适应布局你需要知道的所有事儿 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RjVkN4v\"\u003eBFC模型浅识 \u003c/a\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003eJavaScript\u003c/h3\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://juejin.im/entry/5998f8396fb9a0247c6ec9cd?utm_medium=fe\u0026amp;utm_source=weixinqun\"\u003e这些JavaScript编程黑科技，装逼指南，高逼格代码，让你惊叹不已\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RlE4TqX\"\u003ePromise 必知必会（十道题）\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rl7MYIk\"\u003e带你理解 JS 容易出错的坑和细节\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RjyiDcR\"\u003e实例感受-es6的常用语法和优越性 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RjVkJ2N\"\u003e从一个 JSON.parse 错误深入研究 JavaScript 的转义字符\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/R0QNxyL\"\u003eJS如何判断一个对象为空\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/ROIQ6c7\"\u003e谈谈 js 去重方法的那点事\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RlQgypv\"\u003eJs 的多宿主时代 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/ROInB6v\"\u003eJavaScript 闭包\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RY74wif\"\u003e25行代码实现Promise函数 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/ROK2SBW\"\u003e高效使用 JavaScript 闭包\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rj3OHy3\"\u003e如何用 3KB 不到的 JavaScript 实现微机模拟器\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/ROIQGIu\"\u003e如何无痛降低 if else 面条代码复杂度\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/ROdotVB\"\u003eJavaScript设计模式-用组合模式写出复杂组件\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/ROg2OFj\"\u003eJavaScript 性能优化\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RWxvbaZ\"\u003eJS弹幕实现\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYkGgms\"\u003e归并排序与快速排序的简明实现及对比\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RT46KW2\"\u003e编写自己的代码库（javascript常用实例的实现与封装）\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RY3Y3VF\"\u003e【译】JavaScript权威面试指南 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RjFddXM\"\u003e这一次，彻底弄懂javascript执行机制\u003c/a\u003e\n\u003ca target=\"_blank\" href=\"http://t.cn/RYMFswV\"\u003e关于JavaScript对象，你所不知道的事（一）- 先谈对象 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYEUKtn\"\u003eJavaScript 工作原理：内存管理 + 处理常见的4种内存泄漏 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYEUrFl\"\u003ejavascript项目开发规范实例\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RTidumK\"\u003eJavaScript 实用技巧和写法建议\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RTHfJn1\"\u003e你需要知道的算法之基础篇 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RT33Myh\"\u003eJavaScript异步编程大冒险: Async/Await \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RWkTDcU\"\u003e忍者级别的JavaScript函数操作 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RT33Mng\"\u003eES6 Promise 用法 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RT33xaI\"\u003e你所不知道的 Typescript 与 Redux 类型优化 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RWxwuh1\"\u003eJavaScript 开发人员需要知道的简写技巧\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RlSBqoS\"\u003e14个你可能不知道的JavaScript调试技巧 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RjbqiSq\"\u003e打造自己的JavaScript武器库\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rjb5hEW\"\u003e全面梳理JS对象的访问控制及代理反射\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYakUYo\"\u003e当使用数组splice删除元素时，你应该知道这个小坑\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYakbZV\"\u003e深入到不能再深入之JS大法系列 -- 作用域链 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYSpIvG\"\u003e前端全（无）埋点之JS异常上报\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYTbdN7\"\u003e【译】JavaScript 如何工作的: 事件循环和异步编程的崛起 + 5 个关于如何使用 async/await 编写更好的技巧 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RjOj58M\"\u003eES6 中的元编程：第一部分 —— Symbol，了不起的 Symbol\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RjOpLJx\"\u003e两句话理解js中的this \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rj3OdEl\"\u003e为什么(2.55).toFixed(1)等于2.5？ \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RjJRWbW\"\u003eJS中可能用得到的全部的排序算法\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/ROK2x0w\"\u003e反击爬虫，前端工程师的脑洞可以有多大？\u003c/a\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e前端框架\u003c/h3\u003e\n\u003ch4 class=\"heading\"\u003eReact\u003c/h4\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RO149WH\"\u003e让 Vue 和 React 无缝融合\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RWOguP0\"\u003e从Preact了解一个类React的框架是怎么实现的(三): 组件\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RlhmbOL\"\u003e1分钟读完《我希望在深入 React 之前知道这些》\u003c/a\u003e\n\u003ca target=\"_blank\" href=\"http://t.cn/RWCFLk0\"\u003eReact Render Array 性能大乱斗\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RlWUIFH\"\u003ePreact：一个备胎的自我修养\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RY6AI7c\"\u003e我为什么从Redux迁移到了Mobx\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RO6itRF\"\u003e重构与模式系列（一）简化函数\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYgKL1q\"\u003eTypescript+React+Redux-Observable脚手架\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rj6hoUl\"\u003eReact 服务端渲染实现 Gank 移动端\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RY6AI7c\"\u003e我为什么从Redux迁移到了Mobx\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rj6hoUl\"\u003eReact 服务端渲染实现 Gank 移动端\u003c/a\u003e\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003eVue.js\u003c/h4\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rjy6hLm\"\u003evue router 如何使用params query传参，以及有什么区别\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RjFkZmL\"\u003eState of Vue.js report 2017 中文版\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYc6aia\"\u003evue快速入门的三个小实例 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RY2Afvu\"\u003eVUE组件间的数据传递\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RlWy9IQ\"\u003eVue 脱坑记 - 查漏补缺(汇总下群里高频询问的xxx及给出不靠谱的解决方案)\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RjVkb83\"\u003e用vue做一个酷炫的menu\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYVuIM8\"\u003eVue.js 升级踩坑小记\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RO5HLjs\"\u003evue移动助手实践（一）——基于vue的换肤功能\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/R0QCsSb\"\u003enuxt(vue) + koa + mongo 写blog的一次小结 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/ROfLicm\"\u003e聊聊Vue.js的template编译\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/ROfy6Zv\"\u003eVue 生产项目链接 -- 上线项目大集合\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RlE4nqo\"\u003e如何用 Vue.js 实现一个建站应用\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RO6JTLm\"\u003eVuex2.0源码解析\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RORInlH\"\u003e从template到DOM(Vue.js源码角度看内部运行机制) \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RjsKW84\"\u003e另辟蹊径：vue单页面，多路由，前进刷新，后退不刷新\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RjsOknp\"\u003eVue.js新手教学|如何写一个Checklist组件\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYyodqv\"\u003evue+webpack 升级后在原有项目上的适配问题 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYyogJK\"\u003eVue 聊天组件 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYyoejY\"\u003eVue2 源码漫游（二）\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/ROuNOF7\"\u003e前端表单进阶之路：通过 Vue.js 实现表单可配置化\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RW566x1\"\u003e聊聊Vue.js组件间通信的几种姿势\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RWOmpeK\"\u003eVue + TypeScript 新项目起手式\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RTHfJ2L\"\u003e一起来拥抱强大的TypeScript吧--Ts+Vue完全教程（附Demo项目）\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RWO1q1w\"\u003eVue2 原理浅谈 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RWkY8nd\"\u003evue-calendar 基于 vue 2.0 开发的轻量，高性能日历组件 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rl7MEBq\"\u003eVue-cli 使用json server在本地模拟请求数据\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RW6T4g3\"\u003e认识Skeleton Screen【屏幕加载骨架】\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RWK3PkI\"\u003e我们为什么以及是如何从 Angular.js 迁移到 Vue.js？ \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RY2wfWM\"\u003e《京保养》基于Vue+Vuex的单页面应用实践\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RY2wYOz\"\u003eVue2学习小记-给Vue2路由导航钩子和axios拦截器做个封装\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RY2wio4\"\u003e手摸手，带你用vue撸后台 系列一（基础篇） \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYHfxQd\"\u003e简单例子学习Vue.js单元测试 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RlXF7mb\"\u003e【译】vue 自定义指令的魅力 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RlXFUxG\"\u003e适用于 Vue 2.0 的功能强大的 ContextMenu 组件\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYYWpC3\"\u003e尚妆达人店 UI 组件化 工程实践（weex vue）\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RlQgONZ\"\u003e基于vue配置axios \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RjVkb83\"\u003e用vue做一个酷炫的menu\u003c/a\u003e\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003eAngularJS\u003c/h4\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rl2ihyY\"\u003eAngular 5 开发一个有道翻译\u003c/a\u003e\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003e其它\u003c/h4\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RWrDxKp\"\u003e「大前端」weex里native主动发送事件到JS的方案实现\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RWcz8QT\"\u003eWeex 开发小游戏是件很 high 的事\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYkqPMD\"\u003e记一次 Weex 的 iPhone X 适配\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rj9OgD6\"\u003e2017 年比较 Angular、React、Vue 三剑客\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rl7xXTP\"\u003eFly.js 拦截全局 Ajax 请求\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RTTzd91\"\u003e以同构之名，再谈 Redux/Vuex 的必要性\u003c/a\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e打包工具\u003c/h3\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RlSgXGo\"\u003eWebpack 打包器面板进阶\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RTRqBoj\"\u003ewebpack 为什么这么难用？ \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYSpIlF\"\u003eWebpack3.0小案例躺坑css处理与ES6编译\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RT46CnU\"\u003eParceljs和Webpack在React项目上打包速度对比\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYTo0Cq\"\u003ewebpack中小型多页面应用整合webpack终极方案 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RTtdGqH\"\u003e基于gulp+webpack 快速搭建的前端自动化脚手架 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RjyJkTX\"\u003e妈妈再也不用担心我不会webpack了\u003c/a\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003ePWA\u003c/h3\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/R0O6F1q\"\u003e一份来自 Treebo 的 React 与 Preact PWA 性能分析报告\u003c/a\u003e\n\u003ca target=\"_blank\" href=\"http://t.cn/RWCk7dx\"\u003e改造你的网站，变身 PWA \u003c/a\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e图像／图表\u003c/h3\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/R0OXwIz\"\u003e有意思的clip-path\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/ROti13w\"\u003e软软的 Echarts\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/ROI3kaB\"\u003eAndroid/iOS/Web开发中的动效设计与实现 —— 贝塞尔曲线动画的插值法\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RORIpXb\"\u003e10 个 CSS、SVG 和 Canvas 蒙版（mask）精彩实例\u003c/a\u003e\n\u003ca target=\"_blank\" href=\"http://t.cn/RWCDWVO\"\u003e译用 WebGL 探索动画和交互技术（一个学习案例）\u003c/a\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e前端架构\u003c/h3\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/R0oHSmS\"\u003e如何管理好10万行代码的前端单页面应用\u003c/a\u003e\n\u003ca target=\"_blank\" href=\"http://t.cn/ROfwJk5\"\u003e微前端 - 将微服务理念延伸到前端开发中\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RY2w5wP\"\u003e70%以上业务由H5开发，手机QQ Hybrid 的架构如何优化演进？ \u003c/a\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e面试／个人成长\u003c/h3\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/ROifgRN\"\u003e张克军：写给初学前端工程师的一封信\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RlSBWIo\"\u003evue面试题总汇\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rll6FNW\"\u003e流形：我是如何面试一位前端工程师\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RllaAsi\"\u003e找不到工作的我，只好研究自动投递简历了 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RTTzeLI\"\u003e前端入行两年--教会了我这些道理\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RTidmJj\"\u003e前端面试总结（at, md） \u003c/a\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e小程序\u003c/h3\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/ROCN1wP\"\u003e微信小程序如何像webview一样加载html5网页\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RTRqr4f\"\u003e微信小程序无埋点数据采集方案 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RW56tMu\"\u003e在婚礼上搞点事情如何\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RWaRoN2\"\u003e微信小程序中使用Fly\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RlhnY5L\"\u003e微信小程序音频功能开发实(cai)践(keng)\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RTid3Jq\"\u003e手把手教你实现微信小程序中的自定义组件\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RlQDKPJ\"\u003e分享微信小程序中实现sticky效果的列表页\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYu7Aoe\"\u003e微信小程序开发完工+问题汇总 \u003c/a\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e本地存储相关\u003c/h3\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/ROK2EuE\"\u003e谈谈cookie\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/ROifufo\"\u003elocalStorage 还能这么用\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RORlo9v\"\u003e浏览器的渲染：过程与原理\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/ROFRYFc\"\u003eajax \u0026amp; !async \u0026amp; cookie 是一个冷门的坑\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/ROgJTIy\"\u003eRedux 异步数据流方案对比\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/ROFDQEx\"\u003e大杀器Bodymovin和Lottie：把AE动画转换成HTML5/Android/iOS原生动画\u003c/a\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e工具资源\u003c/h3\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RO3ecMC\"\u003e便于 Code review 的 Git 流程方案\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RO3suAd\"\u003e无头浏览器 Puppeteer 初探\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/ROiIfs7\"\u003e前端中的 Pipeline\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RWI1bLy\"\u003e前端开发中经常使用到的20个正则表达式\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RWxLs8V\"\u003eweb开发者为什么选择Electron去开发跨平台的桌面客户端\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RlYwWy0\"\u003e滴滴 Web 移动端组件库 cube-ui 开源 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RWkYXJ2\"\u003e打造丝般顺滑的 H5 翻页库\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RTiduLu\"\u003e【轮子】Element UI 的Form, Table, Pagination组件封装来一波 \u003c/a\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e性能优化相关\u003c/h3\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/ROF8HbF\"\u003e性能指标都是些什么鬼? \u003c/a\u003e\n\u003ca target=\"_blank\" href=\"http://t.cn/RWrervM\"\u003e前端开发工程师必须关注的几个性能指标\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/ROFR4Bx\"\u003ejavascript函数式编程系列 ① call 和 apply \u003c/a\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e其他\u003c/h3\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RO3gVc9\"\u003eiPhone X 网页设计\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RW5X984\"\u003eLINE漫画：通过Page Stack实现流畅的页面切换\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RTHcN8N\"\u003e 美团：前端线上故障响应方法\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RTHVHPf\"\u003e字符串模板浅析 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RWansJR\"\u003eaxios的一些常见用法\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RWKmJTt\"\u003e浅谈前端和移动端的事件机制\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RWKmnHN\"\u003e响应式脑电波—如何使用 RxJS、Angular、Web 蓝牙以及脑电波头戴设备来让我们的大脑做一些更酷的事\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RWreCU2\"\u003efly.js—Node下增强的API \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RlhRsGW\"\u003e趁着双11，写个京东商品自动下单\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RlXkd9y\"\u003e「前端那些事儿」② 优化策略-自查表 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rlp5ECG\"\u003e前端需要了解的 SSO 与 CAS 知识\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rlpt03E\"\u003e如何在SSR架构中实现离线可用？\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rll0rnw\"\u003e用 Electron 打造 Win/Mac 应用，从「代码」到可下载的「安装包」，可能比你想得麻烦一点 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RlYw8sf\"\u003e让我为你介绍一个神器：Chimee，一套可扩展的 H5 视频播放器解决方案\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RlQeyog\"\u003e用TypeScript编写发布函数库\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RlEGcTF\"\u003eiPhone X 适配 手Q H5页面通用解决方案\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rl38Fnz\"\u003eThree.js 初探 - 微场景制作\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rl3RMwj\"\u003e搭建 vue2 vue-router2 webpack3 多入口工程\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RjyiyeS\"\u003e你见过用命令行写的简历吗？\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rjb5hEW\"\u003e全面梳理JS对象的访问控制及代理反射\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RjbJbCa\"\u003eMacOS : 前端必备姿势(工作环境)\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RjtG9Ct\"\u003e一只node爬虫的升级打怪之路\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RjtqFRZ\"\u003e微信小程序：完成一个tabbar+下拉刷新组件，需要经历什么坑\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RjVFbwR\"\u003e初识Http缓存君\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RjJRq3n\"\u003eunderscore 系列之如何写自己的 underscore \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RjJTX2D\"\u003eThinkJS 3.0 如何实现对 TypeScript 的支持\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rj6P28A\"\u003egit merge使用不当引发的代码丢失血案 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rj6PSZm\"\u003e译 怎么做 Web API 版本控制？ \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rjo46SN\"\u003e如何编写通用的 Helper Class \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rjo4Up0\"\u003e53合1:Node.js 最佳实践大合集\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rj9Olz1\"\u003e【开源】canvas图像裁剪、压缩、旋转 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rj9OgD6\"\u003e2017 年比较 Angular、React、Vue 三剑客\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rj9WtMU\"\u003e如何自定义自己的vue-cli模板 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rj9lTOF\"\u003e使用fjpublish发布前端项目（安全篇）\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rj3Wqlb\"\u003eMiox带你走进动态路由的世界 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rj3WOyp\"\u003e服务端渲染 vs 客户端渲染 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rjsjf8M\"\u003e浅谈前端线上部署与运维 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/Rjsj8Wa\"\u003e优雅的使用 element-ui 中的 table 组件\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYzxDG1\"\u003eIMVC（同构 MVC）的前端实践 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RY7yIN9\"\u003e基于 Docker 打造前端持续集成开发环境\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYzxsP7\"\u003e蚂蚁金服开源：数据驱动的高交互可视化图形语法G2\u003c/a\u003e\n\u003ca target=\"_blank\" href=\"http://t.cn/RYzJv6w\"\u003e解锁Charles的姿势 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYziEPU\"\u003eSpirit: Web动画制作工具\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RY2wG78\"\u003e来聊一聊浏览器渲染\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RY2wGgB\"\u003e前端如何处理emoji表情 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYyIWWN\"\u003eHTML5原生拖拽/拖放 Drag \u0026amp; Drop 详解\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYc663X\"\u003e前端本地文件操作与上传\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYc6XO6\"\u003e一次 H5 「保存页面为图片」 的踩坑之旅 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYc6aBh\"\u003eiOS开发者的大前端感悟：向前端说对不起\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYVuJrv\"\u003ekoa 实现 jwt 认证 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYMsPQ8\"\u003eQ：你了解异步编程、进程、单线程、多线程吗？\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RO588UI\"\u003e实践中的前后端分离\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RY6A5Hd\"\u003e手摸手，带你优雅的使用 icon \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RY6Atmw\"\u003e在没有DOM操作的日子里，我是怎么熬过来的（上）\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RY6AVFZ\"\u003e一起炫起来 -- 3D粒子动画篇\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYakyF7\"\u003e给女票写的一个简书爬虫\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYYW9Gl\"\u003enode.js使用Nodemailer发送邮件 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYYWNl6\"\u003e如果有人问你爬虫抓取技术的门道，请叫他来看这篇文章\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYTSycJ\"\u003e内存寻梦环游记：一个变量的三重死亡 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYToDRj\"\u003e用canvas实现视频播放与弹幕功能\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYHfMSr\"\u003e为你的网站带上帽子 — 使用 helmet 保护 Express 应用 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYHfxA3\"\u003eNuxt.js服务端渲染实践，从开发到部署\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYHJwWW\"\u003e7 款前端开发者重制的经典游戏 总有一款能让你回味童年时光\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYEIzHx\"\u003e如何在一周之内获得GitHub stars 3500+\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RY3Y1tQ\"\u003e你不知道的前端SDK开发技巧 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RY3Yu6b\"\u003e具有代表性的 HTTP 14 个状态码 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYgoe72\"\u003e基于 Electron 的前端文件处理工具 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RT4603O\"\u003e用不到20行代码写一个freestyle外挂后台\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RTGEYaz\"\u003eHTTP----HTTP缓存机制\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RTGnazV\"\u003eimport、require、export、module.exports 混合使用详解\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RTGET9V\"\u003e网页中文本朗读功能开发实现分享\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RTGEHSp\"\u003e基于 eros 改编的网易严选 app\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RTtdGkl\"\u003e带你开发一个日历控件 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RTtdbWl\"\u003e免SDK实现微信／支付宝转账打赏功能 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RTVXUmT\"\u003evv-ui 骨架屏实践\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RTxq4M1\"\u003e移动端如何强制页面横屏 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RTxqUjv\"\u003e【翻译】fancyBox3 中文文档 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RTx6qVS\"\u003e前端代码异常监控实战\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RTx6qeW\"\u003eGit提交历史的修改删除合并\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RTx6Xlv\"\u003eWEEX-EROS | 或许不用 RN 我们也能开发一个 APP \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RTx6abM\"\u003e带你开发一个二维周视图日历 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RTYr6EQ\"\u003e 从时间旅行的乌托邦，看状态管理的设计误区 \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/R0QC88p\"\u003e前端小项目之在线便利贴\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/ROtK7aw\"\u003e写一个chrome插件来实现网站的自动登录\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/ROK2Tv1\"\u003e前端跨域常用方法小结\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://t.cn/RYgoe72\"\u003e基于 Electron 的前端文件处理工具 \u003c/a\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e最后：\u003c/h3\u003e\n\u003cp\u003e由于文章确实量很多所以没有再进行细分了，大家可以Mark起来～不过呢小饼还是建议大家到微信群里看每日小报，毕竟每天消化一两篇会更加有用，日积月累就会有很大的收益。反而积攒到一起的话要么就是「债多了不愁。。」再也不会打开（比如我TAT）；要么就是看得很累，要花很多时间来补。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e欢迎加入掘金前端交流群，找对属于你的技术圈子\u003c/h3\u003e\n\u003cp\u003e扫下方二维码加小编邀请你进群哟\n\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/16091c631139d927?w=750\u0026amp;h=261\u0026amp;f=png\u0026amp;s=25557\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n","buildTime":"1514378173.8312","__v":0}
{"_id":{"$oid":"5a4393bf95a5f32670e69c4c"},"id":"5a430a31f265da43070389d2","author":{"$oid":"5a4393bf95a5f32670e69c42"},"title":"造一个属于自己的 UI 库","meta":{"likeCount":0},"tag":["Vue.js","前端","Web Components"],"comment":[],"content":"\u003cp\u003e\u003cstrong\u003e轮子嘛~总得造上一造~\u003c/strong\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e项目介绍\u003c/h2\u003e\n\u003ch3 class=\"heading\"\u003e\u003ca target=\"_blank\" href=\"https://github.com/Brickies/vui\"\u003evui：一个私人的vue ui 组件库（移动端为主）\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://www.npmjs.com/package/x-vui\"\u003e\u003c/a\u003e\u003c/p\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://www.npmjs.com/package/x-vui\"\u003e\u003cimg alt=\"Version\" src=\"https://img.shields.io/npm/v/x-vui.svg\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/a\u003e\u003c/figure\u003e\u003ca target=\"_blank\" href=\"https://www.npmjs.com/package/x-vui\"\u003e\u003cfigure\u003e\u003cimg alt=\"Downloads\" src=\"https://img.shields.io/npm/dm/x-vui.svg\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003c/a\u003e\u003ca target=\"_blank\" href=\"https://opensource.org/licenses/MIT\"\u003e\u003cfigure\u003e\u003cimg alt=\"License\" src=\"https://img.shields.io/npm/l/x-vui.svg?style=flat\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003c/a\u003e\u003ca target=\"_blank\" href=\"https://travis-ci.org/Brickies/vui\"\u003e\u003cfigure\u003e\u003cimg alt=\"TravisCI\" src=\"https://user-gold-cdn.xitu.io/2017/12/27/16095e47626fdfcb\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003c/a\u003e\u003cp\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIt's a A personal Vue UI component library .\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 class=\"heading\"\u003e\u003ca target=\"_blank\" href=\"https://brickies.github.io/vui\"\u003e文档官网\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e进入 PC 端直接是文档界面，想查看 demo 效果直接将浏览器调成手机模式即可，如果喜欢，还请不要吝惜你的 star 哦~~\u003c/strong\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e在线效果预览\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e请扫描以下二维码\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/160961cf99d535d6?w=300\u0026amp;h=300\u0026amp;f=png\u0026amp;s=8570\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e已有组件\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://github.com/Brickies/vui/tree/dev/packages/swiper\"\u003eswiper\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://github.com/Brickies/vui/tree/dev/packages/swipe\"\u003eswipe\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://github.com/Brickies/vui/tree/dev/packages/swipe-item\"\u003eswipe-item\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://github.com/Brickies/vui/tree/dev/packages/scroller\"\u003escroller\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://github.com/Brickies/vui/tree/dev/packages/search\"\u003esearch\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://github.com/Brickies/vui/tree/dev/packages/toast\"\u003etoast\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://github.com/Brickies/vui/tree/dev/packages/dialog\"\u003edialog\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://github.com/Brickies/vui/tree/dev/packages/picker\"\u003epicker\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://github.com/Brickies/vui/tree/dev/packages/select\"\u003eselect\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://github.com/Brickies/vui/tree/dev/packages/switch\"\u003eswitch\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 class=\"heading\"\u003e安装\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"hljs shell\" lang=\"shell\"\u003enpm i x-vui -S\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e快速开始\u003c/h2\u003e\n\u003ch3 class=\"heading\"\u003e构建项目（配合 vue-cli）\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-comment\"\u003e# 全局安装 vue-cli\u003c/span\u003e\nnpm install --global vue-cli\n\u003cspan class=\"hljs-comment\"\u003e# 创建一个基于 webpack 模板的新项目\u003c/span\u003e\nvue init webpack my-vui-project\n\u003cspan class=\"hljs-comment\"\u003e# 安装依赖，并下载x-vui\u003c/span\u003e\n\u003cspan class=\"hljs-built_in\"\u003ecd\u003c/span\u003e my-vui-project\nnpm install \u0026amp;\u0026amp; npm install x-vui\n\u003cspan class=\"hljs-comment\"\u003e# 项目启动 默认端口localhost:8080\u003c/span\u003e\nnpm run dev\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e完整引入\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e Vue \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'vue'\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e vui \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'x-vui'\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'x-vui/lib/vui-css/index.css'\u003c/span\u003e;\n\nVue.use(vui)\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e部分引入\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e Vue \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'vue'\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {\n  Scroller,\n  Select\n  \u003cspan class=\"hljs-comment\"\u003e// ...\u003c/span\u003e\n} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'x-vui'\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'x-vui/lib/vui-css/scroller.css'\u003c/span\u003e;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'x-vui/lib/vui-css/select.css'\u003c/span\u003e;\n\nVue.component(Scroller.name, Scroller)\nVue.component(Select.name, Select)\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e引入插件\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e注：完整引入了vui，则无需再注册插件\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e Vue \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'vue'\u003c/span\u003e;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { \n  $Toast, \n  $Dialog \n  \u003cspan class=\"hljs-comment\"\u003e// ...\u003c/span\u003e\n} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'x-vui'\u003c/span\u003e;\n\nVue.prototype.$toast = $Toast\nVue.prototype.$dialog = $Dialog\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 class=\"heading\"\u003e组件用法\u003c/h1\u003e\n\u003ch2 class=\"heading\"\u003e1. swiper\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e目前这里默认为 swiper 轮播图，如果你有特殊需要，也可以使用swipe和swipe-item组合出自己的swiper\u003c/strong\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e基本用法\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"swiper-page\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e正常swiper\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ev-swiper\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003e:items\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e'items'\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003e:styles\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"{height: '200px'}\"\u003c/span\u003e @\u003cspan class=\"hljs-attr\"\u003echange\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"changeHandle\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ev-swiper\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e缩略swiper\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ev-swiper\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e'thum'\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003e:items\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e'items'\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003e:styles\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"{height: '240px'}\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ev-swiper\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e {\n  data () {\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e {\n      \u003cspan class=\"hljs-attr\"\u003eitems\u003c/span\u003e: [\n        \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'../assets/beauty_1.png'\u003c/span\u003e),\n        \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'../assets/beauty_2.png'\u003c/span\u003e),\n        \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'../assets/beauty_3.png'\u003c/span\u003e),\n        \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'../assets/beauty_4.png'\u003c/span\u003e),\n        \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'../assets/beauty_5.png'\u003c/span\u003e)\n      ],\n    }\n  },\n  \u003cspan class=\"hljs-attr\"\u003emethods\u003c/span\u003e: {\n    changeHandle (index) {\n      \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(index);\n    }\n  }\n}\n\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003eAttributes\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e参数\u003c/th\u003e\n\u003cth\u003e说明\u003c/th\u003e\n\u003cth\u003e类型\u003c/th\u003e\n\u003cth\u003e可选值\u003c/th\u003e\n\u003cth\u003e默认值\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003etype\u003c/td\u003e\n\u003ctd\u003eswiper类型\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003eswiper(正常)/thum(缩略)\u003c/td\u003e\n\u003ctd\u003eswiper\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eauto\u003c/td\u003e\n\u003ctd\u003e自动播放时长\u003c/td\u003e\n\u003ctd\u003enumber\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e5000\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eitems\u003c/td\u003e\n\u003ctd\u003eswiper展示的列表\u003c/td\u003e\n\u003ctd\u003earray\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e[]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eshowIndicators\u003c/td\u003e\n\u003ctd\u003e是否展示swiper小圆点\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003etrue\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003estyles\u003c/td\u003e\n\u003ctd\u003eswiper样式控制\u003c/td\u003e\n\u003ctd\u003eobject\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e{}\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eresetTitle\u003c/td\u003e\n\u003ctd\u003e重置title内容\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 class=\"heading\"\u003eEvents\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e事件名称\u003c/th\u003e\n\u003cth\u003e说明\u003c/th\u003e\n\u003cth\u003e回调参数\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003echange\u003c/td\u003e\n\u003ctd\u003eswiper滑动回调\u003c/td\u003e\n\u003ctd\u003e当前swiper item索引\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 class=\"heading\"\u003e2. scroller（下拉刷新上拉加载）\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e经常用来做手机端的分页功能，下拉刷新，上拉加载\u003c/strong\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e基本用法\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"scroller-page\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ev-scroller\u003c/span\u003e\n      \u003cspan class=\"hljs-attr\"\u003e:on-refresh\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"refresh\"\u003c/span\u003e\n      \u003cspan class=\"hljs-attr\"\u003e:on-infinite\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"infinite\"\u003c/span\u003e\n    \u0026gt;\u003c/span\u003e\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ev-for\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"(list, index) in lists\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003e:key\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"index\"\u003c/span\u003e\u0026gt;\u003c/span\u003e{{list}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ev-scroller\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e {\n  data () {\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e {\n      \u003cspan class=\"hljs-attr\"\u003elen\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e,\n    }\n  },\n  \u003cspan class=\"hljs-attr\"\u003ecomputed\u003c/span\u003e: {\n    lists () {\n      \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e arr = []\n      \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e; i \u0026lt; \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.len + \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e; i++) {\n        arr.push(\u003cspan class=\"hljs-string\"\u003e'列表'\u003c/span\u003e + i)\n      }\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e arr\n    }\n  },\n  \u003cspan class=\"hljs-attr\"\u003emethods\u003c/span\u003e: {\n    \u003cspan class=\"hljs-comment\"\u003e// 下拉刷新\u003c/span\u003e\n    refresh (done) {\n      setTimeout(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e =\u0026gt;\u003c/span\u003e {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.len = \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e\n        done()\n      }, \u003cspan class=\"hljs-number\"\u003e1000\u003c/span\u003e)\n    },\n    \u003cspan class=\"hljs-comment\"\u003e// 上拉加载\u003c/span\u003e\n    infinite (done) {\n      setTimeout(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e =\u0026gt;\u003c/span\u003e {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.len \u0026gt;= \u003cspan class=\"hljs-number\"\u003e7\u003c/span\u003e) {\n          done(\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e)\n          \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e\n        }\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.len++\n        done()\n      }, \u003cspan class=\"hljs-number\"\u003e1000\u003c/span\u003e)\n    }\n  }\n}\n\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003eAttributes\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e参数\u003c/th\u003e\n\u003cth\u003e说明\u003c/th\u003e\n\u003cth\u003e类型\u003c/th\u003e\n\u003cth\u003e可选值\u003c/th\u003e\n\u003cth\u003e默认值\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eonRefresh\u003c/td\u003e\n\u003ctd\u003e下拉回调\u003c/td\u003e\n\u003ctd\u003efunction\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eonInfinite\u003c/td\u003e\n\u003ctd\u003e上拉回调\u003c/td\u003e\n\u003ctd\u003efunction\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ewidth\u003c/td\u003e\n\u003ctd\u003escroller宽度\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e100%\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eheight\u003c/td\u003e\n\u003ctd\u003escroller高度\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e100%\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eisLoadMore\u003c/td\u003e\n\u003ctd\u003e是否展示上拉加载\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003etrue\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003erefreshText\u003c/td\u003e\n\u003ctd\u003e下拉文本内容\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e下拉刷新\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003enoDataText\u003c/td\u003e\n\u003ctd\u003e无数据文本\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e没有更多数据啦~\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003erefreshLayerColor\u003c/td\u003e\n\u003ctd\u003e下拉文本颜色\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e#AAA\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eloadingLayerColor\u003c/td\u003e\n\u003ctd\u003e上拉文本颜色\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e#AAA\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eanimating\u003c/td\u003e\n\u003ctd\u003e是否有动画\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003etrue\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eanimationDuration\u003c/td\u003e\n\u003ctd\u003e动画间隔\u003c/td\u003e\n\u003ctd\u003enumber\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e250\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ebouncing\u003c/td\u003e\n\u003ctd\u003e是否有反弹效果\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003etrue\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ecssClass\u003c/td\u003e\n\u003ctd\u003econtent css class\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 class=\"heading\"\u003eEvents\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e事件名称\u003c/th\u003e\n\u003cth\u003e说明\u003c/th\u003e\n\u003cth\u003e回调参数\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eonRefresh\u003c/td\u003e\n\u003ctd\u003e下拉回调\u003c/td\u003e\n\u003ctd\u003e里面有个done callback用于结束loading效果\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eonInfinite\u003c/td\u003e\n\u003ctd\u003e上拉回调\u003c/td\u003e\n\u003ctd\u003e里面有个done callback用于结束loading效果\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 class=\"heading\"\u003e3. search\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e常用于手机端搜索关键字，有时候还会进行高亮匹配\u003c/strong\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e基本用法\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e1、只有搜索框\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ev-search\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003eplaceholder\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"请输入搜索关键字\"\u003c/span\u003e\n    @\u003cspan class=\"hljs-attr\"\u003esearch\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"searchFn\"\u003c/span\u003e\n    @\u003cspan class=\"hljs-attr\"\u003eenter\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"searchEnter\"\u003c/span\u003e\n  \u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ev-search\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e {\n  \u003cspan class=\"hljs-attr\"\u003emethods\u003c/span\u003e: {\n    searchFn (query) {\n      \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e'search'\u003c/span\u003e, query)\n    },\n    searchEnter (query) {\n      \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e'enter'\u003c/span\u003e, query)\n    }\n  }\n}\n\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e2、搭配 SearchList 搜索结果列表\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ev-search\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003eplaceholder\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"请输入搜索关键字\"\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003e:async\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"false\"\u003c/span\u003e\n    @\u003cspan class=\"hljs-attr\"\u003esearch\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"searchFn\"\u003c/span\u003e\n  \u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ev-search-list\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003e:result\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"filterResult\"\u003c/span\u003e @\u003cspan class=\"hljs-attr\"\u003elistSearch\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"listSearch\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ev-show\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"visible\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ev-search-list\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ev-search\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e {\n  data () {\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e {\n      \u003cspan class=\"hljs-attr\"\u003ekeyword\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e,\n      \u003cspan class=\"hljs-attr\"\u003evisible\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e, \u003cspan class=\"hljs-comment\"\u003e// 点击列表，列表是否消失\u003c/span\u003e\n      defaultResult: [\n        \u003cspan class=\"hljs-string\"\u003e'Apple'\u003c/span\u003e,\n        \u003cspan class=\"hljs-string\"\u003e'Banana'\u003c/span\u003e,\n        \u003cspan class=\"hljs-string\"\u003e'Orange'\u003c/span\u003e,\n        \u003cspan class=\"hljs-string\"\u003e'Durian'\u003c/span\u003e,\n        \u003cspan class=\"hljs-string\"\u003e'Lemon'\u003c/span\u003e,\n        \u003cspan class=\"hljs-string\"\u003e'Peach'\u003c/span\u003e,\n        \u003cspan class=\"hljs-string\"\u003e'Cherry'\u003c/span\u003e,\n        \u003cspan class=\"hljs-string\"\u003e'Berry'\u003c/span\u003e,\n        \u003cspan class=\"hljs-string\"\u003e'Core'\u003c/span\u003e,\n        \u003cspan class=\"hljs-string\"\u003e'Fig'\u003c/span\u003e,\n        \u003cspan class=\"hljs-string\"\u003e'Haw'\u003c/span\u003e,\n        \u003cspan class=\"hljs-string\"\u003e'Melon'\u003c/span\u003e,\n        \u003cspan class=\"hljs-string\"\u003e'Plum'\u003c/span\u003e,\n        \u003cspan class=\"hljs-string\"\u003e'Pear'\u003c/span\u003e,\n        \u003cspan class=\"hljs-string\"\u003e'Peanut'\u003c/span\u003e,\n        \u003cspan class=\"hljs-string\"\u003e'Other'\u003c/span\u003e\n      ]\n    }\n  },\n  \u003cspan class=\"hljs-attr\"\u003ewatch\u003c/span\u003e: {\n    keyword (val) {\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!val) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.visible = \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n      }\n    }\n  },\n  \u003cspan class=\"hljs-attr\"\u003emethods\u003c/span\u003e: {\n    searchFn (query) {\n      \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.keyword = query;\n      \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.visible = \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n    }\n  },\n  \u003cspan class=\"hljs-attr\"\u003ecomputed\u003c/span\u003e: {\n    filterResult() {\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.defaultResult.filter(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003eitem\u003c/span\u003e =\u0026gt;\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eRegExp\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.keyword, \u003cspan class=\"hljs-string\"\u003e'i'\u003c/span\u003e).test(item));\n    }\n  }\n}\n\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e高阶用法\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e3、定制化结果列表，关键字高亮匹配\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ev-search\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003eplaceholder\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"请输入搜索关键字\"\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003e:async\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"false\"\u003c/span\u003e\n    @\u003cspan class=\"hljs-attr\"\u003esearch\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"searchFn\"\u003c/span\u003e\n  \u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ev-search-list\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003e:result\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"filterResult\"\u003c/span\u003e @\u003cspan class=\"hljs-attr\"\u003elistSearch\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"listSearch\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ev-show\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"visible\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"search-result\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eslot\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"list-item\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eslot-scope\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"props\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"l\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ev-html\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"props.slotValue.name\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"gray\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ev-show\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"props.slotValue.price\"\u003c/span\u003e\u0026gt;\u003c/span\u003e￥{{props.slotValue.price}}/斤\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"gray r\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ev-show\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"props.slotValue.amount\"\u003c/span\u003e\u0026gt;\u003c/span\u003e剩余{{props.slotValue.amount}}斤\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ev-search-list\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ev-search\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e {\n  data () {\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e {\n      \u003cspan class=\"hljs-attr\"\u003ekeyword\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e,\n      \u003cspan class=\"hljs-attr\"\u003evisible\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,\n      \u003cspan class=\"hljs-attr\"\u003edefaultResult\u003c/span\u003e: [\n        {\u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Apple'\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eprice\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eamount\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e20\u003c/span\u003e},\n        {\u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Banana'\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eprice\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eamount\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e30\u003c/span\u003e},\n        {\u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Orange'\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eprice\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eamount\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e},\n        {\u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Durian'\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eprice\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eamount\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e25\u003c/span\u003e},\n        {\u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Lemon'\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eprice\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eamount\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e30\u003c/span\u003e},\n        {\u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Peach'\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eprice\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eamount\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e40\u003c/span\u003e},\n        {\u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Cherry'\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eprice\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e20\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eamount\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e},\n        {\u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Berry'\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eprice\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e15\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eamount\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e60\u003c/span\u003e},\n        {\u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Core'\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eprice\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eamount\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e21\u003c/span\u003e},\n        {\u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Fig'\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eprice\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eamount\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e22\u003c/span\u003e},\n        {\u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Haw'\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eprice\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eamount\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e23\u003c/span\u003e},\n        {\u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Melon'\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eprice\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eamount\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e24\u003c/span\u003e},\n        {\u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Plum'\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eprice\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eamount\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e25\u003c/span\u003e},\n        {\u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Pear'\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eprice\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eamount\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e26\u003c/span\u003e},\n        {\u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Peanut'\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eprice\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003eamount\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e},\n        {\u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Other'\u003c/span\u003e}\n      ],\n      \u003cspan class=\"hljs-comment\"\u003e// 防止defaultResult值被污染\u003c/span\u003e\n      copy: []\n    }\n  },\n  \u003cspan class=\"hljs-attr\"\u003ewatch\u003c/span\u003e: {\n    keyword (val) {\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!val) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.visible = \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n      }\n    }\n  },\n  \u003cspan class=\"hljs-attr\"\u003emethods\u003c/span\u003e: {\n    searchFn (query) {\n      \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.keyword = query;\n      \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.visible = \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n    },\n    listSearch (index) {\n      \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.visible = \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n      \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(index, \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.defaultResult[index].name)\n    }\n  },\n  \u003cspan class=\"hljs-attr\"\u003ecomputed\u003c/span\u003e: {\n    filterResult() {\n      \u003cspan class=\"hljs-comment\"\u003e// i 忽略大小写\u003c/span\u003e\n      \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e result = \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.defaultResult.filter(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003eitem\u003c/span\u003e =\u0026gt;\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eRegExp\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.keyword, \u003cspan class=\"hljs-string\"\u003e'i'\u003c/span\u003e).test(item.name));\n      \u003cspan class=\"hljs-comment\"\u003e// 关键字高亮匹配\u003c/span\u003e\n      \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.copy = \u003cspan class=\"hljs-built_in\"\u003eJSON\u003c/span\u003e.parse(\u003cspan class=\"hljs-built_in\"\u003eJSON\u003c/span\u003e.stringify(result))\n      \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.copy.forEach(\u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003eitem, index\u003c/span\u003e) =\u0026gt;\u003c/span\u003e {\n        \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e name = item.name, word = \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.keyword;\n        name = name.toLowerCase();\n        word = word.toLowerCase();\n\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (word \u0026amp;\u0026amp; name.indexOf(word) !== \u003cspan class=\"hljs-number\"\u003e-1\u003c/span\u003e) {\n          \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e arr    = item.name.split(\u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e)\n          \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e i      = name.indexOf(word);\n          \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e len    = word.length;\n          \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e active = \u003cspan class=\"hljs-string\"\u003e'\u0026lt;span class=\"price\"\u0026gt;'\u003c/span\u003e + arr.splice(i, len).join(\u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e) + \u003cspan class=\"hljs-string\"\u003e'\u0026lt;/span\u0026gt;'\u003c/span\u003e;\n          arr.splice(i, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, active);\n          item.name  = arr.join(\u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e);\n        }\n      })\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.copy;\n    }\n  }\n}\n\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003eAttributes\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e参数\u003c/th\u003e\n\u003cth\u003e说明\u003c/th\u003e\n\u003cth\u003e类型\u003c/th\u003e\n\u003cth\u003e可选值\u003c/th\u003e\n\u003cth\u003e默认值\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003easync\u003c/td\u003e\n\u003ctd\u003e是否进行节流\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003etrue\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003etimeout\u003c/td\u003e\n\u003ctd\u003e搜索节流时长\u003c/td\u003e\n\u003ctd\u003enumber\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e100\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003estyles\u003c/td\u003e\n\u003ctd\u003esearch样式\u003c/td\u003e\n\u003ctd\u003eobject\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eplaceholder\u003c/td\u003e\n\u003ctd\u003eplaceholder\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e'搜索'\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eautofocus\u003c/td\u003e\n\u003ctd\u003e是否自动聚焦(iOS端autofocus无效)\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eclear\u003c/td\u003e\n\u003ctd\u003e进行搜索是否清空search框内容\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 class=\"heading\"\u003eEvents\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e事件名称\u003c/th\u003e\n\u003cth\u003e说明\u003c/th\u003e\n\u003cth\u003e回调参数\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003esearch\u003c/td\u003e\n\u003ctd\u003esearch搜索回调\u003c/td\u003e\n\u003ctd\u003e搜索文本\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eenter\u003c/td\u003e\n\u003ctd\u003eenter时搜索回调\u003c/td\u003e\n\u003ctd\u003e搜索文本\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eclose\u003c/td\u003e\n\u003ctd\u003e点击搜索关闭按钮回调\u003c/td\u003e\n\u003ctd\u003e''\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 class=\"heading\"\u003e4. Dialog 弹框\u003c/h2\u003e\n\u003ch3 class=\"heading\"\u003e基本用法\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eexample-block\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003etitle\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"基础用法\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ebutton\u003c/span\u003e @\u003cspan class=\"hljs-attr\"\u003eclick\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"showSimpleDialog\"\u003c/span\u003e\u0026gt;\u003c/span\u003e普通 Dialog\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003eexample-block\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e {\n  \u003cspan class=\"hljs-attr\"\u003emethods\u003c/span\u003e: {\n    showSimpleDialog () {\n      \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.$dialog({\n        \u003cspan class=\"hljs-attr\"\u003etitle\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'普通 Dialog'\u003c/span\u003e,\n        \u003cspan class=\"hljs-attr\"\u003ecancelText\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'取消'\u003c/span\u003e,\n        \u003cspan class=\"hljs-attr\"\u003eokText\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'确定'\u003c/span\u003e,\n        \u003cspan class=\"hljs-attr\"\u003econtent\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'测试 Dialog，测试 Dialog，测试 Dialog~~~'\u003c/span\u003e\n      })\n    }\n  }\n}\n\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e自定义 HTML\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eexample-block\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003etitle\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"自定义 HTML\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ebutton\u003c/span\u003e @\u003cspan class=\"hljs-attr\"\u003eclick\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"showHtmlDialog\"\u003c/span\u003e\u0026gt;\u003c/span\u003eHTML Dialog\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003eexample-block\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e {\n  \u003cspan class=\"hljs-attr\"\u003emethods\u003c/span\u003e: {\n    showHtmlDialog () {\n      \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.$dialog({\n        \u003cspan class=\"hljs-attr\"\u003etitle\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'自定义 HTML'\u003c/span\u003e,\n        \u003cspan class=\"hljs-attr\"\u003ecancelText\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'取消'\u003c/span\u003e,\n        \u003cspan class=\"hljs-attr\"\u003eokText\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'确定'\u003c/span\u003e,\n        \u003cspan class=\"hljs-attr\"\u003econtent\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'\u0026lt;strong style=\"color: green\"\u0026gt;测试 Dialog，测试 Dialog，测试 Dialog~~~\u0026lt;/strong style=\"color: green\"\u0026gt;'\u003c/span\u003e\n      })\n    }\n  }\n}\n\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e高阶Dialog组件用法\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eexample-block\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003etitle\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"Dialog 模板\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ebutton\u003c/span\u003e @\u003cspan class=\"hljs-attr\"\u003eclick\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"showDialogTpl\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDialog Template\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003eexample-block\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ev-dialog\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003etitle\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"Dialog 模板\"\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003ecancelText\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"取消\"\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003eokText\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"确认\"\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003econtent\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"测试 Dialog，测试 Dialog，测试 Dialog~~~\"\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003e:show\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"showDialog\"\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003e:onCancel\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"close\"\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003e:onOk\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"close\"\u003c/span\u003e\n    \u0026gt;\u003c/span\u003e\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"modal-text\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDialog Template slot ！！！\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ev-dialog\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e {\n  data () {\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e {\n      \u003cspan class=\"hljs-attr\"\u003eshowDialog\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\n    }\n  },\n  \u003cspan class=\"hljs-attr\"\u003emethods\u003c/span\u003e: {\n    showDialogTpl () {\n      \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.showDialog = \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\n    },\n    close () {\n      \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.showDialog = \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\n    }\n  }\n}\n\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003eAttributes(modal)\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e参数\u003c/th\u003e\n\u003cth\u003e说明\u003c/th\u003e\n\u003cth\u003e类型\u003c/th\u003e\n\u003cth\u003e可选值\u003c/th\u003e\n\u003cth\u003e默认值\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eshow\u003c/td\u003e\n\u003ctd\u003emodal是否显示\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003etitle\u003c/td\u003e\n\u003ctd\u003emodal标题\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003econtent\u003c/td\u003e\n\u003ctd\u003emodal内容\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eonOk\u003c/td\u003e\n\u003ctd\u003e确定按钮回调\u003c/td\u003e\n\u003ctd\u003efunction\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eonCancel\u003c/td\u003e\n\u003ctd\u003e取消按钮回调\u003c/td\u003e\n\u003ctd\u003efunction\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eokText\u003c/td\u003e\n\u003ctd\u003e确定按钮内容\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ecancelText\u003c/td\u003e\n\u003ctd\u003e取消按钮内容\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eshowCloseIcon\u003c/td\u003e\n\u003ctd\u003e是否显示关闭icon\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003etrue\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 class=\"heading\"\u003e5. Toast 轻提示\u003c/h2\u003e\n\u003ch3 class=\"heading\"\u003e基本用法\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eexample-block\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003etitle\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"基础用法\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ebutton\u003c/span\u003e @\u003cspan class=\"hljs-attr\"\u003eclick\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"showSimpleToast\"\u003c/span\u003e\u0026gt;\u003c/span\u003e普通文字提示\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003eexample-block\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e {\n  \u003cspan class=\"hljs-attr\"\u003emethods\u003c/span\u003e: {\n    showSimpleToast () {\n      \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.$toast({\u003cspan class=\"hljs-attr\"\u003emsg\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'我是文字提示~'\u003c/span\u003e});\n    }\n  }\n}\n\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e自定义 HTML\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eexample-block\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003etitle\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"自定义HTML\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ebutton\u003c/span\u003e @\u003cspan class=\"hljs-attr\"\u003eclick\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"showHtmlToast\"\u003c/span\u003e\u0026gt;\u003c/span\u003e自定义HTML文本提示\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003eexample-block\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e {\n  \u003cspan class=\"hljs-attr\"\u003emethods\u003c/span\u003e: {\n    showHtmlToast () {\n      \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.$toast(\u003cspan class=\"hljs-string\"\u003e'\u0026lt;strong style=\"font-size: 20px;\"\u0026gt;HTML文字提示~\u0026lt;/strong\u0026gt;'\u003c/span\u003e);\n    }\n  }\n}\n\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003eAttributes\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e参数\u003c/th\u003e\n\u003cth\u003e说明\u003c/th\u003e\n\u003cth\u003e类型\u003c/th\u003e\n\u003cth\u003e可选值\u003c/th\u003e\n\u003cth\u003e默认值\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003emsg\u003c/td\u003e\n\u003ctd\u003emsg文本内容\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003etimeout\u003c/td\u003e\n\u003ctd\u003emsg显示时长\u003c/td\u003e\n\u003ctd\u003enumber\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e2000\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ecallback\u003c/td\u003e\n\u003ctd\u003e回调函数\u003c/td\u003e\n\u003ctd\u003efunction\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eicon\u003c/td\u003e\n\u003ctd\u003e特殊icon\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 class=\"heading\"\u003e6. Picker 选择器\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e包含常用的 4 种选择器，时间，日期，时间与日期，以及普通选择器\u003c/strong\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e基本用法\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e1、时间类型选择器（切换 type 即可）\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ex-picker\u003c/span\u003e \n    \u003cspan class=\"hljs-attr\"\u003etitle\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"选择日期\"\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003eplaceholder\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"请选择日期\"\u003c/span\u003e \n    \u003cspan class=\"hljs-attr\"\u003ev-model\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"now_date\"\u003c/span\u003e \n    \u003cspan class=\"hljs-attr\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"date\"\u003c/span\u003e\n  \u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ex-picker\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e {\n  data() {\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e {\n      \u003cspan class=\"hljs-attr\"\u003enow_date\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003e// new Date().getTime()/1000\u003c/span\u003e\n    };\n  }\n};\n\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e2、custom 普通选择器\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ex-picker\u003c/span\u003e \n    \u003cspan class=\"hljs-attr\"\u003ev-model\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"gender.value\"\u003c/span\u003e \n    \u003cspan class=\"hljs-attr\"\u003eplaceholder\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"请选择性别\"\u003c/span\u003e \n    \u003cspan class=\"hljs-attr\"\u003e:default\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"gender.default\"\u003c/span\u003e \n    \u003cspan class=\"hljs-attr\"\u003etitle\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"选择性别\"\u003c/span\u003e \n    \u003cspan class=\"hljs-attr\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"custom\"\u003c/span\u003e\n  \u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ex-picker\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"actionscript\"\u003e\nexport \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e {\n  data() {\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e {\n     gender: {\n        \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e-1\u003c/span\u003e,\n        value: [\n          { name: \u003cspan class=\"hljs-string\"\u003e\"保密\"\u003c/span\u003e, value: \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e },\n          { name: \u003cspan class=\"hljs-string\"\u003e\"男\"\u003c/span\u003e, value: \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e },\n          { name: \u003cspan class=\"hljs-string\"\u003e\"女\"\u003c/span\u003e, value: \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e }\n        ]\n      }\n    };\n  }\n};\n\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e高阶用法\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e使用 timeStep 进行分钟的粒度选择\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ex-picker\u003c/span\u003e \n    \u003cspan class=\"hljs-attr\"\u003etitle\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"选择日期\"\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003eplaceholder\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"请选择日期\"\u003c/span\u003e \n    \u003cspan class=\"hljs-attr\"\u003ev-model\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"now_date\"\u003c/span\u003e \n    \u003cspan class=\"hljs-attr\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"date\"\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003e:timeStep\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"20\"\u003c/span\u003e\n  \u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ex-picker\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e {\n  data() {\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e {\n      \u003cspan class=\"hljs-attr\"\u003enow_date\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003e// new Date().getTime()/1000\u003c/span\u003e\n    };\n  }\n};\n\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e使用 startYear，endYear，startDate，endDate，startMinute，endMinute 进行时间的范围选择。（更多的可看实际情况进行搭配）\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ex-picker\u003c/span\u003e \n    \u003cspan class=\"hljs-attr\"\u003etitle\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"选择日期\"\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003eplaceholder\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"请选择日期\"\u003c/span\u003e \n    \u003cspan class=\"hljs-attr\"\u003ev-model\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"now_date\"\u003c/span\u003e \n    \u003cspan class=\"hljs-attr\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"date\"\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003estartMinute\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"2\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eendMinute\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"30\"\u003c/span\u003e\n  \u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ex-picker\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e {\n  data() {\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e {\n      \u003cspan class=\"hljs-attr\"\u003enow_date\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003e// new Date().getTime()/1000\u003c/span\u003e\n    };\n  }\n};\n\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003eAttributes\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e参数\u003c/th\u003e\n\u003cth\u003e说明\u003c/th\u003e\n\u003cth\u003e类型\u003c/th\u003e\n\u003cth\u003e可选值\u003c/th\u003e\n\u003cth\u003e默认值\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003edefault\u003c/td\u003e\n\u003ctd\u003epicker默认选中的值\u003c/td\u003e\n\u003ctd\u003estring/number\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003etype\u003c/td\u003e\n\u003ctd\u003epicker类型\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003edate/time/datetime/custom\u003c/td\u003e\n\u003ctd\u003edatetime\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003etitle\u003c/td\u003e\n\u003ctd\u003e选择器弹窗标题\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eplaceholder\u003c/td\u003e\n\u003ctd\u003eplaceholder\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e请选择时间\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003etimeStep\u003c/td\u003e\n\u003ctd\u003e时间选择粒度(有分钟的选择器)\u003c/td\u003e\n\u003ctd\u003enumber\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003estartYear\u003c/td\u003e\n\u003ctd\u003e起始年份\u003c/td\u003e\n\u003ctd\u003enumber/string\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e今年\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eendYear\u003c/td\u003e\n\u003ctd\u003e结束年份\u003c/td\u003e\n\u003ctd\u003enumber/string\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e10年的范围\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003estartDate\u003c/td\u003e\n\u003ctd\u003e起始日期\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eendDate\u003c/td\u003e\n\u003ctd\u003e结束日期\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003estartHour\u003c/td\u003e\n\u003ctd\u003e起始时间\u003c/td\u003e\n\u003ctd\u003enumber/string\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eendHour\u003c/td\u003e\n\u003ctd\u003e结束时间\u003c/td\u003e\n\u003ctd\u003enumber/string\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e23\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003estartMinute\u003c/td\u003e\n\u003ctd\u003e起始分钟\u003c/td\u003e\n\u003ctd\u003enumber/string\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eendMinute\u003c/td\u003e\n\u003ctd\u003e结束分钟\u003c/td\u003e\n\u003ctd\u003enumber/string\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e59\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eyearFormat\u003c/td\u003e\n\u003ctd\u003e“年“的格式化\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e{value}年\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003emonthFormat\u003c/td\u003e\n\u003ctd\u003e“月“的格式化\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e{value}月\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003edayFormat\u003c/td\u003e\n\u003ctd\u003e“日“的格式化\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e{value}日\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ehourFormat\u003c/td\u003e\n\u003ctd\u003e“时“的格式化\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e{value}时\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eminuteFormat\u003c/td\u003e\n\u003ctd\u003e“分“的格式化\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e{value}分\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 class=\"heading\"\u003e7. Select 选择器\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e当选项过多时，使用下拉菜单展示并选择内容。\u003c/strong\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e基础用法\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e只有一个select\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ex-select\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003etitle\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"LIST ONE\"\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003edefaultValue\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"0\"\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003e:selectData\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"selectData\"\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003e:alwaysShowTitle\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"false\"\u003c/span\u003e\n    @\u003cspan class=\"hljs-attr\"\u003esearch\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"searchFn\"\u003c/span\u003e\n    \u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ex-select\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e {\n  data() {\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e {\n      \u003cspan class=\"hljs-attr\"\u003eselectData\u003c/span\u003e: [\n        { \u003cspan class=\"hljs-attr\"\u003eid\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"LIST ONE 1\"\u003c/span\u003e },\n        { \u003cspan class=\"hljs-attr\"\u003eid\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"LIST ONE 2\"\u003c/span\u003e },\n        { \u003cspan class=\"hljs-attr\"\u003eid\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"LIST ONE 3\"\u003c/span\u003e },\n        { \u003cspan class=\"hljs-attr\"\u003eid\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"LIST ONE 4\"\u003c/span\u003e },\n        { \u003cspan class=\"hljs-attr\"\u003eid\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"LIST ONE 5\"\u003c/span\u003e }\n      ],\n    };\n  },\n  \u003cspan class=\"hljs-attr\"\u003emethods\u003c/span\u003e: {\n    searchFn(index, id) {\n      \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(index, id);\n    }\n  }\n};\n\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e两个及多个（需设置width属性）\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- first --\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ev-select\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003etitle\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"LIST ONE\"\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003ewidth\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"50%\"\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003edefaultValue\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"0\"\u003c/span\u003e\n    @\u003cspan class=\"hljs-attr\"\u003esearch\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"searchFn\"\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003e:selectData\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"selectData\"\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003e:alwaysShowTitle\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"false\"\u003c/span\u003e\n    \u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ev-select\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- second --\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ev-select\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003etitle\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"LIST TWO\"\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003ewidth\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"50%\"\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003eellipsisWidth\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"65px\"\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003edefaultValue\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"1\"\u003c/span\u003e\n    @\u003cspan class=\"hljs-attr\"\u003esearch\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"searchFn1\"\u003c/span\u003e\n    \u003cspan class=\"hljs-attr\"\u003e:selectData\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"selectData1\"\u003c/span\u003e\n    \u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ev-select\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e {\n  data() {\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e {\n      \u003cspan class=\"hljs-attr\"\u003eselectData\u003c/span\u003e: [\n        { \u003cspan class=\"hljs-attr\"\u003eid\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"LIST ONE 1\"\u003c/span\u003e },\n        { \u003cspan class=\"hljs-attr\"\u003eid\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"LIST ONE 2\"\u003c/span\u003e },\n        { \u003cspan class=\"hljs-attr\"\u003eid\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"LIST ONE 3\"\u003c/span\u003e },\n        { \u003cspan class=\"hljs-attr\"\u003eid\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"LIST ONE 4\"\u003c/span\u003e },\n        { \u003cspan class=\"hljs-attr\"\u003eid\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"LIST ONE 5\"\u003c/span\u003e }\n      ],\n      \u003cspan class=\"hljs-attr\"\u003eselectData1\u003c/span\u003e: [\n        { \u003cspan class=\"hljs-attr\"\u003eid\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"LIST TWO 1\"\u003c/span\u003e },\n        { \u003cspan class=\"hljs-attr\"\u003eid\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"LIST TWO 2\"\u003c/span\u003e },\n        { \u003cspan class=\"hljs-attr\"\u003eid\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"LIST TWO 3\"\u003c/span\u003e },\n        { \u003cspan class=\"hljs-attr\"\u003eid\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"LIST TWO 4\"\u003c/span\u003e },\n        { \u003cspan class=\"hljs-attr\"\u003eid\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"LIST TWO 5\"\u003c/span\u003e }\n      ]\n    };\n  },\n  \u003cspan class=\"hljs-attr\"\u003emethods\u003c/span\u003e: {\n    searchFn(index, id) {\n      \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(index, id);\n    },\n    searchFn1(index, id) {\n      \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(index, id);\n    }\n  }\n};\n\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003eAttributes\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e参数\u003c/th\u003e\n\u003cth\u003e说明\u003c/th\u003e\n\u003cth\u003e类型\u003c/th\u003e\n\u003cth\u003e可选值\u003c/th\u003e\n\u003cth\u003e默认值\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eselectData\u003c/td\u003e\n\u003ctd\u003e下拉数据\u003c/td\u003e\n\u003ctd\u003earray\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e[]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003etitle\u003c/td\u003e\n\u003ctd\u003e默认显示的标题\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ealwaysShowTitle\u003c/td\u003e\n\u003ctd\u003e是否一直显示默认标题\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003edefaultValue\u003c/td\u003e\n\u003ctd\u003e默认选中的值\u003c/td\u003e\n\u003ctd\u003enumber/string\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ewidth\u003c/td\u003e\n\u003ctd\u003eselect组件的宽度\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e100%\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eellipsisWidth\u003c/td\u003e\n\u003ctd\u003eselect文字超过多出省略号的宽度\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e120px\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 class=\"heading\"\u003eEvents\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e事件名称\u003c/th\u003e\n\u003cth\u003e说明\u003c/th\u003e\n\u003cth\u003e回调参数\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003esearch\u003c/td\u003e\n\u003ctd\u003eselect 选择时的回调函数\u003c/td\u003e\n\u003ctd\u003e参数1：索引，参数2：所中项的id值\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 class=\"heading\"\u003e8. switch\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e表示两种相互对立的状态间的切换，多用于触发「开/关」。\u003c/strong\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e基本用法\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e注：如果未使用v-model指令进行值的双向绑定，则switch会显示value值对应的位置，但不能进行on-off操作\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eul\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e'v-list'\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e默认switch，值：{{val1}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ev-switch\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ev-model\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"val1\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ev-switch\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e设置宽高，默认选中，值：{{val2}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ev-switch\u003c/span\u003e @\u003cspan class=\"hljs-attr\"\u003echange\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"handleChange\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ev-model\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"val2\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ewidth\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"50\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eheight\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"30\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ev-switch\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e禁止点击，值：{{val3}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ev-switch\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003e:disabled\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"true\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ev-switch\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e禁止点击，默认选中，值：{{val4}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ev-switch\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003e:disabled\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"true\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ev-model\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"val4\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ev-switch\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e {\n  data () {\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e {\n      \u003cspan class=\"hljs-attr\"\u003eval1\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,\n      \u003cspan class=\"hljs-attr\"\u003eval2\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n      \u003cspan class=\"hljs-attr\"\u003eval3\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,\n      \u003cspan class=\"hljs-attr\"\u003eval4\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\n    }\n  },\n  \u003cspan class=\"hljs-attr\"\u003emethods\u003c/span\u003e: {\n    handleChange (val, oldVal) {\n      \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(val, oldVal);\n    }\n  }\n}\n\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003eAttributes\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e参数\u003c/th\u003e\n\u003cth\u003e说明\u003c/th\u003e\n\u003cth\u003e类型\u003c/th\u003e\n\u003cth\u003e可选值\u003c/th\u003e\n\u003cth\u003e默认值\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003ewidth\u003c/td\u003e\n\u003ctd\u003eswitch的宽度（像素）\u003c/td\u003e\n\u003ctd\u003enumber/string\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e60\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eheight\u003c/td\u003e\n\u003ctd\u003eswitch的高度（像素）\u003c/td\u003e\n\u003ctd\u003enumber/string\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003edisabled\u003c/td\u003e\n\u003ctd\u003e是否禁用\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003evalue\u003c/td\u003e\n\u003ctd\u003eswitch初始化选择状态\u003c/td\u003e\n\u003ctd\u003eboolean/number/string\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eactiveClass\u003c/td\u003e\n\u003ctd\u003eswitch 打开时的class\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003eavtive\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003einactiveClass\u003c/td\u003e\n\u003ctd\u003eswitch 关闭时的class\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e—\u003c/td\u003e\n\u003ctd\u003einactive\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 class=\"heading\"\u003eEvents\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e事件名称\u003c/th\u003e\n\u003cth\u003e说明\u003c/th\u003e\n\u003cth\u003e回调参数\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003echange\u003c/td\u003e\n\u003ctd\u003eswitch 状态发生变化时的回调函数\u003c/td\u003e\n\u003ctd\u003e新状态的值\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e以上组件便是目前vui所有的组件了，后期会不断的进行维护并进行新组件的开发。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003evui\u003c/strong\u003e github传送门：\u003ca target=\"_blank\" href=\"https://github.com/Brickies/vui\"\u003ehttps://github.com/Brickies/vui\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003evui\u003c/strong\u003e npm传送门：\u003ca target=\"_blank\" href=\"https://www.npmjs.com/package/x-vui\"\u003ehttps://www.npmjs.com/package/x-vui\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003evui\u003c/strong\u003e 文档官网传送门：\u003ca target=\"_blank\" href=\"https://brickies.github.io/vui\"\u003ehttps://brickies.github.io/vui\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e如果小伙伴们喜欢我的\u003cstrong\u003evui\u003c/strong\u003e，欢迎 \u003ca target=\"_blank\" href=\"https://github.com/Brickies/vui\"\u003estar\u003c/a\u003e 。\u003c/p\u003e\n\u003cp\u003e如果有什么问题欢迎小伙伴们随时提 \u003ca target=\"_blank\" href=\"https://github.com/Brickies/vui/issues\"\u003eIssue\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e如果有好的组件欢迎小伙伴们随时提\u003ca target=\"_blank\" href=\"https://github.com/Brickies/vui/pulls\"\u003ePR\u003c/a\u003e，我会不定期进行merge\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e后期展望\u003c/h2\u003e\n\u003cp\u003e组件库基本组件完成的差不多，我会做一个该项目搭建以及组件开发的分享，敬请期待~~~\u003c/p\u003e\n","buildTime":"1514378126.1333","__v":0}
{"_id":{"$oid":"5a4393bf95a5f32670e69c4d"},"id":"5a410224518825094862c32f","author":{"$oid":"5a4393bf95a5f32670e69c3d"},"title":"用canvas绘制一个曲线动画——深入理解贝塞尔曲线","meta":{"likeCount":0},"tag":["JavaScript","Canvas"],"comment":[],"content":"\u003cp\u003e在前端开发中，贝赛尔曲线无处不在：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e它可以用来绘制曲线，在svg和canvas中，原生提供的曲线绘制都是使用贝赛尔曲线\u003c/li\u003e\n\u003cli\u003e它也可以用来描述一个缓动算法，设置css的\u003ccode\u003etransition-timing-function\u003c/code\u003e属性，可以使用贝塞尔曲线来描述过渡的缓动计算\u003c/li\u003e\n\u003cli\u003e几乎所有前端2D或3D图形图表库(echarts，d3，three.js)都会使用到贝塞尔曲线\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这篇文章我准备从实现一个非常简单的曲线动画效果入手，帮助大家彻底地弄懂什么是贝塞尔曲线，以及它有哪些特性，文章中有一点点数学公式，但是都非常简单:)。\u003c/p\u003e\n\u003cdiv align=\"center\"\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"160935917f7f0d3f\" src=\"https://user-gold-cdn.xitu.io/2017/12/26/160936fc9c5c61ac?w=305\u0026amp;h=269\u0026amp;f=gif\u0026amp;s=473671\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n实现一个曲线动画\u003cp\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cp\u003e可以点击这里查看\u003ca target=\"_blank\" href=\"https://hujiulong.github.io/blog/demo/bezier/\"\u003e在线演示\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e在写代码之前，先了解一下什么是贝塞尔曲线吧。\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 class=\"heading\"\u003e贝塞尔曲线\u003c/h2\u003e\n\u003cp\u003e贝塞尔曲线（Bezier curve）是计算机图形学中相当重要的参数曲线，它通过一个方程来描述一条曲线，根据方程的最高阶数，又分为线性贝赛尔曲线，二次贝塞尔曲线、三次贝塞尔曲线和更高阶的贝塞尔曲线。\u003c/p\u003e\n\u003cp\u003e下面详细介绍一下用得比较多的二次贝塞尔曲线和三次贝塞尔曲线\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e二次贝塞尔曲线\u003c/h3\u003e\n\u003cp\u003e二次贝塞尔曲线由三个点\u003ccode\u003eP0\u003c/code\u003e,\u003ccode\u003eP1\u003c/code\u003e,\u003ccode\u003eP2\u003c/code\u003e来确定，这些点也被称作控制点。曲线的方程为：\u003c/p\u003e\n\u003cdiv align=\"center\"\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://latex.codecogs.com/gif.latex?%7B%5Cmathbf%20%7BB%7D%7D%28t%29%3D%281-t%29%5E%7B%7B2%7D%7D%7B%5Cmathbf%20%7BP%7D%7D_%7B0%7D+2t%281-t%29%7B%5Cmathbf%20%7BP%7D%7D_%7B1%7D+t%5E%7B%7B2%7D%7D%7B%5Cmathbf%20%7BP%7D%7D_%7B2%7D%7B%5Cmbox%7B%20%2C%20%7D%7Dt%5Cin%20%5B0%2C1%5D%25u3002\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cp\u003e这个方程其实有它的几何意义，它表示可以通过这样的步骤来绘制一条曲线：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e选定一个\u003ccode\u003e0-1\u003c/code\u003e的\u003ccode\u003et\u003c/code\u003e值\u003c/li\u003e\n\u003cli\u003e通过\u003ccode\u003eP0\u003c/code\u003e和\u003ccode\u003eP1\u003c/code\u003e计算出点\u003ccode\u003eQ0\u003c/code\u003e，\u003ccode\u003eQ0\u003c/code\u003e在\u003ccode\u003eP0\u003c/code\u003e \u003ccode\u003eP1\u003c/code\u003e连成的直线上，并且\u003ccode\u003elength( P0, Q0 ) = length( P0, P1 ) * t\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e同样，通过\u003ccode\u003eP1\u003c/code\u003e和\u003ccode\u003eP2\u003c/code\u003e计算出\u003ccode\u003eQ1\u003c/code\u003e，使得\u003ccode\u003elength( P1, Q1 ) = length( P1, P2 ) * t\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e再重复一次这个步骤，通过\u003ccode\u003eQ1\u003c/code\u003e和\u003ccode\u003eQ2\u003c/code\u003e计算出\u003ccode\u003eB\u003c/code\u003e，使得\u003ccode\u003elength( Q0, Q1 ) = length( Q0, B ) * t\u003c/code\u003e。\u003ccode\u003eB\u003c/code\u003e就为当前曲线上的点\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e注：上面的\u003ccode\u003elength\u003c/code\u003e表示两点之间的长度\u003c/p\u003e\n\u003cdiv align=\"center\"\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608e25792da9c97?w=240\u0026amp;h=100\u0026amp;f=png\u0026amp;s=5429\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003ccenter\u003e图：二次贝塞尔曲线结构\u003c/center\u003e\n\u003cp\u003e有了曲线方程，我们直接代入具体的\u003ccode\u003et\u003c/code\u003e值就能算出点\u003ccode\u003eB\u003c/code\u003e了。\u003c/p\u003e\n\u003cp\u003e如果将\u003ccode\u003et\u003c/code\u003e的值从\u003ccode\u003e0\u003c/code\u003e过渡到\u003ccode\u003e1\u003c/code\u003e，不断计算点\u003ccode\u003eB\u003c/code\u003e，就可以得到一条二次贝塞尔曲线：\n\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"s\" src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608e1929786355b?w=240\u0026amp;h=100\u0026amp;f=gif\u0026amp;s=74274\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ccenter\u003e图：二次贝塞尔线绘制过程\u003c/center\u003e\n\u003cp\u003e在canvas中，绘制二次贝塞尔曲线的方法为\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003ectx.quadraticCurveTo( p1x, p1y, p2x, p2y )\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e其中\u003ccode\u003ep1x, p1y, p2x, p2y\u003c/code\u003e为后两个控制点（\u003ccode\u003eP1\u003c/code\u003e和\u003ccode\u003eP2\u003c/code\u003e）的横纵坐标，它默认将当前路径的起点作为一个控制点（\u003ccode\u003eP0\u003c/code\u003e）。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e三次贝塞尔曲线\u003c/h3\u003e\n\u003cp\u003e三次贝塞尔曲线需要四个点\u003ccode\u003eP0\u003c/code\u003e,\u003ccode\u003eP1\u003c/code\u003e,\u003ccode\u003eP2\u003c/code\u003e,\u003ccode\u003eP3\u003c/code\u003e来确定，曲线方程为\u003c/p\u003e\n\u003cdiv align=\"center\"\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://latex.codecogs.com/gif.latex?%7B%5Cmathbf%20%7BB%7D%7D%28t%29%3D%7B%5Cmathbf%20%7BP%7D%7D_%7B0%7D%281-t%29%5E%7B3%7D+3%7B%5Cmathbf%20%7BP%7D%7D_%7B1%7Dt%281-t%29%5E%7B2%7D+3%7B%5Cmathbf%20%7BP%7D%7D_%7B2%7Dt%5E%7B2%7D%281-t%29+%7B%5Cmathbf%20%7BP%7D%7D_%7B3%7Dt%5E%7B3%7D%7B%5Cmbox%7B%20%2C%20%7D%7Dt%5Cin%20%5B0%2C1%5D%25u3002\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003c/div\u003e\n它的计算过程和二次贝塞尔曲线类似，这里不再赘述，可以看下图：\n\u003cdiv align=\"center\"\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608e3077df20e7b?w=240\u0026amp;h=100\u0026amp;f=png\u0026amp;s=7942\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003ccenter\u003e图：三次贝塞尔曲线结构\u003c/center\u003e\n\u003cp\u003e同样，将\u003ccode\u003et\u003c/code\u003e的值从\u003ccode\u003e0\u003c/code\u003e过渡到\u003ccode\u003e1\u003c/code\u003e，就可以绘制出一条三次贝塞尔曲线：\u003c/p\u003e\n\u003cdiv align=\"center\"\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608e2ba9c18d8d6?w=240\u0026amp;h=100\u0026amp;f=gif\u0026amp;s=109773\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003ccenter\u003e图：三次贝塞尔曲线绘制过程\u003c/center\u003e\n\u003cp\u003e在canvas中，绘制三次贝塞尔曲线的方法为\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003ectx.bezierCurveTo( p1x, p1y, p2x, p2y, p3x, p3y )\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e其中\u003ccode\u003ep1x, p1y, p2x, p2y, p3x, p3y\u003c/code\u003e为后三个控制点（\u003ccode\u003eP1\u003c/code\u003e,\u003ccode\u003eP2\u003c/code\u003e和\u003ccode\u003eP3\u003c/code\u003e）的横纵坐标，它默认将当前路径的起点作为一个控制点（\u003ccode\u003eP0\u003c/code\u003e）。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e贝塞尔曲线的特征\u003c/h3\u003e\n\u003cp\u003e在三次贝塞尔曲线后面，还有更高阶的贝塞尔曲线，同样它们绘制的过程也更加复杂\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003e四次贝塞尔曲线\u003cdiv align=\"center\"\u003e\u003c/div\u003e\u003c/h4\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608e388394dc30e?w=240\u0026amp;h=100\u0026amp;f=gif\u0026amp;s=138340\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\n\u003ccenter\u003e图：四次贝塞尔曲线\u003c/center\u003e\n\u003ch4 class=\"heading\"\u003e五次贝塞尔曲线\u003cdiv align=\"center\"\u003e\u003c/div\u003e\u003c/h4\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608e389f3e76e8d?w=240\u0026amp;h=192\u0026amp;f=gif\u0026amp;s=248057\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\n\u003ccenter\u003e图：五次贝塞尔曲线\u003c/center\u003e\n\u003cp\u003e我们可以归纳出贝塞尔曲线有几个重要的特征：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003en阶贝塞尔曲线需要n+1个点来确定\u003c/li\u003e\n\u003cli\u003e贝塞尔曲线是平滑的\u003c/li\u003e\n\u003cli\u003e贝塞尔曲线的起点和终点与对应控制点的连线相切\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch2 class=\"heading\"\u003e绘制贝塞尔曲线\u003c/h2\u003e\n\u003cp\u003e复习完基础概念，接下来就要讲如果绘制贝塞尔曲线啦\u003c/p\u003e\n\u003cp\u003e为简单起见，\u003cstrong\u003e我们选择使用二次贝塞尔曲线\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e我们先不考虑动画的事，我们先将问题简化成：给定一个起点和一个终点，需要实现一个函数，它能够绘制出一条曲线。\u003c/p\u003e\n\u003cp\u003e也就是说我们需要实现一个函数\u003ccode\u003edrawCurvePath\u003c/code\u003e，除渲染上下文ctx外（不清楚ctx是什么的同学可以先熟悉下canvas的基本概念），它接受三个参数，分别为二次贝塞尔曲线的三个控制点。我们将样式控制移到函数外，\u003ccode\u003edrawCurvePath\u003c/code\u003e只用来绘制路径。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * 绘制二次贝赛尔曲线路径\n * @param  {Object} ctx\n * @param  {Array\u0026lt;number\u0026gt;} p0\n * @param  {Array\u0026lt;number\u0026gt;} p1\n * @param  {Array\u0026lt;number\u0026gt;} p2\n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003edrawCurvePath\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e ctx, p0, p1, p2 \u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-comment\"\u003e// ...\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e前文提到过，在canvas中，绘制二次贝赛尔曲线的方法是\u003ccode\u003equadraticCurveTo\u003c/code\u003e，所以只要短短两行就能完成这个方法。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * 绘制二次贝赛尔曲线路径\n * @param  {CanvasRenderingContext2D} ctx\n * @param  {Array\u0026lt;number\u0026gt;} p0\n * @param  {Array\u0026lt;number\u0026gt;} p1\n * @param  {Array\u0026lt;number\u0026gt;} p2\n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003edrawCurvePath\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e ctx, p0, p1, p2 \u003c/span\u003e) \u003c/span\u003e{\n    ctx.moveTo( p0[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ], p0[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ] );\n    ctx.quadraticCurveTo( \n        p1[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ], p1[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ],\n        p2[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ], p2[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ]\n    );\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这样就完成了基本的绘制二次贝塞尔曲线的方法了。\u003c/p\u003e\n\u003cp\u003e但是函数这样设计有点小问题\u003c/p\u003e\n\u003cp\u003e如果我们是在做一个图形库，我们想给使用者提供一个绘制曲线的方法。\u003c/p\u003e\n\u003cp\u003e对于使用者来说，他只想在给定的起点和终点间间绘制一条曲线，他想要得到的曲线尽量美观，但是又不想关心具体的实现细节，如果还需要给第三个点，使用者会有一定的学习成本（至少需要弄明白什么是贝塞尔曲线）。\u003c/p\u003e\n\u003cp\u003e看到这里你可能会比较疑惑，即使是二次贝塞尔曲线也需要三个控制点，只有起点和终点怎么绘制曲线呢。\u003c/p\u003e\n\u003cp\u003e我们可以在起点和终点的垂直平分线上选一点作为第三个控制点，可以提供给使用者一个参数来控制曲线的弯曲程度，现在函数就变成了这样\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * 绘制一条曲线路径\n * @param  {CanvasRenderingContext2D} ctx\n * @param  {Array\u0026lt;number\u0026gt;} start 起点\n * @param  {Array\u0026lt;number\u0026gt;} end 终点\n * @param  {number} curveness 曲度(0-1)\n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003edrawCurvePath\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e ctx, start, end, curveness \u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-comment\"\u003e// ...\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我们用\u003ccode\u003ecurveness\u003c/code\u003e来表示曲线的弯曲程度，也就是第三个控制点的偏离程度。这样很容易就能计算出中间点。\n现在完整的函数变成了这样：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * 绘制一条曲线路径\n * @param  {Object} ctx canvas渲染上下文\n * @param  {Array\u0026lt;number\u0026gt;} start 起点\n * @param  {Array\u0026lt;number\u0026gt;} end 终点\n * @param  {number} curveness 曲度(0-1)\n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003edrawCurvePath\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e ctx, start, end, curveness \u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-comment\"\u003e// 计算中间控制点\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e cp = [\n         ( start[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ] + end[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ] ) / \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e - ( start[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ] - end[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ] ) * curveness,\n         ( start[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ] + end[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ] ) / \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e - ( end[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ] - start[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ] ) * curveness\n    ];\n    ctx.moveTo( start[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ], start[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ] );\n    ctx.quadraticCurveTo( \n        cp[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ], cp[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ],\n        end[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ], end[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ]\n    );\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e对，就这么短短几行，接下来我们就可以通过它来绘制一条曲线了，代码如下\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-meta\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ehtml\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003elang\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"en\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003edraw curve\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ecanvas\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"canvas\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ewidth\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"800\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eheight\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"800\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ecanvas\u003c/span\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e canvas = \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.getElementById( \u003cspan class=\"hljs-string\"\u003e'canvas'\u003c/span\u003e );\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e ctx = canvas.getContext( \u003cspan class=\"hljs-string\"\u003e'2d'\u003c/span\u003e );\n            \n            ctx.lineWidth = \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e;\n            ctx.strokeStyle = \u003cspan class=\"hljs-string\"\u003e'#ff0000'\u003c/span\u003e;\n            ctx.beginPath();\n    \n            drawCurvePath( \n                ctx,\n                [ \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e ],\n                [ \u003cspan class=\"hljs-number\"\u003e200\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e300\u003c/span\u003e ],\n                \u003cspan class=\"hljs-number\"\u003e0.2\u003c/span\u003e\n            );\n            \n            ctx.stroke();\n            \n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003edrawCurvePath\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e ctx, start, end, curveness \u003c/span\u003e) \u003c/span\u003e{\n                \u003cspan class=\"hljs-comment\"\u003e// ...\u003c/span\u003e\n            }\n        \u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003chr\u003e\n\u003ch2 class=\"heading\"\u003e绘制贝塞尔曲线动画\u003c/h2\u003e\n\u003cp\u003e终于来到文章的本体啦，我们的目的不是绘制一条静态的曲线，我们想绘制一条有过渡效果的曲线。\u003c/p\u003e\n\u003cp\u003e简化一下问题，那就是我们希望绘制曲线的函数还接受另一个参数，表示绘制曲线的百分比。我们定时去调用这个函数，递增百分比这个参数，就能画出动画了。\u003c/p\u003e\n\u003cp\u003e我们新增一个参数\u003ccode\u003epercent\u003c/code\u003e来表示百分比，现在函数变成了这样：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * 绘制一条曲线路径\n * @param  {Object} ctx canvas渲染上下文\n * @param  {Array\u0026lt;number\u0026gt;} start 起点\n * @param  {Array\u0026lt;number\u0026gt;} end 终点\n * @param  {number} curveness 曲度(0-1)\n * @param  {number} percent 绘制百分比(0-100)\n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003edrawCurvePath\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e ctx, start, end, curveness, percent \u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-comment\"\u003e// ...\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e但是canvas提供的\u003ccode\u003equadraticCurveTo\u003c/code\u003e方法只能绘制一条完整的二次贝赛尔曲线，没有办法去控制它只画一部分。\u003c/p\u003e\n\u003cp\u003e画完后用\u003ccode\u003eclearRect\u003c/code\u003e擦除掉一部分？这不太可行，因为很难确定要擦除的范围。如果曲线的线宽比较宽，就还需要保证擦除的边界和曲线末端垂直，问题就变得很复杂了。\u003c/p\u003e\n\u003cp\u003e现在再重新看看这张图\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"s\" src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608e1929786355b?w=240\u0026amp;h=100\u0026amp;f=gif\u0026amp;s=74274\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e我们是不是可以将\u003ccode\u003epercent\u003c/code\u003e这个参数理解成\u003ccode\u003et\u003c/code\u003e值，然后通过贝赛尔曲线方程去计算出中间所有的点，用直线连接起来，以此模拟绘制贝赛尔曲线的一部分呢？\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e方法一\u003c/h3\u003e\n\u003cp\u003e我们不再用canvas提供的\u003ccode\u003equadraticCurveTo\u003c/code\u003e来绘制曲线，而是通过贝赛尔曲线的方程计算出一系列点，用多段直线来模拟曲线。\u003c/p\u003e\n\u003cp\u003e这样做的好处是，我们可以很容易的控制绘制的范围。\u003c/p\u003e\n\u003cp\u003e那么函数实现就变成了这样：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * 绘制一条曲线路径\n * @param  {Object} ctx canvas渲染上下文\n * @param  {Array\u0026lt;number\u0026gt;} start 起点\n * @param  {Array\u0026lt;number\u0026gt;} end 终点\n * @param  {number} curveness 曲度(0-1)\n * @param  {number} percent 绘制百分比(0-100)\n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003edrawCurvePath\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e ctx, start, end, curveness, percent \u003c/span\u003e) \u003c/span\u003e{\n\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e cp = [\n         ( start[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ] + end[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ] ) / \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e - ( start[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ] - end[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ] ) * curveness,\n         ( start[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ] + end[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ] ) / \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e - ( end[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ] - start[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ] ) * curveness\n    ];\n    \n    ctx.moveTo( start[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ], start[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ] );\n    \n    \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e ( \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e t = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; t \u0026lt;= percent / \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e; t += \u003cspan class=\"hljs-number\"\u003e0.01\u003c/span\u003e ) {\n\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e x = quadraticBezier( start[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ], cp[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ], end[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ], t );\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e y = quadraticBezier( start[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ], cp[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ], end[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ], t );\n        \n        ctx.lineTo( x, y );\n    }\n    \n}\n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003equadraticBezier\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e p0, p1, p2, t \u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e k = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e - t;\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e k * k * p0 + \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e * ( \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e - t ) * t * p1 + t * t * p2;    \u003cspan class=\"hljs-comment\"\u003e// 这个方程就是二次贝赛尔曲线方程\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e接下来就可以通过设置定时器，每隔一段时间调用一次这个方法，并且递增percent\u003c/p\u003e\n\u003cp\u003e为了动画更加平滑，我们使用\u003ccode\u003erequestAnimationFrame\u003c/code\u003e来代替定时器\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-meta\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ehtml\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003elang\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"en\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003edraw curve\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ecanvas\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"canvas\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ewidth\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"800\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eheight\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"800\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ecanvas\u003c/span\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e canvas = \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.getElementById( \u003cspan class=\"hljs-string\"\u003e'canvas'\u003c/span\u003e );\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e ctx = canvas.getContext( \u003cspan class=\"hljs-string\"\u003e'2d'\u003c/span\u003e );\n            \n            ctx.lineWidth = \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e;\n            ctx.strokeStyle = \u003cspan class=\"hljs-string\"\u003e'#000'\u003c/span\u003e;\n            \n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e percent = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n            \n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eanimate\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n                \n                ctx.clearRect( \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e800\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e800\u003c/span\u003e );\n                ctx.beginPath();\n\n                drawCurvePath( \n                    ctx,\n                    [ \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e ],\n                    [ \u003cspan class=\"hljs-number\"\u003e200\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e300\u003c/span\u003e ],\n                    \u003cspan class=\"hljs-number\"\u003e0.2\u003c/span\u003e,\n                    percent\n                );\n    \n                ctx.stroke();\n    \n                percent = ( percent + \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ) % \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e;\n                \n                requestAnimationFrame( animate );\n                \n            }\n            \n            animate();\n            \n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003edrawCurvePath\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e ctx, start, end, curveness, percent \u003c/span\u003e) \u003c/span\u003e{\n                \u003cspan class=\"hljs-comment\"\u003e// ...\u003c/span\u003e\n            }\n        \u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e得到的结果：\u003c/p\u003e\n\u003cdiv align=\"center\"\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/160935c22ae1e69a?w=305\u0026amp;h=269\u0026amp;f=gif\u0026amp;s=27239\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cp\u003e这样基本实现了我们的需求，但它有一个问题：\u003c/p\u003e\n\u003cp\u003e测试发现，进行一次\u003ccode\u003elineTo\u003c/code\u003e的时间和一次\u003ccode\u003equadraticCurveTo\u003c/code\u003e的时间差不多，但是\u003ccode\u003equadraticCurveTo\u003c/code\u003e只需要一次就能画出曲线，而使用\u003ccode\u003elineTo\u003c/code\u003e则需要数十次。\u003c/p\u003e\n\u003cp\u003e换言之，用这样的方式绘制曲线，和我们前面的实现方式相比性能下降了数十倍之多。在绘制一条曲线时可能感觉不到区别，但是如果需要同时绘制上千条曲线，性能就会受到很大的影响。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e方法二\u003c/h3\u003e\n\u003cp\u003e那有没有什么方法可以做到用\u003ccode\u003equadraticCurveTo\u003c/code\u003e来实现绘制完整曲线的一部分呢？\u003c/p\u003e\n\u003cp\u003e我们再次回到这张图\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"s\" src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608e1929786355b?w=240\u0026amp;h=100\u0026amp;f=gif\u0026amp;s=74274\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e在中间的某一时刻，例如t=0.25时，它是这样的：\u003c/p\u003e\n\u003cdiv align=\"center\"\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608e25792da9c97?w=240\u0026amp;h=100\u0026amp;f=png\u0026amp;s=5429\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cp\u003e我们注意到，曲线\u003ccode\u003eP0-B\u003c/code\u003e这一段似乎也是贝赛尔曲线，它的控制点变成了\u003ccode\u003eP0，Q0，B\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e现在问题就迎刃而解了，我们只需要每次计算出\u003ccode\u003eQ0，B\u003c/code\u003e，就能得到其中一小段贝赛尔曲线的控制点，然后就可以通过\u003ccode\u003equadraticCurveTo\u003c/code\u003e来绘制它了。\u003c/p\u003e\n\u003cp\u003e代码如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * 绘制一条曲线路径\n * @param  {Object} ctx canvas渲染上下文\n * @param  {Array\u0026lt;number\u0026gt;} start 起点\n * @param  {Array\u0026lt;number\u0026gt;} end 终点\n * @param  {number} curveness 曲度(0-1)\n * @param  {number} percent 绘制百分比(0-100)\n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003edrawCurvePath\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e ctx, start, end, curveness, percent \u003c/span\u003e) \u003c/span\u003e{\n\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e cp = [\n         ( start[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ] + end[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ] ) / \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e - ( start[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ] - end[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ] ) * curveness,\n         ( start[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ] + end[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ] ) / \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e - ( end[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ] - start[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ] ) * curveness\n    ];\n    \n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e t = percent / \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e;\n    \n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e p0 = start;\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e p1 = cp;\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e p2 = end;\n    \n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e v01 = [ p1[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ] - p0[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ], p1[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ] - p0[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ] ];     \u003cspan class=\"hljs-comment\"\u003e// 向量\u0026lt;p0, p1\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e v12 = [ p2[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ] - p1[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ], p2[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ] - p1[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ] ];     \u003cspan class=\"hljs-comment\"\u003e// 向量\u0026lt;p1, p2\u0026gt;\u003c/span\u003e\n\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e q0 = [ p0[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ] + v01[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ] * t, p0[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ] + v01[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ] * t ];\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e q1 = [ p1[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ] + v12[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ] * t, p1[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ] + v12[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ] * t ];\n    \n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e v = [ q1[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ] - q0[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ], q1[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ] - q0[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ] ];       \u003cspan class=\"hljs-comment\"\u003e// 向量\u0026lt;q0, q1\u0026gt;\u003c/span\u003e\n\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e b = [ q0[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ] + v[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ] * t, q0[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ] + v[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ] * t ];\n    \n    ctx.moveTo( p0[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ], p0[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ] );\n\n    ctx.quadraticCurveTo( \n        q0[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ], q0[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ],\n        b[ \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ], b[ \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e ]\n    );\n\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e将前面写的页面替换成上面的代码，可以看到得到的结果是一样的：\u003c/p\u003e\n\u003cdiv align=\"center\"\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/160935c22ae1e69a?w=305\u0026amp;h=269\u0026amp;f=gif\u0026amp;s=27239\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003ch3 class=\"heading\"\u003e绘制动画\u003c/h3\u003e\n\u003cp\u003e现在已经解决了最关键的问题，我们可以绘制动画啦。\n不过这一部分并不重要，我就不贴代码了。\u003c/p\u003e\n\u003cp\u003e完整代码可以看\u003ca target=\"_blank\" href=\"https://github.com/hujiulong/blog/blob/master/demo/bezier/index.html\"\u003e这里\u003c/a\u003e\u003c/p\u003e\n\u003cdiv align=\"center\"\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"160935917f7f0d3f\" src=\"https://user-gold-cdn.xitu.io/2017/12/26/160936fc9c5c61ac?w=305\u0026amp;h=269\u0026amp;f=gif\u0026amp;s=473671\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003ch2 class=\"heading\"\u003e结束\u003c/h2\u003e\n\u003cp\u003e这篇博客到这里就结束了，我们讲了canvas如何绘制曲线，以及如何绘制曲线过渡效果。下篇博客我计划写一写如何在canvas中模拟大自然中光源照射在物体表面产生的效果。\u003c/p\u003e\n\u003cp\u003e我的博客地址： \u003ca target=\"_blank\" href=\"https://github.com/hujiulong/blog\"\u003ehttps://github.com/hujiulong/blog\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e我会在这里分享我的学习成果和经验，特别是canvas/WebGL/svg这方面的技术。如果有对前端图形绘制感兴趣的同学可以关注一下我的博客，收藏点star，订阅点watch。\u003c/p\u003e\n\u003cp\u003e最近才将博客搬到github，所以文章并不多，我会坚持写下去的！\u003c/p\u003e\n","buildTime":"1514376981.9674","__v":0}
{"_id":{"$oid":"5a4393bf95a5f32670e69c4e"},"id":"5a0c1956f265da430a501f51","author":{"$oid":"5a4393bf95a5f32670e69c41"},"title":"个人分享--web前端学习资源分享","meta":{"likeCount":0},"tag":["JavaScript"],"comment":[],"content":"\u003cdiv\u003e\u003ch2\u003e1.前言\u003c/h2\u003e\u003cp\u003e时间过得真快，转眼间现在是2017年最后一个星期，而今天也是圣诞节，过几天也是元旦了。每到年底，大家都习惯总结和分享，我也不例外。但是经历，我之前已经发过了，那么我今天就分享吧！把我接触的一些资源分享给大家，算是送给大家的双旦礼物吧！希望大家能够从中获取自己所需的资源。从我接触前端的开始，到发稿时间截止的这段时间我看过很多的博客，开源项目也了解过一些，质量有参差不齐（甚至还出现过广告文，鸡汤文），但下面的推荐的博客，文章，项目或者其它资源都是我接触过的。不敢说资源最好，最全，适合每一个人，但是内容质量上让我满意的。可能有些资源我未必看完，看懂，看细。但我觉得是可以帮到大家的，能让大家提升技术水平的。希望能给大家起到一个引导，指路或者解惑的作用。如果大家有什么好的资源，也欢迎分享！\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e有一些资源链接，在后面我会加上括号的注释！比如：\u003ccode\u003e“\u003c/code\u003e \u003ca href=\"http://ued.ctrip.com/blog/5133.html\"\u003ehtml5推广\u003c/a\u003e（介绍html5开发的创意广告） \u003ccode\u003e”\u003c/code\u003e，加上注释的原因可能有以下几点： \u003cbr\u003e1.资源很不错，干货比较多，提醒大家看！\u003cbr\u003e2.资源是一个系列的其中一个资源。比如一个系列有20多篇文章，每一篇都有用，我不可能把20多篇链接都贴上，所以一般我贴这个系列的第一条，提醒大家不要忘记读完所在系列！\u003cbr\u003e3.资源里面的部分内容我个人觉得很有用，有部分我觉得没什么用！提醒大家挑着看，按需求看！\u003cbr\u003e4.资源的标题可能会有些小误导，或者资源的其它注意事项，我加以自己的解释和备注。\u003c/p\u003e\u003c/blockquote\u003e\u003ch2\u003e2.推荐文章（教程）\u003c/h2\u003e\u003ch3\u003ehtml(5)\u003c/h3\u003e\u003cp\u003e\u003ca href=\"http://tgideas.qq.com/webplat/info/news_version3/804/7104/7106/m5723/201506/354489.shtml\"\u003e后HTML5时代I\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://tgideas.qq.com/webplat/info/news_version3/804/7104/7106/m5723/201506/355023.shtml\"\u003e后HTML5时代II\u003c/a\u003e（简单粗暴的介绍html5的api，没什么废话）\u003cbr\u003e\u003ca href=\"http://ued.ctrip.com/blog/5133.html\"\u003ehtml5推广\u003c/a\u003e（介绍html5开发的创意广告）\u003cbr\u003e\u003ca href=\"https://juejin.im/post/595f41766fb9a06bc17c2c8d\"\u003e匠心打造canvas签名组件\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.cnblogs.com/TomXu/category/336175.html\"\u003eHTML5/CSS3\u003c/a\u003e（汤姆大叔总结的html5和css3的新特性）\u003cbr\u003e\u003ca href=\"https://isux.tencent.com/h5-animation-highway.html\"\u003eH5动画开发快车道\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://isux.tencent.com/h5-performance.html\"\u003e移动H5前端性能优化指南\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.tqtan.com/2015/01/31/play-with-h5/\"\u003e玩转HTML5移动页面\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://juejin.im/post/59598ecf5188250d8d141fff\"\u003eHTML5 进阶系列：文件上传下载\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/27052826\"\u003eHTML5 进阶系列：canvas 动态图表\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/26666141\"\u003eHTML5 进阶系列：拖放 API 实现拖放排序\u003c/a\u003e（这个系列的文章都不错，值得大家一看）\u003cbr\u003e\u003ca href=\"https://isux.tencent.com/h5active.html\"\u003eH5动效的常见制作手法\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000010638325\"\u003e超多经典 canvas 实例，动态离子背景、移动炫彩小球、贪吃蛇、坦克大战、是男人就下100层、心形文字等等等\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://isux.tencent.com/canvas-particle-animation.html\"\u003e打造高大上的Canvas粒子动画\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://juejin.im/post/5a31dbc951882510b27563b9\"\u003ecanvas入门实战--邀请卡生成与下载\u003c/a\u003e\u003c/p\u003e\u003ch3\u003ecss(3)\u003c/h3\u003e\u003cp\u003e\u003ca href=\"http://www.w3cplus.com/resources/css3-tutorial-and-case\"\u003eCSS3属性教程与案例分享\u003c/a\u003e（大漠的CSS3干货，进去里面可以逐个看，对css3的学习很有用）\u003cbr\u003e\u003ca href=\"http://www.w3cplus.com/blog/163.html\"\u003eCSS3实现11种经典的CSS技术\u003c/a\u003e（大漠的CSS3经典实例干货，对css3的学习很有用）\u003cbr\u003e\u003ca href=\"http://www.w3cplus.com/w3cplusDemo/index.html\"\u003eW3cplus demo\u003c/a\u003e（w3cplus的案例，非常值得一看）\u003cbr\u003e\u003ca href=\"http://www.cnblogs.com/zhuzhenwei918/p/6120294.html\"\u003e强大的css3\u003c/a\u003e（概括性的说明css3的新特性的一篇文章）\u003cbr\u003e\u003ca href=\"http://www.cnblogs.com/lhb25/archive/2013/01/29/css3-rgba-tutorials.html\"\u003ecss3经典教程系列\u003c/a\u003e（不要忘记看完这个系列，文章都不错）\u003cbr\u003e\u003ca href=\"https://juejin.im/post/5a0c184c51882531926e4294\"\u003e个人总结（css3新特性）\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://juejin.im/post/5a0c175651882531ba107c4f\"\u003eCSS3热身实战--过渡与动画（实现炫酷下拉，手风琴，无缝滚动）\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://juejin.im/post/5a0c18196fb9a045023b2ddf\"\u003e编写自己的代码库(css3常用动画的实现)\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://juejin.im/post/5a121e4b6fb9a045076f41a3\"\u003e也许vue+css3做交互特效更简单\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://juejin.im/post/59c9ca9c6fb9a00a6b6e7e09\"\u003eCSS 写作建议和性能优化小结\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.cnblogs.com/nzbin/archive/2017/08/06/7073601.html\"\u003e如何编写轻量级 CSS 框架\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://caibaojian.com/css-protips.html\"\u003e21条CSS高级技巧\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.cnblogs.com/aaronjs/p/4744014.html\"\u003e原创：CSS3技术-雪碧图自适应缩放与精灵动画方案\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\"\u003eFlex 布局教程：语法篇\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.ruanyifeng.com/blog/2015/07/flex-examples.html\"\u003eFlex 布局教程：实例篇\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://web.jobbole.com/91473/\"\u003e奇妙的 CSS shapes(CSS图形)\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.qdfuns.com/notes/25859/9e01e4cf0dd9b634744ff698af9fc8c1.html\"\u003e使用CSS3制作各种形状的图形（转自others）\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://web.jobbole.com/88197/\"\u003e有趣的CSS题目（1）： 左边竖条的实现方法\u003c/a\u003e（看了第一篇，可以往下面看，总会会帮助的，不过这个网站有时候加载不出图片，如果加载不出图片，放弃还是坚持，大家抓主意）\u003cbr\u003e\u003ca href=\"http://www.cnblogs.com/coco1s/p/7197662.html\"\u003e纯 CSS 实现波浪效果！\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.w3cplus.com/animation/check-css-animation-performance-with-the-browsers-dev-tools.html\"\u003e使用浏览器开发者工具检测CSS动画性能\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://imweb.io/topic/5643850eed18cc424277050e\"\u003e搞定这些疑难杂症，向css3动画说yes\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://yincheng.site/using-html-css-instead-of-js\"\u003eEffective前端1：能使用html/css解决的问题就不要使用JS\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://isux.tencent.com/native-animation.html\"\u003e如何让你的动画更自然\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://css-tricks.com/examples/ShapesOfCSS/\"\u003ecss画图形\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://tympanus.net/Development/CreativeLinkEffects/\"\u003ecss各种鼠标效果\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://www.ibm.com/developerworks/cn/web/1202_zhouxiang_css3/\"\u003e深入了解 CSS3 新特性\u003c/a\u003e（也是概括性的总结，这个系列值得推荐）\u003cbr\u003e\u003ca href=\"http://www.imweb.io/topic/55e32fd5771670e207a16bb9\"\u003e前端如何呼风唤雨\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.qdfuns.com/notes/40906/28abf71f9486e2cd86ae803e305b39fa.html\"\u003e:after和:before炫酷用法总结\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://web.jobbole.com/91586/\"\u003e神奇的 conic-gradient 圆锥渐变\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://web.jobbole.com/90964/?utm_source=blog.jobbole.com\u0026amp;utm_medium=relatedPosts\"\u003e10 个优质的 CSS 与 JS LOGO 动画示例\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://isux.tencent.com/emancipate-gpu.html\"\u003e被解放的GPU-提高CSS3性能\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.cnblogs.com/limingxi/p/3709322.html\"\u003e【项目总结】扯一扯电商网站前端css的整体架构设计（1）\u003c/a\u003e（看了第一篇，别忘了看下面的一个系列）\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000010989110\"\u003e【整理】CSS布局方案\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://juejin.im/post/591873170ce4630069f3013d\"\u003ecss：默认的checkbox、input、radio太丑了？我来教你改变使用纯css3改写的带动画的默认样式\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://www.w3cplus.com/css/20-incredibly-useful-CSS-snippets-for-developers\"\u003e20个实用的CSS技巧代码\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.cnblogs.com/xiaoloulan/p/5801663.html\"\u003eCSS性能分析，如何优化CSS提高性能\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000011354975\"\u003eCSS 黑魔法小技巧，让你少写不必要的JS，代码更优雅\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://www.w3cplus.com/animation/progressive-web-animation.html\"\u003e渐进式动画解决方案\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://www.w3cplus.com/css/css-future.html\"\u003eCSS新特性\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://www.w3cplus.com/animation/animation-performance.html\"\u003eCSS Animation性能优化\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://www.w3cplus.com/animation/high-performance-animation.html\"\u003e【转载】高性能的动画\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.cnblogs.com/coco1s/p/6992177.html\"\u003e奇妙的 CSS shapes(CSS图形)\u003c/a\u003e\u003cbr\u003e\u003c/p\u003e\u003cdiv\u003e\u003ch3\u003esass\u003c/h3\u003e\u003cp\u003e\u003ca href=\"http://www.ruanyifeng.com/blog/2012/06/sass.html\"\u003eSASS用法指南\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://www.w3cplus.com/preprocessor/8-tips-help-get-best-sass.html\"\u003e编写Sass的八个技巧\u003c/a\u003e\u003c/p\u003e\u003cdiv\u003e\u003cp\u003e\u003c/p\u003e\u003ch3\u003ejavascript\u003c/h3\u003e\u003cp\u003e\u003ca href=\"http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html\"\u003e深入理解JavaScript系列\u003c/a\u003e（汤姆大叔写的JavaScript系列，涉及到各个知识点，对学习和深入js很有用）\u003cbr\u003e\u003ca href=\"http://web.jobbole.com/91737/\"\u003eJavaScript核心概念归纳整理\u003c/a\u003e（概括性的说明js的一些核心概念）\u003cbr\u003e\u003ca href=\"http://taobaofed.org/blog/2017/02/16/a-guide-to-api-design/\"\u003e从达标到卓越 —— API 设计之道\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://taobaofed.org/blog/2017/03/16/javascript-functional-programing/\"\u003e我眼中的 JavaScript 函数式编程\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://purplebamboo.github.io/2015/03/16/javascript-component/\"\u003ejavascript组件化\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==\u0026amp;mid=2651552444\u0026amp;idx=1\u0026amp;sn=2b0d4b47dd5f0377385b1d6390fa64b8\u0026amp;chksm=8025ad7db752246b20f2ae2929530966d8d1c53d0210ad190aa5eda38c1302f1f3b734671325\u0026amp;mpshare=1\u0026amp;scene=23\u0026amp;srcid=0809BXLS1CRKAj6CXYTasOJZ#rd\"\u003e如何写出小而清晰的函数？（JS 版）\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000009704212\"\u003ejavascript对象详解：__proto__和prototype的区别和联系\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000004282206\"\u003e理清javascript中的面向对象（一）——原型继承\u003c/a\u003e（这个专栏（实用至上）文章质量不错，值得留意）\u003cbr\u003e\u003ca href=\"http://www.w3cvip.com/425.html\"\u003e微前端-Javascript常用的设计模式详解\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000000320102\"\u003e10 个你需要了解的最佳 javascript 开发实践\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.cnblogs.com/wangfupeng1988/p/4001284.html\"\u003e深入理解javascript原型和闭包系列\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000000652749\"\u003eJavaScript学习总结（一）基础部分\u003c/a\u003e（这个系列的文章不错，不要忘记看完这个系列不过大家得在发文章的专栏找下这个系列的文章，因为作者在这个专栏发文不是连着发一个系列，中间也夹杂着其它文章，不过也很好找。在这专栏（\u003ca href=\"https://segmentfault.com/blog/trigkit4\"\u003etrigkit4\u003c/a\u003e）里面，即使不是这个系列的文章，我看过其中几篇，感觉也很好，大家可以留意下）\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000003932488\"\u003eJavaScript设计模式与开发实践 | 01 - 面向对象的JavaScript\u003c/a\u003e（这个系列的教程不错，《JavaScript设计模式与开发实践》的笔记，这本书我也看过，这本书不错，作者整理总结得也不错，大家看完，收获不少）\u003cbr\u003e\u003ca href=\"https://www.zhihu.com/question/54637225/answer/140362071?utm_source=qq\u0026amp;utm_medium=social\"\u003eJavaScript 函数式编程存在性能问题么？\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://mp.weixin.qq.com/s/5dAjzaTgbhZUpZ6w-juU8Q\"\u003e如何让 JS 写得更漂亮\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://juejin.im/post/5976b1ef5188250c980304c9\"\u003eJS的平凡之路--学习人气眼中的效果（上）\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://shimo.im/doc/VXqv2bxTlOUiJJqO/\"\u003e你还在用for循环大法麽？\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000006990480\"\u003e前端模板的原理与实现\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://blog.jobbole.com/56689/\"\u003e只有20行Javascript代码！手把手教你写一个页面模板引擎\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000010744960\"\u003e【教学向】150行代码教你实现一个低配版的MVVM库（1）- 原理篇\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000010752076\"\u003e【教学向】150行代码教你实现一个低配版的MVVM库（2）- 代码篇\u003c/a\u003e（可以关注这篇文章对应的专栏，写得不错，不知道作者还会不会写下一篇）\u003cbr\u003e\u003ca href=\"https://www.zhihu.com/question/19713563\"\u003e如何循序渐进、有效地学习JavaScript？\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.cnblogs.com/moqing/p/5665126.html\"\u003e过目不忘JS正则表达式\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000010456158\"\u003eJavaScript 进阶之深入理解数据双向绑定\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000004847657\"\u003e利用 JavaScript 数据绑定实现一个简单的 MVVM 库\u003c/a\u003e（这篇文章除了自己简单造轮子，更重要的是用一个实例了解MVVM的原理）\u003cbr\u003e\u003ca href=\"https://deerchao.net/tutorials/regex/regex.htm\"\u003e正则表达式30分钟入门教程\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://hijiangtao.github.io/2017/08/03/How-to-Manipulate-DOM-Effectively/\"\u003e如何监听页面 DOM 变动并高效响应\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.ruanyifeng.com/blog/2016/11/intersectionobserver_api.html\"\u003eIntersectionObserver API 使用教程\u003c/a\u003e（利用这个API可以更简单的实现图片懒加载和其它事情，性能也更高）\u003cbr\u003e（下面三个连接，是知乎上的几个话题，里面的回答质量参差不齐，大家可以挑些高质量的回答看，绝对有帮助）\u003cbr\u003e\u003ca href=\"https://www.zhihu.com/question/27471576/answer/211014066\"\u003e作为一名前端开发人员，有哪些值得一读的js代码？\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://www.zhihu.com/question/27428135\"\u003eJavaScript 有什么奇技淫巧？\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://www.zhihu.com/question/38269966\"\u003e用 JavaScript 可以做哪些有趣的事情？\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://litten.me/2017/07/09/prevent-spiders/\"\u003e反击爬虫，前端工程师的脑洞可以有多大？\u003c/a\u003e（前端反爬虫的文章，只有想不到，没有做不到）\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/28937831?group_id=886555115845218304\"\u003e这些的JavaScript编程黑科技，装逼指南，高逼格代码，让你惊叹不已\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://www.h5jun.com/post/how-to-write-better-js-code.html\"\u003e如何写出好的 JavaScript —— 浅谈 API 设计\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://juejin.im/post/58ff6374570c350058f489b5\"\u003eJavaScript 设计模式 ① 正确使用面向对象编程的姿势\u003c/a\u003e（看了第一篇，不要忘记下面的）\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/28910636\"\u003e如何优雅的编写 JavaScript 代码\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000011031658\"\u003e个人小结--javascript实用技巧和写法建议\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://www.h5jun.com/post/sixty-lines-of-code-animation.html#toc-ea4\"\u003e用65行代码实现JavaScript动画序列播放\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://www.h5jun.com/post/handlock-comp.html#toc-471\"\u003e如何用原生 JS 实现手势解锁组件\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000011151972\"\u003eJavascript思维导图\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://refined-x.com/2017/09/06/%E7%BA%AF%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB-%E6%8F%90%E5%8F%96-%E5%90%88%E6%88%90/\"\u003e纯前端实现人脸识别-提取-合成\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.lovebxm.com/2017/05/31/RegExp/\"\u003e最全正则表达式总结：验证QQ号、手机号、Email、中文、邮编、身份证、IP地址等\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://mp.weixin.qq.com/s?__biz=MzI3NzIzMzg3Mw==\u0026amp;mid=100000054\u0026amp;idx=1\u0026amp;sn=71f6c214f3833d9ca20b9f7dcd9d33e4\"\u003e99%的人都理解错了HTTP中GET与POST的区别\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.lixuejiang.me/2016/11/01/JavaScript%E7%9A%84%E7%BB%83%E4%B9%A0%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/\"\u003eJavaScript练习网站收集\u003c/a\u003e（收录一些js练习的网站，有空可以去练习一下）\u003cbr\u003e\u003ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript\"\u003e重新介绍 JavaScript（JS 教程）\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://juejin.im/post/5a2a7a5051882535cd4abfce\"\u003e编写自己的代码库（javascript常用实例的实现与封装）\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://juejin.im/post/5a0c170c6fb9a0451c39eff2\"\u003e让我印象深刻的javascript面试题\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://juejin.im/post/5a39b2dcf265da431d3cd036\"\u003eJavaScript 打怪升级 —— 把业务逻辑当练习题做\u003c/a\u003e\u003c/p\u003e\u003ch3\u003ejavascript(es6，es7，es8)\u003c/h3\u003e\u003cp\u003e\u003ca href=\"http://es6.ruanyifeng.com/\"\u003e阮一峰 es6\u003c/a\u003e（可以当作es6文档用的在线书籍）\u003cbr\u003e\u003ca href=\"http://taobaofed.org/blog/2016/07/22/es6-basics/\"\u003eES6 你可能不知道的事 - 基础篇\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://taobaofed.org/blog/2016/11/03/es6-advanced/\"\u003eES6 你可能不知道的事 - 进阶篇\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.jianshu.com/p/ebfeb687eb70\"\u003e30分钟掌握ES6/ES2015核心内容\u003c/a\u003e（简单粗暴介绍es6核心）\u003cbr\u003e\u003ca href=\"https://juejin.im/post/597724c26fb9a06bb75260e8\"\u003e八段代码彻底掌握 Promise\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==\u0026amp;mid=2651226733\u0026amp;idx=1\u0026amp;sn=3723daf1d45a67be76be4358eca92c40\u0026amp;chksm=bd495be98a3ed2ff8b7d630a646fab13cca6f6bafacd650f2188b41432d35ab430efa1e19d3e\u0026amp;mpshare=1\u0026amp;scene=23\u0026amp;srcid=07266sd1A9P62rw0hBVxOcer#rd\"\u003eECMAScript 6 新特性\u003c/a\u003e（总结性描写常用的es6新特性）\u003cbr\u003e\u003ca href=\"https://juejin.im/post/5a08e5c55188252abc5dd96f\"\u003e实例感受-es6的常用语法和优越性\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000010907053\"\u003e10个最佳ES6特性\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000011017894#articleHeader8\"\u003e聊聊ES7与ES8特性\u003c/a\u003e\u003ca href=\"https://blog.fundebug.com/2017/04/04/nodejs-async-await/\"\u003eAsync/Await替代Promise的6个理由\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.cnblogs.com/zhuanzhuanfe/p/7493433.html\"\u003e10分钟学会ES7+ES8\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://juejin.im/post/5a2e5f0851882575d42f5609\"\u003eimport、require、export、module.exports 混合使用详解\u003c/a\u003e\u003c/p\u003e\u003ch3\u003etypeScript\u003c/h3\u003e\u003cp\u003e\u003ca href=\"https://www.tslang.cn/docs/home.html\"\u003e官网文档\u003c/a\u003e（ts的一个官方文档，写得较好）\u003c/p\u003e\u003ch3\u003ejquery\u003c/h3\u003e\u003cp\u003e\u003ca href=\"http://www.cnblogs.com/aaronjs/p/3279314.html\"\u003ejquery源码分析\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.cnblogs.com/zhuzhenwei918/p/6181760.html\"\u003ejQuery中的100个技巧（译）\u003c/a\u003e（看了这篇文章，感觉自己学的是假jquery，不过很多技巧我没有亲身试过，保留意见）\u003cbr\u003e\u003ca href=\"http://www.42du.cn/p/16\"\u003e这几条JQuery提升性能的规则你需要牢记\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000009679758\"\u003eJQuery坑，说说哪些大家都踩过的坑\u003c/a\u003e（对于刚接触的新人而言，这篇文章还有帮助）\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000010063989\"\u003ejQuery学习笔记\u003c/a\u003e（总结性说明jquery常用的api，也不错）\u003cbr\u003e\u003ca href=\"http://www.cnblogs.com/jesse131/p/5494590.html\"\u003ejQuery插件开发总结\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/29020657\"\u003ejQuery === 面条式代码？\u003c/a\u003e\u003c/p\u003e\u003ch3\u003evue\u003c/h3\u003e\u003cp\u003e\u003ca href=\"https://cn.vuejs.org/v2/guide/\"\u003evue官网\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000008279436\"\u003eVue2.x踩坑与总结\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://www.v2ex.com/t/325312#reply1\"\u003eVue 中你不知道但却很实用的黑科技\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://aotu.io/notes/2016/12/28/vue-clock/\"\u003e一个栗子实践vue2.0与1.0的区别\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.jianshu.com/p/b544091c3d67\"\u003e我从未见过如此简洁易懂的Vue教程\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://vuejs-tips.github.io/cheatsheet/\"\u003evue-API\u003c/a\u003e（2.3版本的API大全）\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/26057542?utm_medium=social\u0026amp;utm_source=qq?utm_medium=social\u0026amp;utm_source=qq\"\u003eVue.js 插件开发详解\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000010813937\"\u003evue插件编写与实战\u003c/a\u003e（从开发到发布的一个流程，实例简单易懂）\u003cbr\u003e\u003ca href=\"http://www.tuicool.com/articles/vmaiei2\"\u003e使用 Vue.js 创建的 Calendar\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/26535530?utm_medium=social\u0026amp;utm_source=qq?utm_medium=social\u0026amp;utm_source=qq\"\u003e加薪DAY10」Vue开源项目库汇总\u003c/a\u003e（杂七杂八的库都有，质量当然也是有高有低，大家挑着看。）\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/25589193\"\u003eVue.js 的实用技巧（一）(看了第一篇，别忘记剩下的)\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/zoro-web/blog/issues/2\"\u003e深入vue2.0底层思想--模板渲染\u003c/a\u003e \u003cbr\u003e\u003ca href=\"http://www.cnblogs.com/keepfool/p/5690366.html\"\u003eVue.js——vue-router 60分钟快速入门\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/\"\u003eVue2.1.7源码学习\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/DMQ/mvvm\"\u003e剖析Vue实现原理 - 如何实现双向绑定mvvm\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000009397476\"\u003eVue.js入门（一）--MVVM框架理解\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==\u0026amp;mid=2651552436\u0026amp;idx=2\u0026amp;sn=837a93a7d364da7623de005d55b44c16\u0026amp;chksm=8025ad75b7522463f5cd3b03856602b999cdf9dbb19afd501dd0e93acdd526da7f67b085d5a7\u0026amp;mpshare=1\u0026amp;scene=23\u0026amp;srcid=0807Itvw3TvEVYwhGzIpxd34#rd\"\u003eVue2 源码分析——逻辑梳理\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000010559711\"\u003e手把手教你撸个vue2.0弹窗组件\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000011153487\"\u003e深入浅出基于“依赖收集”的响应式原理\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://refined-x.com/2017/06/13/Vue%E5%85%A8%E5%AE%B6%E6%A1%B6%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/\"\u003eVue全家桶实践项目总结\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000005018970\"\u003evuex入门实例(1/3)\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://mp.weixin.qq.com/s/sLAUSzP8GrQHELVULLpD_g\"\u003e原创《vue2.0进阶系列》教程目录大全\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000012083511\"\u003e另辟蹊径：vue单页面，多路由，前进刷新，后退不刷新\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://vuejsexamples.com/\"\u003evuejsexamples\u003c/a\u003e（vue的各种demo，可能会有需要的需求）\u003cbr\u003e\u003ca href=\"https://juejin.im/post/5a0c191f6fb9a04514639419\"\u003evue快速入门的三个小实例\u003c/a\u003e（我自己的文章，比较基础的用法，用三个小实例讲解vue的入门，）\u003cbr\u003e\u003ca href=\"https://juejin.im/post/5a3b02026fb9a0451a7689fd\"\u003e用vue开发一个所谓的数独\u003c/a\u003e\u003c/p\u003e\u003ch3\u003ewebpack\u003c/h3\u003e\u003cp\u003e（下面的文章，有些是webpack1.x和2.x的，考虑到现在已经更新到3.x了，大家看时候要注意区别）\u003cbr\u003e\u003ca href=\"https://doc.webpack-china.org/\"\u003ewebpack中文网\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://webpackdoc.com/\"\u003ewebpack官方文档\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/lcxfs1991/blog/issues/2\"\u003ewebpack使用优化（基本篇）\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.tuicool.com/articles/vAbYruq\"\u003ewebpack常用功能介绍\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://juejin.im/post/5a1fb39451882510b275294d\"\u003ewebpack 3 零基础入门教程 #1 - 介绍\u003c/a\u003e（看了第一篇，不要忘记下面的，这个系列值得一看）\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000005770042\"\u003e开发工具心得：如何 10 倍提高你的 Webpack 构建效率\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/26710831\"\u003eWebpack 大法之 Code Splitting\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000006843916\"\u003ewebpack多页应用架构系列（一）：一步一步解决架构痛点\u003c/a\u003e（看了第一篇不要忘记剩下的，这个系列的文章不错）\u003cbr\u003e\u003c/p\u003e\u003ch3\u003eparcel\u003c/h3\u003e\u003cp\u003e\u003ca href=\"https://segmentfault.com/a/1190000012332187\"\u003e宣布 Parcel：一个快速，零配置的 Web 应用打包工具\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Mcbai/Blog/issues/2\"\u003e前端构建工具吐槽与parcel极简入门\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://juejin.im/entry/5a391fdf6fb9a04515440339?utm_medium=fe\u0026amp;utm_source=weixinqun\"\u003e折腾记：Hello Parcel\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://juejin.im/post/5a38e100f265da4324809297\"\u003e从 webpack 到全面拥抱 Parcel #1 探索 Parcel\u003c/a\u003e（这篇应该会用后续内容，大家可以跟着学）\u003c/p\u003e\u003ch3\u003egulp\u003c/h3\u003e\u003cp\u003e\u003ca href=\"http://www.ydcss.com/archives/18\"\u003egulp详细入门教程\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.cnblogs.com/2050/p/4198792.html\"\u003e前端构建工具gulp的使用介绍及技巧\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.gulpjs.com.cn/docs/getting-started/\"\u003egulp入门指南\u003c/a\u003e\u003c/p\u003e\u003ch3\u003ereact\u003c/h3\u003e\u003cp\u003e（react我刚接触不久，暂时看过的网站就这两个）\u003cbr\u003e\u003ca href=\"http://www.react-cn.com/\"\u003eReact中国\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html\"\u003eReact 技术栈系列教程\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000010832044\"\u003eReact组件规范\u003c/a\u003e\u003ca href=\"https://github.com/iuap-design/blog/issues/178\"\u003e在\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/iuap-design/blog/issues/179\"\u003e在 2017 年学习 React + Redux 的一些建议（中篇）\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/iuap-design/blog/issues/180\"\u003e在 2017 年学习 React + Redux 的一些建议（下篇）\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://juejin.im/post/599156cc6fb9a03c3a25db08\"\u003e学习 React.js 比你想象的要简单\u003c/a\u003e\u003cbr\u003e\u003c/p\u003e\u003ch3\u003egit\u003c/h3\u003e\u003cp\u003e\u003ca href=\"http://backlogtool.com/git-guide/cn/\"\u003e猴子都能懂的GIT入门\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\"\u003eGit教程 - 廖雪峰的官方网站\u003c/a\u003e\u003c/p\u003e\u003ch3\u003ebrowsersync\u003c/h3\u003e\u003cp\u003e\u003ca href=\"http://www.browsersync.cn/#install\"\u003e(Browsersync中文网 - 省时的浏览器同步测试工具)\u003c/a\u003e\u003c/p\u003e\u003ch3\u003enode.js\u003c/h3\u003e\u003cp\u003e\u003ca href=\"https://nodesource.com/blog/an-absolute-beginners-guide-to-using-npm\"\u003e使用npm - NodeSource的绝对入门指南\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://nodesource.com/blog/the-basics-of-package-json-in-node-js-and-npm?utm_source=nodeweekly\u0026amp;utm_medium=email\"\u003eNode.js和npm - NodeSource中的Package.json的基础知识\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://nodesource.com/blog/configuring-your-npmrc-for-an-optimal-node-js-environment\"\u003e配置.npmrc以获取最佳Node.js环境\u003c/a\u003e\u003c/p\u003e\u003ch3\u003eMarkdown\u003c/h3\u003e\u003cp\u003e\u003ca href=\"https://sspai.com/post/25137\"\u003e认识与入门 Markdown\u003c/a\u003e\u003c/p\u003e\u003ch3\u003eyoeman\u003c/h3\u003e\u003cp\u003e\u003ca href=\"http://www.tuicool.com/articles/FBRvIbQ\"\u003e教你从零开始搭建一款前端脚手架工具\u003c/a\u003e\u003c/p\u003e\u003ch3\u003elodash\u003c/h3\u003e\u003cp\u003e\u003ca href=\"http://lodashjs.com/\"\u003e这是一个具有一致接口、模块化、高性能等特性的 JavaScript 工具库。\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://lodash.com/docs/4.17.4#chunk\"\u003e4.17.4版本\u003c/a\u003e\u003c/p\u003e\u003ch3\u003eFiddler\u003c/h3\u003e\u003cp\u003e\u003ca href=\"http://www.telerik.com/fiddler\"\u003e官网\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://kb.cnblogs.com/page/130367/\"\u003eFiddler教程\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e调试\u003c/h3\u003e\u003cp\u003e\u003ca href=\"https://juejin.im/post/59ffad656fb9a0450b65c4c0\"\u003eweb调试优化-chrome开发者工具不完全指南\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/23162358\"\u003e分享几个日常调试方法让js调试更简单\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/24770877\"\u003e用 Chrome 调试你的 JavaScript\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/23080626\"\u003eJavaScript 中 console 的用法\u003c/a\u003e（看了这篇和上面一篇文章，你可能会感觉以前根本不会使用console）\u003cbr\u003e\u003ca href=\"http://www.cnblogs.com/constantince/category/712675.html\"\u003eChrome开发者工具系列\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000011213814\"\u003eWeb 的现状：网页性能提升指南\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://juejin.im/post/59c4c9d85188254f58412d17\"\u003e移动 Web 开发问题和优化小结\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://juejin.im/entry/58947598128fe1006ca2b85d\"\u003e前端优化不完全指南\u003c/a\u003e\u003cbr\u003e\u003c/p\u003e\u003ch3\u003e细节，优化\u003c/h3\u003e\u003cp\u003e\u003ca href=\"http://www.cnblogs.com/yexiaochai/p/4219523.html\"\u003e浅谈移动前端的最佳实践\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.cnblogs.com/yexiaochai/p/4901341.html\"\u003e前端优化带来的思考，浅谈前端工程化\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://aotu.io/notes/2016/04/12/jcloud-opt/\"\u003e前端优化实践总结\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/24495650\"\u003e减少前端代码耦合\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.daqianduan.com/6419.html\"\u003e判断单、多张图片加载完成\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/28091618\"\u003e终端代码重复率检测\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.cnblogs.com/yexiaochai/p/4876099.html\"\u003e【组件化开发】前端进阶篇之如何编写可维护可升级的代码\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.cnblogs.com/virtual/p/3735249.html\"\u003e作为一个web开发人员，哪些技术细节是在发布站点前你需要考虑到的\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.cnblogs.com/yexiaochai/p/3589837.html\"\u003e【单页应用】我们该如何处理框架弹出层层级关系？\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.alloyteam.com/2012/05/pick-up-templates-speed-up/\"\u003e剥离模板代码加速Web页面加载\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://tgideas.qq.com/webplat/info/news_version3/804/808/811/m579/201412/293834.shtml\"\u003e移动前端系列——移动页面性能优化\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000005882953\"\u003e[聊一聊系列]聊一聊百度移动端首页前端速度那些事儿\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e其它\u003c/h3\u003e\u003cp\u003e\u003ca href=\"http://www.cnblogs.com/lxxhome/p/5980615.html\"\u003esocket.io 中文手册 socket.io 中文文档\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/23467317\"\u003eWebSocket 与 Socket.IO\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/26907805\"\u003eVR进化论|教你搭建通用的WebVR工程\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/mtdpdiancan\"\u003eRxJS 入门\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/write?draftId=1220000010354318\"\u003edeeplearn.js：浏览器端机器智能框架\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e分享和技能清单\u003c/h3\u003e\u003cp\u003e\u003ca href=\"http://www.jianshu.com/p/b7f8c5564e78\"\u003e鸡年大吉！继续前行的前端周刊（第十五期）\u003c/a\u003e（虽然差不多狗年了，但是里面的内容并没有过时）\u003cbr\u003e\u003ca href=\"http://collect.w3ctrain.com/\"\u003e前端收藏夹\u003c/a\u003e（和上面那篇一样，都是别人的总结的，干货不少，但是‘前端收藏夹’，可能是资源太多了，给我的感觉也有点一股脑放资源的感觉，只要是资源，都放进去，少部分资源质量有点低，建议大家带参考思想看）\u003cbr\u003e\u003ca href=\"https://github.com/hoosin/mobile-web-favorites\"\u003e移动web干货收藏夹\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://www.awesomes.cn/\"\u003eawesomes\u003c/a\u003e（前端一个巨大的资源库，里面的资源应有尽有）\u003cbr\u003e\u003ca href=\"http://lib.csdn.net/\"\u003e知识库\u003c/a\u003e（拥有很多语言，框架，库的知识图谱，值得一看！能让你了解哪个语言，框架，库所包含的知识点，每一个知识点的详情讲解，也有栗子和文章，如：\u003ca href=\"http://lib.csdn.net/base/javascript/structure\"\u003ejavascript知识图谱\u003c/a\u003e，\u003ca href=\"http://lib.csdn.net/base/html5/structure\"\u003ehtml5知识图谱\u003c/a\u003e，\u003ca href=\"http://lib.csdn.net/base/react/structure\"\u003ereact知识图谱\u003c/a\u003e）\u003cbr\u003e\u003ca href=\"https://github.com/hacke2/hacke2.github.io/issues\"\u003e前端资源分享\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/22229868\"\u003e送给前端的你，推荐几篇前端汇总文章。 - 知乎专栏\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/darcyclarke/Front-end-Developer-Interview-Questions\"\u003e前端面试问题合集（Front-end-Developer-Interview-Questions）\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000002804472\"\u003egithub上值得关注的前端项目\u003c/a\u003e（trigkit4大神审理的一份清单，里面推荐的项目很多，大家可以按需所需）\u003cbr\u003e\u003ca href=\"http://book.douban.com/doulist/13701898/\"\u003e前端那点事儿（书列）\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000010791103\"\u003eFPB 2.0：免费的计算机编程类中文书籍 2.0\u003c/a\u003e（迷渡大神分享的书籍，各类图书都有，也有前端的，大家可以挑着看）\u003cbr\u003e\u003ca href=\"https://www.qcloud.com/community/article/690930001489391663?fromSource=gwzcw.58366.58366.58366\"\u003e腾讯 Web 工程师的前端书单\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://dwqs.gitbooks.io/frontenddevhandbook/content/\"\u003e前端开发者手册\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://www.docschina.org/\"\u003e印记中文-手册\u003c/a\u003e（各种开发文档，webpack,vue,sass等）\u003cbr\u003e（以下几个链接，不是文章，也不算问题吧，都是segmentfault官方举行的比赛，分享或者讨论的内容，在上面看大神的分享，代码，绝对有收获）\u003cbr\u003e\u003ca href=\"https://segmentfault.com/q/1010000000750825\"\u003e1024 HackGame 第四关面壁人这些题目是怎么想出来的？\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/q/1010000000689388\"\u003e把 SegmentFault 全部带回家 —— 码文章，送周边\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/q/1010000000485947\"\u003e官方送书活动第二弹 —— 增长姿势之SF喊你来谈开发\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/q/1010000000351723\"\u003e官方活动，深入浅出之SF喊你来谈开发！一起来分享一下你的开发知识？\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/q/1010000000340372/a-1020000000341378\"\u003e官方30行js比赛：30行js你能做出什么？\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/q/1010000000767310/a-1020000000767695\"\u003e【官方比赛】社区 1111 秀代码，让你来秀让你飞！\u003c/a\u003e\u003cbr\u003e\u003c/p\u003e\u003ch2\u003e3.推荐博客\u003c/h2\u003e\u003ch3\u003e团队博客\u003c/h3\u003e\u003cp\u003e\u003ca href=\"http://taobaofed.org/\"\u003e淘宝前端团队fed\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.aliued.cn/\"\u003e阿里巴巴\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://fex.baidu.com/\"\u003e百度前端团队\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://75team.com/\"\u003e360奇舞团\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://t.75team.com/video\"\u003e奇舞团视频教程\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://aotu.io/\"\u003e京东设计体验部-凹凸实验室\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://qqfe.org/\"\u003e腾讯网前端研发中心\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.alloyteam.com/\"\u003e腾讯alloyteam\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://imweb.io/\"\u003e腾讯前端IMWEB团队\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://imweb.github.io/\"\u003e腾讯前端IMWEB团队-github\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://tgideas.qq.com/\"\u003e腾讯游戏\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://ued.sina.com.cn/?cat=4\"\u003e新浪UED\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://blog.ymfe.org/\"\u003e去哪儿网移动架构组\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.daqianduan.com/\"\u003e大前端（饿了么）\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://f2e.souche.com/blog/\"\u003e搜车大无线团队博客\u003c/a\u003e\u003cbr\u003e（上面的团队博客，值得关注，博文内容质量很高，但是就是更新不频繁，下面的更新会比较多，质量也不错）\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/dreawer\"\u003e极乐科技\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/imweb\"\u003eIMWeb前端社区\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/linshuai\"\u003e爱前端-知乎专栏\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/jscss\"\u003e前端杂货铺\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/FrontendMagazine\"\u003e前端外刊评论\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/thinkingInFE\"\u003e前端解忧杂货铺\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/ddfe-weekly\"\u003eDDFE 技术周刊\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/qianduanzhidian\"\u003e前端之巅\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://frontenddev.org/discover/\"\u003eFed汇总\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e大牛博客\u003c/h3\u003e\u003cp\u003e\u003ca href=\"https://www.h5jun.com/archives/\"\u003e十年踪迹\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.zhangxinxu.com/\"\u003e张鑫旭\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.ruanyifeng.com/home.html\"\u003e阮一峰\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.cnblogs.com/yexiaochai/\"\u003e叶小钗\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.cnblogs.com/rubylouvre/\"\u003e司徒正美博客\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.cnblogs.com/TomXu/\"\u003e汤姆大叔\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://www.liaoxuefeng.com/\"\u003e廖雪峰\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://jiongks.name/\"\u003e勾三股四\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.cnblogs.com/coco1s/\"\u003echokCoCo\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/chokcoco\"\u003echokCoCo-github\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://cherryblog.site/\"\u003eCherry's Blog\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://refined-x.com/\"\u003e雅X共赏的前端技术博客-前端路上\u003c/a\u003e\u003cbr\u003e\u003c/p\u003e\u003ch2\u003e4.推荐书籍\u003c/h2\u003e\u003cp\u003e我看过的书比较杂七杂八，与前端有关的，推荐的就是下面这些了！下面的书，我都看过，区别就在于有些我是整本都看完了(有些也来回看过几次)，有些粗略的看了其中一部分（有些就看了几页）！\u003c/p\u003e\u003cp\u003e关于看书的建议，下面的书，大家可以根据自己的需求兴趣去挑着看。一本书，不要看完就可以了，要弄懂书中的内容。有些书值得大家来回看几遍的！\u003c/p\u003e\u003cp\u003e关于书的资源，下面的推荐的书（我看的是电子书）我都是从网上下载的。为避免侵权，我在这里就不放资源的链接了！大家自行购买纸质书或者电子书，或者到网上找资源！\u003c/p\u003e\u003cp\u003e《JavaScript高级程序设计》：（红皮书或者红宝石书）可以作为入门书籍，但同时也是高级书籍，可以快速吸收基础，等到提升再回来重新看\u003cbr\u003e《JavaScript权威指南》：（犀牛书）可以说是js最经典的一本书了，新手看着可能会有点吃力，但是对于学js的人来说，必备的，不理解的地方就去查阅一下，很有帮助。\u003cbr\u003e《数据结构与算法JavaScript描述》（刺猬书）\u003cbr\u003e《编写可维护的JavaScript》（乌龟书）\u003cbr\u003e《JavaScript DOM编程艺术 第2版》\u003cbr\u003e《JavaScript语言精粹》（蝴蝶书）：经典的书，也是普及JavaScript的开发思维的一本书。\u003cbr\u003e《javascript框架设计》（第二版）-司徒正美\u003cbr\u003e《JavaScript设计模式 》-张榕铭（百度员工写的一本书，案例生动易懂，涉及的设计模式比较全）\u003cbr\u003e《JavaScript设计模式与开发实践》-曾琛（腾讯员工写的一本书，讲了js里面更加常用的14个设计模式）\u003cbr\u003e《单页Web应用 JavaScript从前端到后端》\u003cbr\u003e《\u003ca href=\"http://es6.ruanyifeng.com/\"\u003eECMAScript 6 入门\u003c/a\u003e》可以作为es6新特性文档的一本书，而且这本书开源了（\u003ccode\u003e\u003ca href=\"http://es6.ruanyifeng.com/\"\u003eECMAScript 6 入门\u003c/a\u003e\u003c/code\u003e），直接看就好！需要的也可以购买！\u003c/p\u003e\u003cp\u003e《HTML5移动Web开发实战》\u003cbr\u003e《HTML5移动Web开发指南》\u003cbr\u003e《HTML5 Canvas核心技术》：对于感受canvas的魅力，使用，动画的实现，都非常有帮助。\u003cbr\u003e《html5与css3权威指南 第三版》-陆凌牛，这本书貌似有同名的，注意作者，另外该书分上册和下册的。我当时看的是第二版，现在已经出了第三版就推荐第三版了。\u003cbr\u003e《锋利的jquery》：我学jquery就是看这本书，这本书给我身边的同行印象不是很好，但是我感觉不错，而且我学jquery就看了这一本书，就推荐这本了！\u003cbr\u003e《了不起的Node js 将JavaScript进行到底》\u003cbr\u003e《css揭秘》：看了这本书，我再也不敢说自己会css了！里面很多都是你想不到的！\u003c/p\u003e\u003ch2\u003e5.推荐社区\u003c/h2\u003e\u003cp\u003e我推荐社区虽然有这么多个，但是我注册账号并且活跃的只有两三个，其它的社区基本都是我在学习的时候偶然接触到的，并且觉得不错的，所以也推荐下。至于大家想活跃哪几个社区，就看大家的选择了。如果大家有什么好的社区资源，也不妨推荐下！\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://github.com/\"\u003egithub\u003c/a\u003e：这个起初我经常在上面找资源。但是没注册账号，但是后来被老大催着注册，就去了。在里面可以阅读别人的代码，向大家学习！\u003cbr\u003e\u003ca href=\"https://juejin.im/\"\u003e稀土掘金\u003c/a\u003e：我现在活跃的一个社区，是写文章的一个很好的地方！\u003cbr\u003e\u003ca href=\"https://segmentfault.com/\"\u003esegmentfault\u003c/a\u003e：我现在活跃的一个社区，主打问答，也有文章和讲堂，质量也很不错！\u003cbr\u003e\u003ca href=\"https://www.zhihu.com/\"\u003e知乎\u003c/a\u003e：虽然不是单纯的IT社区，但是里面有很多大牛和高质量的专栏！\u003cbr\u003e\u003ca href=\"https://stackoverflow.com/\"\u003estackoverflow\u003c/a\u003e：一个问答社区，基本上各种问题都能在上面获得解答\u003cbr\u003e\u003ca href=\"http://www.w3cplus.com/\"\u003ew3cplus\u003c/a\u003e：一个前端学习的网站，里面的文章质量都挺不错的，特别是关于CSS(3)的\u003cbr\u003e\u003ca href=\"http://www.qdfuns.com/\"\u003e前端网\u003c/a\u003e\u003ca href=\"http://www.html-js.com/\"\u003e前端乱炖\u003c/a\u003e：一个前端文章分享的社区，有很多优秀文章\u003cbr\u003e\u003ca href=\"https://toutiao.io/\"\u003e开发者头条\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.feweekly.com/issues\"\u003e前端周刊\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.html5dw.com/\"\u003eHTML5梦工场\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.biyeseng.cn/\"\u003e毕业僧\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.imooc.com/\"\u003e慕课网\u003c/a\u003e（貌似现在很多视频收费了，以前我看的时候，基本都是免费的）\u003cbr\u003e\u003ca href=\"http://www.hubwiz.com/\"\u003e汇智网\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e6.公众号\u003c/h2\u003e\u003ch3\u003e前端大全\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf43692119500?w=110\u0026amp;h=112\u0026amp;f=png\u0026amp;s=14340\"\u003e\u003c/p\u003e\u003ch3\u003esegmentfault\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf43677205fcd?w=111\u0026amp;h=111\u0026amp;f=png\u0026amp;s=21413\"\u003e\u003c/p\u003e\u003ch3\u003e前端之巅\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf436b488e241?w=109\u0026amp;h=109\u0026amp;f=png\u0026amp;s=11196\"\u003e\u003c/p\u003e\u003ch3\u003e前端早读课\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf43675e9f24e?w=111\u0026amp;h=110\u0026amp;f=png\u0026amp;s=13657\"\u003e\u003c/p\u003e\u003ch3\u003eW3cplus\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf4368566b3e8?w=110\u0026amp;h=112\u0026amp;f=png\u0026amp;s=15201\"\u003e\u003c/p\u003e\u003ch3\u003e稀土圈\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf4368734b834?w=107\u0026amp;h=108\u0026amp;f=png\u0026amp;s=7119\"\u003e\u003c/p\u003e\u003cp\u003e（以上图片来源网络）\u003c/p\u003e\u003ch2\u003e7.推荐关注项目\u003c/h2\u003e\u003ch3\u003egithub上的项目\u003c/h3\u003e\u003cp\u003e\u003ca href=\"https://github.com/vuejs/vue\"\u003evue\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/facebook/react\"\u003ereact\u003c/a\u003e（我只接触过几次react，使用起来还不错，现在也正在学习）\u003cbr\u003e\u003ca href=\"https://github.com/gulpjs/gulp\"\u003egulp\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/parcel-bundler/parcel\"\u003eparcel\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/webpack/webpack\"\u003ewebpack\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/d3/d3\"\u003ed3\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/chartjs/Chart.js\"\u003echart\u003c/a\u003e（和d3一样，属于数据可视化方面，体验过。但是在项目上没用过，感觉功能强大，就推荐下）\u003cbr\u003e\u003ca href=\"http://element.eleme.io/#/zh-CN\"\u003eelement-ui\u003c/a\u003e（基于vue2.x开发的一个组件库，一般用于后台管理系统开发，现在我们公司开发的后台管理就是用这个）\u003cbr\u003e\u003ca href=\"http://www.muse-ui.org/#/chip\"\u003emuse-ui\u003c/a\u003e（同样是基于vue的组件库，ui非常的漂亮）\u003cbr\u003e\u003ca href=\"https://github.com/nswbmw/N-blog\"\u003e一起学 Node.js\u003c/a\u003e（这个其实应该是node.js教程）\u003cbr\u003e\u003ca href=\"https://github.com/AlloyTeam/AlloyFinger\"\u003eAlloyTeam移动端手势解决方案\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/dypsilon/frontend-dev-bookmarks\"\u003efrontend-dev-bookmarks\u003c/a\u003e（前端各方面的学习清单）\u003cbr\u003e\u003ca href=\"https://github.com/justjavac/free-programming-books-zh_CN\"\u003e免费的编程中文书籍\u003c/a\u003e（中文分享书籍，不止前端，各方面都有，大家按需查看）\u003cbr\u003e\u003ca href=\"https://github.com/daneden/animate.css\"\u003eanimate.css\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/IanLunn/Hover\"\u003ehover.css\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/museui/muse-ui\"\u003emuse-ui\u003c/a\u003e（基于vue2.0的一个UI库，样式漂亮，种类全）\u003cbr\u003e\u003ca href=\"https://github.com/chokcoco/css3-\"\u003eCSS3 实现各类3D效果的博客\u003c/a\u003e（和下面三个连接同属一个作者，这个大牛的作品不错，效果酷炫，虽然star数量与其它几个推荐项目没法比，但是很值得推荐）\u003cbr\u003e\u003ca href=\"https://github.com/chokcoco/boomJS\"\u003echokcoco/boomJS\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/chokcoco/magicCss\"\u003echokcoco/magicCss\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/chokcoco/iCSS\"\u003echokcoco/iCSS\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/akira-cn/handlock\"\u003ehandtouch\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/vuejs/awesome-vue\"\u003eawesome-vue\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://electron.org.cn/\"\u003eElectron\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://m.baidu.com/mip/c/s/lavas.baidu.com/mip/guide/vue/doc/vue/webpack/vue-skeleton-webpack-plugin?qq-pf-to=pcqq.discussion\"\u003evue-skeleton-webpack-plugin\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/youngwind/blog\"\u003e梁少峰的个人博客\u003c/a\u003e（里面的文章质量也不错，各种都有，js,jquery,vue,react,node.js等）\u003cbr\u003e\u003ca href=\"https://github.com/Reactive-Extensions/RxJS\"\u003eRxJs\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/PAIR-code/deeplearnjs\"\u003edeeplearn\u003c/a\u003e（谷歌出版，一个关于人工智能深度学习的框架，有兴趣可以看，我看了一会，没看懂）\u003c/p\u003e\u003cp\u003e（下面这两个是我自己的开发的项目，虽然跟其他项目比较欠缺火候，但是还不至于用不了或者拿不出手的地步，也算是我的一个小广告吧！(●'◡'●)）\u003cbr\u003e\u003ca href=\"https://github.com/chenhuiYj/ec-do\"\u003eec-do\u003c/a\u003e（封装了日常开发常用的javascript实例，实例为日常开发常用的小实例，包括数组去重，打乱数组，字母大小写转换，cookie操作的封装等。）\u003cbr\u003e\u003ca href=\"https://github.com/chenhuiYj/ec-css\"\u003eec-css\u003c/a\u003e（基于css3开发的代码库，包括日常使用的hover过渡效果，动画效果，以及预设动画）\u003c/p\u003e\u003ch3\u003e其它推荐项目\u003c/h3\u003e\u003cp\u003e\u003ca href=\"http://css3lib.alloyteam.com/#image_effects/3d_%20image_transitions\"\u003e腾讯css3 ui库\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://nec.netease.com/library\"\u003eNEC : 更好的CSS样式解决方案\u003c/a\u003e（网易的一个css3解决方案，但是貌似挺旧了，不维护了，但是里面的案例大家可以参考，绝对有收获）\u003c/p\u003e\u003ch2\u003e8.综合项目教程（学习实录）\u003c/h2\u003e\u003cp\u003e\u003ca href=\"http://lib.csdn.net/article/nodejs/8926\"\u003e使用node.js + socket.io + redis实现基本的聊天室场景\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.biyeseng.cn/front/articleinfo/41.html\"\u003e前端开发，从草根到英雄（第一部分）\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.biyeseng.cn/front/articleinfo/42.html\"\u003e前端开发，从草根到英雄（第二部分）\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://juejin.im/post/591afe90128fe1005ce339f7\"\u003e我的前端进阶之路\u003c/a\u003e（看着标题以为是杂谈，实际上感觉是一篇总结性文章，大家可以看下）\u003cbr\u003e\u003ca href=\"http://tgideas.qq.com/webplat/info/news_version3/804/7104/7106/m5723/201404/258291.shtml\"\u003e为你的移动页面寻找一丝新意——手机互动网页项目总结（上）\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://tgideas.qq.com/webplat/info/news_version3/804/7104/7106/m5723/201404/258325.shtml\"\u003e为你的移动页面寻找一丝新意——手机互动网页项目总结（下）\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://juejin.im/post/592faca42f301e006bc791e0\"\u003e前端开发指南2017\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.cnblogs.com/yexiaochai/archive/2013/04/29/3050798.html\"\u003e【实战HTML5与CSS3 第一篇】初探水深，美丽的导航，绚丽的图片爆炸！！\u003c/a\u003e（看完别忘记下面的，是叶小钗大神仿智能社官网的实战）\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000009705021\"\u003e基于 Vue 2.0 实现的移动端弹窗 (Alert, Confirm, Toast)组件.\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://cdc.tencent.com/2017/03/09/%E5%8F%91%E7%8E%B0%E6%9C%80%E5%A5%BD%E7%9A%84%E4%BD%A0-%E8%AE%BE%E8%AE%A1%E4%B8%AD%E5%A6%82%E4%BD%95%E6%89%93%E9%80%A0%E6%9C%80%E5%90%88%E9%80%82%E7%9A%84%E7%BB%84%E4%BB%B6/\"\u003e发现最好的你-设计中如何打造最合适的组件\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://segmentfault.com/a/1190000010025189\"\u003ewebpack+vue项目实战（一,搭建运行环境和相关配置）\u003c/a\u003e（我自己的文章，关于使用vue+webpack开发一个单页应用，一个后台管理系统的开发搭建，这个系列一共有五篇文章）\u003c/p\u003e\u003ch2\u003e9.开发杂谈\u003c/h2\u003e\u003cp\u003e\u003ca href=\"https://juejin.im/post/59bf2a1d51882531b730b718\"\u003eweb前端--10个妨碍进步的学习方式\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://juejin.im/post/5a229c9cf265da432652a5ef\"\u003e前端入行两年--教会了我这些道理\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://juejin.im/post/59e2574f51882578e310fcb1\"\u003e关于IT培训机构的个人看法\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/27996237\"\u003eOpenDoc - 前端简历评级标准\u003c/a\u003e（美团出的一份简历评级，可以适当参考下，对比下自己的实力和美团评级。当然有兴趣的也可以去面试）\u003cbr\u003e\u003ca href=\"https://coderlmn.github.io/code-standards/\"\u003e前端代码规范及最佳实践\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==\u0026amp;mid=2651552449\u0026amp;idx=1\u0026amp;sn=064fb651607ae3d5c4c0be0bf715ccfc\u0026amp;chksm=8025ad00b752241689ae07884fce85062ff7265d6a0f26bf7d0f24a2db7dfe97a3b6b5e7eeff\u0026amp;mpshare=1\u0026amp;scene=23\u0026amp;srcid=0812DoWbLlHTJE58WsdOwMCL#rd\"\u003eVue.js 很好，但是比 Angular 或 React 更好吗？\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/28094239\"\u003e聊聊技术选型 - Angular2 vs Vue2\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/26256056\"\u003e写给前端工程师看的，移动应用选型指南\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://xuexb.com/html/wang-zhan-jia-gou-cong-wu-dao-you.html/\"\u003e网站架构-从无到有\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://kb.cnblogs.com/page/210101/\"\u003e前端架构那些事儿\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.biyeseng.cn/front/articleinfo/74.html\"\u003e技术大牛养成指南，一篇不鸡汤的成功学实践\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://caibaojian.com/6-javascript-framework.html\"\u003e6 个值得好好学习的 JavaScript 框架\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==\u0026amp;mid=2651552430\u0026amp;idx=1\u0026amp;sn=cb080d60f7f3e515ef9d179546a5bef9\u0026amp;chksm=8025ad6fb752247978afbbd052dccd753ce87af1fd66806b6463bd08533d9cbfeca040f17983\u0026amp;mpshare=1\u0026amp;scene=23\u0026amp;srcid=0804epi66xRdfCUWvFkIz7rF#rd\"\u003e更快学习 JS 的 6 个简单思维技巧\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.biyeseng.cn/front/articleinfo/47.html\"\u003e程序员怎么学英语\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.biyeseng.cn/front/articleinfo/39.html\"\u003e8个让程序员追悔莫及的职业建议\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.biyeseng.cn/front/articleinfo/45.html\"\u003e当心！程序员应警惕七种错误的职业规划\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/23159199\"\u003e1024程序员节，写给年轻程序员的建议\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://blog.csdn.net/foruok/article/details/48310323\"\u003e给新程序员的10条建议\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==\u0026amp;mid=2651552445\u0026amp;idx=1\u0026amp;sn=de8114700cd0c20d76d108f108a500ca\u0026amp;chksm=8025ad7cb752246abbc363a048ca8069cd16e4610f9041d660d11eb6dc51d2a980284451b92a\u0026amp;mpshare=1\u0026amp;scene=23\u0026amp;srcid=0810dcQlbCq9xTCwQWXcYFgb#rd\"\u003e前端框架这么多，该何去何从？\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.css88.com/archives/7175\"\u003e2017年前端开发工具趋势\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==\u0026amp;mid=2651552426\u0026amp;idx=1\u0026amp;sn=6e7467d6fa3f2aea6dbcb8da1940cdd9\u0026amp;chksm=8025ad6bb752247d3b236e3cd6161f36f1f0b22faa6fe0248b674bce9d0830677259fb10643c\u0026amp;mpshare=1\u0026amp;scene=23\u0026amp;srcid=080402tLAhviTxL6sUhJCDf7#rd\"\u003e现代前端开发技术栈\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://web.jobbole.com/89943/\"\u003e听说2017你想写前端？\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://uptodate.frontendrescue.org/zh/\"\u003e如何跟上前端开发的最新前沿\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://geek.csdn.net/news/detail/88239\"\u003e前端开发人员必须了解的七大技能图谱\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/JacksonTian/fks\"\u003e前端技能汇总（JacksonTian）\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.f2er.info/\"\u003e另一张前端技能汇总图\u003c/a\u003e（和上面的一个链接一样，但是看的话，建议大家带参考的思想看）\u003cbr\u003e\u003ca href=\"https://www.zhihu.com/question/19554845\"\u003e怎样成长为一个优秀的 Web 前端开发工程师？\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://www.zhihu.com/question/28044664\"\u003e月薪10-12k的前端人员应该具备怎样一种技术水平？\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://www.zhihu.com/question/27471576/answer/211014066\"\u003e作为一名前端开发人员，有哪些值得一读的js代码？\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.limuyang.cc/2017/11/10/%E4%B8%8D%E5%90%B9%E4%B8%8D%E9%BB%91%E8%81%8A%E8%81%8A%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6-%E5%B0%A4%E9%9B%A8%E6%BA%AALive%E6%95%B4%E7%90%86/\"\u003e不吹不黑聊聊前端框架--尤雨溪Live整理\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://www.gitbook.com/book/sqrtthree/front-end-handbook-2017/details\"\u003e前端开发者指南（2017）\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://www.zhihu.com/question/35737930\"\u003e为什么一些公司招前端不想要培训班出来的人？\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/30308437\"\u003e前端新人不容易\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/30918074\"\u003e现在Web前端是不是已经饱和了?\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==\u0026amp;mid=2651227472\u0026amp;idx=2\u0026amp;sn=c2bd881c28cdabdb7bdff0337eb0f5b0\u0026amp;chksm=bd495cd48a3ed5c234328fd36e35cfc131866a3218f317bbe164b137e9c3e8dd649b62abde9b\u0026amp;mpshare=1\u0026amp;scene=1\u0026amp;srcid=1220CMMn57xc5IMTaBHQlHTI#rd\"\u003e2017前端技术发展回顾\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://juejin.im/post/590b451a0ce46300588c43a0\"\u003ehexo高阶教程：教你怎么让你的hexo博客在搜索引擎中排第一\u003c/a\u003e（有兴趣的可以看一下，有用）\u003cbr\u003e\u003ca href=\"https://opensource.guide/legal/#which-open-source-license-is-appropriate-for-my-project\"\u003e开放源码的法律面\u003c/a\u003e（因为国外对版权，许可证很是注重，该文章就讲代码开源后关于许可证的文章，看得我有点蒙，但是最终整理后，我的开源项目就用MIT）\u003cbr\u003e\u003c/p\u003e\u003ch2\u003e10.开发经常会接触的网站\u003c/h2\u003e\u003cp\u003e\u003ca href=\"https://developer.mozilla.org/zh-CN/docs/Web\"\u003eMDN-web技术文档\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://zhitu.isux.us/\"\u003e智图_图片压缩在线工具_在线制作webp\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://imgbase64.duoshitong.com/\"\u003e多视通图片转换Base64\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://mp.weixin.qq.com/wiki?t=resource/res_main\u0026amp;id=mp1421141115\"\u003e微信JS-SDK说明文档\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://cli.im/\"\u003e草料二维码\u003c/a\u003e\u003cbr\u003e\u003ca href=\"http://www.runoob.com/\"\u003e菜鸟教程\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://www.w3cschool.cn/\"\u003ew3cschool\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e11.小结\u003c/h2\u003e\u003cp\u003e好了，我学前端看过的博客文章，关注过的大牛和项目，项目技术栈的教程基本都在这里了！我分享的这些，不敢说最好，最全，适合每个人。但是都是我看过或者接触过的，至少内容上让我满意的，让我觉得是对学习有用的，能帮到大家的。如果大家有什么学习资源推荐的，我也希望大家不吝啬的共享给我，给大家！\u003c/p\u003e\u003cp\u003e这篇文章，对于大家而言是一个资源的合集，但对于我而言，可能是一个分割线。发完2017最后一篇文章在以后我可能会在务实基础的前提下，注重深入的探究，发的文章可能会比现在的文章深入，文章产量可能不会像现在这么频繁！\u003c/p\u003e\u003cp\u003e还有一个建议就是，学习web前端，上面分享的可以起到一个引导，指路，解惑的作用。但是，大家不要忘记多练，毕竟实操最重要！大家有空余的时间或者周末也可以自己做下自己有兴趣的项目，并且用在自己工作的项目开发上！项目不求比别人好，只求自己能练习，提升自己的技术水平！\u003cbr\u003e\u003c/p\u003e\u003c/div\u003e\u003cbr\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e","buildTime":"1514378152.4419","__v":0}
{"_id":{"$oid":"5a4393dbf318702ac88cbd28"},"id":"5a4263816fb9a045211ef85c","author":{"$oid":"5a4393daf318702ac88cbd21"},"title":" 使用nodejs+express完成简单的文件上传功能","meta":{"likeCount":0},"tag":["Node.js","前端"],"comment":[],"content":"\u003cp\u003e1.建立express项目\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eexpress \u003cspan class=\"hljs-_\"\u003e-e\u003c/span\u003e nodejs-uploadfile\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e2.下载multer中间件\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003enpm i multer or yarn multer\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e3.在routes/index.js中引用multer，由于还要使用到文件操作，还要引用fs模块,并指定文件上传目录\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003econst multer  = require(\u003cspan class=\"hljs-string\"\u003e'multer'\u003c/span\u003e);\nconst fs = require(\u003cspan class=\"hljs-string\"\u003e'fs'\u003c/span\u003e);\n\nconst UPLOAD_PATH = \u003cspan class=\"hljs-string\"\u003e'./uploads'\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003e单文件上传:\u003c/code\u003e index.html中文件如下(\u003cem\u003e\u003ccode\u003eform文件的类型必须为 enctype=\"multipart/form-data\"\u003c/code\u003e\u003c/em\u003e),\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;form action=\u003cspan class=\"hljs-string\"\u003e\"/upload\"\u003c/span\u003e method=\u003cspan class=\"hljs-string\"\u003e\"post\"\u003c/span\u003e enctype=\u003cspan class=\"hljs-string\"\u003e\"multipart/form-data\"\u003c/span\u003e\u0026gt;\n    \u0026lt;input name=\u003cspan class=\"hljs-string\"\u003e\"fileUpload\"\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"file\"\u003c/span\u003e /\u0026gt;\n    \u0026lt;img src=\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e alt=\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e\u0026gt;\n    \u0026lt;button \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"submit\"\u003c/span\u003e\u0026gt;上传\u0026lt;/button\u0026gt;\n\u0026lt;/form\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在routes/index.js里面添加upload路由用来处理上传文件的操作\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003erouter.post(\u003cspan class=\"hljs-string\"\u003e'/upload'\u003c/span\u003e, upload.single(\u003cspan class=\"hljs-string\"\u003e'fileUpload'\u003c/span\u003e), \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (req, res, next) {\n  const { file } = req;\n  fs.readFile(file.path, \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(err, data) {\n    fs.writeFile(`\u003cspan class=\"hljs-variable\"\u003e${UPLOAD_PATH}\u003c/span\u003e/\u003cspan class=\"hljs-variable\"\u003e${file.originalname}\u003c/span\u003e`, data, \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (err) {\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (err) res.json({ err })\n      res.json({\n        msg: \u003cspan class=\"hljs-string\"\u003e'上传成功'\u003c/span\u003e\n      });\n    });\n  })\n})\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e如果上传的文件是图片的话，还可以使用FileReader对象实现图片预览\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e(\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e($){\n  $(\u003cspan class=\"hljs-string\"\u003e'input'\u003c/span\u003e).on(\u003cspan class=\"hljs-string\"\u003e'change'\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(event) {\n    var files = event.target.files,\n        reader = new FileReader();\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(files \u0026amp;\u0026amp; files[0]){\n        reader.onload = \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (ev) {\n            $(\u003cspan class=\"hljs-string\"\u003e'img'\u003c/span\u003e).attr(\u003cspan class=\"hljs-string\"\u003e'src'\u003c/span\u003e, ev.target.result);\n        }\n        reader.readAsDataURL(files[0]);\n    }\n  })\n}(jQuery))\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003e多文件上传:\u003c/code\u003e 多文件上传的原理和单文件上传的原理一样，代码如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003erouter.post(\u003cspan class=\"hljs-string\"\u003e'/upload'\u003c/span\u003e, upload.array(\u003cspan class=\"hljs-string\"\u003e'fileUpload'\u003c/span\u003e), \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (req, res, next) {\n  const files  = req.files;\n  const response = [];\n  const result = new Promise((resolve, reject) =\u0026gt; {\n    files.map((v) =\u0026gt; {\n      fs.readFile(v.path, \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(err, data) {\n        fs.writeFile(`\u003cspan class=\"hljs-variable\"\u003e${UPLOAD_PATH}\u003c/span\u003e/\u003cspan class=\"hljs-variable\"\u003e${v.originalname}\u003c/span\u003e`, data, \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(err, data) {\n          const result = {\n            file: v,\n          }\n          \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (err)  reject(err);\n          resolve(\u003cspan class=\"hljs-string\"\u003e'成功'\u003c/span\u003e);\n        })\n      })\n    })\n  })\n  result.then(r =\u0026gt; {\n    res.json({\n      msg: \u003cspan class=\"hljs-string\"\u003e'上传成功'\u003c/span\u003e,\n    })\n  }).catch(err =\u0026gt; {\n    res.json({ err })\n  });\n})\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e相关代码在\u003ca target=\"_blank\" href=\"https://github.com/bWhirring/nodejs-uploadfile\"\u003ehttps://github.com/bWhirring/nodejs-uploadfile\u003c/a\u003e\u003c/p\u003e\n","buildTime":"1514377633.656","__v":0}
{"_id":{"$oid":"5a4393dbf318702ac88cbd29"},"id":"5a433b226fb9a0451a76a83d","author":{"$oid":"5a4393daf318702ac88cbd23"},"title":"简单的SVG线条动画","meta":{"likeCount":0},"tag":["SVG","CSS","JavaScript","动效"],"comment":[],"content":"\u003cp\u003e[TOC]\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://github.com/lucid-lynxz/BlogSamples/tree/master/SvgAnimationDemo\"\u003eDemo项目下载\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e看到网页中那种有如写字般的动画,觉得挺好玩的,就找了下制作方法,也比较简单,在此记录一下;\n先上几张图看看:\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"简单的线条动画\" src=\"http://upload-images.jianshu.io/upload_images/947286-488a07331ce9135c.gif?imageMogr2/auto-orient/strip\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"ps4\" src=\"http://upload-images.jianshu.io/upload_images/947286-bcb171dfd05181d4.gif?imageMogr2/auto-orient/strip\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e用到的属性\u003c/h2\u003e\n\u003cp\u003estroke 定义边框颜色值;\nstroke-width 定义描边宽度;\nstroke-dashoarray 前一个数值表示dash,后一个数字表示gap长度(只写单个值表示dash/gap尺寸一致),往复循环;\nstroke-dashoffset 虚线开始时的偏移长度,正数则从路径起始点向前偏移,负数则向后偏移;\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e原理\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e定义 \u003ccode\u003estroke-dashoarray\u003c/code\u003e 属性,使svg图案的 dash 和 gap 长度大于等于最终图案长度值(记为len);\u003c/li\u003e\n\u003cli\u003e将其往前偏移len,使dash部分初始隐藏,只显示 gap , gap 又是空白的,所以初始时页面无任何东西;\u003c/li\u003e\n\u003cli\u003e定义动画,不断改变 \u003ccode\u003estroke-dashoffset\u003c/code\u003e 的值直至为0,就出现了动画;\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 class=\"heading\"\u003e绘制svg图案\u003c/h2\u003e\n\u003cp\u003e主要使用到 path 标签,具体可以看 \u003ca target=\"_blank\" href=\"http://www.w3school.com.cn/svg/svg_path.asp\"\u003e这里\u003c/a\u003e ;\n复杂点的图案就不建议手动书写,可采用第三方软件,导出成svg文件,删除无用代码即可,如:\n\u003ca target=\"_blank\" href=\"https://inkscape.org/en\"\u003eInkscape\u003c/a\u003e\n\u003ca target=\"_blank\" href=\"http://editor.method.ac/\"\u003e在线编辑\u003c/a\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e动画实现\u003c/h2\u003e\n\u003cp\u003e可通过css或js来控制动画的实现,css比较简单,但图案的长度等参数不易掌控;\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003eCSS实现\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs css\" lang=\"css\"\u003e\u0026lt;style\u0026gt;\n    path {\n        stroke-dasharray: 610;//实线-间隔长度都是610(大于所画长度)\n        stroke-dashoffset: 610;//往前偏移610(超过图形长度),则初始显示为空白\n        animation: dash 5s linear;//添加动画,使偏移逐渐变为0,以显示完整图案\n        animation-fill-mode: forwards;//动画完成后保持不变\n    }\n\n    // 定义css动画,@keyframes yourName\n    @keyframes dash {\n        to {\n            stroke-dashoffset: 0;\n        }\n    }\n\u0026lt;/style\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003ejs控制动画\u003c/h3\u003e\n\u003ch4 class=\"heading\"\u003e初始化相关属性\u003c/h4\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-comment\"\u003e//代码获取长度并设置动画相关属性\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e path = \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.querySelector(\u003cspan class=\"hljs-string\"\u003e'path'\u003c/span\u003e);\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e len = path.getTotalLength();\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e\"总长度 : \"\u003c/span\u003e + len);\n\n\u003cspan class=\"hljs-comment\"\u003e//定义实线和空白区域长度\u003c/span\u003e\npath.style.strokeDasharray = len + \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\n\u003cspan class=\"hljs-comment\"\u003e//定义初始dash部分相对起始点的偏移量,正数表示往前便宜\u003c/span\u003e\npath.style.strokeDashoffset = len + \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 class=\"heading\"\u003e方式1:使用transition\u003c/h4\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-comment\"\u003e// 方式1:参考文章: https://jakearchibald.com/2013/animated-line-drawing-svg/\u003c/span\u003e\npath.style.transition = path.style.WebkitTransition =\n        \u003cspan class=\"hljs-string\"\u003e'none'\u003c/span\u003e;\n\u003cspan class=\"hljs-comment\"\u003e// Trigger a layout so styles are calculated \u0026amp; the browser\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e// picks up the starting position before animating\u003c/span\u003e\npath.getBoundingClientRect();\npath.style.transition = path.style.WebkitTransition =\n        \u003cspan class=\"hljs-string\"\u003e'stroke-dashoffset 5s ease-in-out'\u003c/span\u003e;\npath.style.strokeDashoffset = \u003cspan class=\"hljs-string\"\u003e'0'\u003c/span\u003e;\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 class=\"heading\"\u003e方式2:定时刷新重绘\u003c/h4\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e initial_ts = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e().getTime();\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e duration = \u003cspan class=\"hljs-number\"\u003e5000\u003c/span\u003e;\n\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e draw = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e progress = (\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e.now() - initial_ts) / duration;\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (progress \u0026lt; \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) {\n        path.style.strokeDashoffset = \u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.floor(len * (\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e - progress));\n        setTimeout(draw, \u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e);\n    }\n};\ndraw();\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 class=\"heading\"\u003e方式3:使用requestAnimationFrame\u003c/h4\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e initial_ts = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e().getTime();\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e duration = \u003cspan class=\"hljs-number\"\u003e5000\u003c/span\u003e;\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e handle = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e animate = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e progress = (\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e.now() - initial_ts) / duration;\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (progress \u0026gt;= \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) {\n        \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.cancelAnimationFrame(handle);\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n        path.style.strokeDashoffset = \u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.floor(len * (\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e - progress));\n        handle = \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.requestAnimationFrame(animate);\n    }\n};\nanimate();\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e方式3比较依赖系统刷新率,若硬件性能问题导致fps下降严重,则可能出现较严重卡顿现象\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"最终效果\" src=\"http://upload-images.jianshu.io/upload_images/947286-3690e19bd7dd204a.gif?imageMogr2/auto-orient/strip\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e参考\u003c/h2\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://www.w3school.com.cn/svg/index.asp\"\u003eW3C SVG\u003c/a\u003e\n\u003ca target=\"_blank\" href=\"https://developer.mozilla.org/zh-TW/docs/Web/SVG/Tutorial\"\u003eMDN-SVG\u003c/a\u003e\n\u003ca target=\"_blank\" href=\"https://www.w3.org/TR/SVG11/painting.html#StrokeProperties\"\u003ePainting: Filling, Stroking and Marker Symbols\u003c/a\u003e\n\u003ca target=\"_blank\" href=\"https://jakearchibald.com/2013/animated-line-drawing-svg/\"\u003eAnimated line drawing in SVG\u003c/a\u003e\n\u003ca target=\"_blank\" href=\"http://ued.ctrip.com/blog/translation-define-svg-with-css-styles-and-animation.html\"\u003e用css定义svg的样式和动画\u003c/a\u003e\n\u003ca target=\"_blank\" href=\"http://www.zhangxinxu.com/wordpress/2014/08/so-powerful-svg-smil-animation/\"\u003eSVG SMIL animation动画详解\u003c/a\u003e\u003c/p\u003e\n","buildTime":"1514377350.0403","__v":0}
{"_id":{"$oid":"5a4393dbf318702ac88cbd2b"},"id":"5a2a53b151882503dc539f41","author":{"$oid":"5a4393daf318702ac88cbd22"},"title":"用 webpack 写一个简单的 JS SDK","meta":{"likeCount":0},"tag":["Webpack","JavaScript","API","前端"],"comment":[],"content":"\u003ch1 class=\"heading\"\u003e引言\u003c/h1\u003e\n\u003cp\u003e最近项目中需要提供一个封装的JS SDK，虽然目前是一个很简单的功能，但是为了日后便于维护，扩展，因此还是选用了 \u003cstrong\u003ewebpack\u003c/strong\u003e 作为打包工具，作为参考，推荐一篇上好的文章，感兴趣的朋友可以先阅读一下\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://hueitan.github.io/javascript-sdk-design/\"\u003eJavaScript SDK Design Guide\u003c/a\u003e\n（中文翻译： \u003ca target=\"_blank\" href=\"http://www.jianshu.com/p/47d29692524b\"\u003eJavaScript SDK设计指南\u003c/a\u003e ）\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch1 class=\"heading\"\u003e目标\u003c/h1\u003e\n\u003cp\u003e作为一个SDK，我想达到如下的目的\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e提供一个加载方案\u003c/li\u003e\n\u003cli\u003e暴露一个公共变量，最好能支持多种加载方式\u003c/li\u003e\n\u003cli\u003e提供未压缩版与压缩版\u003c/li\u003e\n\u003cli\u003e可以为不同的合作商提供定制版本\u003c/li\u003e\n\u003cli\u003e内部实现通过模块引用，方便扩展\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e接下来一步步讲一下如何通过 \u003cstrong\u003ewebpack\u003c/strong\u003e 实现\u003c/p\u003e\n\u003ch1 class=\"heading\"\u003e准备\u003c/h1\u003e\n\u003cp\u003e假如我们最后需要提供的 SDK 如下\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// 引用\n\u0026lt;script \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"text/javascript\"\u003c/span\u003e src=\u003cspan class=\"hljs-string\"\u003e\"http://xxx.com/sdk.js\"\u003c/span\u003e\u0026gt;\u0026lt;/script\u0026gt;\n\n// 使用\nwindow.SDK.Shop.getList()       // 获取门店信息列表\nwindow.SDK.Store.getById()      // 通过ID获取商品信息\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e那么文件列表应该大致如下\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e|\n| - package.json\n| - webpack.config.js\n| - node_modules\n| - src\n    | - index.js\n    | - lib\n        | - shop.js\n        | - store.js\n| - dist\n| - build.js\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003ewebpack\u003c/strong\u003e 通过 \u003cstrong\u003eindex.js\u003c/strong\u003e 入口打包好文件，放到 \u003cstrong\u003edist\u003c/strong\u003e 文件夹，一些关键文件的代码应该如下\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003ewebpack.config.js\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e path = require(\u003cspan class=\"hljs-string\"\u003e'path'\u003c/span\u003e)\n\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e webpack = require(\u003cspan class=\"hljs-string\"\u003e'webpack'\u003c/span\u003e)\n\nmodule.exports = {\n    entry: {\n        \u003cspan class=\"hljs-string\"\u003e'sdk'\u003c/span\u003e: [\u003cspan class=\"hljs-string\"\u003e'./src/index.js'\u003c/span\u003e]\n    },\n    output: {\n        path: path.resolve(__dirname, \u003cspan class=\"hljs-string\"\u003e'dist'\u003c/span\u003e),\n        filename: \u003cspan class=\"hljs-string\"\u003e'[name].js'\u003c/span\u003e\n    }, \n    // 压缩混淆 js\n    plugins: [\n        new webpack.optimize.UglifyJsPlugin({\n            compress: {\n                warnings: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\n            },\n            \u003cspan class=\"hljs-built_in\"\u003esource\u003c/span\u003eMap: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\n        })\n    ]\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eshop.js\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003emodule.exports = {\n    getList: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e () {\n        .....\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003estore.js\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003emodule.exports = {\n    getById: \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (id) {\n        .....\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eindex.js\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003evar Shop = require(\u003cspan class=\"hljs-string\"\u003e'./lib/shop.js'\u003c/span\u003e)\nvar Store = require(\u003cspan class=\"hljs-string\"\u003e'./lib/store.js'\u003c/span\u003e)\n\nmodule.exports = {\n    Shop: Shop,\n    Store: Store\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003ebuild.js\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// 这里简单的 copy 了 vue-cli 提供的 build 代码\n\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e webpackConfig = require(\u003cspan class=\"hljs-string\"\u003e'./webpack.config'\u003c/span\u003e)\n\n\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e rm = require(\u003cspan class=\"hljs-string\"\u003e'rimraf'\u003c/span\u003e)\n\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e path = require(\u003cspan class=\"hljs-string\"\u003e'path'\u003c/span\u003e)\n\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e webpack = require(\u003cspan class=\"hljs-string\"\u003e'webpack'\u003c/span\u003e)\n\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e util = require(\u003cspan class=\"hljs-string\"\u003e'util'\u003c/span\u003e)\n\nconst compileCallback = (er, stats) =\u0026gt; {\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (er) throw er\n    stats = util.isArray(stats.stats) ? stats.stats : [stats]\n    stats.forEach((item) =\u0026gt; {\n        process.stdout.write(item.toString({\n            colors: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n            modules: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,\n            children: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,\n            chunks: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,\n            chunkModules: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\n        }) + \u003cspan class=\"hljs-string\"\u003e'\\n\\n'\u003c/span\u003e)\n    })         \n\n    console.log(\u003cspan class=\"hljs-string\"\u003e'Build complete.\\n'\u003c/span\u003e)\n}\n\nrm(path.resolve(__dirname, \u003cspan class=\"hljs-string\"\u003e'./dist'\u003c/span\u003e), err =\u0026gt; {\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (err) throw err\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e compiler = webpack(webpackConfig)\n    \n    compiler.run(compileCallback)\n})\n\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 class=\"heading\"\u003e方案\u003c/h1\u003e\n\u003ch2 class=\"heading\"\u003e1. 加载引用\u003c/h2\u003e\n\u003cp\u003e这部分很好实现\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e提供一个静态文件地址（或者一个CDN地址）来简单的通过 html 加载\u003c/li\u003e\n\u003cli\u003e\u003cs\u003e提供一个npm包，在服务器端加载（因为暂时没这种需求，所以先挂起）\u003c/s\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 class=\"heading\"\u003e2. 暴露一个公共变量\u003c/h2\u003e\n\u003cp\u003e最简单的做法是在 \u003cstrong\u003eindex.js\u003c/strong\u003e 里加一句 \u003ccode\u003ewindow.SDK = ...\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e不过 \u003cstrong\u003ewebpack\u003c/strong\u003e 有更好的解决方案 \u003ca target=\"_blank\" href=\"https://doc.webpack-china.org/configuration/output/#output-library\"\u003e\u003ccode\u003eoutput.library\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eoutput\u003c/code\u003e 选项主要用于配置文件输出规则，而 \u003ccode\u003eoutput.library\u003c/code\u003e 选项可以用于输出时将文件暴露为一个变量，可以说是为了打包 SDK 文件而生的一个配置项\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e这里还有一个 \u003cstrong\u003ewebpack\u003c/strong\u003e 的教程来帮你如何使用 \u003ccode\u003elibrary\u003c/code\u003e \u003ca target=\"_blank\" href=\"https://doc.webpack-china.org/guides/author-libraries\"\u003e创建 Library\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e另一个选项 \u003ca target=\"_blank\" href=\"https://doc.webpack-china.org/configuration/output/#output-librarytarget\"\u003e\u003ccode\u003eoutput.libraryTarget\u003c/code\u003e\u003c/a\u003e 则可以配置如何输出变量，默认值是 \u003ccode\u003evar\u003c/code\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e简单的说明一下这些值的含义\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003evar：在当前作用域导出一个变量\u003c/li\u003e\n\u003cli\u003eassign： 导出一个变量作为全局变量\u003c/li\u003e\n\u003cli\u003ethis： 导出作为 \u003ccode\u003ethis\u003c/code\u003e 的一个属性，这个 \u003ccode\u003ethis\u003c/code\u003e 不一定是 \u003ccode\u003ewindow\u003c/code\u003e ，要看引用 SDK 的位置\u003c/li\u003e\n\u003cli\u003ewindow： 导出为 \u003ccode\u003ewindow\u003c/code\u003e 的一个属性，基本上就算全局变量了\u003c/li\u003e\n\u003cli\u003eglobal：导出为 \u003ccode\u003eglobal\u003c/code\u003e 的一个属性，估计是这个变量名比较常用吧。。\u003c/li\u003e\n\u003cli\u003ecommonjs：导出为 \u003ccode\u003eexports\u003c/code\u003e 的一个属性，导出的格式可以在 \u003cstrong\u003eCommonJS\u003c/strong\u003e 环境里引用\u003c/li\u003e\n\u003cli\u003ecommonjs2：赋值给 \u003ccode\u003emodule.exports\u003c/code\u003e ，同样可以用在 \u003cstrong\u003eCommonJS\u003c/strong\u003e 环境里\u003c/li\u003e\n\u003cli\u003eamd：暴露给 \u003cstrong\u003eAMD\u003c/strong\u003e 模块\u003c/li\u003e\n\u003cli\u003eumd：暴露为所有模块都可用的格式\u003c/li\u003e\n\u003cli\u003ejsonp：包裹到一个 \u003cstrong\u003ejsonp\u003c/strong\u003e 包装容器中，也就是一个 \u003cstrong\u003eFunction\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e因此，我们稍微修改一下 \u003cstrong\u003ewebpack.config.js\u003c/strong\u003e 的代码\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003emodule.exports = {\n    ...\n    output: {\n        path: \u003cspan class=\"hljs-string\"\u003e'./dist'\u003c/span\u003e,\n        filename: \u003cspan class=\"hljs-string\"\u003e'[name].js'\u003c/span\u003e,\n        library: \u003cspan class=\"hljs-string\"\u003e'SDK'\u003c/span\u003e,\n        libraryTarget: \u003cspan class=\"hljs-string\"\u003e\"umd\"\u003c/span\u003e\n    }\n    ...\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e3. 提供两个版本\u003c/h2\u003e\n\u003cp\u003e简单的可以写两个 \u003cstrong\u003ebuild\u003c/strong\u003e 脚本，分别打包为压缩代码与未压缩代码，不过 \u003cstrong\u003ewebpack\u003c/strong\u003e 本身也可以导出为多个配置（这也摸清了 \u003cstrong\u003ewebpack\u003c/strong\u003e 如何为多个 \u003ccode\u003eoutput\u003c/code\u003e 配置不同的参数）\u003c/p\u003e\n\u003cp\u003e于是，我们的 \u003cstrong\u003ewebpack.config.js\u003c/strong\u003e 代码修改为\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003emodule.exports = [\n  // 未压缩版\n  {\n        entry: {\n            \u003cspan class=\"hljs-string\"\u003e'sdk'\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'./src/index.js'\u003c/span\u003e\n        },\n        output: {\n            path: path.resolve(__dirname, \u003cspan class=\"hljs-string\"\u003e'dist'\u003c/span\u003e),\n            filename: \u003cspan class=\"hljs-string\"\u003e'[name].js'\u003c/span\u003e,\n            library: \u003cspan class=\"hljs-string\"\u003e'SDK'\u003c/span\u003e,\n            libraryTarget: \u003cspan class=\"hljs-string\"\u003e\"umd\"\u003c/span\u003e\n        }\n  },\n\n  // 压缩版\n  {\n        entry: {\n            \u003cspan class=\"hljs-string\"\u003e'sdk.min'\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'./src/index.js'\u003c/span\u003e\n        },\n        output: {\n            path: path.resolve(__dirname, \u003cspan class=\"hljs-string\"\u003e'dist'\u003c/span\u003e),\n            filename: \u003cspan class=\"hljs-string\"\u003e'[name].js'\u003c/span\u003e,\n            library: \u003cspan class=\"hljs-string\"\u003e'SDK'\u003c/span\u003e,\n            libraryTarget: \u003cspan class=\"hljs-string\"\u003e\"umd\"\u003c/span\u003e\n        },\n        plugins: [\n            new webpack.optimize.UglifyJsPlugin({\n                compress: {\n                    warnings: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\n                },\n                \u003cspan class=\"hljs-built_in\"\u003esource\u003c/span\u003eMap: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\n            })\n        ]\n  }\n]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e打包后的结果如下图所示\n\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/16090c176764b4ce?w=410\u0026amp;h=215\u0026amp;f=png\u0026amp;s=9892\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e4. 提供定制版本\u003c/h2\u003e\n\u003cp\u003e这个相对容易点了，可以通过上一条的方式做多个配置，也可以简单的在 \u003ccode\u003eentry\u003c/code\u003e 中写多个入口\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003ewebpack.config.js\u003c/strong\u003e 代码修改为\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003emodule.exports = [\n    {\n        entry: {\n            \u003cspan class=\"hljs-string\"\u003e'sdk'\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'./src/index.js'\u003c/span\u003e,\n            \u003cspan class=\"hljs-string\"\u003e'custom'\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'./src/custom.js'\u003c/span\u003e\n        }\n        ...\n    },\n    ...\n]\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e5. 内部实现通过模块引用\u003c/h2\u003e\n\u003cp\u003e这个就不再啰嗦了...经过了一系列配置，别说模块了，ES6都能给你加进去，不过要注意的是，如果引入了 \u003cstrong\u003ebabel\u003c/strong\u003e 或者其他的库，打包出来的 \u003cstrong\u003eSDK\u003c/strong\u003e 文件就很大了，甚至是简单的引用一个 \u003cstrong\u003ewebpack-merge\u003c/strong\u003e 都会增加50K的容量，所以最好还是以原生的方式去写，如果需要 \u003ccode\u003eajax\u003c/code\u003e 等功能就简单的封装一下，能不引用别的库就不引用，如果觉得文件体积太大，可以用  \u003cstrong\u003ewebpack-bundle-analyzer\u003c/strong\u003e 分析一下文件大小的分布，以及是否有重复引用\u003c/p\u003e\n\u003ch1 class=\"heading\"\u003e结语\u003c/h1\u003e\n\u003cp\u003e虽然是个小项目，不过在初期也应该考虑的全面，目前项目虽小，但是不见得以后会发展成什么样，可能有些人会说这么简单的项目用闭包封装一下，暴露两个接口即可，何必搞那么复杂，但是假如之后需要添加新的接口呢，假如需要提供两个 sdk ，分别提供不同的接口，同时又有部分相同的接口呢，如果这时候再进行重构，会不会对线上有很大的影响？需要进行多少测试？这无形之中给我们加大了很多成本与不确定性\u003c/p\u003e\n\u003cp\u003e希望这篇比较初级的文章能对大家在创建一个SDK项目上有所帮助~\u003c/p\u003e\n","buildTime":"1514377364.1254","__v":0}
{"_id":{"$oid":"5a4393dbf318702ac88cbd2d"},"id":"5a431c70f265da432c241f11","author":{"$oid":"5a4393daf318702ac88cbd20"},"title":"JavaScript标准库（25）","meta":{"likeCount":0},"tag":["JavaScript"],"comment":[],"content":"\u003ch4 class=\"heading\"\u003eJavaScript标准库目录：\u003c/h4\u003e\n\u003cp\u003e上一次我们简单的介绍了\u003ccode\u003eObject() String() Number() Boolean()\u003c/code\u003e而今天这个博客我在原来的基础上对\u003ccode\u003eArray() Function()\u003c/code\u003e进行了补充.获取更多相关的知识还可以通过 \u003ca target=\"_blank\" href=\"http://javascript.ruanyifeng.com/#stdlib\"\u003e阮一峰标准参考教程\u003c/a\u003e \u003ca target=\"_blank\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects\"\u003eMDN-JavaScript标准库\u003c/a\u003e\n\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/18/16067ae17cdc9b4f?w=1024\u0026amp;h=693\u0026amp;f=png\u0026amp;s=63395\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e简单变量与new 对象()区别\u003c/h3\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://user-gold-cdn.xitu.io/2017/12/18/16067ae154498411?w=618\u0026amp;h=516\u0026amp;f=png\u0026amp;s=70801\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n对于简单变量来说，赋值就是一个简单的赋值，而对于new String()来说赋值等于创建了一个String对象\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e数组\u003c/h3\u003e\n\u003ch4 class=\"heading\"\u003e数组的创建类型：\u003c/h4\u003e\n\u003cp\u003e第一种：(1)\u003ccode\u003elet fruit = new Array(\"apple\",\"orange\",\"banana\")\u003c/code\u003e\u003cbr\u003e\n第二种：(2)\u003ccode\u003elet fruit = [\"apple\",\"orange\",\"banana\"]\u003c/code\u003e\n\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/18/16067ae152f91bdf?w=889\u0026amp;h=180\u0026amp;f=png\u0026amp;s=4096\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n上述两种表达方法目的都是一样，只不过new Array()尊重了创始人的意愿使得JS更加像Java而已。\u003cp\u003e\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003eArray()的用法：\u003c/h4\u003e\n\u003cp\u003e而当数组的参数为1个的时候，例如\u003ccode\u003evar a = Array (3)\u003c/code\u003e时就要思考一下：\u003cbr\u003e\n第(1)种可能生成了一个数组，第一个数为3\u003cbr\u003e\n第(2)种可能生成了一个length为3的数组\u003cbr\u003e\n\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/18/16067ae152d0f52c?w=620\u0026amp;h=200\u0026amp;f=png\u0026amp;s=29561\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n结果很明显是第二种，而且这个数组种的任意数字都无法确定，不是0！！！\u003cbr\u003e\n当参数为2个的时候，数组的表示则为正常\n\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/18/16067ae1604789bb?w=892\u0026amp;h=182\u0026amp;f=png\u0026amp;s=3380\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n所以通过内存图可以直观的发现数组的不一致性：\n\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/18/16067ae18882dea8?w=1008\u0026amp;h=613\u0026amp;f=png\u0026amp;s=172342\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\nArray()的写法：\n\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/18/16067ae18bd7e5fb?w=892\u0026amp;h=313\u0026amp;f=png\u0026amp;s=4845\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003e小总结：\u003c/h4\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/18/16067ae18890a10f?w=1188\u0026amp;h=725\u0026amp;f=png\u0026amp;s=176235\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e函数function()\u003c/h3\u003e\n\u003ch4 class=\"heading\"\u003e函数的创建类型：\u003c/h4\u003e\n\u003cp\u003e(1):\u003ccode\u003evar f = function(a,b){ return a + b ;}\u003c/code\u003e\u003cbr\u003e\n(2):\u003ccode\u003evar f = Function(){'a' , 'b' , 'return a + b'} //加不加new都一样\u003c/code\u003e\u003cbr\u003e\n上述两种方式都是表达了两种用于计算a+b的值。第一种主要介绍了一般函数的表达方式，第二种主要介绍了构造函数的表达方式，前面的\u003ccode\u003e'a'\u003c/code\u003e,\u003ccode\u003e'b'\u003c/code\u003e表示参数，\u003ccode\u003e'return a+b'表示函数体\u003c/code\u003e\u003c/p\u003e\n\u003ch5 class=\"heading\"\u003e函数的表达方式：\u003c/h5\u003e\n\u003cp\u003e(1)具名函数\n\u003ccode\u003efunction f(){ return undefined; //如果没有写，默认添加 }\u003c/code\u003e\n(2)匿名函数\n\u003ccode\u003efunction(){ }\u003c/code\u003e\n(3)构造函数\n\u003ccode\u003enew Function('x','y','return x+y')\u003c/code\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e数组和forEach\u003c/h3\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/1609626c6851bab8?w=1231\u0026amp;h=753\u0026amp;f=png\u0026amp;s=282804\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\nArray(),Function()与Object()的区别：\n\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/1609626c874d181c?w=1219\u0026amp;h=722\u0026amp;f=png\u0026amp;s=279807\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/1609626c68848fd9?w=890\u0026amp;h=409\u0026amp;f=png\u0026amp;s=29962\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n这样一种遍历只能显示length里面的内容，如果想要遍历另一种方法就必须使用下面的这种方法：\n\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/1609626c7d23a5d0?w=890\u0026amp;h=450\u0026amp;f=png\u0026amp;s=6831\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n另外一种更加简单的表示方法：\n\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/1609626c7971a893?w=712\u0026amp;h=585\u0026amp;f=png\u0026amp;s=109646\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n伪数组：就是没有指向\u003ccode\u003eArray.prototype\u003c/code\u003e的内容我们称之为伪数组，也就是说伪数组没有push，pop，__proto__功能\n\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/1609626c90028880?w=858\u0026amp;h=626\u0026amp;f=png\u0026amp;s=218365\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e\u003cem\u003e在JavaScript中只有一个伪数组：arguments\u003c/em\u003e\u003c/h3\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://user-gold-cdn.xitu.io/2017/12/27/1609626ce3e7e0a6?w=714\u0026amp;h=380\u0026amp;f=png\u0026amp;s=64413\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e常用的数组API：forEach()\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003ea = [\u003cspan class=\"hljs-string\"\u003e'a'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'b'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'c'\u003c/span\u003e]\na.forEach( \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(x,y)){\n  console(\u003cspan class=\"hljs-string\"\u003e'value'\u003c/span\u003e,x)\n  console(\u003cspan class=\"hljs-string\"\u003e'key'\u003c/span\u003e,y)\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/1609626ce667bf63?w=884\u0026amp;h=322\u0026amp;f=png\u0026amp;s=6246\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/1609626ce190ef43?w=708\u0026amp;h=452\u0026amp;f=png\u0026amp;s=76680\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/1609626ce9cf8156\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n很明显上面的代码先执行\u003ccode\u003econsole.log('我接收到了一个函数')\u003c/code\u003e然后会找\u003ccode\u003ey()\u003c/code\u003e,发现\u003ccode\u003ey()\u003c/code\u003e对应的\u003ccode\u003efunction()\u003c/code\u003e是\u003ccode\u003econsole.log(2)\u003c/code\u003e返回的是2，接着执行最后一句函数\u003ccode\u003econsole.log('并且我执行了这个函数')\u003c/code\u003e\u003cbr\u003e\n主要是找y()是指原函数对应的函数。同样，使用\u003ccode\u003ey.call()\u003c/code\u003e一样也是可以执行函数:\u003cbr\u003e\n\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/1609626d100783d7?w=709\u0026amp;h=456\u0026amp;f=png\u0026amp;s=115670\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/1609626d1b817f6c\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cbr\u003e\n通过函数的方式解释forEach():\u003cp\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003eEach(array , x){\n  \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e i = 0; i\u0026lt;array.length;i++){\n     x(array[i],i)\n  }\n}\n\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003eEach([\u003cspan class=\"hljs-string\"\u003e'a'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'b'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'c'\u003c/span\u003e] , \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(value, key){\n       console.log(value , key)\n  }\n)\n// a  0\n   b  1\n   c  2\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e通过forEach来解释：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003evar a = [\u003cspan class=\"hljs-string\"\u003e'a'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'b'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'c'\u003c/span\u003e];\na.forEach(\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(x,y){\n  console.log(x,y)\n})\n// a 0\n   b 1\n   c 2\n其实a.forEach()本身就是一个函数，当你写a.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e(){})等价于a.forEach.call(a , \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e(){})\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003eforEach()和sort()原理\u003c/h3\u003e\n\u003cp\u003e通过上述的简单理解我们可以知道forEach主要是用来遍历数组，而且forEach()一定会接受三个参数：第一个参数一定是value，第二个参数一定是key，第三个参数一定是这个数组的本身\n\u003cem\u003eeg:\u003c/em\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e  var a = [\u003cspan class=\"hljs-string\"\u003e'aaa'\u003c/span\u003e , \u003cspan class=\"hljs-string\"\u003e'bbb'\u003c/span\u003e , \u003cspan class=\"hljs-string\"\u003e'ccc'\u003c/span\u003e]\n  a.forEach(\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(b,c,d){\n  console.log(b,c,d)\n})\n// aaa  0 [\u003cspan class=\"hljs-string\"\u003e'aaa'\u003c/span\u003e , \u003cspan class=\"hljs-string\"\u003e'bbb'\u003c/span\u003e , \u003cspan class=\"hljs-string\"\u003e'ccc'\u003c/span\u003e]\n   bbb  1 [\u003cspan class=\"hljs-string\"\u003e'aaa'\u003c/span\u003e , \u003cspan class=\"hljs-string\"\u003e'bbb'\u003c/span\u003e , \u003cspan class=\"hljs-string\"\u003e'ccc'\u003c/span\u003e] \n   ccc  2 [\u003cspan class=\"hljs-string\"\u003e'aaa'\u003c/span\u003e , \u003cspan class=\"hljs-string\"\u003e'bbb'\u003c/span\u003e , \u003cspan class=\"hljs-string\"\u003e'ccc'\u003c/span\u003e]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/1609626d22999511?w=1109\u0026amp;h=151\u0026amp;f=png\u0026amp;s=4207\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\nsort()对数组进行排序\n默认情况下是进行从小到大排序\u003cp\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003ea = [2,4,5,6,7,1,3] \na.sort()\n//a = [1,2,3,4,5,6,7]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/1609626d1bb9f1b7?w=1113\u0026amp;h=130\u0026amp;f=png\u0026amp;s=2600\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n如果想进行从大到小排序要进行设置：\u003cp\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003ea = [2,4,6,7,3,1,5]\na.sort( \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(x,y) {\u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e x- y})   //返回的数字是负数，进行从小到大排序\na.sort( \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(x,y) {\u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e y- x})   //返回的数字是正数，进行从大到小排序\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e对于更复杂（姓名）的顺序排列：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003evar people = [\u003cspan class=\"hljs-string\"\u003e'阿里'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'百度'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'腾讯'\u003c/span\u003e]\nvar money = {\n  百度：3,\n  阿里：1,\n 腾讯：2\n}\npeople.sort( \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(x,y){\u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e money[x] -money[y] })  //阿里，腾讯，百度\npeople.sort( \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(x,y){\u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e money[y] -money[x] }) //百度，腾讯，阿里\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/1609626d4b88d037?w=1003\u0026amp;h=316\u0026amp;f=png\u0026amp;s=7122\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e其他数组API\u003c/h3\u003e\n\u003cp\u003ejoin(),contact(),map(),filter(),reduce()\njoin()相当于连接符\neg：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003evar a = [1,2,3]\na.join(\u003cspan class=\"hljs-string\"\u003e'你好'\u003c/span\u003e)\n//1你好2你好3\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e数组变字符串\n\u003ccode\u003evar a = [1,2,3] a.join(',') // \"1,2,3\"\u003c/code\u003e\ncontact()数组的连接\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003evar a = [1,2,3]\nvar b =[4,5,6]\nvar c = a.contact(b)      var c =a.contact([]) //得到一个新数组\n//c [1,2,3,4,5,6]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003emap()把函数返回的每一个值收集起来得到一个新的数组\n\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/1609626d5f54a5dc?w=893\u0026amp;h=677\u0026amp;f=png\u0026amp;s=116877\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003evar a = [1,2,3]\na.map( \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(value , key){\u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e value*2})        //2,4,6\na.map(value =\u0026gt;value *2)  //2,4,6 \na.map(value =\u0026gt;value *3) //3,6,9\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e上述两种结果实现方法一致。箭头函数更简洁，function()更加让人容易理解\u003cbr\u003e\nfilter()过滤数组中的内容\u003cbr\u003e\n通过数组中的具体内容进行筛选，和map()类型也有两种方式进行，一种是传统的函数，一种是箭头函数\n\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/1609626d6877aab7\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\nmap()和filter()的混合使用：\u003cbr\u003e\n（1）得到一个数组的所有偶数\u003cbr\u003e\n（2）得到所有偶数的平方\u003cp\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003evar a = [1,2,3,4,5,6,7,8,9]\na.filter(value =\u0026gt;value%2===0).map(value =\u0026gt;value*value)\n//4,16,36,64\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ereduce()减少数组或者压缩数组\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003evar a =[1,2,3,4,5,6,7,8,9]\na.reduce(\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(sum,n){\n  \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e sum+n\n},0) //sum表示上一次结果的和，n是一次的值，sum+n是相加的结果，0是初始的值\n\u003c/code\u003e\u003c/pre\u003e","buildTime":"1514377661.7049","__v":0}
{"_id":{"$oid":"5a4393dbf318702ac88cbd2e"},"id":"5a424ea86fb9a0450909c508","author":{"$oid":"5a4393daf318702ac88cbd27"},"title":"ionic3实战-随机布局瀑布流实现","meta":{"likeCount":0},"tag":["Angular.js","前端","ionic"],"comment":[],"content":"\u003cp\u003e最近一段时间由于项目需要接触到了ionic3,发现真是一个利器啊!\n项目中由于要用到一个瀑布流的特效，找了半天竟然没有找到相关的资源，没有办法，只能迎着头皮上了~\n话不多说，先上图\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/1609307dab684a70?w=413\u0026amp;h=738\u0026amp;f=png\u0026amp;s=87709\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/1609307f3ce3e217?w=416\u0026amp;h=741\u0026amp;f=png\u0026amp;s=115699\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/160930804979bb70?w=418\u0026amp;h=744\u0026amp;f=png\u0026amp;s=104854\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n相信看过图片的同学都明白什么意思了吧。对，就是瀑布流！\n但是今天我们的瀑布流可不是一般的瀑布流。让我们接着看:\u003cp\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e自动排版\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003e我们的要求是做那种随机凌乱的感觉，所以我们需要做一种机制,来将图片选择最优的一种排列方式来展示到页面上，也就是保证图片与相邻图片的比例是最合适的然后在实现排列.\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 class=\"heading\"\u003eangular4\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003e相信这个效果如果在平常的jq插件中似乎也不难实现，确实，网上也能搜到一些jq的插件。但是我们的技术栈是angular4呀~\n在ng中我们的DOM操作基本都是放在指令中的，相信用过angularjs1.x的同学并不陌生了吧~,在angular4中也是一样。\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch1 class=\"heading\"\u003e好了，让我们贴代码~\u003c/h1\u003e\n\u003ch2 class=\"heading\"\u003e创建指令\u003c/h2\u003e\n\u003cp\u003e我们假设你已经在你的ionic中建立好了相关的组件，并且已经拥有的图片数据，如果没有相关基础的同学建议大家先去看看ionic3 与 angular4的入门。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/16093195bbbb7ee3?w=1268\u0026amp;h=712\u0026amp;f=png\u0026amp;s=124884\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n这是我的一个组件html的页面，也许眼尖的同学已经发现了我们的指令 [imagr-sort]=\"item\",对的，我们的指令是需要你当前的图片的angular数据的。\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e创建一个指令ts\u003c/h3\u003e\n\u003cp\u003eionic g directive image-sort\n执行建立我们的指令。\n\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/160931e93b4cfbe9?w=1617\u0026amp;h=667\u0026amp;f=png\u0026amp;s=54218\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n创建完了我们的自定义指令就是这个样子，空空如也啊~\u003cp\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e编写我们的逻辑\u003c/h2\u003e\n\u003ch3 class=\"heading\"\u003e1.1接收并且注入一些东西:\u003c/h3\u003e\n\u003cp\u003e看图！\n\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/1609324187e51153?w=1083\u0026amp;h=212\u0026amp;f=png\u0026amp;s=42403\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n既然我们在模板中有输入([[imagr-sort]=\"item\"]);那么我们也当然应该在指令中接收到输入的数据；如截图中红色箭头所示，我将输入的数据保存了起来-\u0026gt;sourceArr;\n然后我们在angular4中如果要获取到dom宿主的一些属性了，元素了等等就要用到\nElementRef，Renderer2是angular4中的一个类似渲染器的东西吧，这个具体的我还没有搞懂，大家可以多看看这块的资料，我主要是在这个指令中用于更改Dom的一些结构。\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e关于我们的imgLength ，我待会再说\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e1.2实际点！图片是从异步加载过来的！\u003c/h3\u003e\n\u003cp\u003e我们首先思考这样一个问题：\n我们的指令是在angular数据渲染的时候就开始执行的，这个是基本大家都懂。\nbut！我们的图片可都是异步加载的呢~，所以自然而然我们要有一个图片加载的过程:\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/160932ed2a577406?w=917\u0026amp;h=329\u0026amp;f=png\u0026amp;s=49284\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n嗯，相信各位早就想到了----\u0026gt;image.onload,不错，是它~\n也是时候说下之前的imgLength了，这个变量来记录记载完成的图片的数量，用来辨别是否当前图片都已经加载完毕了，为我们后续的动作做依据。\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eimage.onerror,这个相信大家也看明白了吧，这个是图片加载失败的一个函数，我在里面做的操作是将加载失败的图片从原始的DOM中，angular的数据剔除。\n这里面就用到了我们angular的渲染器this.render2();\n相关功能方法大家可以去源码里面看一下，基本上所有常用的Dom操作都有实现。\nfor循环呢是因为我们的图片数据是多条的，所以我们要等待每一张图片都顺利的加载完成。\nps:注意在onerror与onload的函数中使用this要在imgOnlod中使用变量引用let _self = this;\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e图片加载完成开始我们的改造工程\u003c/h2\u003e\n\u003ch3 class=\"heading\"\u003e1.3将我们的适口按照网格划分\u003c/h3\u003e\n\u003cp\u003eimageStartStort()！\n上图\n\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/16093407408911c1?w=974\u0026amp;h=934\u0026amp;f=jpeg\u0026amp;s=943807\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e大家看1图红圈内，我是自己划分出五个横向网格标准，便于我们待会将图片比例做对比。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e1.4将我们的图片定义网格占用\u003c/h3\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/16093407408911c1?w=974\u0026amp;h=934\u0026amp;f=jpeg\u0026amp;s=943807\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/16093408766dfda2?w=996\u0026amp;h=512\u0026amp;f=jpeg\u0026amp;s=696825\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n我们创建了一个数组allImageArr=[];用于保存当前处理过的所有图片的数据。\n还记的我们之前获得的angular的数据吧，我们通过循环它来将图片划分网格占用。\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e我们的循环中都做了些什么？\u003c/p\u003e\n\u003cp\u003e1.获取图片的宽高，并且求出每一张图片的比例。\u003c/p\u003e\n\u003cp\u003e2.将获得的图片比列与我们自己定义的网格比例进行区间划分。\u003c/p\u003e\n\u003cp\u003e3.按照我们划分的网格来计算出占有网格的图片的新的宽度，所占网格数储存并且记录保存到我们的自定义的allImageArr中，并且在原有的angular数据中添加gridding数字那个记录相应的网格数。\u003c/p\u003e\n\u003cp\u003e执行this.pictureColumnSort方法;\u003c/p\u003e\n\u003cp\u003e我们的图片已经划分完成了，接下来，我们来激情的一刻~\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e1.5图片排列，跟据网格派选最合适的邻居~\u003c/h3\u003e\n\u003cp\u003epictureColumnSort()!\n上图\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/1609351154be3323?w=950\u0026amp;h=849\u0026amp;f=png\u0026amp;s=131297\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n这一个过程其实也没啥好说的，主要就是循环，查看每个图片的网格数，将最合适的进行相邻排序(执行下一步:goExchange函数),最后匹配不上的单独做一个5分网格战术出来.\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e格式可以是多种:\n3+2，1+4，1+1+3，1+3+1，2+3.。。。。。\u003c/p\u003e\n\u003cp\u003e怎么高兴怎么来~\n没啥好说的就是循环筛选，大家看看图就好。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e1.6无序变有序，除了交换应该没有更好的选择了吧\u003c/h3\u003e\n\u003cp\u003egoExchange()! 上图\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/1609358abb0c9140?w=692\u0026amp;h=176\u0026amp;f=jpeg\u0026amp;s=884600\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n看看1.5中的代码，我们呢是在每次匹配到了合适的图片之后执行这个函数，因为我们需要把匹配到的图片换位置啊！\n这个函数中接收到的repeatI与repeatA就是1.5中的双重循环的索引，这个索引决定了我们换图片的位置。\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e代码所示的原理就是将匹配到的图片换到我们当前图片的后面，将原来后面的图片补到换过来图片的位置，有点绕可能是我的比哦打能力不好，哈哈。\n没啥好说的这个函数，就是换位置。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e1.7取长补短，完工！\u003c/h3\u003e\n\u003cp\u003esetHeight()!上图\n\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/1609360adfeddc03?w=1170\u0026amp;h=736\u0026amp;f=png\u0026amp;s=140001\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n再次循环(代码应该还有不少改进的地步，循环用的不少~);\n这个地步已经我们呢的布局页面完成了，但是我们的图片的尺寸实际上是不规则的，不忍直视，\n所以我们在这个函数中将差异抹平，取长补短。\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e实际上我们的图片肯定会有一点拉伸，所以我们也是取了平衡的一个中间点，来进行适当的拉伸。\u003c/p\u003e\n\u003cp\u003e这个函数肯定其实还可以做一些适当的限制来精细化图片的尺寸调整。至此我们也算是写完了整个指令逻辑。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e完工! ioinc serve\u003c/h2\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/1609369c3bd6ef8a?w=421\u0026amp;h=745\u0026amp;f=png\u0026amp;s=141622\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e至于中间的调用的过程有一点我要说明：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-built_in\"\u003eset\u003c/span\u003eTimeout(() =\u0026gt; {\n        _self.setHeight(angularImageList, ele);\n      });\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e整个调用我也是晚班无奈的情况下才使用的，如果不加整个调用在setHeight函数中设置的angular，数据会莫名其妙的出现图片位置更换错误，至今误解，如果大佬们能看到整个有好的解决方法也分享一下。\u003c/p\u003e\n\u003cp\u003e好了，时间不早了，晚安喽~\u003c/p\u003e\n","buildTime":"1514378064.0954","__v":0}
{"_id":{"$oid":"5a4393dbf318702ac88cbd2f"},"id":"5a424a796fb9a045023be66c","author":{"$oid":"5a4393daf318702ac88cbd1f"},"title":"CSS3的动画属性","meta":{"likeCount":0},"tag":["CSS","动效","前端","JavaScript"],"comment":[],"content":"\u003cblockquote\u003e\n\u003cp\u003etransition、animation和transform是CSS3中三个制作动画的重要属性，本篇文章主要对其进行学习了解。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 class=\"heading\"\u003e一、transition\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003etransition\u003c/code\u003e允许css的属性值在一定的时间区间内平滑地\u003cstrong\u003e过渡\u003c/strong\u003e。这种效果可以在鼠标单击、获得焦点、被点击或对元素任何改变中触发，并圆滑地以动画效果改变CSS的属性值。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003etransition ：transition-property || transition-duration || transition-timing-function || transition-delay;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003etransition\u003c/code\u003e主要包含四个属性值：执行变换的属性：\u003ccode\u003etransition-property\u003c/code\u003e，变换延续的时间：\u003ccode\u003etransition-duration\u003c/code\u003e，在延续时间段，变换的速率变化：\u003ccode\u003etransition-timing-function\u003c/code\u003e，变换延迟时间：\u003ccode\u003etransition-delay\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e1. transition-property\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003etransition-property: none || all || property;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003etransition-property\u003c/code\u003e是用来指定当元素其中一个属性改变时执行\u003ccode\u003etransition\u003c/code\u003e效果。\u003c/p\u003e\n\u003cp\u003enone: 没有属性会获得过渡效果；\u003c/p\u003e\n\u003cp\u003eall: 所有属性都将获得过渡效果,\u003cstrong\u003e也是其默认值\u003c/strong\u003e；\u003c/p\u003e\n\u003cp\u003eproperty: 定义应用过渡效果的 CSS 属性名称列表，列表以逗号分隔。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e2. transition-duration\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003etransition-duration: time;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003etransition-duration\u003c/code\u003e是用来指定元素 转换过程的持续时间，取值time为数值，单位为s（秒）或者ms(毫秒)，其默认值是0，也就是变换时是即时的。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e3. transition-timing-function\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003etransition-timing-function: linear || ease || ease-in || ease-out || ease-in-out || cubic-\nbezier(n,n,n,n);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e以上具体取值含义如下：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e值\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003elinear\u003c/td\u003e\n\u003ctd\u003e规定以相同速度开始至结束的过渡效果。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eease\u003c/td\u003e\n\u003ctd\u003e规定慢速开始，然后变快，然后慢速结束的过渡效果。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eease-in\u003c/td\u003e\n\u003ctd\u003e规定以慢速开始的过渡效果。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eease-out\u003c/td\u003e\n\u003ctd\u003e规定以慢速结束的过渡效果。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eease-in-out\u003c/td\u003e\n\u003ctd\u003e规定以慢速开始和结束的过渡效果。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ecubic-bezier(\u003cem\u003en\u003c/em\u003e,\u003cem\u003en\u003c/em\u003e,\u003cem\u003en\u003c/em\u003e,\u003cem\u003en\u003c/em\u003e)\u003c/td\u003e\n\u003ctd\u003e在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 class=\"heading\"\u003e4. transition-delay\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003etransition-delay: time;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003etransition-delay\u003c/code\u003e是用来指定一个动画开始执行的时间，也就是说当改变元素属性值后多长时间开始执行\u003ccode\u003etransition\u003c/code\u003e效果，其取值time为数值，单位为s（秒）或者ms(毫秒)， 默认大小是\"0\"，也就是变换立即执行，没有延迟。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e5. 示例\u003c/h3\u003e\n\u003cp\u003ehtml代码\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"one\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ecss代码\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs css\" lang=\"css\"\u003e\u003cspan class=\"hljs-selector-class\"\u003e.one\u003c/span\u003e {\n        \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e100px\u003c/span\u003e;\n        \u003cspan class=\"hljs-attribute\"\u003eheight\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e100px\u003c/span\u003e;\n        \u003cspan class=\"hljs-attribute\"\u003emargin\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e200px\u003c/span\u003e auto;\n        \u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e#cd4a48\u003c/span\u003e;\n        \u003cspan class=\"hljs-attribute\"\u003e-webkit-transition\u003c/span\u003e: width, height \u003cspan class=\"hljs-number\"\u003e2s\u003c/span\u003e ease;\n        \u003cspan class=\"hljs-attribute\"\u003e-moz-transition\u003c/span\u003e: width, height \u003cspan class=\"hljs-number\"\u003e2s\u003c/span\u003e ease;\n        \u003cspan class=\"hljs-attribute\"\u003e-ms-transition\u003c/span\u003e: width, height \u003cspan class=\"hljs-number\"\u003e2s\u003c/span\u003e ease;\n        \u003cspan class=\"hljs-attribute\"\u003e-o-transition\u003c/span\u003e: width, height \u003cspan class=\"hljs-number\"\u003e2s\u003c/span\u003e ease;\n        \u003cspan class=\"hljs-attribute\"\u003etransition\u003c/span\u003e: width, height \u003cspan class=\"hljs-number\"\u003e2s\u003c/span\u003e ease;\n    }\n\n    \u003cspan class=\"hljs-selector-class\"\u003e.one\u003c/span\u003e\u003cspan class=\"hljs-selector-pseudo\"\u003e:hover\u003c/span\u003e {\n        \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e300px\u003c/span\u003e;\n        \u003cspan class=\"hljs-attribute\"\u003eheight\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e300px\u003c/span\u003e;\n    }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e效果：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/16092f2e42bcea2b?w=921\u0026amp;h=532\u0026amp;f=gif\u0026amp;s=8407\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e6. 注意事项\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e不是所有的CSS属性都支持\u003ccode\u003etransition\u003c/code\u003e，完整的列表查看\u003ca target=\"_blank\" href=\"http://oli.jp/2010/css-animatable-properties/\"\u003e这里\u003c/a\u003e，以及具体的\u003ca target=\"_blank\" href=\"http://leaverou.github.io/animatable/\"\u003e效果\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etransition\u003c/code\u003e需要明确知道，开始状态和结束状态的具体数值，才能计算出中间状态。比如，height从0px变化到100px，\u003ccode\u003etransition\u003c/code\u003e可以算出中间状态。但是，\u003ccode\u003etransition\u003c/code\u003e没法算出0px到auto的中间状态，也就是说，如果开始或结束的设置是height: auto，那么就不会产生动画效果。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etransition\u003c/code\u003e需要事件触发，所以没法在网页加载时自动发生。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etransition\u003c/code\u003e是一次性的，不能重复发生，除非一再触发。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 class=\"heading\"\u003e二、animation\u003c/h2\u003e\n\u003cp\u003e不同于\u003ccode\u003etransition\u003c/code\u003e只能定义首尾两个状态，\u003ccode\u003eanimation\u003c/code\u003e可以定义任意多的关键帧，因而能实现更复杂的动画效果。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eanimation: animation-name || animation-duration || animation-timing-function || animation-delay || animation-iteration-count || animation-direction\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003eanimation\u003c/code\u003e主要包含六个属性，具体含义如下：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e值\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cem\u003eanimation-name\u003c/em\u003e\u003c/td\u003e\n\u003ctd\u003e规定需要绑定到选择器的 keyframe 名称。。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cem\u003eanimation-duration\u003c/em\u003e\u003c/td\u003e\n\u003ctd\u003e规定完成动画所花费的时间，以秒或毫秒计。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cem\u003eanimation-timing-function\u003c/em\u003e\u003c/td\u003e\n\u003ctd\u003e规定动画的速度曲线。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cem\u003eanimation-delay\u003c/em\u003e\u003c/td\u003e\n\u003ctd\u003e规定在动画开始之前的延迟，默认值为0。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cem\u003eanimation-iteration-count\u003c/em\u003e\u003c/td\u003e\n\u003ctd\u003e规定动画应该播放的次数，默认值为1。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cem\u003eanimation-direction\u003c/em\u003e\u003c/td\u003e\n\u003ctd\u003e规定是否应该轮流反向播放动画，默认值是正向。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 class=\"heading\"\u003e1. keyframe\u003c/h3\u003e\n\u003cp\u003e在介绍\u003ccode\u003eanimation\u003c/code\u003e具体使用之前，要先介绍keyframe。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e@keyframes\u003c/code\u003e 让开发者通过指定动画中特定时间点必须展现的关键帧样式（或者说停留点）来控制CSS动画的中间环节。这让开发者能够控制动画中的更多细节而不是全部让浏览器自动处理。\u003c/p\u003e\n\u003cp\u003e要使用关键帧, 先创建一个带名称的\u003ccode\u003e@keyframes\u003c/code\u003e规则，以便后续使用 \u003ccode\u003eanimation-name\u003c/code\u003e这个属性来调用指定的\u003ccode\u003e@keyframes\u003c/code\u003e. 每个\u003ccode\u003e@keyframes\u003c/code\u003e 规则包含多个关键帧，也就是一段样式块语句，每个关键帧有一个百分比值作为名称，代表在动画进行中，在哪个阶段触发这个帧所包含的样式。\u003c/p\u003e\n\u003cp\u003e关键帧的编写顺序没有要求，最后只会根据百分比按由小到大的顺序触发。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e@keyframes animationname {keyframes-selector {css-styles;}}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e具体含义如下：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e值\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cem\u003eanimationname\u003c/em\u003e\u003c/td\u003e\n\u003ctd\u003e必需。定义动画的名称。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cem\u003ekeyframes-selector\u003c/em\u003e\u003c/td\u003e\n\u003ctd\u003e必需。动画时长的百分比。合法的值：0-100%from（与 0% 相同）to（与 100% 相同）\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cem\u003ecss-styles\u003c/em\u003e\u003c/td\u003e\n\u003ctd\u003e必需。一个或多个合法的 CSS 样式属性。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e示例：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs css\" lang=\"css\"\u003e@\u003cspan class=\"hljs-keyword\"\u003ekeyframes\u003c/span\u003e identifier {\n  0% { \u003cspan class=\"hljs-attribute\"\u003etop\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e0px\u003c/span\u003e}\n  50% { \u003cspan class=\"hljs-attribute\"\u003etop\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e30px\u003c/span\u003e; \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e20px\u003c/span\u003e; }\n  100% { \u003cspan class=\"hljs-attribute\"\u003etop\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e30px\u003c/span\u003e;}\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e2. 示例\u003c/h3\u003e\n\u003cp\u003ehtml代码\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"one\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ecss代码\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs css\" lang=\"css\"\u003e\u003cspan class=\"hljs-selector-class\"\u003e.one\u003c/span\u003e {\n        \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e100px\u003c/span\u003e;\n        \u003cspan class=\"hljs-attribute\"\u003eheight\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e100px\u003c/span\u003e;\n        \u003cspan class=\"hljs-attribute\"\u003emargin\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e200px\u003c/span\u003e auto;\n        \u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e#cd4a48\u003c/span\u003e;\n        \u003cspan class=\"hljs-attribute\"\u003eposition\u003c/span\u003e: relative;\n        \u003cspan class=\"hljs-attribute\"\u003eanimation\u003c/span\u003e: moveHover \u003cspan class=\"hljs-number\"\u003e5s\u003c/span\u003e ease-in-out \u003cspan class=\"hljs-number\"\u003e0.2s\u003c/span\u003e;\n\n    }\n\n\n    @\u003cspan class=\"hljs-keyword\"\u003ekeyframes\u003c/span\u003e moveHover {\n        0% {\n            \u003cspan class=\"hljs-attribute\"\u003etop\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e0px\u003c/span\u003e;\n            \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e0px\u003c/span\u003e;\n            \u003cspan class=\"hljs-attribute\"\u003ebackground\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e#cd4a48\u003c/span\u003e;\n        }\n        50% {\n            \u003cspan class=\"hljs-attribute\"\u003etop\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e200px\u003c/span\u003e;\n            \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e200px\u003c/span\u003e;\n            \u003cspan class=\"hljs-attribute\"\u003ebackground\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e#A48992\u003c/span\u003e;\n        }\n        100% {\n            \u003cspan class=\"hljs-attribute\"\u003etop\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e350px\u003c/span\u003e;\n            \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e350px\u003c/span\u003e;\n            \u003cspan class=\"hljs-attribute\"\u003ebackground\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e#FFB89A\u003c/span\u003e;\n        }\n    }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e效果：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/16092f2e4576db07?w=921\u0026amp;h=532\u0026amp;f=gif\u0026amp;s=14521\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e3. 其他属性\u003c/h3\u003e\n\u003cp\u003e除了上述主要用到的六个属性外，还要额外介绍两个属性。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eanimation-fill-mode\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e动画结束以后，会立即从结束状态跳回到起始状态。如果想让动画保持在结束状态，需要使用\u003ccode\u003eanimation-fill-mode\u003c/code\u003e属性。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eanimation-fill-mode: none || backwards || both\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003enone：默认值，回到动画没开始时的状态。\u003c/li\u003e\n\u003cli\u003eforwards：当动画完成后，保持最后一个属性值（在最后一个关键帧中定义）。\u003c/li\u003e\n\u003cli\u003ebackwards：在 \u003ccode\u003eanimation-delay\u003c/code\u003e所指定的一段时间内，在动画显示之前，应用开始属性值（在第一个关键帧中定义）。\u003c/li\u003e\n\u003cli\u003eboth: 根据\u003ccode\u003eanimation-direction\u003c/code\u003e轮流应用forwards和backwards规则。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eanimation-play-state\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e有时，动画播放过程中，会突然停止。这时，默认行为是跳回到动画的开始状态。\u003c/p\u003e\n\u003cp\u003e如果想让动画保持突然终止时的状态，就要使用\u003ccode\u003eanimation-play-state\u003c/code\u003e属性。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eanimation-play-state:running || paused\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003eanimation-play-state\u003c/code\u003e主要是用来控制元素动画的播放状态。其主要有两个值，running和paused其中running为默认值。通过paused将正在播放的动画停下了，通过running将暂停的动画重新播放，这个属性目前很少内核支持。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e三、transform\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003etransform\u003c/code\u003e就是变形，主要包括\u003cstrong\u003e旋转rotate\u003c/strong\u003e、\u003cstrong\u003e扭曲skew\u003c/strong\u003e、\u003cstrong\u003e缩放scale\u003c/strong\u003e和\u003cstrong\u003e移动translate\u003c/strong\u003e以及\u003cstrong\u003e矩阵变形matrix\u003c/strong\u003e。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003etransform: none || transform-functions\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003enone:表示不进么变换；transform-function表示一个或多个变换函数，以空格分开；换句话说就是我们同时对一个元素进行transform的多种属性操作，例如rotate、scale、translate三种。\u003c/p\u003e\n\u003cp\u003e主要的transform-function变换函数如下：\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e1. translate\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e值\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003etranslate(\u003cem\u003ex\u003c/em\u003e,\u003cem\u003ey\u003c/em\u003e)\u003c/td\u003e\n\u003ctd\u003e定义 2D 转换。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003etranslate3d(\u003cem\u003ex\u003c/em\u003e,\u003cem\u003ey\u003c/em\u003e,\u003cem\u003ez\u003c/em\u003e)\u003c/td\u003e\n\u003ctd\u003e定义 3D 转换。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003etranslateX(\u003cem\u003ex\u003c/em\u003e)\u003c/td\u003e\n\u003ctd\u003e定义转换，只是用 X 轴的值。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003etranslateY(\u003cem\u003ey\u003c/em\u003e)\u003c/td\u003e\n\u003ctd\u003e定义转换，只是用 Y 轴的值。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003etranslateZ(\u003cem\u003ez\u003c/em\u003e)\u003c/td\u003e\n\u003ctd\u003e定义 3D 转换，只是用 Z 轴的值。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 class=\"heading\"\u003e2. scale\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e值\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003escale(\u003cem\u003ex\u003c/em\u003e,\u003cem\u003ey\u003c/em\u003e)\u003c/td\u003e\n\u003ctd\u003e定义 2D 缩放转换。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003escale3d(\u003cem\u003ex\u003c/em\u003e,\u003cem\u003ey\u003c/em\u003e,\u003cem\u003ez\u003c/em\u003e)\u003c/td\u003e\n\u003ctd\u003e定义 3D 缩放转换。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003escaleX(\u003cem\u003ex\u003c/em\u003e)\u003c/td\u003e\n\u003ctd\u003e通过设置 X 轴的值来定义缩放转换。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003escaleY(\u003cem\u003ey\u003c/em\u003e)\u003c/td\u003e\n\u003ctd\u003e通过设置 Y 轴的值来定义缩放转换。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003escaleZ(\u003cem\u003ez\u003c/em\u003e)\u003c/td\u003e\n\u003ctd\u003e通过设置 Z 轴的值来定义 3D 缩放转换。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 class=\"heading\"\u003e3. rotate\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e值\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003erotate(\u003cem\u003eangle\u003c/em\u003e)\u003c/td\u003e\n\u003ctd\u003e定义 2D 旋转，在参数中规定角度。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003erotate3d(\u003cem\u003ex\u003c/em\u003e,\u003cem\u003ey\u003c/em\u003e,\u003cem\u003ez\u003c/em\u003e,\u003cem\u003eangle\u003c/em\u003e)\u003c/td\u003e\n\u003ctd\u003e定义 3D 旋转。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003erotateX(\u003cem\u003eangle\u003c/em\u003e)\u003c/td\u003e\n\u003ctd\u003e定义沿着 X 轴的 3D 旋转。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003erotateY(\u003cem\u003eangle\u003c/em\u003e)\u003c/td\u003e\n\u003ctd\u003e定义沿着 Y 轴的 3D 旋转。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003erotateZ(\u003cem\u003eangle\u003c/em\u003e)\u003c/td\u003e\n\u003ctd\u003e定义沿着 Z 轴的 3D 旋转。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 class=\"heading\"\u003e4. skew\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e值\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eskew(\u003cem\u003ex-angle\u003c/em\u003e,\u003cem\u003ey-angle\u003c/em\u003e)\u003c/td\u003e\n\u003ctd\u003e定义沿着 X 和 Y 轴的 2D 倾斜转换。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eskewX(\u003cem\u003eangle\u003c/em\u003e)\u003c/td\u003e\n\u003ctd\u003e定义沿着 X 轴的 2D 倾斜转换。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eskewY(\u003cem\u003eangle\u003c/em\u003e)\u003c/td\u003e\n\u003ctd\u003e定义沿着 Y 轴的 2D 倾斜转换。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 class=\"heading\"\u003e5. transform-origin\u003c/h3\u003e\n\u003cp\u003e以上变化的默认参照点是元素的中心点，不过可以通过\u003ccode\u003etransform-origin\u003c/code\u003e设置元素的参照点。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003etransform-origin: X || Y || Z\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e其中X，Y，Z对应三维坐标，X，Y，Z的值可以是em，px。此外，X，Y可以是百分值，其中X也可以是字符参数值left，center，right。Y和X一样除了百分值外还可以设置字符值top，center，bottom。\u003c/p\u003e\n\u003cp\u003e具体示例就不再写了，情况比较多，实现起来也比较简单。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e四、总结\u003c/h2\u003e\n\u003cp\u003e以上是关于CSS3中制作动画的三个属性，内容比较基础，不过却很实用。仅仅只需要CSS，即可实现一些较为简单的动画效果，省去了复杂的js代码。\u003c/p\u003e\n","buildTime":"1514377216.1506","__v":0}
{"_id":{"$oid":"5a4393dbf318702ac88cbd31"},"id":"5a4337daf265da43200384b9","author":{"$oid":"5a4393daf318702ac88cbd1e"},"title":"解析vue2.0的diff算法","meta":{"likeCount":0},"tag":[],"comment":[],"content":"\u003ch1 class=\"heading\"\u003e转载自 https://github.com/aooy/blog\u003c/h1\u003e\n\u003ch2 class=\"heading\"\u003e前言\u003c/h2\u003e\n\u003cp\u003evue2.0加入了virtual dom，有向react靠拢的意思。vue的diff位于patch.js文件中，我的一个小框架aoy也同样使用此算法，该算法来源于snabbdom，复杂度为O(n)。\n了解diff过程可以让我们更高效的使用框架。\n本文力求以图文并茂的方式来讲明这个diff的过程。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003evirtual dom\u003c/h2\u003e\n\u003cp\u003e如果不了解virtual dom，要理解diff的过程是比较困难的。虚拟dom对应的是真实dom， 使用document.CreateElement 和 document.CreateTextNode创建的就是真实节点。\u003c/p\u003e\n\u003cp\u003e我们可以做个试验。打印出一个空元素的第一层属性，可以看到标准让元素实现的东西太多了。如果每次都重新生成新的元素，对性能是巨大的浪费。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003evar mydiv = document.createElement(\u003cspan class=\"hljs-string\"\u003e'div'\u003c/span\u003e);\n\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(var k \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e mydiv ){\n  console.log(k)\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003evirtual dom就是解决这个问题的一个思路，到底什么是virtual dom呢？通俗易懂的来说就是用一个简单的对象去代替复杂的dom对象。\n举个简单的例子，我们在body里插入一个class为a的div。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003evar mydiv = document.createElement(\u003cspan class=\"hljs-string\"\u003e'div'\u003c/span\u003e);\nmydiv.className = \u003cspan class=\"hljs-string\"\u003e'a'\u003c/span\u003e;\ndocument.body.appendChild(mydiv);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e对于这个div我们可以用一个简单的对象mydivVirtual代表它，它存储了对应dom的一些重要参数，在改变dom之前，会先比较相应虚拟dom的数据，如果需要改变，才会将改变应用到真实dom上。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e//伪代码\nvar mydivVirtual = { \n  tagName: \u003cspan class=\"hljs-string\"\u003e'DIV'\u003c/span\u003e,\n  className: \u003cspan class=\"hljs-string\"\u003e'a'\u003c/span\u003e\n};\nvar newmydivVirtual = {\n   tagName: \u003cspan class=\"hljs-string\"\u003e'DIV'\u003c/span\u003e,\n   className: \u003cspan class=\"hljs-string\"\u003e'b'\u003c/span\u003e\n}\n\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(mydivVirtual.tagName !== newmydivVirtual.tagName || mydivVirtual.className  !== newmydivVirtual.className){\n   change(mydiv)\n}\n\n// 会执行相应的修改 mydiv.className = \u003cspan class=\"hljs-string\"\u003e'b'\u003c/span\u003e;\n//最后  \u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e'b'\u003c/span\u003e\u0026gt;\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e读到这里就会产生一个疑问，为什么不直接修改dom而需要加一层virtual dom呢？\u003c/h2\u003e\n\u003cp\u003e很多时候手工优化dom确实会比virtual dom效率高，对于比较简单的dom结构用手工优化没有问题，但当页面结构很庞大，结构很复杂时，手工优化会花去大量时间，而且可维护性也不高，不能保证每个人都有手工优化的能力。至此，virtual dom的解决方案应运而生，virtual dom很多时候都不是最优的操作，但它具有普适性，在效率、可维护性之间达平衡。\nvirtual dom 另一个重大意义就是提供一个中间层，js去写ui，ios安卓之类的负责渲染，就像reactNative一样。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e分析diff\u003c/h2\u003e\n\u003cp\u003e一篇相当经典的文章React’s diff algorithm中的图，react的diff其实和vue的diff大同小异。所以这张图能很好的解释过程。比较只会在同层级进行, 不会跨层级比较。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/1609695be49cbb21?w=377\u0026amp;h=199\u0026amp;f=png\u0026amp;s=9107\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n举个形象的例子。\u003cp\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;!-- 之前 --\u0026gt;\n\u0026lt;div\u0026gt;           \u0026lt;!-- 层级1 --\u0026gt;\n  \u0026lt;p\u0026gt;            \u0026lt;!-- 层级2 --\u0026gt;\n    \u0026lt;b\u0026gt; aoy \u0026lt;/b\u0026gt;   \u0026lt;!-- 层级3 --\u0026gt;   \n    \u0026lt;span\u0026gt;diff\u0026lt;/Span\u0026gt;\n  \u0026lt;/P\u0026gt; \n\u0026lt;/div\u0026gt;\n\n\u0026lt;!-- 之后 --\u0026gt;\n\u0026lt;div\u0026gt;            \u0026lt;!-- 层级1 --\u0026gt;\n  \u0026lt;p\u0026gt;             \u0026lt;!-- 层级2 --\u0026gt;\n      \u0026lt;b\u0026gt; aoy \u0026lt;/b\u0026gt;        \u0026lt;!-- 层级3 --\u0026gt;\n  \u0026lt;/p\u0026gt;\n  \u0026lt;span\u0026gt;diff\u0026lt;/Span\u0026gt;\n\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我们可能期望将\u0026lt; span\u0026gt;直接移动到\u0026lt; p\u0026gt;的后边，这是最优的操作。但是实际的diff操作是移除\u0026lt; p\u0026gt;里的\u0026lt; span\u0026gt;在创建一个新的\u0026lt; span\u0026gt;插到\u0026lt; p\u0026gt;的后边。\n因为新加的\u0026lt; span\u0026gt;在层级2，旧的在层级3，属于不同层级的比较。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e源码分析\u003c/h2\u003e\n\u003cp\u003e文中的代码位于aoy-diff中，已经精简了很多代码，留下最核心的部分。\u003c/p\u003e\n\u003cp\u003ediff的过程就是调用patch函数，就像打补丁一样修改真实dom\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e patch (oldVnode, vnode) {\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (sameVnode(oldVnode, vnode)) {\n        patchVnode(oldVnode, vnode)\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n        const oEl = oldVnode.el\n        \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e parentEle = api.parentNode(oEl)\n        createEle(vnode)\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (parentEle !== null) {\n            api.insertBefore(parentEle, vnode.el, api.nextSibling(oEl))\n            api.removeChild(parentEle, oldVnode.el)\n            oldVnode = null\n        }\n    }\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e vnode\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003epatch函数有两个参数，vnode和oldVnode，也就是新旧两个虚拟节点。在这之前，我们先了解完整的vnode都有什么属性，举个一个简单的例子:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// body下的 \u0026lt;div id=\u003cspan class=\"hljs-string\"\u003e\"v\"\u003c/span\u003e class=\u003cspan class=\"hljs-string\"\u003e\"classA\"\u003c/span\u003e\u0026gt;\u0026lt;div\u0026gt; 对应的 oldVnode 就是\n\n{\n  el:  div  //对真实的节点的引用，本例中就是document.querySelector(\u003cspan class=\"hljs-string\"\u003e'#id.classA'\u003c/span\u003e)\n  tagName: \u003cspan class=\"hljs-string\"\u003e'DIV'\u003c/span\u003e,   //节点的标签\n  sel: \u003cspan class=\"hljs-string\"\u003e'div#v.classA'\u003c/span\u003e  //节点的选择器\n  data: null,       // 一个存储节点属性的对象，对应节点的el[prop]属性，例如onclick , style\n  children: [], //存储子节点的数组，每个子节点也是vnode结构\n  text: null,    //如果是文本节点，对应文本节点的textContent，否则为null\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e需要注意的是，el属性引用的是此 virtual dom对应的真实dom，patch的vnode参数的el最初是null，因为patch之前它还没有对应的真实dom。\u003c/p\u003e\n\u003cp\u003e来到patch的第一部分，\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (sameVnode(oldVnode, vnode)) {\n    patchVnode(oldVnode, vnode)\n} \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003esameVnode函数就是看这两个节点是否值得比较，代码相当简单：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e sameVnode(oldVnode, vnode){\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e vnode.key === oldVnode.key \u0026amp;\u0026amp; vnode.sel === oldVnode.sel\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e两个vnode的key和sel相同才去比较它们，比如p和span，div.classA和div.classB都被认为是不同结构而不去比较它们。\u003c/p\u003e\n\u003cp\u003e如果值得比较会执行patchVnode(oldVnode, vnode)，稍后会详细讲patchVnode函数。\u003c/p\u003e\n\u003cp\u003e当节点不值得比较，进入else中\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n        const oEl = oldVnode.el\n        \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e parentEle = api.parentNode(oEl)\n        createEle(vnode)\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (parentEle !== null) {\n            api.insertBefore(parentEle, vnode.el, api.nextSibling(oEl))\n            api.removeChild(parentEle, oldVnode.el)\n            oldVnode = null\n        }\n    }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e过程如下：\u003c/p\u003e\n\u003cp\u003e取得oldvnode.el的父节点，parentEle是真实dom\ncreateEle(vnode)会为vnode创建它的真实dom，令vnode.el =真实dom\nparentEle将新的dom插入，移除旧的dom\n当不值得比较时，新节点直接把老节点整个替换了\n最后\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e vnode\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003epatch最后会返回vnode，vnode和进入patch之前的不同在哪？\n没错，就是vnode.el，唯一的改变就是之前vnode.el = null, 而现在它引用的是对应的真实dom。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003evar oldVnode = patch (oldVnode, vnode)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e至此完成一个patch过程。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003epatchVnode\u003c/h2\u003e\n\u003cp\u003e两个节点值得比较时，会调用patchVnode函数\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003epatchVnode (oldVnode, vnode) {\n    const el = vnode.el = oldVnode.el\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e i, oldCh = oldVnode.children, ch = vnode.children\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (oldVnode === vnode) \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (oldVnode.text !== null \u0026amp;\u0026amp; vnode.text !== null \u0026amp;\u0026amp; oldVnode.text !== vnode.text) {\n        api.setTextContent(el, vnode.text)\n    }\u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n        updateEle(el, vnode, oldVnode)\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (oldCh \u0026amp;\u0026amp; ch \u0026amp;\u0026amp; oldCh !== ch) {\n            updateChildren(el, oldCh, ch)\n        }\u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (ch){\n            createEle(vnode) //create el\u003cspan class=\"hljs-string\"\u003e's children dom\n        }else if (oldCh){\n            api.removeChildren(el)\n        }\n    }\n}\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003econst el = vnode.el = oldVnode.el 这是很重要的一步，让vnode.el引用到现在的真实dom，当el修改时，vnode.el会同步变化。\u003c/p\u003e\n\u003cp\u003e节点的比较有5种情况\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e1.if (oldVnode === vnode)，他们的引用一致，可以认为没有变化。\u003c/h3\u003e\n\u003ch3 class=\"heading\"\u003e2.if(oldVnode.text !== null \u0026amp;\u0026amp; vnode.text !== null \u0026amp;\u0026amp; oldVnode.text !== vnode.text)，文本节点的比较，需要修改，则会调用Node.textContent = vnode.text。\u003c/h3\u003e\n\u003ch3 class=\"heading\"\u003e3.if( oldCh \u0026amp;\u0026amp; ch \u0026amp;\u0026amp; oldCh !== ch ), 两个节点都有子节点，而且它们不一样，这样我们会调用updateChildren函数比较子节点，这是diff的核心，后边会讲到。\u003c/h3\u003e\n\u003ch3 class=\"heading\"\u003e4.else if (ch)，只有新的节点有子节点，调用createEle(vnode)，vnode.el已经引用了老的dom节点，createEle函数会在老dom节点上添加子节点。\u003c/h3\u003e\n\u003ch3 class=\"heading\"\u003e5.else if (oldCh)，新节点没有子节点，老节点有子节点，直接删除老节点。\u003c/h3\u003e\n\u003ch2 class=\"heading\"\u003eupdateChildren\u003c/h2\u003e\n\u003cp\u003e代码很密集，为了形象的描述这个过程，可以看看这张图。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eupdateChildren (parentElm, oldCh, newCh) {\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e oldStartIdx = 0, newStartIdx = 0\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e oldEndIdx = oldCh.length - 1\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e oldStartVnode = oldCh[0]\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e oldEndVnode = oldCh[oldEndIdx]\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e newEndIdx = newCh.length - 1\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e newStartVnode = newCh[0]\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e newEndVnode = newCh[newEndIdx]\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e oldKeyToIdx\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e idxInOld\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e elmToMove\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e before\n    \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e (oldStartIdx \u0026lt;= oldEndIdx \u0026amp;\u0026amp; newStartIdx \u0026lt;= newEndIdx) {\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (oldStartVnode == null) {   //对于vnode.key的比较，会把oldVnode = null\n                oldStartVnode = oldCh[++oldStartIdx] \n            }\u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (oldEndVnode == null) {\n                oldEndVnode = oldCh[--oldEndIdx]\n            }\u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (newStartVnode == null) {\n                newStartVnode = newCh[++newStartIdx]\n            }\u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (newEndVnode == null) {\n                newEndVnode = newCh[--newEndIdx]\n            }\u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (sameVnode(oldStartVnode, newStartVnode)) {\n                patchVnode(oldStartVnode, newStartVnode)\n                oldStartVnode = oldCh[++oldStartIdx]\n                newStartVnode = newCh[++newStartIdx]\n            }\u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (sameVnode(oldEndVnode, newEndVnode)) {\n                patchVnode(oldEndVnode, newEndVnode)\n                oldEndVnode = oldCh[--oldEndIdx]\n                newEndVnode = newCh[--newEndIdx]\n            }\u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (sameVnode(oldStartVnode, newEndVnode)) {\n                patchVnode(oldStartVnode, newEndVnode)\n                api.insertBefore(parentElm, oldStartVnode.el, api.nextSibling(oldEndVnode.el))\n                oldStartVnode = oldCh[++oldStartIdx]\n                newEndVnode = newCh[--newEndIdx]\n            }\u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (sameVnode(oldEndVnode, newStartVnode)) {\n                patchVnode(oldEndVnode, newStartVnode)\n                api.insertBefore(parentElm, oldEndVnode.el, oldStartVnode.el)\n                oldEndVnode = oldCh[--oldEndIdx]\n                newStartVnode = newCh[++newStartIdx]\n            }\u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n               // 使用key时的比较\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (oldKeyToIdx === undefined) {\n                    oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx) // 有key生成index表\n                }\n                idxInOld = oldKeyToIdx[newStartVnode.key]\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!idxInOld) {\n                    api.insertBefore(parentElm, createEle(newStartVnode).el, oldStartVnode.el)\n                    newStartVnode = newCh[++newStartIdx]\n                }\n                \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n                    elmToMove = oldCh[idxInOld]\n                    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (elmToMove.sel !== newStartVnode.sel) {\n                        api.insertBefore(parentElm, createEle(newStartVnode).el, oldStartVnode.el)\n                    }\u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n                        patchVnode(elmToMove, newStartVnode)\n                        oldCh[idxInOld] = null\n                        api.insertBefore(parentElm, elmToMove.el, oldStartVnode.el)\n                    }\n                    newStartVnode = newCh[++newStartIdx]\n                }\n            }\n        }\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (oldStartIdx \u0026gt; oldEndIdx) {\n            before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].el\n            addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx)\n        }\u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (newStartIdx \u0026gt; newEndIdx) {\n            removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx)\n        }\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/160969c05793e882?w=1215\u0026amp;h=920\u0026amp;f=png\u0026amp;s=36232\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n过程可以概括为：oldCh和newCh各有两个头尾的变量StartIdx和EndIdx，它们的2个变量相互比较，一共有4种比较方式。如果4种比较都没匹配，如果设置了key，就会用key进行比较，在比较的过程中，变量会往中间靠，一旦StartIdx\u0026gt;EndIdx表明oldCh和newCh至少有一个已经遍历完了，就会结束比较。\u003cp\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e具体的diff分析\u003c/h2\u003e\n\u003cp\u003e设置key和不设置key的区别：\n不设key，newCh和oldCh只会进行头尾两端的相互比较，设key后，除了头尾两端的比较外，还会从用key生成的对象oldKeyToIdx中查找匹配的节点，所以为节点设置key可以更高效的利用dom。\u003c/p\u003e\n\u003cp\u003ediff的遍历过程中，只要是对dom进行的操作都调用api.insertBefore，api.insertBefore只是原生insertBefore的简单封装。\n比较分为两种，一种是有vnode.key的，一种是没有的。但这两种比较对真实dom的操作是一致的。\u003c/p\u003e\n\u003cp\u003e对于与sameVnode(oldStartVnode, newStartVnode)和sameVnode(oldEndVnode,newEndVnode)为true的情况，不需要对dom进行移动。\u003c/p\u003e\n\u003cp\u003e总结遍历过程，有3种dom操作：\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003e1.当oldStartVnode，newEndVnode值得比较，说明oldStartVnode.el跑到oldEndVnode.el的后边了\u003c/h4\u003e\n\u003cp\u003e图中假设startIdx遍历到1。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/160969cd5acdba54?w=980\u0026amp;h=302\u0026amp;f=png\u0026amp;s=24165\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003e2.当oldEndVnode，newStartVnode值得比较，说明 oldEndVnode.el跑到了newStartVnode.el的前边。\u003c/h4\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/160969d1490322b6?w=950\u0026amp;h=311\u0026amp;f=png\u0026amp;s=23877\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003e3.newCh中的节点oldCh里没有， 将新节点插入到oldStartVnode.el的前边。\u003c/h4\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/160969d560c9daae?w=950\u0026amp;h=581\u0026amp;f=png\u0026amp;s=29889\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n在结束时，分为两种情况：\u003cp\u003e\u003c/p\u003e\n\u003ch5 class=\"heading\"\u003e1.oldStartIdx \u0026gt; oldEndIdx，可以认为oldCh先遍历完。当然也有可能newCh此时也正好完成了遍历，统一都归为此类。此时newStartIdx和newEndIdx之间的vnode是新增的，调用addVnodes，把他们全部插进before的后边，before很多时候是为null的。addVnodes调用的是insertBefore操作dom节点，我们看看insertBefore的文档：parentElement.insertBefore(newElement, referenceElement)如果referenceElement为null则newElement将被插入到子节点的末尾。如果newElement已经在DOM树中，newElement首先会从DOM树中移除。所以before为null，newElement将被插入到子节点的末尾\u003c/h5\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/160969e067d223cf?w=1156\u0026amp;h=539\u0026amp;f=png\u0026amp;s=40289\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch5 class=\"heading\"\u003e2.newStartIdx \u0026gt; newEndIdx，可以认为newCh先遍历完。此时oldStartIdx和oldEndIdx之间的vnode在新的子节点里已经不存在了，调用removeVnodes将它们从dom里删除。\u003c/h5\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/160969e419005f8f?w=1149\u0026amp;h=640\u0026amp;f=png\u0026amp;s=40435\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003e下面举个例子，画出diff完整的过程，每一步dom的变化都用不同颜色的线标出。\u003c/h4\u003e\n\u003ch5 class=\"heading\"\u003e1.a,b,c,d,e假设是4个不同的元素，我们没有设置key时，b没有复用，而是直接创建新的，删除旧的。\u003c/h5\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/160969efaa466285?w=1038\u0026amp;h=836\u0026amp;f=png\u0026amp;s=94143\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch5 class=\"heading\"\u003e2.当我们给4个元素加上唯一key时，b得到了的复用。\u003c/h5\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/160969f329a5e746?w=1038\u0026amp;h=828\u0026amp;f=png\u0026amp;s=92033\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e总结\u003c/h2\u003e\n\u003ch3 class=\"heading\"\u003e尽量不要跨层级的修改dom\u003c/h3\u003e\n\u003ch3 class=\"heading\"\u003e设置key可以最大化的利用节点\u003c/h3\u003e\n\u003ch3 class=\"heading\"\u003e不要盲目相信diff的效率，在必要时可以手工优化\u003c/h3\u003e\n\u003ch1 class=\"heading\"\u003e转载自 https://github.com/aooy/blog\u003c/h1\u003e\n","buildTime":"1514377929.2356","__v":0}
{"_id":{"$oid":"5a4393dbf318702ac88cbd32"},"id":"5a422b036fb9a045211ef789","author":{"$oid":"5a4393daf318702ac88cbd24"},"title":"前端模块化，AMD与CMD的区别","meta":{"likeCount":0},"tag":["JavaScript","前端","RequireJS","浏览器"],"comment":[],"content":"\u003cdiv\u003e\u003cdiv\u003e原创 2016年08月03日 17:15:51\u003c/div\u003e\u003cul\u003e\u003cli\u003e标签：\u003c/li\u003e\u003cli\u003e\u003ca href=\"http://so.csdn.net/so/search/s.do?q=javascript\u0026amp;t=blog\"\u003ejavascript\u003c/a\u003e /\u003c/li\u003e\u003cli\u003e\u003ca href=\"http://so.csdn.net/so/search/s.do?q=%E6%A8%A1%E5%9D%97%E5%8C%96\u0026amp;t=blog\"\u003e模块化\u003c/a\u003e /\u003c/li\u003e\u003cli\u003e\u003ca href=\"http://so.csdn.net/so/search/s.do?q=%E5%89%8D%E7%AB%AF\u0026amp;t=blog\"\u003e前端\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli\u003e\u003cdiv\u003e\u003ci\u003e\u003c/i\u003e21234\u003c/div\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cp\u003e最近在研究cmd和amd，在网上看到一篇不错的文章，整理下看看。 \u003cbr\u003e在JavaScript发展初期就是为了实现简单的页面交互逻辑，寥寥数语即可；如今CPU、浏览器性能得到了极大的提升，很多页面逻辑迁移到了客户端（表单验证等），随着web2.0时代的到来，Ajax技术得到广泛应用，jQuery等前端库层出不穷，前端代码日益膨胀\u003c/p\u003e\u003cp\u003e这时候JavaScript作为嵌入式的脚本语言的定位动摇了，JavaScript却没有为组织代码提供任何明显帮助，甚至没有类的概念，更不用说模块（module）了，JavaScript极其简单的代码组织规范不足以驾驭如此庞大规模的代码\u003c/p\u003e\u003ch2\u003e模块\u003c/h2\u003e\u003cp\u003e既然JavaScript不能handle如此大规模的代码，我们可以借鉴一下其它语言是怎么处理大规模程序设计的，在Java中有一个重要带概念——package，逻辑上相关的代码组织到同一个包内，包内是一个相对独立的王国，不用担心命名冲突什么的，那么外部如果使用呢？直接import对应的package即可\u003c/p\u003e\u003cp\u003eimport java.util.ArrayList; \u003cbr\u003e遗憾的是JavaScript在设计时定位原因，没有提供类似的功能，开发者需要模拟出类似的功能，来隔离、组织复杂的JavaScript代码，我们称为模块化。\u003c/p\u003e\u003cp\u003e一个模块就是实现特定功能的文件，有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。模块开发需要遵循一定的规范，各行其是就都乱套了\u003c/p\u003e\u003cp\u003e规范形成的过程是痛苦的，前端的先驱在刀耕火种、茹毛饮血的阶段开始，发展到现在初具规模，简单了解一下这段不凡的历程\u003c/p\u003e\u003cp\u003e\u003cb\u003e函数封装\u003c/b\u003e\u003c/p\u003e\u003cp\u003e我们在讲函数的时候提到，函数一个功能就是实现特定逻辑的一组语句打包，而且JavaScript的作用域就是基于函数的，所以把函数作为模块化的第一步是很自然的事情，在一个文件里面编写几个相关函数就是最开始的模块了\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efn1\u003c/span\u003e\u003c/span\u003e(){\n    statement\n}\n\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efn2\u003c/span\u003e\u003c/span\u003e(){\n    statement\n}1234567\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这样在需要的以后夹在函数所在文件，调用函数就可以了\u003c/p\u003e\u003cp\u003e这种做法的缺点很明显：污染了全局变量，无法保证不与其他模块发生变量名冲突，而且模块成员之间没什么关系。\u003c/p\u003e\u003cp\u003e\u003cb\u003e对象\u003c/b\u003e\u003c/p\u003e\u003cp\u003e为了解决上面问题，对象的写法应运而生，可以把所有的模块成员封装在一个对象中\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003evar myModule = {\n    var1: 1,\n\n    var2: 2,\n\n    fn1: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e(){\n\n    },\n\n    fn2: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e(){\n\n    }\n}12345678910111213\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这样我们在希望调用模块的时候引用对应文件，然后\u003c/p\u003e\u003cp\u003emyModule.fn2(); \u003cbr\u003e这样避免了变量污染，只要保证模块名唯一即可，同时同一模块内的成员也有了关系\u003c/p\u003e\u003cp\u003e看似不错的解决方案，但是也有缺陷，外部可以随意修改内部成员\u003c/p\u003e\u003cp\u003emyModel.var1 = 100; \u003cbr\u003e这样就会产生意外的安全问题\u003c/p\u003e\u003cp\u003e\u003cb\u003e立即执行函数\u003c/b\u003e\u003c/p\u003e\u003cp\u003e可以通过立即执行函数，来达到隐藏细节的目的\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003evar myModule = (\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e(){\n    var var1 = 1;\n    var var2 = 2;\n\n    \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efn1\u003c/span\u003e\u003c/span\u003e(){\n\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efn2\u003c/span\u003e\u003c/span\u003e(){\n\n    }\n\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e {\n        fn1: fn1,\n        fn2: fn2\n    };\n})();1234567891011121314151617\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这样在模块外部无法修改我们没有暴露出来的变量、函数\u003c/p\u003e\u003cp\u003e上述做法就是我们模块化的基础，目前，通行的JavaScript模块规范主要有两种：CommonJS和AMD\u003c/p\u003e\u003cp\u003e\u003cb\u003eCommonJS\u003c/b\u003e\u003c/p\u003e\u003cp\u003e我们先从CommonJS谈起，因为在网页端没有模块化编程只是页面JavaScript逻辑复杂，但也可以工作下去，在服务器端却一定要有模块，所以虽然JavaScript在web端发展这么多年，第一个流行的模块化规范却由服务器端的JavaScript应用带来，CommonJS规范是由NodeJS发扬光大，这标志着JavaScript模块化编程正式登上舞台。\u003c/p\u003e\u003cp\u003e1、定义模块 \u003cbr\u003e根据CommonJS规范，一个单独的文件就是一个模块。每一个模块都是一个单独的作用域，也就是说，在该模块内部定义的变量，无法被其他模块读取，除非定义为global对象的属性\u003c/p\u003e\u003cp\u003e2、模块输出： \u003cbr\u003e模块只有一个出口，module.exports对象，我们需要把模块希望输出的内容放入该对象\u003c/p\u003e\u003cp\u003e3、加载模块： \u003cbr\u003e加载模块使用require方法，该方法读取一个文件并执行，返回文件内部的module.exports对象\u003c/p\u003e\u003cp\u003e看个例子\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e//模块定义 myModel.js\n\nvar name = \u003cspan class=\"hljs-string\"\u003e'Byron'\u003c/span\u003e;\n\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003eprintName\u003c/span\u003e\u003c/span\u003e(){\n    console.log(name);\n}\n\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eprint\u003c/span\u003eFullName(firstName){\n    console.log(firstName + name);\n}\n\nmodule.exports = {\n    \u003cspan class=\"hljs-built_in\"\u003eprint\u003c/span\u003eName: \u003cspan class=\"hljs-built_in\"\u003eprint\u003c/span\u003eName,\n    \u003cspan class=\"hljs-built_in\"\u003eprint\u003c/span\u003eFullName: \u003cspan class=\"hljs-built_in\"\u003eprint\u003c/span\u003eFullName\n}\n\n//加载模块\n\nvar nameModule = require(\u003cspan class=\"hljs-string\"\u003e'./myModel.js'\u003c/span\u003e);\n\nnameModule.printName();12345678910111213141516171819202122\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e不同的实现对require时的路径有不同要求，一般情况可以省略js拓展名，可以使用相对路径，也可以使用绝对路径，甚至可以省略路径直接使用模块名（前提是该模块是系统内置模块）\u003c/p\u003e\u003cp\u003e\u003cb\u003e尴尬的浏览器\u003c/b\u003e\u003c/p\u003e\u003cp\u003e仔细看上面的代码，会发现require是同步的。模块系统需要同步读取模块文件内容，并编译执行以得到模块接口。\u003c/p\u003e\u003cp\u003e这在服务器端实现很简单，也很自然，然而， 想在浏览器端实现问题却很多。\u003c/p\u003e\u003cp\u003e浏览器端，加载JavaScript最佳、最容易的方式是在document中插入script 标签。但脚本标签天生异步，传统CommonJS模块在浏览器环境中无法正常加载。\u003c/p\u003e\u003cp\u003e解决思路之一是，开发一个服务器端组件，对模块代码作静态分析，将模块与它的依赖列表一起返回给浏览器端。 这很好使，但需要服务器安装额外的组件，并因此要调整一系列底层架构。\u003c/p\u003e\u003cp\u003e另一种解决思路是，用一套标准模板来封装模块定义，但是对于模块应该怎么定义和怎么加载，又产生的分歧：\u003c/p\u003e\u003ch2\u003eAMD\u003c/h2\u003e\u003cp\u003eAMD 即Asynchronous Module Definition，中文名是异步模块定义的意思。它是一个在浏览器端模块化开发的规范\u003c/p\u003e\u003cp\u003e由于不是JavaScript原生支持，使用AMD规范进行页面开发需要用到对应的库函数，也就是大名鼎鼎RequireJS，实际上AMD 是 RequireJS 在推广过程中对模块定义的规范化的产出\u003c/p\u003e\u003cp\u003erequireJS主要解决两个问题\u003c/p\u003e\u003cp\u003e1、多个js文件可能有依赖关系，被依赖的文件需要早于依赖它的文件加载到浏览器 \u003cbr\u003e2、js加载的时候浏览器会停止页面渲染，加载文件越多，页面失去响应时间越长 \u003cbr\u003e看一个使用requireJS的例子\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e// 定义模块 myModule.js\ndefine([\u003cspan class=\"hljs-string\"\u003e'dependency'\u003c/span\u003e], \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e(){\n    var name = \u003cspan class=\"hljs-string\"\u003e'Byron'\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003eprintName\u003c/span\u003e\u003c/span\u003e(){\n        console.log(name);\n    }\n\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e {\n        \u003cspan class=\"hljs-built_in\"\u003eprint\u003c/span\u003eName: \u003cspan class=\"hljs-built_in\"\u003eprint\u003c/span\u003eName\n    };\n});\n\n// 加载模块\nrequire([\u003cspan class=\"hljs-string\"\u003e'myModule'\u003c/span\u003e], \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (my){\n　 my.printName();\n});12345678910111213141516\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cb\u003e语法\u003c/b\u003e\u003c/p\u003e\u003cp\u003erequireJS定义了一个函数 define，它是全局变量，用来定义模块\u003c/p\u003e\u003cp\u003edefine(id?, dependencies?, factory);\u003c/p\u003e\u003col\u003e\u003cli\u003eid：可选参数，用来定义模块的标识，如果没有提供该参数，脚本文件名（去掉拓展名）\u003c/li\u003e\u003cli\u003edependencies：是一个当前模块依赖的模块名称数组\u003c/li\u003e\u003cli\u003efactory：工厂方法，模块初始化要执行的函数或对象。如果为函数，它应该只被执行一次。如果是对象，此对象应该为模块的输出值 \u003cbr\u003e在页面上使用require函数加载模块\u003c/li\u003e\u003c/ol\u003e\u003cp\u003erequire([dependencies], function(){}); \u003cbr\u003erequire()函数接受两个参数\u003c/p\u003e\u003col\u003e\u003cli\u003e第一个参数是一个数组，表示所依赖的模块\u003c/li\u003e\u003cli\u003e第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会以参数形式传入该函数，从而在回调函数内部就可以使用这些模块\u003c/li\u003e\u003c/ol\u003e\u003cp\u003erequire()函数在加载依赖的函数的时候是异步加载的，这样浏览器不会失去响应，它指定的回调函数，只有前面的模块都加载成功后，才会运行，解决了依赖性的问题。\u003c/p\u003e\u003ch2\u003eCMD\u003c/h2\u003e\u003cp\u003eCMD 即Common Module Definition通用模块定义，CMD规范是国内发展出来的，就像AMD有个requireJS，CMD有个浏览器的实现SeaJS，SeaJS要解决的问题和requireJS一样，只不过在模块定义方式和模块加载（可以说运行、解析）时机上有所不同 \u003cbr\u003e\u003cb\u003e语法\u003c/b\u003e \u003cbr\u003eSea.js 推崇一个模块一个文件，遵循统一的写法 \u003cbr\u003edefine(id?, deps?, factory) \u003cbr\u003e因为CMD推崇\u003c/p\u003e\u003col\u003e\u003cli\u003e一个文件一个模块，所以经常就用文件名作为模块id\u003c/li\u003e\u003cli\u003eCMD推崇依赖就近，所以一般不在define的参数中写依赖，在factory中写\u003c/li\u003e\u003c/ol\u003e\u003cp\u003efactory是一个函数，有三个参数，function(require, exports, module)\u003c/p\u003e\u003col\u003e\u003cli\u003erequire 是一个方法，接受 模块标识 作为唯一参数，用来获取其他模块提供的接口：require(id)\u003c/li\u003e\u003cli\u003eexports 是一个对象，用来向外提供模块接口\u003c/li\u003e\u003cli\u003emodule 是一个对象，上面存储了与当前模块相关联的一些属性和方法\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e看个例子：\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e// 定义模块  myModule.js\ndefine(\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(require, exports, module) {\n  var $ = require(\u003cspan class=\"hljs-string\"\u003e'jquery.js'\u003c/span\u003e)\n  $(\u003cspan class=\"hljs-string\"\u003e'div'\u003c/span\u003e).addClass(\u003cspan class=\"hljs-string\"\u003e'active'\u003c/span\u003e);\n});\n\n// 加载模块\nseajs.use([\u003cspan class=\"hljs-string\"\u003e'myModule.js'\u003c/span\u003e], \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(my){\n\n});12345678910\u003c/code\u003e\u003c/pre\u003e\u003ch2\u003eAMD与CMD区别\u003c/h2\u003e\u003cp\u003e关于这两个的区别网上可以搜出一堆文章，简单总结一下\u003c/p\u003e\u003cp\u003e最明显的区别就是在模块定义时对依赖的处理不同\u003c/p\u003e\u003cp\u003e\u003cb\u003e1、AMD推崇依赖前置，在定义模块的时候就要声明其依赖的模块\u003c/b\u003e \u003cbr\u003e\u003cb\u003e2、CMD推崇就近依赖，只有在用到某个模块的时候再去require\u003c/b\u003e \u003cbr\u003e这种区别各有优劣，只是语法上的差距，而且requireJS和SeaJS都支持对方的写法\u003c/p\u003e\u003cp\u003eAMD和CMD最大的区别是对依赖模块的执行时机处理不同，注意不是加载的时机或者方式不同\u003c/p\u003e\u003cp\u003e很多人说requireJS是异步加载模块，SeaJS是同步加载模块，这么理解实际上是不准确的，其实加载模块都是异步的，只不过AMD依赖前置，js可以方便知道依赖模块是谁，立即加载，而CMD就近依赖，需要使用把模块变为字符串解析一遍才知道依赖了那些模块，这也是很多人诟病CMD的一点，牺牲性能来带来开发的便利性，实际上解析模块用的时间短到可以忽略\u003c/p\u003e\u003cp\u003e为什么我们说两个的区别是依赖模块执行时机不同，为什么很多人认为ADM是异步的，CMD是同步的（除了名字的原因。。。）\u003c/p\u003e\u003cp\u003e同样都是异步加载模块，AMD在加载模块完成后就会执行改模块，所有模块都加载执行完后会进入require的回调函数，执行主逻辑，这样的效果就是依赖模块的执行顺序和书写顺序不一定一致，看网络速度，哪个先下载下来，哪个先执行，但是主逻辑一定在所有依赖加载完成后才执行\u003c/p\u003e\u003cp\u003eCMD加载完某个依赖模块后并不执行，只是下载而已，在所有依赖模块加载完成后进入主逻辑，遇到require语句的时候才执行对应的模块，这样模块的执行顺序和书写顺序是完全一致的\u003c/p\u003e\u003cp\u003e这也是很多人说AMD用户体验好，因为没有延迟，依赖模块提前执行了，CMD性能好，因为只有用户需要的时候才执行的原因\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e","buildTime":"1514376904.144","__v":0}
{"_id":{"$oid":"5a43940c4d03f52390c25ea0"},"id":"5a40bf81f265da432b4b0d67","author":{"$oid":"5a43940c4d03f52390c25e9c"},"title":" 2017 JavaScript 主流框架性能总结 ","meta":{"likeCount":0},"tag":["Angular.js","React.js","Vue.js","JavaScript","前端框架"],"comment":[],"content":"\u003cblockquote\u003e\n\u003cp\u003eupdate: 更新了图表\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 class=\"heading\"\u003e前言\u003c/h3\u003e\n\u003cp\u003e作为一名JavaScript开发者，你也许已经接触到了众多框架，甚至在众多框架之中你已经熟练掌握了一两个。之前我偏爱框架，它降低了我的开发难度。但是在经历了那么多优秀的前端的概念变革，从Virtual-DOM到状态管理，我也在想，对于框架的本身，它们的性能到底如何，对于不同类型的操作的开销又是怎样的，本文将对主流框架进行性能比对，并且总结之间的性能差异。\u003c/p\u003e\n\u003cp\u003e使用环境：MacBook Pro 15 (2,5 GHz i7, 16 GB RAM, OSX 10.13.1, Chrome 62.0.3202.94 (64-bit))\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e将要上场的框架们\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003evanillajs - 主神的存在，无处不在，无所不能的框架，大量运用于各种主流网站的开发\u003c/li\u003e\n\u003cli\u003ereact - 脸书的儿子，对外一直宣称自己的没满岁，在大家认为它没希望长到一岁的时候，一下子长到了十五岁\u003c/li\u003e\n\u003cli\u003eangularJS - 谷歌爸爸的长子，虽然还在维护，但是因为弟弟们的诞生，热度大不如前\u003c/li\u003e\n\u003cli\u003eangular - 谷歌爸爸在生了长子后，觉得这届儿子不行，我要再造几个，现在编号第五的老四刚刚诞生\u003c/li\u003e\n\u003cli\u003evue - \u003cs\u003e来自东方的神秘力量\u003c/s\u003e，框架的后起之秀，不过总是会和以上的框架们比较，构成了前端娱乐圈主要戏码\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 class=\"heading\"\u003e在使用KEY的情况下\u003c/h3\u003e\n\u003cp\u003e把DOM元素和数据联系的时候，数据变化，key也会更新。\u003c/p\u003e\n\u003cp\u003e（数据表示：平均ms±偏差ms(相对于最快的倍数)）\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e测试项目\u003c/th\u003e\n\u003cth\u003evanillajs\u003c/th\u003e\n\u003cth\u003evue-v2.5.3\u003c/th\u003e\n\u003cth\u003eangular-v5.0.0\u003c/th\u003e\n\u003cth\u003ereact-v16.1.0\u003c/th\u003e\n\u003cth\u003eangular-v1.6.3\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003e创建行\u003c/strong\u003e：\u003cbr\u003e在页面载入之后创建1000行内容。\u003c/td\u003e\n\u003ctd\u003e137.8±9.9(1.0)\u003c/td\u003e\n\u003ctd\u003e169.2±3.6(1.2)\u003c/td\u003e\n\u003ctd\u003e185.7±7.8(1.3)\u003c/td\u003e\n\u003ctd\u003e201.2±12.1(1.5)\u003c/td\u003e\n\u003ctd\u003e222.9±8.1(1.6)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003e更新行\u003c/strong\u003e：\u003cbr\u003e更新所有1000行的内容。\u003c/td\u003e\n\u003ctd\u003e155.7±5.4(1.0)\u003c/td\u003e\n\u003ctd\u003e161.8±3.9(1.0)\u003c/td\u003e\n\u003ctd\u003e179.3±6.5(1.2)\u003c/td\u003e\n\u003ctd\u003e169.0±4.3(1.1)\u003c/td\u003e\n\u003ctd\u003e232.3±8.7(1.5)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003e部分更新\u003c/strong\u003e：\u003cbr\u003e更新一万行的表格中十的倍数行的内容\u003c/td\u003e\n\u003ctd\u003e76.5±4.8(1.0)\u003c/td\u003e\n\u003ctd\u003e168.1±7.4(2.3)\u003c/td\u003e\n\u003ctd\u003e73.5±4.9(1.0)\u003c/td\u003e\n\u003ctd\u003e90.9±3.3(1.2)\u003c/td\u003e\n\u003ctd\u003e87.1±5.3(1.2)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003e选择行\u003c/strong\u003e：\u003cbr\u003e鼠标点击一行高亮的时间\u003c/td\u003e\n\u003ctd\u003e10.8±3.5(1.0)\u003c/td\u003e\n\u003ctd\u003e9.8±2.5(1.0)\u003c/td\u003e\n\u003ctd\u003e7.6±4.0(1.0)\u003c/td\u003e\n\u003ctd\u003e12.4±4.1(1.0)\u003c/td\u003e\n\u003ctd\u003e10.0±4.7(1.0)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003e交换行\u003c/strong\u003e：\u003cbr\u003e交换一千行的表格中的两行\u003c/td\u003e\n\u003ctd\u003e18.3±4.6(1.0)\u003c/td\u003e\n\u003ctd\u003e19.0±2.8(1.0)\u003c/td\u003e\n\u003ctd\u003e118.5±2.8(6.5)\u003c/td\u003e\n\u003ctd\u003e121.8±4.2(6.7)\u003c/td\u003e\n\u003ctd\u003e125.9±5.3(6.9)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003e删除行\u003c/strong\u003e：\u003cbr\u003e删除一行内容\u003c/td\u003e\n\u003ctd\u003e43.1±1.6(1.0)\u003c/td\u003e\n\u003ctd\u003e52.5±1.8(1.2)\u003c/td\u003e\n\u003ctd\u003e46.1±2.6(1.1)\u003c/td\u003e\n\u003ctd\u003e51.5±2.0(1.2)\u003c/td\u003e\n\u003ctd\u003e48.6±2.5(1.1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003e创建多行\u003c/strong\u003e：\u003cbr\u003e创建10000行内容\u003c/td\u003e\n\u003ctd\u003e1,374.5±33.3(1.0)\u003c/td\u003e\n\u003ctd\u003e1,521.4±55.7(1.1)\u003c/td\u003e\n\u003ctd\u003e1,682.0±53.1(1.2)\u003c/td\u003e\n\u003ctd\u003e2,033.7±32.0(1.5)\u003c/td\u003e\n\u003ctd\u003e2,112.0±77.7(1.5)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003e附加行\u003c/strong\u003e：\u003cbr\u003e在10000行的表格后附加上1000行\u003c/td\u003e\n\u003ctd\u003e217.4±7.3(1.0)\u003c/td\u003e\n\u003ctd\u003e338.4±10.3(1.6)\u003c/td\u003e\n\u003ctd\u003e257.6±11.1(1.2)\u003c/td\u003e\n\u003ctd\u003e271.8±9.9(1.3)\u003c/td\u003e\n\u003ctd\u003e371.6±60.4(1.7)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003e清空行\u003c/strong\u003e：\u003cbr\u003e清空一万行的表格的内容\u003c/td\u003e\n\u003ctd\u003e177.1±10.2(1.0)\u003c/td\u003e\n\u003ctd\u003e240.9±11.4(1.4)\u003c/td\u003e\n\u003ctd\u003e360.3±16.4(2.0)\u003c/td\u003e\n\u003ctd\u003e224.4±6.0(1.3)\u003c/td\u003e\n\u003ctd\u003e517.8±62.0(2.9)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608da88a7546601?w=1675\u0026amp;h=873\u0026amp;f=png\u0026amp;s=53634\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n在开销比较大的表格操作上，交换行的开销是各个框架的重灾区，但是因为底层diff算法深度不同的关系，vue在此项表现上比较好，在事件处理机制上，框架表现出了对于事件的优化，而react因为大量附加事件逻辑的关系，表现略逊一筹。总的操作性能比上，以vanillajs为基准，依次为vue(1.27)，angularJS(1.47)，react(1.49)，angular(1.77)。\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e启动时间\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e测试项目\u003c/th\u003e\n\u003cth\u003evanillajs\u003c/th\u003e\n\u003cth\u003evue-v2.5.3\u003c/th\u003e\n\u003cth\u003eangular-v5.0.0\u003c/th\u003e\n\u003cth\u003ereact-v16.1.0\u003c/th\u003e\n\u003cth\u003eangular-v1.6.3\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e当CPU和网络情况都很空闲的时候的启动时间\u003c/td\u003e\n\u003ctd\u003e38.8±2.9(1.0)\u003c/td\u003e\n\u003ctd\u003e55.4±1.6(1.4)\u003c/td\u003e\n\u003ctd\u003e97.4±3.5(2.5)\u003c/td\u003e\n\u003ctd\u003e58.4±1.1(1.5)\u003c/td\u003e\n\u003ctd\u003e96.9±23.9(2.5)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e载入框架所有脚本所需要的时间\u003c/td\u003e\n\u003ctd\u003e4.0±0.3(1.0)\u003c/td\u003e\n\u003ctd\u003e20.8±0.7(1.3)\u003c/td\u003e\n\u003ctd\u003e45.9±1.6(2.9)\u003c/td\u003e\n\u003ctd\u003e22.1±0.6(1.4)\u003c/td\u003e\n\u003ctd\u003e56.8±18.4(3.6)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e主线程（样式,布局等)的花销时间\u003c/td\u003e\n\u003ctd\u003e162.1±2.6(1.0)\u003c/td\u003e\n\u003ctd\u003e174.2±2.5(1.1)\u003c/td\u003e\n\u003ctd\u003e216.8±4.6(1.3)\u003c/td\u003e\n\u003ctd\u003e176.9±2.3(1.1)\u003c/td\u003e\n\u003ctd\u003e224.0±52.1(1.4)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e经过网络传输所有资源的总大小（byte）\u003c/td\u003e\n\u003ctd\u003e163,967.0(1.0)\u003c/td\u003e\n\u003ctd\u003e227,410.0(1.4)\u003c/td\u003e\n\u003ctd\u003e304,139.0(1.9)\u003c/td\u003e\n\u003ctd\u003e263,076.0(1.6)\u003c/td\u003e\n\u003ctd\u003e337,157.0(2.1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608dac5693d87d4?w=767\u0026amp;h=575\u0026amp;f=png\u0026amp;s=26145\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608dac9b46bd235?w=752\u0026amp;h=452\u0026amp;f=png\u0026amp;s=24591\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e在启动时间方面，明显vue和react更加快，angular兄弟因为本身框架比较庞大，所以脚本在载入，启动时间，脚本大小等都不如其他的框架。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e内存占用\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e测试项目\u003c/th\u003e\n\u003cth\u003evanillajs\u003c/th\u003e\n\u003cth\u003evue-v2.5.3\u003c/th\u003e\n\u003cth\u003eangular-v5.0.0\u003c/th\u003e\n\u003cth\u003ereact-v16.1.0\u003c/th\u003e\n\u003cth\u003eangular-v1.6.3\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e页面加载后的内存占用\u003c/td\u003e\n\u003ctd\u003e3.0±0.1(1.0)\u003c/td\u003e\n\u003ctd\u003e3.6±0.1(1.2)\u003c/td\u003e\n\u003ctd\u003e6.7±0.1(2.2)\u003c/td\u003e\n\u003ctd\u003e3.7±0.1(1.2)\u003c/td\u003e\n\u003ctd\u003e4.3±0.1(1.4)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e增加1000行后的内存占用\u003c/td\u003e\n\u003ctd\u003e3.7±0.1(1.0)\u003c/td\u003e\n\u003ctd\u003e7.2±0.0(2.0)\u003c/td\u003e\n\u003ctd\u003e10.5±0.0(2.9)\u003c/td\u003e\n\u003ctd\u003e7.6±0.0(2.1)\u003c/td\u003e\n\u003ctd\u003e11.9±0.0(3.2)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e更新1000行中10的倍数行的内存占用\u003c/td\u003e\n\u003ctd\u003e3.7±0.1(1.0)\u003c/td\u003e\n\u003ctd\u003e7.3±0.0(2.0)\u003c/td\u003e\n\u003ctd\u003e10.6±0.0(2.9)\u003c/td\u003e\n\u003ctd\u003e8.5±0.0(2.3)\u003c/td\u003e\n\u003ctd\u003e11.9±0.0(3.2)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e替换1000行内容5次后的内存占用\u003c/td\u003e\n\u003ctd\u003e3.6±0.1(1.0)\u003c/td\u003e\n\u003ctd\u003e7.3±0.0(2.0)\u003c/td\u003e\n\u003ctd\u003e10.8±0.0(3.1)\u003c/td\u003e\n\u003ctd\u003e9.0±0.0(2.5)\u003c/td\u003e\n\u003ctd\u003e12.4±0.0(3.5)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e创建1000行内容5次后的内存占用\u003c/td\u003e\n\u003ctd\u003e3.2±0.0(1.0)\u003c/td\u003e\n\u003ctd\u003e3.8±0.0(1.2)\u003c/td\u003e\n\u003ctd\u003e7.1±0.0(2.2)\u003c/td\u003e\n\u003ctd\u003e4.7±0.0(1.5)\u003c/td\u003e\n\u003ctd\u003e4.7±0.0(1.5)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608dae98ae157e3?w=866\u0026amp;h=452\u0026amp;f=png\u0026amp;s=26301\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n在内存占用上，angular兄弟依然都是偏大的，但是angularJS的增长趋势还是算比较低的，而angular的增长趋势也比较大了，vue的增长趋势也比较稳定，但是react在大量替换和更新操作上，开销增长较大，稳定性不强。\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e总结\u003c/h3\u003e\n\u003cp\u003e可以看出，在各个方面vanillajs都是胜出的，想要得到更好的性能优化，不仅仅是选择框架。还需要思考怎样更好的使用vanillajs，贴近浏览器来思考操作，从框架更新原理来思考逻辑，才能得到更好的性能。\u003c/p\u003e\n\u003cp\u003e数据来源：\u003ca target=\"_blank\" href=\"https://github.com/krausest/js-framework-benchmark\"\u003ejs-framework-benchmark\u003c/a\u003e\u003c/p\u003e\n","buildTime":"1514377905.0414","__v":0}
{"_id":{"$oid":"5a4394d8bbcd9a0a78c8cf44"},"id":"5a3b67096fb9a044fd11efd2","author":{"$oid":"5a4394d8bbcd9a0a78c8cf36"},"title":"这个CSS问题屏幕前的你是否熟悉，然后懵逼，最后放弃","meta":{"likeCount":0},"tag":["CSS","前端"],"comment":[],"content":"\u003cp\u003e本文作者：IMWeb·结一 原文出处：\u003ca href=\"https://link.juejin.im/?target=http%3A%2F%2Fimweb.io%2Ftopic%2F5a08a5c7ef79bc941c30d8dd\"\u003eIMWeb社区\u003c/a\u003e \u003cb\u003e未经同意，禁止转载\u003c/b\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e当决定写这篇博文时候，突然一道闪电从脑海劈过，于是临时决定将这个熟悉然后到懵逼最后到放弃的问题分为两部分。\u003c/p\u003e\u003cp\u003e闲话少说，直接上题：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/21/160780c000f43c0e?w=720\u0026amp;h=194\u0026amp;f=jpeg\u0026amp;s=33285\" alt=\"icons\"\u003e\u003c/p\u003e\u003cp\u003e\u003cb\u003e要求如下：\u003c/b\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cb\u003e三个橙色圆的大小为60px，固定不变\u003c/b\u003e\u003c/li\u003e\u003cli\u003e\u003cb\u003e所有间隙相等，也就是被三个橙色圆划分成的四个间距相等\u003c/b\u003e\u003c/li\u003e\u003cli\u003e\u003cb\u003e应用在移动端，整个黄色为全屏宽度（所以这里图片的大小不是真实的大小，如iphone 5那就是320px，6就是375px，6s就是414px等等）\u003c/b\u003e\u003c/li\u003e\u003cli\u003e\u003cb\u003e兼容安卓4.0以上（悄悄透露下安卓4.3- 属性calc不支持）\u003c/b\u003e\u003c/li\u003e\u003cli\u003e\u003cb\u003ehtml \u0026amp; css （no js）\u003c/b\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cb\u003e\u003cbr\u003e\u003c/b\u003e\u003c/p\u003e\u003cp\u003e\u003cb\u003e方法不唯一，\u003c/b\u003e\u003cb\u003e欢迎大家把自己解决方案分享到评论区\u003c/b\u003e\u003cbr\u003e\u003c/p\u003e\u003ch3\u003e答案分割线————\u003c/h3\u003e\u003ch3\u003e一、flex方法\u003c/h3\u003e\u003cp\u003e\u003cb\u003e1、插入四个空标签，设置flex:1，这个可能是大家最先想到的。\u003c/b\u003e\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e\u0026lt;ul class=\u003cspan class=\"hljs-string\"\u003e\"share-list\"\u003c/span\u003e\u0026gt;\n    \u0026lt;li class=\u003cspan class=\"hljs-string\"\u003e\"gap\"\u003c/span\u003e\u0026gt;\u0026lt;/li\u0026gt;\n    \u0026lt;li class=\u003cspan class=\"hljs-string\"\u003e\"share-item\"\u003c/span\u003e\u0026gt;\u0026lt;/li\u0026gt;\n    \u0026lt;li class=\u003cspan class=\"hljs-string\"\u003e\"gap\"\u003c/span\u003e\u0026gt;\u0026lt;/li\u0026gt;\n    \u0026lt;li class=\u003cspan class=\"hljs-string\"\u003e\"share-item\"\u003c/span\u003e\u0026gt;\u0026lt;/li\u0026gt;\n    \u0026lt;li class=\u003cspan class=\"hljs-string\"\u003e\"gap\"\u003c/span\u003e\u0026gt;\u0026lt;/li\u0026gt;\n    \u0026lt;li class=\u003cspan class=\"hljs-string\"\u003e\"share-item\"\u003c/span\u003e\u0026gt;\u0026lt;/li\u0026gt;\n    \u0026lt;li class=\u003cspan class=\"hljs-string\"\u003e\"gap\"\u003c/span\u003e\u0026gt;\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e.share-list{\n    display: flex;\n}\n.share-item{\n    width: 60px;\n    height: 60px;\n}\n.gap{\n    flex: 1;\n    width: 1%;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cb\u003e2、第一个和第三个设置flex为1，第二个为icon的固定宽度；内嵌一层处理具体的icon宽度\u003c/b\u003e\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e\u0026lt;ul class=\u003cspan class=\"hljs-string\"\u003e\"share-list\"\u003c/span\u003e\u0026gt;\n    \u0026lt;li class=\u003cspan class=\"hljs-string\"\u003e\"share-item\"\u003c/span\u003e\u0026gt;\u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"item-inner\"\u003c/span\u003e\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;/li\u0026gt;\n    \u0026lt;li class=\u003cspan class=\"hljs-string\"\u003e\"share-item\"\u003c/span\u003e\u0026gt;\u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"item-inner\"\u003c/span\u003e\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;/li\u0026gt;\n    \u0026lt;li class=\u003cspan class=\"hljs-string\"\u003e\"share-item\"\u003c/span\u003e\u0026gt;\u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"item-inner\"\u003c/span\u003e\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e.share-list{\n    display: flex;\n}\n.share-item:nth-child(1),\n.share-item:nth-child(3){\n    flex: 1;\n    width: 1%;\n}\n.share-item:nth-child(2){\n    width: 60px;\n}\n.item-inner{\n    width: 60px;\n    margin-left: auto;\n    margin-right: auto;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cb\u003e3、对\u003c/b\u003e\u003ccode\u003e\u003cb\u003ejustify-content: space-between;\u003c/b\u003e\u003c/code\u003e\u003cb\u003e进行变通\u003c/b\u003e\u003c/p\u003e\u003cp\u003e\u003ccode\u003e每个间隙的宽度 = （100% - 60px * 3）/ 4 = 25% - 45px\u003c/code\u003e\u003c/p\u003e\u003cp\u003e先外套一层wrap，设置左右的padding各位25%，再对list设置负的左右margin各位45px（相当于左右的padding减少了45px），得到第一个和最后一个间隙；中间的间隙通过\u003ccode\u003ejustify-content: space-between;\u003c/code\u003e自由分配\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e\u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"share-list-wrap\"\u003c/span\u003e\u0026gt;\n  \u0026lt;ul class=\u003cspan class=\"hljs-string\"\u003e\"share-list\"\u003c/span\u003e\u0026gt;\n      \u0026lt;li class=\u003cspan class=\"hljs-string\"\u003e\"share-item\"\u003c/span\u003e\u0026gt;\u0026lt;/li\u0026gt;\n      \u0026lt;li class=\u003cspan class=\"hljs-string\"\u003e\"share-item\"\u003c/span\u003e\u0026gt;\u0026lt;/li\u0026gt;\n      \u0026lt;li class=\u003cspan class=\"hljs-string\"\u003e\"share-item\"\u003c/span\u003e\u0026gt;\u0026lt;/li\u0026gt;\n  \u0026lt;/ul\u0026gt;\n\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003eshare-list-wrap{\n    padding-left: 25%;\n    padding-right: 25%;\n}\n.share-list{\n    display: flex;\n    margin-left: -45px;\n    margin-right: -45px;\n    justify-content: space-between;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cb\u003e4、高级\u003c/b\u003e\u003ccode\u003e\u003cb\u003ejustify-content: space-between;\u003c/b\u003e\u003c/code\u003e\u003cb\u003e法\u003c/b\u003e\u003c/p\u003e\u003cp\u003e直接使用list的before和after伪元素参与布局\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e  \u0026lt;ul class=\u003cspan class=\"hljs-string\"\u003e\"share-list\"\u003c/span\u003e\u0026gt;\n      \u0026lt;li class=\u003cspan class=\"hljs-string\"\u003e\"share-item\"\u003c/span\u003e\u0026gt;\u0026lt;/li\u0026gt;\n      \u0026lt;li class=\u003cspan class=\"hljs-string\"\u003e\"share-item\"\u003c/span\u003e\u0026gt;\u0026lt;/li\u0026gt;\n      \u0026lt;li class=\u003cspan class=\"hljs-string\"\u003e\"share-item\"\u003c/span\u003e\u0026gt;\u0026lt;/li\u0026gt;\n  \u0026lt;/ul\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e.share-list{\n    display: flex;\n    justify-content: space-between;\n}\n.share-list:before,\n.share-list:after{\n    content: \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e;\n}\n.share-item{\n    width: 60px;\n    height: 60px;\n}\u003c/code\u003e\u003c/pre\u003e\u003ch3\u003e二、绝对定位\u003c/h3\u003e\u003cp\u003e计算各个位置，第一个位置为25% - 60px\u003c/p\u003e\u003cdiv\u003e75%，第二个为50% - 60px \u003c/div\u003e\u003cp\u003e50%，第三个位置为75% - 60px*25%\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003e这里就不再多讲，根据上面的间隙宽度计算公式总会算出来的，可能一开始想错了，调整下就对了。\u003c/p\u003e\u003cp\u003e最终的计算公式为：（假设n为间隙数，w为图标的宽度）\u003c/p\u003e\u003cp\u003e第i图标的位置为: i/n (%) - w(n-i)/n (px)，结合left和transform表示就是\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003eleft: i/n*100%;\ntransform: translate( -(n-1)/n*100%,0);\u003c/code\u003e\u003c/pre\u003e\u003ch3\u003e三、float方法\u003c/h3\u003e\u003cp\u003e设置第二个为绝对定位在中间；第一个的宽度为50%，padding-right为30px，第二个的宽度为50%，padding-left为30px，然后里面居中\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e.share-item:nth-child(2){\n    position: absolute;\n    left: 50%;\n    transform: translate(-50%, 0);\n    width: 60px;\n}\n.share-item:nth-child(1),\n.share-item:nth-child(3){\n    \u003cspan class=\"hljs-built_in\"\u003efloat\u003c/span\u003e: left:\n    width: 100%;\n    text-align: center;\n    box-sizing: border-box;\n}\n.share-item:nth-child(1){\n    padding-right: 30px;\n}\n.share-item:nth-child(3){\n    padding-left: 30px;\n}\n.item-inner{\n    display: inline-block;\n    vertical-align: middle;\n}\u003c/code\u003e\u003c/pre\u003e\u003ch3\u003e四、table方法\u003c/h3\u003e\u003cp\u003e设置\u003ccode\u003etable-layout:fixed\u003c/code\u003e，第二个td为60px，那么第一个和第三个自动等分剩余的空间，然后再单元格居中即可\u003c/p\u003e\u003ch2\u003e总结\u003c/h2\u003e\u003cp\u003e这个问题，其实所有的人都能解答（请忽略有点哗众取宠的文章标题），只是答题运用的方法不同而已，有灵活的，有死板的，最关键的还是我们对遇到问题怎么对应上自己的知识库。\u003c/p\u003e\u003cp\u003e关键问题不是你实现不了，而是你选择的方案可能不是最优的，这就是css，你了解越多，你就会越接近那个最优的捷径。\u003c/p\u003e\u003cp\u003e\u003cb\u003e\u003cbr\u003e\u003c/b\u003e\u003c/p\u003e\u003cp\u003e\u003cb\u003e关于这个题目\u003c/b\u003e\u003cb\u003e，\u003c/b\u003e\u003cb\u003e你的\u003c/b\u003e\u003cb\u003eCSS功力是否经得住考验呢\u003c/b\u003e\u003cb\u003e？\u003c/b\u003e\u003c/p\u003e\u003cp\u003e所以前端的路上，需要不断学习系统先进的前端知识，了解业界的顶尖标准，不断自我进步......不论是巩固基础还是进阶充电，都需要保持进步的驱动力！\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e说了这么多\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/21/160780b6e3f87556?w=87\u0026amp;h=86\u0026amp;f=webp\u0026amp;s=1186\"\u003e......那还不快加入\u003cb\u003e腾讯官方出品的NEXT学位课程\u003c/b\u003e！\u003c/p\u003e\u003cp\u003e\u003cb\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/1/16011147ba47189e?w=640\u0026amp;h=360\u0026amp;f=webp\u0026amp;s=10554\"\u003e\u003c/b\u003e\u003c/p\u003e\u003cp\u003e\u003cb\u003eNEXT学位\u003c/b\u003e\u003cb\u003e的优势\u003c/b\u003e\u003cb\u003e？\u003c/b\u003e腾讯课堂官方出品、技术总监设计、高级工程师教学、硅谷最新的教学工具、前端岗位的项目实战、专家1V1、直播课答疑、腾讯内推、专属就业通道...种种优势助你走向前端的人生巅峰！\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/21/16078ca6cf649190?w=1807\u0026amp;h=443\u0026amp;f=gif\u0026amp;s=3765212\"\u003e\u003c/p\u003e\u003cp\u003e\u003cb\u003e\u003ca href=\"https://ke.qq.com/next/index.html\"\u003e动动手指点击官网了解NEXT学位\u003c/a\u003e\u003c/b\u003e\u003c/p\u003e\u003cp\u003e\u003cb\u003e第四期招生马上截止，限定席位等你来抢\u003c/b\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003cb\u003e更多课程详情可扫描下方二维码咨询助教\u003c/b\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/1/16011791ee721557?w=1920\u0026amp;h=800\u0026amp;f=jpeg\u0026amp;s=568021\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e","buildTime":"1514378216.8044","__v":0}
{"_id":{"$oid":"5a4394d8bbcd9a0a78c8cf45"},"id":"5a41b01551882506e50ce358","author":{"$oid":"5a43938e51fb4902b0661511"},"title":"Webpack实战-加载SVG","meta":{"likeCount":0},"tag":["SVG","Webpack","CSS","前端"],"comment":[],"content":"\u003cp\u003eSVG 作为矢量图的一种标准格式，已经得到了各大浏览器的支持，它也成为了 Web 中矢量图的代名词。\n在网页中采用 SVG 代替位图有如下好处：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eSVG 相对于位图更清晰，在任意缩放的情况下后不会破坏图形的清晰度，SVG 能方便地解决高分辨率屏幕下图像显示不清楚的问题。\u003c/li\u003e\n\u003cli\u003e在图形线条比较简单的情况下，SVG 文件的大小要小于位图，在扁平化 UI 流行的今天，多数情况下 SVG 会更小。\u003c/li\u003e\n\u003cli\u003e图形相同的 SVG 比对应的高清图有更好的渲染性能。\u003c/li\u003e\n\u003cli\u003eSVG 采用和 HTML 一致的 XML 语法描述，灵活性很高。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e画图工具能导出一个个 \u003ccode\u003e.svg\u003c/code\u003e 文件，SVG 的导入方法和图片类似，既可以像下面这样在 CSS 中直接使用：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs css\" lang=\"css\"\u003e\u003cspan class=\"hljs-selector-tag\"\u003ebody\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003ebackground-image\u003c/span\u003e: \u003cspan class=\"hljs-built_in\"\u003eurl\u003c/span\u003e(./svgs/activity.svg);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e也可以在 HTML 中使用：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"./svgs/activity.svg\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e也就是说可以直接把 SVG 文件当成一张图片来使用，方法和使用图片时完全一样。\n所以在 \u003ca target=\"_blank\" href=\"http://webpack.wuhaolin.cn/3%E5%AE%9E%E6%88%98/3-19%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87.html\"\u003e3-19 加载图片\u003c/a\u003e 中介绍的两种方法 \u003cstrong\u003e使用 file-loader\u003c/strong\u003e 和 \u003cstrong\u003e使用 url-loader\u003c/strong\u003e\n对 SVG 来说同样有效，只需要把 Loader test 配置中的文件后缀改成 \u003ccode\u003e.svg\u003c/code\u003e，代码如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-built_in\"\u003emodule\u003c/span\u003e.exports = {\n  \u003cspan class=\"hljs-attr\"\u003emodule\u003c/span\u003e: {\n    \u003cspan class=\"hljs-attr\"\u003erules\u003c/span\u003e: [\n      {\n        \u003cspan class=\"hljs-attr\"\u003etest\u003c/span\u003e: \u003cspan class=\"hljs-regexp\"\u003e/\\.svg/\u003c/span\u003e,\n        \u003cspan class=\"hljs-attr\"\u003euse\u003c/span\u003e: [\u003cspan class=\"hljs-string\"\u003e'file-loader'\u003c/span\u003e]\n      }\n    ]\n  },\n};\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e由于 SVG 是文本格式的文件，除了以上两种方法外还有其它方法，下面来一一说明。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e使用 raw-loader\u003c/h2\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://github.com/webpack-contrib/raw-loader\"\u003eraw-loader\u003c/a\u003e 可以把文本文件的内容读取出来，注入到 JavaScript 或 CSS 中去。\u003c/p\u003e\n\u003cp\u003e例如在 JavaScript 中这样写：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e svgContent \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./svgs/alert.svg'\u003c/span\u003e;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e经过 raw-loader 处理后输出的代码如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-built_in\"\u003emodule\u003c/span\u003e.exports = \u003cspan class=\"hljs-string\"\u003e\"\u0026lt;svg xmlns=\\\"http://www.w3.org/2000/svg\\\"... \u0026lt;/svg\u0026gt;\"\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003e// 末尾省略 SVG 内容 \u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e也就是说 \u003ccode\u003esvgContent\u003c/code\u003e 的内容就等于字符串形式的 SVG，由于 SVG 本身就是 HTML 元素，在获取到 SVG 内容后，可以直接通过以下代码将 SVG 插入到网页中：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.document.getElementById(\u003cspan class=\"hljs-string\"\u003e'app'\u003c/span\u003e).innerHTML = svgContent;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e使用 raw-loader 时相关的 Webpack 配置如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-built_in\"\u003emodule\u003c/span\u003e.exports = {\n  \u003cspan class=\"hljs-attr\"\u003emodule\u003c/span\u003e: {\n    \u003cspan class=\"hljs-attr\"\u003erules\u003c/span\u003e: [\n      {\n        \u003cspan class=\"hljs-attr\"\u003etest\u003c/span\u003e: \u003cspan class=\"hljs-regexp\"\u003e/\\.svg$/\u003c/span\u003e,\n        \u003cspan class=\"hljs-attr\"\u003euse\u003c/span\u003e: [\u003cspan class=\"hljs-string\"\u003e'raw-loader'\u003c/span\u003e]\n      }\n    ]\n  }\n};\n\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\n\u003cp\u003e由于 raw-loader 会直接返回 SVG 的文本内容，并且无法通过 CSS 去展示 SVG 的文本内容，因此采用本方法后无法在 CSS 中导入 SVG。\n也就是说在 CSS 中不可以出现 \u003ccode\u003ebackground-image: url(./svgs/activity.svg)\u003c/code\u003e 这样的代码，因为 \u003ccode\u003ebackground-image: url(\u0026lt;svg\u0026gt;...\u0026lt;/svg\u0026gt;)\u003c/code\u003e 是不合法的。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e本实例\u003ca target=\"_blank\" href=\"http://webpack.wuhaolin.cn/3-20%E5%8A%A0%E8%BD%BDSVG-raw-loader.zip\"\u003e提供项目完整代码\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 class=\"heading\"\u003e使用 svg-inline-loader\u003c/h2\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://github.com/webpack-contrib/svg-inline-loader\"\u003esvg-inline-loader\u003c/a\u003e 和上面提到的 raw-loader 非常相似，\n不同在于 svg-inline-loader 会分析 SVG 的内容，去除其中不必要的部分代码，以减少 SVG 的文件大小。\u003c/p\u003e\n\u003cp\u003e在使用画图工具如 Adobe Illustrator、Sketch 制作 SVG 后，在导出时这些工具会生成对网页运行来说不必要的代码。\n举个例子，以下是 Sketch 导出的 SVG 的代码：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs xml\" lang=\"xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003esvg\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"icon\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003everison\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"1.1\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003exmlns\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"http://www.w3.org/2000/svg\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ewidth\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"24\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eheight\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"24\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eviewBox\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"0 0 24 24\"\u003c/span\u003e\n     \u003cspan class=\"hljs-attr\"\u003estroke\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"#000\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ecircle\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ecx\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"12\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ecy\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"12\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003er\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"10\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003esvg\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e被 svg-inline-loader 处理后会精简成如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs xml\" lang=\"xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003esvg\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eviewBox\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"0 0 24 24\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003estroke\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"#000\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ecircle\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ecx\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"12\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ecy\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"12\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003er\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"10\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003esvg\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e也就是说 svg-inline-loader 增加了对 SVG 的压缩功能。\u003c/p\u003e\n\u003cp\u003e使用 svg-inline-loader 时相关的 Webpack 配置如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-built_in\"\u003emodule\u003c/span\u003e.exports = {\n  \u003cspan class=\"hljs-attr\"\u003emodule\u003c/span\u003e: {\n    \u003cspan class=\"hljs-attr\"\u003erules\u003c/span\u003e: [\n      {\n        \u003cspan class=\"hljs-attr\"\u003etest\u003c/span\u003e: \u003cspan class=\"hljs-regexp\"\u003e/\\.svg$/\u003c/span\u003e,\n        \u003cspan class=\"hljs-attr\"\u003euse\u003c/span\u003e: [\u003cspan class=\"hljs-string\"\u003e'svg-inline-loader'\u003c/span\u003e]\n      }\n    ]\n  }\n};\n\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\n\u003cp\u003e本实例\u003ca target=\"_blank\" href=\"http://webpack.wuhaolin.cn/3-20%E5%8A%A0%E8%BD%BDSVG-svg-inline-loader.zip\"\u003e提供项目完整代码\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://webpack.wuhaolin.cn/\"\u003e\u003c/a\u003e\u003c/p\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"http://webpack.wuhaolin.cn/\"\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/20/1607259d52144ee4?w=1348\u0026amp;h=845\u0026amp;f=jpeg\u0026amp;s=183464\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/a\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://webpack.wuhaolin.cn/\"\u003e《深入浅出Webpack》全书在线阅读链接\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://webpack.wuhaolin.cn/3%E5%AE%9E%E6%88%98/3-20%E5%8A%A0%E8%BD%BDSVG.html\"\u003e阅读原文\u003c/a\u003e\u003c/p\u003e\n","buildTime":"1514373115.0428","__v":0}
{"_id":{"$oid":"5a4394d8bbcd9a0a78c8cf46"},"id":"5a42119d5188256970783df1","author":{"$oid":"5a43940c4d03f52390c25e9c"},"title":"走进snabbdom—Vue2背后的Virtual-DOM的机制","meta":{"likeCount":0},"tag":["算法","前端","Vue.js","React.js"],"comment":[],"content":"\u003ch3 class=\"heading\"\u003esnabbdom 是什么\u003c/h3\u003e\n\u003cp\u003esnabbdom是一个Virtual-DOM的实现库，它专注于使用的简单以及功能和的模型化，并在效率和性能上有着很好的表现。如果你还不知道什么是Virtual-DOM技术，它是一种网页中通过diff算法来实现网页修改最小化的方法，react底层使用了这样的机制来提高性能。\u003c/p\u003e\n\u003cp\u003e从Vue2发布开始，也开始使用了这样的机制。Vue并没有选择自己重新造一套Virtual-DOM的算法，而是在snabbdom的基础上构建了一个嵌入了框架本身的fork版本。可以说，Vue就是在使用snabbdom的Virtual-DOM算法。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003esnabbdom 的特性\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003esnabbdom核心算法就两三百多行，阅读和理解都是非常方便的。\u003c/li\u003e\n\u003cli\u003emodule划分清楚，拓展性强\u003c/li\u003e\n\u003cli\u003e自带一系列hook，这些hook可以在diff算法的各处调用，可以使用hook定制过程\u003c/li\u003e\n\u003cli\u003e在Virtual-DOM众多算法中有着优秀的性能\u003c/li\u003e\n\u003cli\u003e函数都带有和自己签名相关的reduce/scan函数，方便函数响应式编程使用\u003c/li\u003e\n\u003cli\u003eh函数可以简单的创建vnode节点\u003c/li\u003e\n\u003cli\u003e对于SVG，使用h函数可以轻松加上命名空间\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 class=\"heading\"\u003esnabbdom核心概念\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003einit\u003c/p\u003e\n\u003cp\u003esnabbdom使用一种类似于插件声明使用的方式来模块化功能，如果你使用过AngularJS的声明注入或者Vue.use，你对这样的方式一定不陌生。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e patch = snabbdom.init([\n  \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'snabbdom/modules/class'\u003c/span\u003e).default,\n  \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'snabbdom/modules/style'\u003c/span\u003e).default,\n]);\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003epatch\u003c/p\u003e\n\u003cp\u003epatch是由init返回的一个函数，第一个参数代表着之前的view，是一个vnode或者DOM节点，而第二个参数是一个新的vnode节点，oldNode会根据他的类型被相应的更新。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003epatch(oldVnode, newVnode);\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eh函数\u003c/p\u003e\n\u003cp\u003eh函数可以让你更加轻松的建立vnode。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e snabbdom = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'snabbdom'\u003c/span\u003e)\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e patch = snabbdom.init([ \u003cspan class=\"hljs-comment\"\u003e// 调用init生成patch\u003c/span\u003e\n  \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'snabbdom/modules/class'\u003c/span\u003e).default, \u003cspan class=\"hljs-comment\"\u003e// 让toggle class更加简单\u003c/span\u003e\n  \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'snabbdom/modules/props'\u003c/span\u003e).default, \u003cspan class=\"hljs-comment\"\u003e// 让DOM可以设置props\u003c/span\u003e\n  \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'snabbdom/modules/style'\u003c/span\u003e).default, \u003cspan class=\"hljs-comment\"\u003e// 支持带有style的元素，以及动画\u003c/span\u003e\n  \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'snabbdom/modules/eventlisteners'\u003c/span\u003e).default, \u003cspan class=\"hljs-comment\"\u003e// 加上事件监听\u003c/span\u003e\n]);\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e h = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'snabbdom/h'\u003c/span\u003e).default; \u003cspan class=\"hljs-comment\"\u003e// h的意思是helper，帮助建立vnode\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e toVNode = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'snabbdom/tovnode'\u003c/span\u003e).default;\n\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e newNode = h(\u003cspan class=\"hljs-string\"\u003e'div'\u003c/span\u003e, {\u003cspan class=\"hljs-attr\"\u003estyle\u003c/span\u003e: {\u003cspan class=\"hljs-attr\"\u003ecolor\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'#000'\u003c/span\u003e}}, [\n  h(\u003cspan class=\"hljs-string\"\u003e'h1'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Headline'\u003c/span\u003e),\n  h(\u003cspan class=\"hljs-string\"\u003e'p'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'A paragraph'\u003c/span\u003e),\n]);\n\npatch(toVNode(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.querySelector(\u003cspan class=\"hljs-string\"\u003e'.container'\u003c/span\u003e)), newVNode)\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e钩子（hook）\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e名称\u003c/th\u003e\n\u003cth\u003e触发时间\u003c/th\u003e\n\u003cth\u003e回调参数\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003epre\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003epatch开始\u003c/td\u003e\n\u003ctd\u003enone\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003einit\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003evnode被添加的时候\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003evnode\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ecreate\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eDOM元素被从create创建\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eemptyVnode, vnode\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003einsert\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e一个元素被插入了DOM\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003evnode\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eprepatch\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e元素即将被patch\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eoldVnode, vnode\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eupdate\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e元素被更新\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eoldVnode, vnode\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003epostpatch\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e元素被patch后\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eoldVnode, vnode\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003edestroy\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e元素被直接或者间接移除\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003evnode\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eremove\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e元素直接从DOM被移除\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003evnode, removeCallback\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003epost\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003epatch操作结束\u003c/td\u003e\n\u003ctd\u003enone\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 class=\"heading\"\u003esnabbdom 算法\u003c/h3\u003e\n\u003cp\u003ediff两棵树的算法是一个O(n^3)的算法\u003c/p\u003e\n\u003cp\u003e对于两个元素，如果他们类型不同，或者key不同，那么元素就不是同一个元素，那么直接新的元素替换前一个元素。\u003c/p\u003e\n\u003cp\u003e对于两个元素是同一个元素的情况下，开始diff他们的附加元素，还有他们的children。\u003c/p\u003e\n\u003cp\u003esnabbdom在diff他们的children时候，一次性对比四个节点，oldNode与newNode的Children的首尾元素：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e (oldStartIdx \u0026lt;= oldEndIdx \u0026amp;\u0026amp; newStartIdx \u0026lt;= newEndIdx) {\n  \u003cspan class=\"hljs-comment\"\u003e// 开头处理了边界情况和特殊情况\u003c/span\u003e\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (oldStartVnode == \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e) {\n        \u003cspan class=\"hljs-comment\"\u003e// 如果oldStartVnode为空，那么往后移动继续探测\u003c/span\u003e\n        oldStartVnode = oldCh[++oldStartIdx]; \n      } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (oldEndVnode == \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e) {\n        \u003cspan class=\"hljs-comment\"\u003e// 如果oldEndVnode为空，那么往前移动继续探测\u003c/span\u003e\n        oldEndVnode = oldCh[--oldEndIdx];\n      } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (newStartVnode == \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e) {\n        newStartVnode = newCh[++newStartIdx];\n      } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (newEndVnode == \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e) {\n        newEndVnode = newCh[--newEndIdx];\n        \u003cspan class=\"hljs-comment\"\u003e// 遇到空的节点的情况总是收缩边界搜索，直到边界条件跳出循环\u003c/span\u003e\n      } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n        \u003cspan class=\"hljs-comment\"\u003e// 现在的首节点相同，diff他们两个的其他属性，并且start接着往后走\u003c/span\u003e\n      } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n        \u003cspan class=\"hljs-comment\"\u003e// 现在的尾节点相同，diff他们两个的其他属性，并且old接着往前走\u003c/span\u003e\n      } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (sameVnode(oldStartVnode, newEndVnode)) { \u003cspan class=\"hljs-comment\"\u003e// Vnode moved right\u003c/span\u003e\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        api.insertBefore(parentElm, oldStartVnode.elm \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e Node, \u0009\u0009\u0009 api.nextSibling(oldEndVnode.elm \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e Node));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (sameVnode(oldEndVnode, newStartVnode)) { \u003cspan class=\"hljs-comment\"\u003e// Vnode moved left\u003c/span\u003e\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        api.insertBefore(parentElm, oldEndVnode.elm \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e Node, oldStartVnode.elm \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e Node);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n        \u003cspan class=\"hljs-comment\"\u003e// 首尾相同的情况，对旧的节点调整孩子顺序，并继续分别收缩范围\u003c/span\u003e\n      } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (oldKeyToIdx === \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e) {\n          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n        }\n        \u003cspan class=\"hljs-comment\"\u003e// 使用这里实现了Key和Index的对应索引\u003c/span\u003e\n        idxInOld = oldKeyToIdx[newStartVnode.key \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e string];\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (isUndef(idxInOld)) { \u003cspan class=\"hljs-comment\"\u003e// 这是一个新的元素\u003c/span\u003e\n          api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e Node);\n          newStartVnode = newCh[++newStartIdx];\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n          \u003cspan class=\"hljs-comment\"\u003e// 元素被移动，调换元素位置\u003c/span\u003e\n          elmToMove = oldCh[idxInOld];\n          \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (elmToMove.sel !== newStartVnode.sel) {\n            api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e Node);\n          } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e any;\n            api.insertBefore(parentElm, (elmToMove.elm \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e Node), oldStartVnode.elm \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e Node);\n          }\n          newStartVnode = newCh[++newStartIdx];\n        }\n      }\n    }\n\u003cspan class=\"hljs-comment\"\u003e//元素不是被调换的情况下，那么创建或者删除元素\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (oldStartIdx \u0026lt;= oldEndIdx || newStartIdx \u0026lt;= newEndIdx) {\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (oldStartIdx \u0026gt; oldEndIdx) {\n        before = newCh[newEndIdx+\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e] == \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e ? \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e : newCh[newEndIdx+\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e].elm;\n        addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n      } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n        removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n      }\n    }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e通过对于index与key的对应，以及特殊情况的对应，使diff算法的平均情况能够达到O(nlogn)。\u003c/p\u003e\n\u003cp\u003e而且根据init的注入，diff的内容还可以选择性的加入不同内容，来优化性能。\u003c/p\u003e\n","buildTime":"1514373137.2621","__v":0}
{"_id":{"$oid":"5a4394d8bbcd9a0a78c8cf47"},"id":"5a410066518825258b74419f","author":{"$oid":"5a4394d8bbcd9a0a78c8cf37"},"title":"基于手淘 flexible 的 Vue 组件：Toast -- 显示框","meta":{"likeCount":0},"tag":["Vue.js","前端","命令行","GitHub"],"comment":[],"content":"\u003ch1 class=\"heading\"\u003evue-flexible-components\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e基于手淘 flexible.js 的 Vue 组件\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e前言：\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e目前手头的移动端Vue项目是用手淘的 \u003ca target=\"_blank\" href=\"https://github.com/amfe/lib-flexible/tree/master\"\u003elib-flexible\u003c/a\u003e 作适配的，并用 \u003ca target=\"_blank\" href=\"https://www.npmjs.com/package/px2rem\"\u003epx2rem\u003c/a\u003e 来自动转换成rem。关于lib-flexible和px2rem的配置，请移步 \u003cem\u003e\u003ca target=\"_blank\" href=\"https://segmentfault.com/a/1190000011883121\"\u003evue-cli 配置 flexible\u003c/a\u003e\u003c/em\u003e。\u003c/li\u003e\n\u003cli\u003e由于使用rem作适配，导致现有的很多移动端UI框架不能与之很好的配合，往往需要大动干戈更改UI框架的样式，背离了使用UI框架达到快速开发的初衷。\u003c/li\u003e\n\u003cli\u003e为了以后项目的组件复用，以及提高开发可复用组件的能力，特把平时项目中\u003cem\u003e常用的、简单的\u003c/em\u003e 组件单独拎出来。\u003c/li\u003e\n\u003cli\u003e此为小白之作，论代码质量、难易程度、复用度，远不及各位大佬之杰作，求轻喷。同时，也恳请各位，提出意见和建议，不胜感激！\u003c/li\u003e\n\u003cli\u003eGitHub地址：\u003ca target=\"_blank\" href=\"https://github.com/bingyang519/vueFlexibleComponents\"\u003evue-flexible-components\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch2 class=\"heading\"\u003eToast -- 显示框\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ch3 class=\"heading\"\u003e效果展示\u003c/h3\u003e\n\u0026nbsp;\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608deb7e9887072?w=348\u0026amp;h=532\u0026amp;f=GIF\u0026amp;s=1138881\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\u0026nbsp;\u003cp\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ch3 class=\"heading\"\u003e代码分析\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003ediv包含icon小图标和文字说明，构成简单的dom结构，利用props定义变量值，用computed计算属性对传入的值进行解构，watch监听弹框显示，并结合\u003ca target=\"_blank\" href=\"https://cn.vuejs.org/v2/guide/components.html#sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6\"\u003e.sync修饰符\u003c/a\u003e达到双向数据绑定，同时用$emit向父组件派发事件，方便父组件监听回调。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ch4 class=\"heading\"\u003edom结构\u003c/h4\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;transition name=\u003cspan class=\"hljs-string\"\u003e\"fade\"\u003c/span\u003e\u0026gt;\n    \u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"Toast\"\u003c/span\u003e v-if=\u003cspan class=\"hljs-string\"\u003e\"toastShow\"\u003c/span\u003e\u0026gt;\n        \u0026lt;div\n            class=\u003cspan class=\"hljs-string\"\u003e\"box\"\u003c/span\u003e\n            :style=\u003cspan class=\"hljs-string\"\u003e\"positionTop\"\u003c/span\u003e\n        \u0026gt;\n            \u0026lt;span\n                :class=\u003cspan class=\"hljs-string\"\u003e\"iconClass\"\u003c/span\u003e\n                :style=\u003cspan class=\"hljs-string\"\u003e\"iconBg\"\u003c/span\u003e\n                v-if=\u003cspan class=\"hljs-string\"\u003e\"iconIsShow\"\u003c/span\u003e\n            \u0026gt;\u0026lt;/span\u0026gt;\n            \u0026lt;p\n                v-if=\u003cspan class=\"hljs-string\"\u003e\"message\"\u003c/span\u003e\n            \u0026gt;{{message}}\u0026lt;/p\u0026gt;\n        \u0026lt;/div\u0026gt;\n    \u0026lt;/div\u0026gt;\n\u0026lt;/transition\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 class=\"heading\"\u003eprops数据\u003c/h4\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eprops: {\n    message: { // 提示内容\n        \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e: String,\n    },\n    toastShow: { // 是否显示\n        \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e: Boolean,\n        default: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\n    },\n    iconClass: { // 背景图片\n        \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e: String,\n    },\n    iconImage: { // 自定义背景图片\n    },\n    duration: { // 定时器\n        \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e: Number,\n        default: 1500\n    },\n    position: { // 弹出框位置\n        \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e: String,\n        default: \u003cspan class=\"hljs-string\"\u003e'50%'\u003c/span\u003e\n    }\n},\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 class=\"heading\"\u003ecomputed\u003c/h4\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003ecomputed: {\n    // 用于判断显示框位置\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003epositionTop\u003c/span\u003e\u003c/span\u003e() {\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e {\n            top: this.position\n        }\n    },\n    // 自定义父组件传过来的背景图片\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003eiconBg\u003c/span\u003e\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (this.iconImage) {\n            \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e {\n                backgroundImage: `url(\u003cspan class=\"hljs-variable\"\u003e${this.iconImage}\u003c/span\u003e)`\n            }\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n            \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e;\n        }\n    },\n    // 用于判断icon是否显示\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003eiconIsShow\u003c/span\u003e\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (this.iconClass == \u003cspan class=\"hljs-string\"\u003e'success'\u003c/span\u003e) {\n            \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (this.iconClass == \u003cspan class=\"hljs-string\"\u003e'close'\u003c/span\u003e) {\n            \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (this.iconClass == \u003cspan class=\"hljs-string\"\u003e'warning'\u003c/span\u003e) {\n            \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (this.iconImage) {\n            \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n            \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n        }\n    }\n},\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 class=\"heading\"\u003ewatch\u003c/h4\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003ewatch: {\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003etoastShow\u003c/span\u003e\u003c/span\u003e() {\n        // 监听toast显示，向父组件派发事件\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (this.toastShow) {\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (this.duration \u0026lt; 0) {\n                this.\u003cspan class=\"hljs-variable\"\u003e$emit\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'toastClose'\u003c/span\u003e);\n            } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n                \u003cspan class=\"hljs-built_in\"\u003eset\u003c/span\u003eTimeout(()=\u0026gt;{\n                    this.\u003cspan class=\"hljs-variable\"\u003e$emit\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'update:toastShow'\u003c/span\u003e, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e) // 利用了.sync达到双向数据绑定\n                    this.\u003cspan class=\"hljs-variable\"\u003e$emit\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'toastClose'\u003c/span\u003e);\n                }, this.duration)\n            }\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 class=\"heading\"\u003e使用说明\u003c/h3\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ch4 class=\"heading\"\u003e组件地址：\u003ca target=\"_blank\" href=\"https://github.com/bingyang519/vueFlexibleComponents/blob/master/src/components/Toast.vue\"\u003esrc/components/Toast.vue\u003c/a\u003e  （不能npm，只能手动下载使用）\u003c/h4\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 class=\"heading\"\u003e下载并放入自己项目中 —— import 引入组件 —— components中注册组件 —— 使用\u003c/h4\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 class=\"heading\"\u003eprops\u003c/h4\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eprops\u003c/th\u003e\n\u003cth\u003e说明\u003c/th\u003e\n\u003cth\u003e类型\u003c/th\u003e\n\u003cth\u003e可选值\u003c/th\u003e\n\u003cth\u003e默认值\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003etoastShow\u003c/td\u003e\n\u003ctd\u003e控制显示框显示、隐藏。需添加\u003ca target=\"_blank\" href=\"https://cn.vuejs.org/v2/guide/components.html#sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6\"\u003e.sync修饰符\u003c/a\u003e才能自动关闭，详见例子\u003c/td\u003e\n\u003ctd\u003eBoolean\u003c/td\u003e\n\u003ctd\u003efalse\u003cbr\u003etrue\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003emessage\u003c/td\u003e\n\u003ctd\u003e提示信息\u003c/td\u003e\n\u003ctd\u003eString\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eiconClass\u003c/td\u003e\n\u003ctd\u003eicon小图标\u003c/td\u003e\n\u003ctd\u003eString\u003c/td\u003e\n\u003ctd\u003esuccess\u003cbr\u003ewarning\u003cbr\u003eclose\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eiconImage\u003c/td\u003e\n\u003ctd\u003e自定义小图标(图片需require引入)\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eduration\u003c/td\u003e\n\u003ctd\u003e定时器(毫秒)，控制弹框显示时间，负数代表不执行定时任务\u003c/td\u003e\n\u003ctd\u003eNumber\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e1500\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eposition\u003c/td\u003e\n\u003ctd\u003e弹框位置（距顶）\u003c/td\u003e\n\u003ctd\u003eString\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e'50%'\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 class=\"heading\"\u003e$emit\u003c/h4\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e$emit\u003c/th\u003e\n\u003cth\u003e说明\u003c/th\u003e\n\u003cth\u003e参数\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003etoastClose\u003c/td\u003e\n\u003ctd\u003e弹框关闭回调\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 class=\"heading\"\u003e示例\u003c/h4\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e  // 默认效果，只有提示信息\n  \u0026lt;toast\n      message = \u003cspan class=\"hljs-string\"\u003e'默认信息'\u003c/span\u003e\n      :toastShow.sync = \u003cspan class=\"hljs-string\"\u003e'isShow1'\u003c/span\u003e  // 需添加.sync修饰符，才能达到自动关闭的效果，否则只能监听toastClose手动关闭\n  \u0026gt;\u0026lt;/toast\u0026gt;                        // 关于sync的说明，请看官网（主要是为了达到双向数据绑定，子组件修改父组件状态）\n  \n  // 增加自带小图标\n  \u0026lt;toast\n      message = \u003cspan class=\"hljs-string\"\u003e'success'\u003c/span\u003e\n      iconClass = \u003cspan class=\"hljs-string\"\u003e'success'\u003c/span\u003e\n      :toastShow.sync = \u003cspan class=\"hljs-string\"\u003e'isShow2'\u003c/span\u003e\n  \u0026gt;\u0026lt;/toast\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e    // 自定义类型\n    \u0026lt;toast\n        message = \u003cspan class=\"hljs-string\"\u003e'自定义'\u003c/span\u003e\n        position = \u003cspan class=\"hljs-string\"\u003e'70%'\u003c/span\u003e\n        :duration = \u003cspan class=\"hljs-string\"\u003e'-1'\u003c/span\u003e  //负数代表不执行定时任务，自己根据需要去关闭\n        :iconImage=\u003cspan class=\"hljs-string\"\u003e'bg'\u003c/span\u003e   // 自定义icon小图标，在data中需require引入，看下面\n        :toastShow = \u003cspan class=\"hljs-string\"\u003e'isShow5'\u003c/span\u003e  // 因为需要手动关闭，所以不需要.sync了\n        @toastClose = \u003cspan class=\"hljs-string\"\u003e'isClose5'\u003c/span\u003e  // 监听回调，手动关闭，看下面\n    \u0026gt;\u0026lt;/toast\u0026gt;\n    \n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003edata\u003c/span\u003e\u003c/span\u003e() {\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e {\n            this.isShow5 : \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n            \u003cspan class=\"hljs-built_in\"\u003ebg\u003c/span\u003e: require(\u003cspan class=\"hljs-string\"\u003e'../assets/logo.png'\u003c/span\u003e), // 图片必须用require进来\n        }\n    },\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003eisClose5\u003c/span\u003e\u003c/span\u003e() {\n        \u003cspan class=\"hljs-built_in\"\u003eset\u003c/span\u003eTimeout(()=\u0026gt;{\n            this.isShow5 = \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n        }, 2000)\n    }\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 class=\"heading\"\u003e结束语\u003c/h3\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003ch4 class=\"heading\"\u003e第一次封装Vue组件，战战兢兢,虽说是很简单的组件，到我手中也是问题不断。但是，我却很享受这个过程，因为我始终坚信，能力就是在不断探索中提高的，没有挫折，哪能进步！\u003c/h4\u003e\n\u003ch4 class=\"heading\"\u003e同时,也恳请各位大佬，对上述问题，提出意见和建议，祝我一臂之力，不胜感激！\u003c/h4\u003e\n\u003ch4 class=\"heading\"\u003e其它组件也将会在GitHub \u003ca target=\"_blank\" href=\"https://github.com/bingyang519/vueFlexibleComponents\"\u003evue-flexible-components\u003c/a\u003e 中陆续更新，敬请关注。\u003c/h4\u003e\n\u003c/blockquote\u003e\n","buildTime":"1514376980.4334","__v":0}
{"_id":{"$oid":"5a4394d8bbcd9a0a78c8cf48"},"id":"5a4223e95188252b145b4ea2","author":{"$oid":"5a4394d8bbcd9a0a78c8cf3f"},"title":"Angular4学习之依赖注入","meta":{"likeCount":0},"tag":["Angular.js","前端","API"],"comment":[],"content":"\u003cp\u003e在一个项目中，组件和服务之间存在错综复杂的关系，为了最小程度的耦合，我们需要来管理组织这种关系，依赖注入就是管理这种关系的一种方式。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e为什么要使用依赖注入\u003c/h2\u003e\n\u003cp\u003e在学习一个概念之前，我们必须要知道我们为什么要学习这个东西，这个东西究竟解决了什么问题。就好比这里讲到的，依赖注入究竟解决了什么问题。要解决这个问题，我们先来看看示例代码：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eCar\u003c/span\u003e \u003c/span\u003e{\n  public engine: Engine;\n  public tires: Tires;\n  public description = \u003cspan class=\"hljs-string\"\u003e'No DI'\u003c/span\u003e;\n\n  \u003cspan class=\"hljs-keyword\"\u003econstructor\u003c/span\u003e() {\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.engine = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Engine();\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.tires = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Tires();\n  }\n\n  \u003cspan class=\"hljs-comment\"\u003e// Method using the engine and tires\u003c/span\u003e\n  drive() {\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e`\u003cspan class=\"hljs-subst\"\u003e${\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.description}\u003c/span\u003e car with `\u003c/span\u003e +\n      \u003cspan class=\"hljs-string\"\u003e`\u003cspan class=\"hljs-subst\"\u003e${\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.engine.cylinders}\u003c/span\u003e cylinders and \u003cspan class=\"hljs-subst\"\u003e${\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.tires.make}\u003c/span\u003e tires.`\u003c/span\u003e;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e以上是来自angular官网的一段代码，我们可以看到一个\u003ccode\u003eCar\u003c/code\u003e类依赖于\u003ccode\u003eEngine\u003c/code\u003e和\u003ccode\u003eTires\u003c/code\u003e这两个类，我们在\u003ccode\u003eCar\u003c/code\u003e的构造函数中去实例这两个依赖类。这有什么问题？如果有一天我们的\u003ccode\u003eTires\u003c/code\u003e构造函数需要一个参数，那么我们必须要在\u003ccode\u003eCar\u003c/code\u003e的构造函数中去更改代码。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-comment\"\u003e// ...\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003econstructor\u003c/span\u003e() {\n   \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.engine = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Engine();\n   \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.tires = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Tires(params);\n }\n]\n\u003cspan class=\"hljs-comment\"\u003e// ...\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这种代码是非常不灵活的。虽然我们可以进行如下结构调整\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eCar\u003c/span\u003e \u003c/span\u003e{\n  public engine: Engine;\n  public tires: Tires;\n  public description = \u003cspan class=\"hljs-string\"\u003e'No DI'\u003c/span\u003e;\n\n  \u003cspan class=\"hljs-keyword\"\u003econstructor\u003c/span\u003e(engine, tires) {\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.engine = engine;\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.tires = tires;\n  }\n\n  \u003cspan class=\"hljs-comment\"\u003e// Method using the engine and tires\u003c/span\u003e\n  drive() {\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e`\u003cspan class=\"hljs-subst\"\u003e${\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.description}\u003c/span\u003e car with `\u003c/span\u003e +\n      \u003cspan class=\"hljs-string\"\u003e`\u003cspan class=\"hljs-subst\"\u003e${\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.engine.cylinders}\u003c/span\u003e cylinders and \u003cspan class=\"hljs-subst\"\u003e${\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.tires.make}\u003c/span\u003e tires.`\u003c/span\u003e;\n  }\n}\n\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e car = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Car(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Engine(), \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Tires())\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这样似乎解决了不灵活的问题，但是如果依赖项很多的话，我们都要去手动创建这些实例，也不太方便。其实创建依赖实例的过程完全可以交给一个专门的'工厂'来做，这就是angular里面的Injector。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e基本使用\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e在组件中使用\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e@Component({\n  \u003cspan class=\"hljs-attr\"\u003eselector\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'app-heroes'\u003c/span\u003e,\n  \u003cspan class=\"hljs-attr\"\u003eproviders\u003c/span\u003e: [Engine, Tires],\n  \u003cspan class=\"hljs-attr\"\u003etemplate\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e`\n    \u0026lt;h2\u0026gt;Heroes\u0026lt;/h2\u0026gt;\n    \u0026lt;app-hero-list\u0026gt;\u0026lt;/app-hero-list\u0026gt;\n  `\u003c/span\u003e\n})\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eHeroesComponent\u003c/span\u003e \u003c/span\u003e{\n  construtor(private engine: Engine) {\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.engine.start();\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在Angular中，一般我们将这些公共的依赖都会一些一个服务里面。在上面的用法我们可以看到多了一个providers，另外就是在类的构造函数中增加了\u003ccode\u003eprivate engine: Engine\u003c/code\u003e我们就可以去使用engine这个实例了，在这个过程中，我们并没有去手动去创建依赖项的实例。这是因为angular的Injector帮我们自动创建了。在这里有一个比较形象的比喻就是，一个厨子（Injector）根据菜谱（providers）去做菜（依赖的实例），但是究竟做哪些菜呢，客人说了算（\u003ccode\u003eprivate engine: Engine\u003c/code\u003e也就是构造函数中的）\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在服务中使用\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Injectable } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\n\n@Injectable()\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eHeroService\u003c/span\u003e \u003c/span\u003e{\n  \u003cspan class=\"hljs-keyword\"\u003econstructor\u003c/span\u003e(private engine: Engine) { }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e如果我们的一个服务本身就依赖于其他依赖项，那么我们使用\u003ccode\u003e@Injectable()\u003c/code\u003e装饰器（即使一个服务并没有依赖于其他服务，我们也推荐加上@Injectable()装饰器），我们依然要提供providers。这里由于服务通常跟视图是没有具体的关系，所以这里我们不会引入\u003ccode\u003e@component\u003c/code\u003e装饰器，那么我们在哪里确定这个providers呢?我们可以在一个\u003ccode\u003emodule\u003c/code\u003e中的providers属性中去定义，那么这个\u003ccode\u003emodule\u003c/code\u003e中的所有组件都会去共用这一个实例，但是我们有时候我们不希望共用一个实例，而是一个新的实例，那么我们可以在这个组件中的providers中重新定义，这样我们就会得到一个新的实例。实际上这就是层级注入。利用层级注入我们既可以共用实例，也可以不共用实例非常方便。一般全局使用的服务，我们会注册在app.module模块之下，这样在整个应用中都可以使用。\u003c/p\u003e\n\u003cp\u003e在上面我们说过通过依赖注入创建的实例是可以实现共享的，我们证明一下。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Component, OnInit, ReflectiveInjector } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {DependenceComponent} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./dependence.component'\u003c/span\u003e;\n\n@Component({\n  \u003cspan class=\"hljs-attr\"\u003eselector\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'app-service'\u003c/span\u003e,\n  \u003cspan class=\"hljs-attr\"\u003etemplateUrl\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'./service.component.html'\u003c/span\u003e,\n  \u003cspan class=\"hljs-attr\"\u003estyleUrls\u003c/span\u003e: [\u003cspan class=\"hljs-string\"\u003e'./service.component.scss'\u003c/span\u003e],\n})\n\n\n@Injectable()\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eServiceComponent\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnInit\u003c/span\u003e \u003c/span\u003e{\n  \n  \u003cspan class=\"hljs-keyword\"\u003econstructor\u003c/span\u003e() {\n    \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e injector = ReflectiveInjector.resolveAndCreate([Dependence]);\n    \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e dependence1 = injector.get(Dependence);\n    \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e dependence2 = injector.get(Dependence);\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e'dependence1 === dependence2'\u003c/span\u003e, dependence1 === dependence2); \u003cspan class=\"hljs-comment\"\u003e// true\u003c/span\u003e\n  }\n  \n  ngOnInit() {}\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在这里我们可以看见打印出来的是\u003ccode\u003etrue\u003c/code\u003e，这里我们采用的是手动创建实例，所以我们并不需要在providers中提供“菜谱”，实际上\u003ccode\u003eresolveAndCreate\u003c/code\u003e的参数就是一个\u003ccode\u003eproviders\u003c/code\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003eProviders\u003c/h2\u003e\n\u003cp\u003e我们有四种配置注入过程，即使用类、使用工厂、使用值、使用别名\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e使用类\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e{\u003cspan class=\"hljs-attr\"\u003eprovide\u003c/span\u003e: MyService, \u003cspan class=\"hljs-attr\"\u003euseClass\u003c/span\u003e: MyService}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这是我们最常见的情形在angular中，通常如果provide的值和useclass的值一样，我们可以简化为\u003ccode\u003e[MyService]\u003c/code\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e使用值\n显然并不是每种情况，我们都需要注入一个类，有时候可以仅仅是一个值\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e{\u003cspan class=\"hljs-attr\"\u003eprovide\u003c/span\u003e: MyValue, \u003cspan class=\"hljs-attr\"\u003euseValue\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e12345\u003c/span\u003e}\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e使用别名\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e{\u003cspan class=\"hljs-attr\"\u003eprovide\u003c/span\u003e: OldService, \u003cspan class=\"hljs-attr\"\u003euseClass\u003c/span\u003e: NewService}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e如果我们有两个服务\u003ccode\u003eOldService\u003c/code\u003e和\u003ccode\u003eNewService\u003c/code\u003e接口都一致，出于某种原因，我们不得不使用\u003ccode\u003eOldService\u003c/code\u003e作为Token，但是我们又想使用\u003ccode\u003eNewService\u003c/code\u003e中的接口，那么我们就可以使用别名。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e使用存在的值\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e[ NewLogger,\n  \u003cspan class=\"hljs-comment\"\u003e// Not aliased! Creates two instances of `NewLogger`\u003c/span\u003e\n  { \u003cspan class=\"hljs-attr\"\u003eprovide\u003c/span\u003e: OldLogger, \u003cspan class=\"hljs-attr\"\u003euseClass\u003c/span\u003e: NewLogger}]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这种情况下会创建两个NewLogger的实例，这显然不是我们想要的结果，这时我们就可以使用存在的\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e[ NewLogger,\n  \u003cspan class=\"hljs-comment\"\u003e// Alias OldLogger w/ reference to NewLogger\u003c/span\u003e\n  { \u003cspan class=\"hljs-attr\"\u003eprovide\u003c/span\u003e: OldLogger, \u003cspan class=\"hljs-attr\"\u003euseExisting\u003c/span\u003e: NewLogger}]\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e使用工厂\n如果我们的服务需要根据不同的输入值，做出不同的响应，那么就必须要接受一个参数，那么我们就必须使用工厂\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e{\u003cspan class=\"hljs-attr\"\u003eprovide\u003c/span\u003e: MyService, \u003cspan class=\"hljs-attr\"\u003euseFactory\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003euser: User\u003c/span\u003e) =\u0026gt;\u003c/span\u003e {\n    user.isAdmin ? \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e adminService : customService,\n    \u003cspan class=\"hljs-attr\"\u003edeps\u003c/span\u003e: [User]\n}}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e当使用工厂时，我们可以通过变量的不同值，去实例不同的类。也就是说我们需要根据不同的值返回不同的依赖实例的时候，那么我们就需要使用工厂。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e@Options 、@Host\u003c/h2\u003e\n\u003cp\u003e目前为止我们的依赖都是存在的，但是实际情况并不是总是这样。那么我们可以通过@Optional装饰器来解决这个问题。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Optional } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\n\u003cspan class=\"hljs-comment\"\u003e// ....\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003econstructor\u003c/span\u003e(\n    @Optional() private dependenceService: DependenceService\n) {}\n\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\n\u003cp\u003e但是这里DependenceService这个服务类的定义还是存在的，只是没有准备好，例如没有在providers中使用\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e依赖查找的规则是按照注入器从当前组件向父级组件查找，直到找到这个依赖为止，但是如果限定查找路径截止在宿主组件，那么如果宿主组件中没有就会报错，我们可以通过@Host修饰器达到这一功能。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e如果一个组件注入了依赖项，那么这个组件就是这个依赖项的宿主组件，但是如果这个组件通过\u003ccode\u003eng-content\u003c/code\u003e被嵌入到宿主组件，那么这个宿主组件就是该依赖项的宿主组件。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 class=\"heading\"\u003eToken\u003c/h2\u003e\n\u003cp\u003e当我们在构造函数中使用\u003ccode\u003eprivate dependenceService: DependenceService\u003c/code\u003e,injector就可以正确的知道我们要实例哪一个类，这是因为在这里\u003ccode\u003eDependenceService\u003c/code\u003e充当了Token的角色（也就是说类名是可以充当Token的），我们只需要在providers中去寻找具有相同Token的值就行，但是往往我们注入不是一个类，而是一个字符串，function或者对象。而这里string、方法名和对象是不能够充当Token的，那么这时我们就需要来手动创建一个Token:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { InjectionToken } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\n\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e APP_CONFIG = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e InjectionToken\u0026lt;AppConfig\u0026gt;(\u003cspan class=\"hljs-string\"\u003e'app.config'\u003c/span\u003e);\n\nproviders: [{ \u003cspan class=\"hljs-attr\"\u003eprovide\u003c/span\u003e: APP_CONFIG, \u003cspan class=\"hljs-attr\"\u003euseValue\u003c/span\u003e: HERO_DI_CONFIG }]\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003econstructor\u003c/span\u003e(@Inject(APP_CONFIG) config: AppConfig) {\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.title = config.title;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eInject 装饰器显示的声明所依赖对象的类型\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e@Injectable()\n\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eA\u003c/span\u003e \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003econstructor\u003c/span\u003e(private buffer: Buffer) {}\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e等同于\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eA\u003c/span\u003e \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003econstructor\u003c/span\u003e(@Inject(Buffer) private buffer: Buffer) {}\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ca target=\"_blank\" href=\"http://djl.pub/\"\u003e更过精彩\u003c/a\u003e\u003c/p\u003e\n","buildTime":"1514377049.0607","__v":0}
{"_id":{"$oid":"5a4394d8bbcd9a0a78c8cf49"},"id":"5a4026626fb9a044fd11fca3","author":{"$oid":"5a4394d8bbcd9a0a78c8cf3b"},"title":"尝试造了个工具类库，名为 Diana","meta":{"likeCount":0},"tag":["JavaScript","前端"],"comment":[],"content":"\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608a9640a63835e?w=640\u0026amp;h=280\u0026amp;f=jpeg\u0026amp;s=31373\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e项目地址: \u003ca target=\"_blank\" href=\"https://github.com/MuYunyun/diana\"\u003ediana\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e文档地址: \u003ca target=\"_blank\" href=\"http://muyunyun.cn/diana/\"\u003ehttp://muyunyun.cn/diana/\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3 class=\"heading\"\u003e造轮子的意义\u003c/h3\u003e\n\u003cp\u003e为啥已经有如此多的前端工具类库还要自己造轮子呢？个人认为有以下几个观点吧：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e定制性强，能根据自己的需求为主导延伸开发。万一一不小心还能帮到别人（比如 React 库）；\u003c/li\u003e\n\u003cli\u003e纸上得来终觉浅，很多流行的库，只是照着它们的 API 进行使用，其实这些库里蕴含着大量的知识、技巧，最好的办法就是仿照它们来写些小 demo，从而体会这些库的精髓；\u003c/li\u003e\n\u003cli\u003e造轮子的过程中能让自己体会到与平常业务开发不一样的乐趣；比如和日常业务开发中很大的一个区别是会对测试用例具有比较严格的要求；而且写文档能力提升了。\u003c/li\u003e\n\u003cli\u003e就先瞎编到这里了。。。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e抛开内部方法(写相应的专题效果可能会更好，所以这里先略过)，下面分享一些开发 \u003ca target=\"_blank\" href=\"https://github.com/MuYunyun/diana\"\u003ediana 库\u003c/a\u003e 时的一些心得：\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e项目目录结构\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e├── LICENSE                  开源协议\n├── README-zh_en.md          英文说明文档\n├── README.md                中文说明文档\n├── coverage                 代码覆盖率文件\n├── docs                     文档目录\n│\u0026nbsp;\u0026nbsp; └── static-parts\n│\u0026nbsp;\u0026nbsp;     ├── index-end.html   静态文档目录结尾文件\n│\u0026nbsp;\u0026nbsp;     └── index-start.html 静态文档目录开头文件\n├── karma.conf.js            karma 配置文件\n├── lib\n│\u0026nbsp;\u0026nbsp; ├── diana.back.js        服务端引用入口\n│\u0026nbsp;\u0026nbsp; └── diana.js             浏览器引用入口\n├── package.json\n├── script\n│\u0026nbsp;\u0026nbsp; ├── build.js             构建文件\n│\u0026nbsp;\u0026nbsp; ├── check.js             结合 pre-commit 进行 eslint 校验\n│\u0026nbsp;\u0026nbsp; ├── tag-script.js        自动生成文档的标签\n│\u0026nbsp;\u0026nbsp; ├── web-script.js        自动生成文档\n│\u0026nbsp;\u0026nbsp; ├── webpack.browser.js   浏览器端 webpack 配置文件\n│\u0026nbsp;\u0026nbsp; └── webpack.node.js      服务器端 webpack 配置文件\n├── snippets\n├── src\n│\u0026nbsp;\u0026nbsp; ├── browser              浏览器端方法\n│\u0026nbsp;\u0026nbsp; ├── common               共用方法\n│\u0026nbsp;\u0026nbsp; ├── node                 node 端方法\n│\u0026nbsp;\u0026nbsp; └── util.js              库内通用方法\n├── tag_database             文档标签\n└── \u003cspan class=\"hljs-built_in\"\u003etest\u003c/span\u003e                     测试文件\n    ├── browserTest\n    ├── commonTest\n    ├── index.js\n    └── nodeTest\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e目录结构也随着方法的增多在不停迭代当中，建议直接到\u003ca target=\"_blank\" href=\"https://github.com/MuYunyun/diana\"\u003e库中\u003c/a\u003e查看最新的目录结构。\u003c/p\u003e\n\u003cp\u003e相应地，具体的方法会随着时间迭代，所以首先推荐查看\u003ca target=\"_blank\" href=\"http://muyunyun.cn/diana/\"\u003e文档\u003c/a\u003e，点击如下图的 Ⓢ 就能查看源码。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608a96409380c4e?w=651\u0026amp;h=300\u0026amp;f=jpeg\u0026amp;s=17160\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e让模块同时在 Node.js 与浏览器中运行\u003c/h3\u003e\n\u003cp\u003e我们可以通过如下方法来判断模块当前是运行在 Node.js 还是浏览器中，然后使用不同的方式实现我们的功能。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-comment\"\u003e// Only Node.JS has a process variable that is of [[Class]] process\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e isNode = \u003cspan class=\"hljs-built_in\"\u003eObject\u003c/span\u003e.prototype.toString.call(\u003cspan class=\"hljs-keyword\"\u003etypeof\u003c/span\u003e process !== \u003cspan class=\"hljs-string\"\u003e'undefined'\u003c/span\u003e ? process : \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) === \u003cspan class=\"hljs-string\"\u003e'[object process]'\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e但如果用户使用了模块打包工具，这样做会导致 Node.js 与浏览器的实现方式都会被包含在最终的输出文件中。针对这个问题，开源社区提出了在 package.json 中添加 browser 字段的\u003ca target=\"_blank\" href=\"https://github.com/defunctzombie/package-browser-field-spec\"\u003e提议\u003c/a\u003e，目前 webpack 和 rollup 都已经支持这个字段了。\u003c/p\u003e\n\u003cp\u003e给 browser 字段提供一个文件路径作为在浏览器端使用时的模块入口，但需要注意的是，打包工具会优先使用 browser 字段指定的文件路径作为模块入口，所以你的 main 字段 和 module 字段会被忽略，但是这会导致打包工具不会优化你的代码。详细信息请参考\u003ca target=\"_blank\" href=\"http://link.zhihu.com/?target=https%3A//github.com/webpack/webpack/issues/4674\"\u003e这个问题\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e在 \u003ca target=\"_blank\" href=\"https://github.com/MuYunyun/diana\"\u003ediana 库\u003c/a\u003e 为了在不同环境中使用适当的文件，在 package.json 中进行了如下声明：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e  \u003cspan class=\"hljs-string\"\u003e\"browser\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"lib/diana.js\"\u003c/span\u003e,\n  \u003cspan class=\"hljs-string\"\u003e\"main\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"lib/diana.back.js\"\u003c/span\u003e, \u003cspan class=\"hljs-comment\"\u003e// 或者 \"module\": \"lib/diana.back.js\",\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这样一来，在 node 环境中，引用的是 \u003ccode\u003elib/diana.back.js\u003c/code\u003e 文件，在浏览器环境中，引用的是 \u003ccode\u003elib/diana.js\u003c/code\u003e 文件。然后就能愉快地在浏览器端和 node 端愉快地使用自己特有的 api 了。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e常见模块规范比较\u003c/h3\u003e\n\u003cp\u003e另外为了使 \u003ca target=\"_blank\" href=\"https://github.com/MuYunyun/diana\"\u003ediana 库\u003c/a\u003e 的打包文件兼容 node 端、以及浏览器端的引用，选择了 UMD 规范进行打包，那么为什么要选择 UMD 规范呢？让我们看下以下几种规范之间的异同：\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003eCommonJS\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eCommonJs 是服务器端模块的规范，\u003ccode\u003eNode.js 采用了这个规范\u003c/code\u003e。这些规范涵盖了模块、二进制、Buffer、字符集编码、I/O流、进程环境、文件系统、套接字、单元测试、服务器网关接口、包管理等。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e根据 CommonJS 规范，一个单独的文件就是一个模块。加载模块使用 \u003ccode\u003erequire\u003c/code\u003e 方法，该方法读取一个文件并执行，最后返回文件内部的 \u003ccode\u003eexports\u003c/code\u003e 对象。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCommonJS 加载模块是同步的。像 Node.js 主要用于服务器的编程，加载的模块文件一般都已经存在本地硬盘，所以加载起来比较快，不用考虑异步加载的方式，所以 CommonJS 规范比较适用。但如果是浏览器环境，要从服务器加载模块，这是就必须采用异步模式。所以就有了 AMD、CMD 解决方案。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 class=\"heading\"\u003eAMD、CMD\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eAMD 是 RequireJS 在推广过程中对模块定义的规范化产物。AMD 推崇提前执行。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e \u003cspan class=\"hljs-comment\"\u003e// AMD 默认推荐的是\u003c/span\u003e\ndefine([\u003cspan class=\"hljs-string\"\u003e'./a'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'./b'\u003c/span\u003e], \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ea, b\u003c/span\u003e) \u003c/span\u003e{\n  a.doSomething()\n  b.doSomething()\n  ...\n})\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003eCMD 是 SeaJS 在推广过程中对模块定义的规范化产物。CMD 推崇依赖就近。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-comment\"\u003e// CMD\u003c/span\u003e\ndefine(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003erequire, exports, module\u003c/span\u003e) \u003c/span\u003e{\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e a = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'./a'\u003c/span\u003e)\n  a.doSomething()\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e b = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'./b'\u003c/span\u003e)\n  b.doSomething()\n  ...\n})\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 class=\"heading\"\u003eUMD\u003c/h4\u003e\n\u003cp\u003eUMD 是 AMD 和 CommonJS 的结合。因为 AMD 是以浏览器为出发点的异步加载模块，CommonJS 是以服务器为出发点的同步加载模块，所以人们想出了另一个更通用的模式 UMD，来解决跨平台的问题。\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://github.com/MuYunyun/diana/blob/master/lib/diana.js#L1\"\u003ediana 库\u003c/a\u003e 选择了以 umd 方式进行输出，来看下 UMD 做了啥：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003eroot, factory\u003c/span\u003e) \u003c/span\u003e{\n  \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003etypeof\u003c/span\u003e exports === \u003cspan class=\"hljs-string\"\u003e'object'\u003c/span\u003e \u0026amp;\u0026amp; \u003cspan class=\"hljs-keyword\"\u003etypeof\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003emodule\u003c/span\u003e === \u003cspan class=\"hljs-string\"\u003e'object'\u003c/span\u003e) { \u003cspan class=\"hljs-comment\"\u003e// UMD 先判断是否支持 Node.js 的模块（exports）是否存在，存在则使用 CommonJS 模式\u003c/span\u003e\n    \u003cspan class=\"hljs-built_in\"\u003emodule\u003c/span\u003e.exports = factory()\n  } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003etypeof\u003c/span\u003e define === \u003cspan class=\"hljs-string\"\u003e'function'\u003c/span\u003e \u0026amp;\u0026amp; define.amd) { \u003cspan class=\"hljs-comment\"\u003e// 接着判断是否支持 AMD（define是否存在），存在则使用 AMD 方式加载模块。\u003c/span\u003e\n    define([], factory)\n  } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003etypeof\u003c/span\u003e exports === \u003cspan class=\"hljs-string\"\u003e'object'\u003c/span\u003e) { \u003cspan class=\"hljs-comment\"\u003e// CommonJS 的另一种形式\u003c/span\u003e\n    exports[\u003cspan class=\"hljs-string\"\u003e'diana'\u003c/span\u003e] = factory()\n  } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e\n    root[\u003cspan class=\"hljs-string\"\u003e'diana'\u003c/span\u003e] = factory() \u003cspan class=\"hljs-comment\"\u003e// Window\u003c/span\u003e\n})(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003emodule\u003c/span\u003e\n})\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e测试踩坑之路\u003c/h3\u003e\n\u003ch4 class=\"heading\"\u003e代码覆盖率\u003c/h4\u003e\n\u003cp\u003e单元测试的代码覆盖率统计，是衡量测试用例好坏的一个的方法。但凡是线上用的库，基本上都少不了高质量的代码覆盖率的检测。如下图为 diana 库的测试覆盖率展示。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608a9640c580175?w=820\u0026amp;h=400\u0026amp;f=jpeg\u0026amp;s=52982\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e可以看到覆盖率分为以下 4 种类型，\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e行覆盖率（line coverage）：是否每一行都执行了？\u003c/li\u003e\n\u003cli\u003e函数覆盖率（function coverage）：是否每个函数都调用了？\u003c/li\u003e\n\u003cli\u003e分支覆盖率（branch coverage）：是否每个if代码块都执行了？\u003c/li\u003e\n\u003cli\u003e语句覆盖率（statement coverage）：是否每个语句都执行了？\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e番外：github 上显示的覆盖率是根据行覆盖率来展示的。\n\u003ca target=\"_blank\" href=\"https://codecov.io/gh/MuYunyun/diana\"\u003e\u003c/a\u003e\u003c/p\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://codecov.io/gh/MuYunyun/diana\"\u003e\u003cimg alt=\"codecov\" src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608a9646d277999\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/a\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003emocha + istanbul\u003c/h4\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://github.com/MuYunyun/diana/blob/d81991f588046b428e2ac959fb6b87e6edb4938e/package.json#L23\"\u003e最初的版本\u003c/a\u003e, 仅仅用到 mocha 进行测试 *.test.js 文件，然后在 \u003ca target=\"_blank\" href=\"https://codecov.io/gh/MuYunyun/diana\"\u003ecodecov\u003c/a\u003e 得到测试覆盖率。\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003e引人 karma\u003c/h4\u003e\n\u003cp\u003e如果仅仅测试 es5、es6 的语法，其实用 mocha 就已经够用了，但是涉及到测试 Dom 操作的语法等就必须建立一个浏览器，在上面进行测试。karma 的作用其实就是自动帮我们建立一个测试用的浏览器环境。\u003c/p\u003e\n\u003cp\u003e为了让浏览器支持 Common.js 规范，中间用了 karma + browserify，尽管测试用例都跑通了，但是最后的代码覆盖率的文件里只有各个方法的引用路径。最后只能又回到 karma + webpack 来，这里又踩到一个坑，\u003ca target=\"_blank\" href=\"https://segmentfault.com/a/1190000004283830\"\u003e打包编译JS代码覆盖率问题\u003c/a\u003e，踩了一些坑后，终于实现了可以查看编译前代码的覆盖率。图如下：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608a96407e17d0d?w=458\u0026amp;h=400\u0026amp;f=jpeg\u0026amp;s=27919\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e通过这幅图我们能清晰地看到源代码中测试用例跑过各行代码的次数(左侧的数字)，以及测试用例没有覆盖到的代码(图中红色所示)。然后我们就能改善相应的测试用例从而提高测试覆盖率。\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://github.com/MuYunyun/diana/blob/master/karma.conf.js\"\u003e配置文件\u003c/a\u003e，核心部分如下:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-built_in\"\u003emodule\u003c/span\u003e.exports = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003econfig\u003c/span\u003e) \u003c/span\u003e{\n  config.set({\n    \u003cspan class=\"hljs-attr\"\u003efiles\u003c/span\u003e: [\u003cspan class=\"hljs-string\"\u003e'test/index.js'\u003c/span\u003e], \u003cspan class=\"hljs-comment\"\u003e// 需载入浏览器的文件\u003c/span\u003e\n    preprocessors: { \u003cspan class=\"hljs-comment\"\u003e// 预处理\u003c/span\u003e\n      \u003cspan class=\"hljs-string\"\u003e'test/index.js'\u003c/span\u003e: [\u003cspan class=\"hljs-string\"\u003e'webpack'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'coverage'\u003c/span\u003e]\n    },\n    \u003cspan class=\"hljs-attr\"\u003ewebpack\u003c/span\u003e: {\n      \u003cspan class=\"hljs-attr\"\u003emodule\u003c/span\u003e: {\n        \u003cspan class=\"hljs-attr\"\u003erules\u003c/span\u003e: [{\n          \u003cspan class=\"hljs-attr\"\u003etest\u003c/span\u003e: \u003cspan class=\"hljs-regexp\"\u003e/\\.js$/\u003c/span\u003e,\n          \u003cspan class=\"hljs-attr\"\u003euse\u003c/span\u003e: { \u003cspan class=\"hljs-attr\"\u003eloader\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'sourcemap-istanbul-instrumenter-loader'\u003c/span\u003e }, \u003cspan class=\"hljs-comment\"\u003e// 这里用 istanbul-instrumenter-loader 插件的 0.0.2 版本，其它版本有坑~\u003c/span\u003e\n          exclude: [\u003cspan class=\"hljs-regexp\"\u003e/node_modules/\u003c/span\u003e, /\\.spec.js$/],\n        }],\n      }\n    },\n    \u003cspan class=\"hljs-attr\"\u003ecoverageReporter\u003c/span\u003e: {\n      \u003cspan class=\"hljs-attr\"\u003etype\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'lcov'\u003c/span\u003e, \u003cspan class=\"hljs-comment\"\u003e// 貌似只能支持这种类型的读取\u003c/span\u003e\n      dir: \u003cspan class=\"hljs-string\"\u003e'coverage/'\u003c/span\u003e\n    },\n    \u003cspan class=\"hljs-attr\"\u003eremapIstanbulReporter\u003c/span\u003e: { \u003cspan class=\"hljs-comment\"\u003e// 生成 coverage 文件\u003c/span\u003e\n      reports: {\n        \u003cspan class=\"hljs-string\"\u003e'text-summary'\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e,\n        \u003cspan class=\"hljs-attr\"\u003ejson\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'coverage/coverage.json'\u003c/span\u003e,\n        \u003cspan class=\"hljs-attr\"\u003elcovonly\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'coverage/lcov.info'\u003c/span\u003e,\n        \u003cspan class=\"hljs-attr\"\u003ehtml\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'coverage/html/'\u003c/span\u003e,\n      }\n    },\n    \u003cspan class=\"hljs-attr\"\u003ereporters\u003c/span\u003e: [\u003cspan class=\"hljs-string\"\u003e'progress'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'karma-remap-istanbul'\u003c/span\u003e], \u003cspan class=\"hljs-comment\"\u003e// remap-isbanbul 也报了一个未找到 sourcemap 的 error，直接注释了 remap-istanbul 包的 CoverageTransformer.js 文件的 169 行，以后有机会再捣鼓吧。（心累）\u003c/span\u003e\n    ...\n  })\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e总结\u003c/h3\u003e\n\u003cp\u003e本文围绕 \u003ca target=\"_blank\" href=\"https://github.com/MuYunyun/diana\"\u003ediana 库\u003c/a\u003e 对造轮子的意义，模块兼容性，测试用例进行了思考总结。后续会对该库流程自动化以及性能上做些分享。\n该库参考学习了很多优秀的库，感谢 \u003ca target=\"_blank\" href=\"https://github.com/jashkenas/underscore\"\u003eunderscore\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/proYang/outils\"\u003eoutils\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/chenhuiYj/ec-do\"\u003eec-do\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/Chalarangelo/30-seconds-of-code\"\u003e30-seconds-of-code\u003c/a\u003e 等库对我的帮助。\u003c/p\u003e\n\u003cp\u003e最后欢迎各位大佬在 \u003ca target=\"_blank\" href=\"https://github.com/MuYunyun/diana/issues\"\u003eissues\u003c/a\u003e 尽情吐槽。\u003c/p\u003e\n","buildTime":"1514377687.4916","__v":0}
{"_id":{"$oid":"5a4394d8bbcd9a0a78c8cf4a"},"id":"5a41942c6fb9a045167d6fbe","author":{"$oid":"5a4394d8bbcd9a0a78c8cf42"},"title":"【quickhybrid】H5和原生的职责划分","meta":{"likeCount":0},"tag":["API","前端","JavaScript","Java"],"comment":[],"content":"\u003ch2 class=\"heading\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e在JSBridge实现后，前端网页与原生的交互已经通了，接下来就要开始规划API，明确需要提供哪一些功能来供前端调用。\u003c/p\u003e\n\u003cp\u003e但是在这之前，还有一点重要工作需要做：\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e明确H5与Native的职责划分，确定哪一些功能可以由H5实现，哪一些功能只能由原生实现\u003c/strong\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003eNative与H5职责划分\u003c/h2\u003e\n\u003cp\u003e使用Hybrid模式，用H5开发页面的本质是：\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e减少工作量（一套代码，多个平台），以及快速的更新迭代（譬如线上更新），而且还需要考虑Native端的高性能以及系统API调用能力（否则直接用纯H5就可以了）\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e因此在进行职责划分时，就得充分的考虑前端渲染，JS语言以及原生渲染，Java/OC等语言的特性，\u003cstrong\u003e基本总结如下：\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e混合页面导航栏组件由原生实现\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e一些重要的业务页面、带有复杂动画或交互的页面以及一些固定页面由原生实现\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e系统级UI由原生统一实现\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e页面切换的转场由原生实现\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCPU密集型任务、底层的优化要由原生完成\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e其它功能能用H5实现（并且效果不错）的就尽量不要用原生\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 class=\"heading\"\u003e导航栏组件由Native实现\u003c/h2\u003e\n\u003cp\u003e尝试过，也对比过很多的混合开发框架，譬如Dcloud的HTML5+，钉钉里的DD API，自己也尝试过不同的方式，\n最终发现导航栏的最好做法还是由原生提供，核心原因如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eH5页面加载过程会有白屏问题（也别是弱网络情况）\u003c/strong\u003e，如果整个页面都是H5实现，那么白屏了就体验非常差，而且连基本的交互与操作都没了\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e仅基于这一点，就已经拍板了由Native导航栏组件+webview（加载H5）来组成页面，而原生提供一些API来供网页操控导航栏（譬如标题，按钮等）\u003c/p\u003e\n\u003cp\u003e整体页面布局如下：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/160902aaedf3e3ee?w=400\u0026amp;h=679\u0026amp;f=jpeg\u0026amp;s=16916\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e而H5端可以通过原生提供的API来操控导航栏，以下举例为quick中规划的API:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-comment\"\u003e// 仅提供一部分示例\u003c/span\u003e\nquick.navigator.setTitle({\n    \u003cspan class=\"hljs-attr\"\u003etitle\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'标题'\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003esubTitle\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'子标题'\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003esuccess\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eresult\u003c/span\u003e) \u003c/span\u003e{},\n    \u003cspan class=\"hljs-attr\"\u003eerror\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eerror\u003c/span\u003e) \u003c/span\u003e{}\n});\n\nquick.navigator.setRightBtn({\n    \u003cspan class=\"hljs-attr\"\u003eisShow\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003etext\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'按钮右1'\u003c/span\u003e,\n    \u003cspan class=\"hljs-comment\"\u003e// 设置图片的优先级会较高\u003c/span\u003e\n    \u003cspan class=\"hljs-comment\"\u003e//imageUrl: 'http://xxx/test.png',\u003c/span\u003e\n    \u003cspan class=\"hljs-comment\"\u003e// 从右数起第几个\u003c/span\u003e\n    which: \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003esuccess\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eresult\u003c/span\u003e) \u003c/span\u003e{\n        \u003cspan class=\"hljs-comment\"\u003e/**\n         * 按钮点击后回调\n         */\u003c/span\u003e\n    },\n    \u003cspan class=\"hljs-attr\"\u003eerror\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eerror\u003c/span\u003e) \u003c/span\u003e{}\n});\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e多tab页面也由原生提供\u003c/h3\u003e\n\u003cp\u003e实际开发中Native导航栏组件+webview也就满足绝大部分的页面需求了，但是还有一些特殊页面是这种实现达不到的，譬如多Tab页面\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/160902aaeedda629?w=400\u0026amp;h=704\u0026amp;f=jpeg\u0026amp;s=20041\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e上述这种内含多tab的页面，每一个tab里都是单独的页面，而且可以通过滑动等手势来切换，甚至tab还会有一些渐变动画，导航栏也配合改变等（常见于APP首页）\u003c/p\u003e\n\u003cp\u003e为了统一实现，这类页面的导航栏与底部tab均是由原生实现，由H5通过API打开这类原生页面，并将需要加载的网页地址传入，如下\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003equick.page.openLocal({\n    \u003cspan class=\"hljs-attr\"\u003eclassName\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'那种原生页面的标识，可以唯一查询到相应的界面'\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003edata\u003c/span\u003e: {\n        \u003cspan class=\"hljs-comment\"\u003e// 需要加载的n个url\u003c/span\u003e\n        url1: \u003cspan class=\"hljs-string\"\u003e'http://...'\u003c/span\u003e,\n        \u003cspan class=\"hljs-attr\"\u003eurln\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'http://...'\u003c/span\u003e,\n    },\n    \u003cspan class=\"hljs-attr\"\u003esuccess\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eresult\u003c/span\u003e) \u003c/span\u003e{},\n    \u003cspan class=\"hljs-attr\"\u003eerror\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eerror\u003c/span\u003e) \u003c/span\u003e{}\n});\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e然后，在每一个前端页面（webview里加载的内容），可以分别在对于页面的脚本里进行自己的交互控制\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e重要的业务页面由原生实现\u003c/h2\u003e\n\u003cp\u003e对于一些重要的业务页面，如登陆，注册，支付等，处于安全性以及交互性的考虑（就是一个APP的门面），会采用完全由Native实现\n（当然了，一般这些页面的变动频率也不大）\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/160902aaef023776?w=400\u0026amp;h=393\u0026amp;f=jpeg\u0026amp;s=18363\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e一些默认提示页面采用原生实现\u003c/h3\u003e\n\u003cp\u003ewebview加载网页时，一般情况原生都是会对加载情况进行监听的，比如是否网络异常。服务器响应异常，页面加载崩溃等，\n为了防止APP假死，原生会提高一些默认提示页面\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/160902aaef64cc89?w=400\u0026amp;h=706\u0026amp;f=jpeg\u0026amp;s=18622\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e上述只是一个原型示例，实际上，很多情况都可以由原生提供统一提示页面，\n如404，页面崩溃，网络错误等\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e交互性强、动画复杂的页面采用原生实现\u003c/h3\u003e\n\u003cp\u003e除了关键性页面，还有一类，就是H5不好实现的（或者说达不到要求的、实现代价过大的），也应该由原生实现\u003c/p\u003e\n\u003cp\u003e譬如以某图像处理软件某个界面截图为例\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/160902aaecb3da5a?w=400\u0026amp;h=711\u0026amp;f=jpeg\u0026amp;s=65590\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e这种页面涉及到了明显不太适合H5实现的图像处理，因此原生才是更佳的选择（当然了，实际上H5的canvas是由图像处理能力的）\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e系统级UI由原生统一实现\u003c/h2\u003e\n\u003cp\u003e前面提到了页面的选择，但页面内的内容也是需要抉择的，比如一些UI显示控件（alert，toast等）\u003c/p\u003e\n\u003cp\u003e虽然H5完成可以实现这些UI控件，并且可以和原生模拟的一样，但是基于以下考虑，所有系统级的UI全部由原生实现并提供API:（原生和H5需统一风格）\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e每一个合格的原生应用本身就会有一套自己风格的UI，因此不存在重复开发问题\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eH5本身可以实现这些组件，但是如果要模拟的和原生一摸一样的话代价并不小，而且体验并不能完全接近原生（比如遮罩无法覆盖导航栏）\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e如果是原生提供的，更改风格时原生改掉就行了，其它无效变动，如果H5单独维护一套，那么就被迫一起同步，平白新增很多的工作量\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e而且H5还会存在一些坐标、尺寸计算偏差问题\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e一般情况下H5通过如下API即可调用\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003equick.ui.toast(\u003cspan class=\"hljs-string\"\u003e'xxxx'\u003c/span\u003e);\nquick.ui.alert(\u003cspan class=\"hljs-string\"\u003e'xxxx'\u003c/span\u003e);\n\nquick.ui.alert({\n    \u003cspan class=\"hljs-attr\"\u003etitle\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"标题\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003emessage\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"信息\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003ebuttonName\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"确定\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003esuccess\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eresult\u003c/span\u003e) \u003c/span\u003e{\n        \u003cspan class=\"hljs-comment\"\u003e// 点击 alert的按钮后回调\u003c/span\u003e\n    },\n    \u003cspan class=\"hljs-attr\"\u003eerror\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eerr\u003c/span\u003e) \u003c/span\u003e{}\n});\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/160902aaffbeb3f8?w=400\u0026amp;h=229\u0026amp;f=jpeg\u0026amp;s=13297\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e页面切换的转场由原生实现\u003c/h2\u003e\n\u003cp\u003e一般PC浏览器中，页面之间的调整直接通过\u003ccode\u003ea标签\u003c/code\u003e完成（或者改变\u003ccode\u003ehref\u003c/code\u003e跳转），\n但是这种跳转有一个缺点：\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e无法使用转场动画，每次都是干巴巴的等浏览器加载进度条，体验很差\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e因此针对这种情况，原生需要提供特点的API来供页面调用，可以有原生转场动画，在新的webview中打开这个页面\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003equick.page.open({\n    \u003cspan class=\"hljs-attr\"\u003epageUrl\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"./xxx.html\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003edata\u003c/span\u003e: {\n        \u003cspan class=\"hljs-comment\"\u003e// 额外传递的数据\u003c/span\u003e\n        key1: \u003cspan class=\"hljs-string\"\u003e'value1'\u003c/span\u003e\n    },\n    \u003cspan class=\"hljs-attr\"\u003esuccess\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eresult\u003c/span\u003e) \u003c/span\u003e{},\n    \u003cspan class=\"hljs-attr\"\u003eerror\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eerror\u003c/span\u003e) \u003c/span\u003e{}\n});\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e采用这种方式打开的页面不再是在本webview中跳转，而是直接用新的webview打开，有过渡动画，而且以前的页面仍然存在内存中，接近原生体验\u003c/p\u003e\n\u003cp\u003e譬如\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e页面A -\u0026gt; 页面B -\u0026gt; 页面C\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/26/160902ab8bf0fe6d?w=500\u0026amp;h=398\u0026amp;f=png\u0026amp;s=10152\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e可以看到，如果是直接调整，页面A和B是不存存在的，而是会被替换，但是采用原生webview打开后，三个页面同时存在\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e仍然支持第三方页面的href跳转\u003c/h3\u003e\n\u003cp\u003e虽然说可以有API打开的增强方式，但是仍然需要支持href跳转，这在集成第三方页面时十分重要（将已经写好的第三方纯网页集成到容器中，作为某个子模块）\u003c/p\u003e\n\u003cp\u003e这里有一点需要注意：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e这类页面一般由a标签或href跳转直接打开，没有转场动画，但是需要webview容器保存访问历史记录，\n以避免多次跳转后一个后退就直接退出了整个模块\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003eCPU密集型任务、底层的优化要由原生完成\u003c/h2\u003e\n\u003cp\u003e当涉及到一些大量计算时，尽量避免直接在网页端完成，而是应该由原生提供API完成。\u003c/p\u003e\n\u003cp\u003e譬如对一张图片进行图像处理（曝光、水印、压缩等等），如果直接由网页完成的话会发现非常卡，发热也严重，而原生则没有这么多的问题\u003c/p\u003e\n\u003cp\u003e关于底层优化，\u003cstrong\u003e其实整套混合开发框架中，底层容器的实现是核心部分\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e容器是否健壮，优化的如何，直接影响整个应用的体验\u003c/p\u003e\n\u003cp\u003e关于原生容器应该如何进行优化，后续会有专门的文章，这里不赘述，只是稍微提及一下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e支持H5页面的离线访问（有线上版本和离线版本，通过本地路由表映射）\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e离线资源动态更新（结合离线访问一起，比较复杂）\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e资源缓存（如图片的缓存，脚本样式的缓存等）\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e统一数据埋点采样等（手机应用使用数据）\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eajax请求等等（还有很多，不一一列举）\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 class=\"heading\"\u003e能用H5实现的就尽量不要用原生\u003c/h2\u003e\n\u003cp\u003e接下来就是在实际开发过程遵循的准则：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e能用H5实现的就尽量不要用原生\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e乍看之下可能和上述的有矛盾，但其实又是合理的，在排除了一些不适合H5实现的页面，剩余的绝大部分都是普通的业务页面，\n这类页面基本可以毫无压力的采用H5。\u003c/p\u003e\n\u003cp\u003e所以，这时候，第一想法都是采用H5完成（因为一套代码可以在至少三个平台运行-浏览器，Android，iOS），\n遇到一些比较困难的页面再去考虑原生实现（从开发效率上，维护代价上，更新方便上都比较麻烦）\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e那些H5开发中遇到最多的页面\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e最后，看下实际开发过程中遇到的最多的页面吧（以实际遇到的\u003ccode\u003eN\u003c/code\u003e个项目的总结）\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e列表页面（下拉刷新，加载更多）\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e纯详情展示页面（标题，关键字，内容）\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e九宫格首页\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e图片轮播（时常结合列表和九宫格）\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e标准的表单提交页面\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e没错，\u003ccode\u003e80%\u003c/code\u003e都是上述这种可以算非常简单的页面。\u003c/p\u003e\n\u003cp\u003e譬如封装过一个下拉刷新组件，基本别人基于这个组件来开发，列表的代码几乎是千篇一律。（当然了，剥离了业务逻辑而言）\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e结束语\u003c/h2\u003e\n\u003cp\u003e时至今日，\u003ccode\u003eHybrid\u003c/code\u003e模式已经过了它最火的时候，市面上也出现如\u003ccode\u003eweex\u003c/code\u003e，\u003ccode\u003ereact-native\u003c/code\u003e等直接写原生组件的框架，\n但是，现在使用最多，应用最广的仍然要属这种传统的Hybrid模式，它已经进入了稳定期（可以说，传统H5开发（泛概念）不被APP淘汰，这种模式很难被挤下舞台）\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e返回根目录\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://github.com/quickhybrid/quickhybrid/issues/12\"\u003e【quickhybrid】如何实现一个Hybrid框架\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 class=\"heading\"\u003e源码\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003egithub\u003c/code\u003e上这个框架的实现\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://github.com/quickhybrid/quickhybrid\"\u003equickhybrid/quickhybrid\u003c/a\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e附录\u003c/h2\u003e\n\u003ch3 class=\"heading\"\u003e参考资料\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://segmentfault.com/a/1190000004263182\"\u003eHybrid APP架构设计思路\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","buildTime":"1514375900.9302","__v":0}
{"_id":{"$oid":"5a4394d8bbcd9a0a78c8cf4b"},"id":"5a372716518825258a5fbc80","author":{"$oid":"5a4394d8bbcd9a0a78c8cf43"},"title":"搭建一个前端监控系统,不再错过BUG","meta":{"likeCount":0},"tag":["Node.js","Redis","Highlight.js"],"comment":[],"content":"\u003ch1 class=\"heading\"\u003e前言\u003c/h1\u003e\n\u003cp\u003e还记得在我上一家公司中，某一大佬做了一个监控系统，牛逼哄哄，挺想研究他到底是怎么搞出来的。当然我们也不是拍拍脑袋干活的人，总不能人家咋干我们就咋干。下面先就介绍下，这样的平台到底有啥好处。\u003c/p\u003e\n\u003ch1 class=\"heading\"\u003e背景\u003c/h1\u003e\n\u003cp\u003e首先我们为什么要做前端系统呢，先看下面这张表，可以很显然的看出，前端的性能对于产品的价值提升还是蛮有帮助的，但是这些信息如果我们能实时的采集到，并且实施以监控，让整个产品在产品线上一直保持高效的运作，这才是我们的目的。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e性能\u003c/th\u003e\n\u003cth\u003e收益\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eGoogle 延迟 \u003cstrong\u003e400ms\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e搜索量下降 \u003cstrong\u003e0.59%\u003c/strong\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eBing 延迟 \u003cstrong\u003e2s\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e收入下降 \u003cstrong\u003e4.3%\u003c/strong\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eYahoo 延迟 \u003cstrong\u003e400ms\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e流量下降 \u003cstrong\u003e5-9%\u003c/strong\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eMozilla 页面打开减少 \u003cstrong\u003e2.2s\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e下载量提升 \u003cstrong\u003e15.4%\u003c/strong\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eNetflix 开启 Gzip\u003c/td\u003e\n\u003ctd\u003e性能提升 13.25% 带宽减少\u003cstrong\u003e50%\u003c/strong\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e其次，也有利于我们发布的产品，能够及时发现我们的错误。如果一个产品在新的迭代中，发生不可描述的错误。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"https://user-gold-cdn.xitu.io/2017/12/17/16062ce3510887ef?w=211\u0026amp;h=218\u0026amp;f=gif\u0026amp;s=948250\" src=\"https://user-gold-cdn.xitu.io/2017/12/17/16062ce3510887ef?w=211\u0026amp;h=218\u0026amp;f=gif\u0026amp;s=948250\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e对！就是不可描述。我们总不可能等待用户的反馈投诉，到那个时候黄花菜都凉了。\u003c/p\u003e\n\u003ch1 class=\"heading\"\u003e开始\u003c/h1\u003e\n\u003cp\u003e基于以上我们就开始搭建一个前端监\u003cstrong\u003e简易\u003c/strong\u003e控平台。(虽然现在市面上有很多这样的系统比如ELK,但是还是忍不住自己撸一个)\u003c/p\u003e\n\u003cp\u003e只能是简易了。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"https://user-gold-cdn.xitu.io/2017/12/17/16062ce34e8a7e9f?w=280\u0026amp;h=155\u0026amp;f=gif\u0026amp;s=675245\" src=\"https://user-gold-cdn.xitu.io/2017/12/17/16062ce34e8a7e9f?w=280\u0026amp;h=155\u0026amp;f=gif\u0026amp;s=675245\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e兄弟们原谅我，只能帮你们到这里了。\u003c/p\u003e\n\u003cp\u003e接下来请看。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"https://user-gold-cdn.xitu.io/2017/12/17/16062ce34f90726b?w=430\u0026amp;h=238\u0026amp;f=png\u0026amp;s=7208\" src=\"https://user-gold-cdn.xitu.io/2017/12/17/16062ce34f90726b?w=430\u0026amp;h=238\u0026amp;f=png\u0026amp;s=7208\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e以上是我们需要做的一些事情。\u003c/p\u003e\n\u003ch1 class=\"heading\"\u003e收集信息\u003c/h1\u003e\n\u003cp\u003e要做监控系统，首先我们得有一个对象。我们监控的对象！对象！对象！对象。\u003c/p\u003e\n\u003cp\u003e我在我的系统写了一个这样的页面，\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e2\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e2\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e2\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e2\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e2\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e2\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e \n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e没错这就是我们要监控的页面。这个.....真不是我懒。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"https://user-gold-cdn.xitu.io/2017/12/17/16062ce34a300fd3?w=214\u0026amp;h=216\u0026amp;f=gif\u0026amp;s=988503\" src=\"https://user-gold-cdn.xitu.io/2017/12/17/16062ce34a300fd3?w=214\u0026amp;h=216\u0026amp;f=gif\u0026amp;s=988503\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e然后接下来我一共设计了3块数据\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e页面加载时间\u003c/li\u003e\n\u003cli\u003e统计用户使用设备\u003c/li\u003e\n\u003cli\u003e错误量的统计\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e页面加载时间\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.logInfo = {};  \u003cspan class=\"hljs-comment\"\u003e//统计页面加载时间\u003c/span\u003e\n\u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.logInfo.openTime = performance.timing.navigationStart;\n\u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.logInfo.whiteScreenTime = +\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e() - \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.logInfo.openTime;\n\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.addEventListener(\u003cspan class=\"hljs-string\"\u003e'DOMContentLoaded'\u003c/span\u003e,\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\n  \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.logInfo.readyTime = +\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e() - \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.logInfo.openTime;\n});\n\u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.onload = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n  \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.logInfo.allloadTime = +\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e() - \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.logInfo.openTime;\n  \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.logInfo.nowTime = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e().getTime();\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e timname = {\n    \u003cspan class=\"hljs-attr\"\u003ewhiteScreenTime\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'白屏时间'\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003ereadyTime\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'用户可操作时间'\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003eallloadTime\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'总下载时间'\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003emobile\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'使用设备'\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003enowTime\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'时间'\u003c/span\u003e,\n  };\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e logStr = \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e;\n  \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e i \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e timname) {\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.warn(timname[i] + \u003cspan class=\"hljs-string\"\u003e':'\u003c/span\u003e + \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.logInfo[i] + \u003cspan class=\"hljs-string\"\u003e'ms'\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (i === \u003cspan class=\"hljs-string\"\u003e'mobile'\u003c/span\u003e) {\n      logStr += \u003cspan class=\"hljs-string\"\u003e'\u0026amp;'\u003c/span\u003e + i + \u003cspan class=\"hljs-string\"\u003e'='\u003c/span\u003e + \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.logInfo[i];\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n      logStr += \u003cspan class=\"hljs-string\"\u003e'\u0026amp;'\u003c/span\u003e + i + \u003cspan class=\"hljs-string\"\u003e'='\u003c/span\u003e + \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.logInfo[i];\n    }\n\n  }\n  (\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Image()).src = \u003cspan class=\"hljs-string\"\u003e'/action?'\u003c/span\u003e + logStr;\n};\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e统计用户使用设备\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.logInfo.mobile = mobileType();\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003emobileType\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e u = navigator.userAgent, app = navigator.appVersion;\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e type =  {\u003cspan class=\"hljs-comment\"\u003e// 移动终端浏览器版本信息\u003c/span\u003e\n    ios: !!u.match(\u003cspan class=\"hljs-regexp\"\u003e/\\(i[^;]+;( U;)? CPU.+Mac OS X/\u003c/span\u003e), \u003cspan class=\"hljs-comment\"\u003e//ios终端\u003c/span\u003e\n    iPad: u.indexOf(\u003cspan class=\"hljs-string\"\u003e'iPad'\u003c/span\u003e) \u0026gt; \u003cspan class=\"hljs-number\"\u003e-1\u003c/span\u003e, \u003cspan class=\"hljs-comment\"\u003e//是否iPad\u003c/span\u003e\n    android: u.indexOf(\u003cspan class=\"hljs-string\"\u003e'Android'\u003c/span\u003e) \u0026gt; \u003cspan class=\"hljs-number\"\u003e-1\u003c/span\u003e || u.indexOf(\u003cspan class=\"hljs-string\"\u003e'Linux'\u003c/span\u003e) \u0026gt; \u003cspan class=\"hljs-number\"\u003e-1\u003c/span\u003e, \u003cspan class=\"hljs-comment\"\u003e//android终端或者uc浏览器\u003c/span\u003e\n    iPhone: u.indexOf(\u003cspan class=\"hljs-string\"\u003e'iPhone'\u003c/span\u003e) \u0026gt; \u003cspan class=\"hljs-number\"\u003e-1\u003c/span\u003e || u.indexOf(\u003cspan class=\"hljs-string\"\u003e'Mac'\u003c/span\u003e) \u0026gt; \u003cspan class=\"hljs-number\"\u003e-1\u003c/span\u003e, \u003cspan class=\"hljs-comment\"\u003e//是否为iPhone或者QQHD浏览器\u003c/span\u003e\n    trident: u.indexOf(\u003cspan class=\"hljs-string\"\u003e'Trident'\u003c/span\u003e) \u0026gt; \u003cspan class=\"hljs-number\"\u003e-1\u003c/span\u003e, \u003cspan class=\"hljs-comment\"\u003e//IE内核\u003c/span\u003e\n    presto: u.indexOf(\u003cspan class=\"hljs-string\"\u003e'Presto'\u003c/span\u003e) \u0026gt; \u003cspan class=\"hljs-number\"\u003e-1\u003c/span\u003e, \u003cspan class=\"hljs-comment\"\u003e//opera内核\u003c/span\u003e\n    webKit: u.indexOf(\u003cspan class=\"hljs-string\"\u003e'AppleWebKit'\u003c/span\u003e) \u0026gt; \u003cspan class=\"hljs-number\"\u003e-1\u003c/span\u003e, \u003cspan class=\"hljs-comment\"\u003e//苹果、谷歌内核\u003c/span\u003e\n    gecko: u.indexOf(\u003cspan class=\"hljs-string\"\u003e'Gecko'\u003c/span\u003e) \u0026gt; \u003cspan class=\"hljs-number\"\u003e-1\u003c/span\u003e \u0026amp;\u0026amp; u.indexOf(\u003cspan class=\"hljs-string\"\u003e'KHTML'\u003c/span\u003e) == \u003cspan class=\"hljs-number\"\u003e-1\u003c/span\u003e, \u003cspan class=\"hljs-comment\"\u003e//火狐内核\u003c/span\u003e\n    mobile: !!u.match(\u003cspan class=\"hljs-regexp\"\u003e/AppleWebKit.*Mobile/i\u003c/span\u003e) || !!u.match(\u003cspan class=\"hljs-regexp\"\u003e/MIDP|SymbianOS|NOKIA|SAMSUNG|LG|NEC|TCL|Alcatel|BIRD|DBTEL|Dopod|PHILIPS|HAIER|LENOVO|MOT-|Nokia|SonyEricsson|SIE-|Amoi|ZTE/\u003c/span\u003e), \u003cspan class=\"hljs-comment\"\u003e//是否为移动终端\u003c/span\u003e\n    webApp: u.indexOf(\u003cspan class=\"hljs-string\"\u003e'Safari'\u003c/span\u003e) == \u003cspan class=\"hljs-number\"\u003e-1\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003e//是否web应该程序，没有头部与底部\u003c/span\u003e\n  };\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e lists = \u003cspan class=\"hljs-built_in\"\u003eObject\u003c/span\u003e.keys(type);\n  \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i \u0026lt; lists.length; i++) {\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(type[lists[i]]) {\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e lists[i];\n    }\n  }  \n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e错误量的统计\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.onload = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.logInfo.allloadTime = +\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e() - \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.logInfo.openTime;\n        \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.logInfo.nowTime = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e().getTime();\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e timname = {\n            \u003cspan class=\"hljs-attr\"\u003ewhiteScreenTime\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'白屏时间'\u003c/span\u003e,\n            \u003cspan class=\"hljs-attr\"\u003ereadyTime\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'用户可操作时间'\u003c/span\u003e,\n            \u003cspan class=\"hljs-attr\"\u003eallloadTime\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'总下载时间'\u003c/span\u003e,\n            \u003cspan class=\"hljs-attr\"\u003emobile\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'使用设备'\u003c/span\u003e,\n            \u003cspan class=\"hljs-attr\"\u003enowTime\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'时间'\u003c/span\u003e,\n        };\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e logStr = \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e i \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e timname) {\n            \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.warn(timname[i] + \u003cspan class=\"hljs-string\"\u003e':'\u003c/span\u003e + \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.logInfo[i] + \u003cspan class=\"hljs-string\"\u003e'ms'\u003c/span\u003e);\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (i === \u003cspan class=\"hljs-string\"\u003e'mobile'\u003c/span\u003e) {\n                logStr += \u003cspan class=\"hljs-string\"\u003e'\u0026amp;'\u003c/span\u003e + i + \u003cspan class=\"hljs-string\"\u003e'='\u003c/span\u003e + \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.logInfo[i];\n            } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n                logStr += \u003cspan class=\"hljs-string\"\u003e'\u0026amp;'\u003c/span\u003e + i + \u003cspan class=\"hljs-string\"\u003e'='\u003c/span\u003e + \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.logInfo[i];\n            }\n            \n        }\n        (\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Image()).src = \u003cspan class=\"hljs-string\"\u003e'/action?'\u003c/span\u003e + logStr;\n    };\n      \n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e defaults = {\n        \u003cspan class=\"hljs-attr\"\u003emsg\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e,  \u003cspan class=\"hljs-comment\"\u003e// 错误的具体信息\u003c/span\u003e\n        url:\u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e,  \u003cspan class=\"hljs-comment\"\u003e// 错误所在的url\u003c/span\u003e\n        line:\u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e, \u003cspan class=\"hljs-comment\"\u003e// 错误所在的行\u003c/span\u003e\n        col:\u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e,  \u003cspan class=\"hljs-comment\"\u003e// 错误所在的列\u003c/span\u003e\n        nowTime: \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e,\u003cspan class=\"hljs-comment\"\u003e// 时间\u003c/span\u003e\n    };\n    \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.onerror = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003emsg,url,line,col,error\u003c/span\u003e) \u003c/span\u003e{\n        col = col || (\u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.event \u0026amp;\u0026amp; \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.event.errorCharacter) || \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n\n        defaults.url = url;\n        defaults.line = line;\n        defaults.col =  col;\n        defaults.nowTime = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e().getTime();\n\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (error \u0026amp;\u0026amp; error.stack){\n            \u003cspan class=\"hljs-comment\"\u003e// 如果浏览器有堆栈信息，直接使用\u003c/span\u003e\n            defaults.msg = error.stack.toString();\n\n        }\u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-built_in\"\u003earguments\u003c/span\u003e.callee){\n            \u003cspan class=\"hljs-comment\"\u003e// 尝试通过callee拿堆栈信息\u003c/span\u003e\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e ext = [];\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e fn = \u003cspan class=\"hljs-built_in\"\u003earguments\u003c/span\u003e.callee.caller;\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e floor = \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e;  \n            \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e (fn \u0026amp;\u0026amp; (--floor\u0026gt;\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e)) {\n                ext.push(fn.toString());\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (fn  === fn.caller) {\n                    \u003cspan class=\"hljs-keyword\"\u003ebreak\u003c/span\u003e;\n                }\n                fn = fn.caller;\n            }\n            ext = ext.join(\u003cspan class=\"hljs-string\"\u003e\",\"\u003c/span\u003e);\n            defaults.msg = error.stack.toString();\n        }\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e str = \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e i \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e defaults) {\n            \u003cspan class=\"hljs-comment\"\u003e// console.log(i,defaults[i]);\u003c/span\u003e\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(defaults[i] === \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e || defaults[i] === \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e) {\n                defaults[i] = \u003cspan class=\"hljs-string\"\u003e'null'\u003c/span\u003e; \n            }\n            str += \u003cspan class=\"hljs-string\"\u003e'\u0026amp;'\u003c/span\u003e+ i + \u003cspan class=\"hljs-string\"\u003e'='\u003c/span\u003e + defaults[i].toString();\n        }\n        srt = str.replace(\u003cspan class=\"hljs-string\"\u003e'\u0026amp;'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e).replace(\u003cspan class=\"hljs-string\"\u003e'\\n'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e).replace(\u003cspan class=\"hljs-regexp\"\u003e/\\s/g\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e);\n        (\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Image()).src = \u003cspan class=\"hljs-string\"\u003e'/error?'\u003c/span\u003e + srt;\n    }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e以上就是收集数据的全部，通过发送/action请求或者是/error请求，这些都是可以自定义的，我讲的只是整个过程是如何实现的。\u003c/p\u003e\n\u003cp\u003e然后通过我的的一个后台express.js把所有的请求处理并都记录下来，记录好后的数据是这样子的。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003euser_ip=127.0.0.1\u0026amp;whiteScreenTime=185\u0026amp;readyTime=192\u0026amp;allloadTime=208\u0026amp;mobile=webKit\u0026amp;nowTime=1513071388941\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 class=\"heading\"\u003e数据处理\u003c/h1\u003e\n\u003cp\u003e这里我是通过自己写的一段脚本进行解析，parse.js，这里不具体讲解，看源码即可。我展现下解析好的数据。\u003c/p\u003e\n\u003cp\u003e我以cvs的数据格式储存，因为后面图表的需要，我也支持json格式方式导出，只不过后面就需要你自己来配置可视化的界面了。\u003c/p\u003e\n\u003cp\u003e数据是这样的。\u003c/p\u003e\n\u003cp\u003echarts/csvData/2017-12-16time.csv\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs txt\" lang=\"txt\"\u003e时间,白屏时间,用户可操作时间,总下载时间\u003cbr\u003e1513427051482,137,137,153\u003cbr\u003e1513427065080,470,471,507\u003cbr\u003e1513427080040,127,127,143\u003cbr\u003e1513428714345,274,275,323\u003cbr\u003e1513428733583,267,268,317\u003cbr\u003e1513428743167,268,268,317\u003cbr\u003e1513428754796,276,276,328\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch1 class=\"heading\"\u003e数据展示\u003c/h1\u003e\n\u003cp\u003e这里我用的是\u003ca target=\"_blank\" href=\"https://www.hcharts.cn/\"\u003ehighcharts.js\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e具体的配置我不进行讲解，可以自己到官网进行查看。\u003c/p\u003e\n\u003cp\u003e下面是可视化的图表，显示的是每天各个时间段的信息。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"https://user-gold-cdn.xitu.io/2017/12/17/16062ce35649b7e7?w=861\u0026amp;h=1595\u0026amp;f=png\u0026amp;s=83479\" src=\"https://user-gold-cdn.xitu.io/2017/12/17/16062ce35649b7e7?w=861\u0026amp;h=1595\u0026amp;f=png\u0026amp;s=83479\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e界面可能不是特别美观，还请见谅。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"https://user-gold-cdn.xitu.io/2017/12/17/16062ce3539eb419?w=237\u0026amp;h=234\u0026amp;f=gif\u0026amp;s=561618\" src=\"https://user-gold-cdn.xitu.io/2017/12/17/16062ce3539eb419?w=237\u0026amp;h=234\u0026amp;f=gif\u0026amp;s=561618\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e环境\u003c/h2\u003e\n\u003cp\u003enode \u0026gt;= 6.0.0\u003c/p\u003e\n\u003cp\u003eredis \u0026gt;= 2.6.0\u003c/p\u003e\n\u003cp\u003e在这里我说明下，因为如果这个部署在线上环境的时候，如果每次记录都进行记录的话，会消耗大量的内存，所以我架设了一层redis，为了防止大流量的冲击，然后可以每隔一段时间进行存储。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e express = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'express'\u003c/span\u003e);\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e performance = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'./lib/performance.js'\u003c/span\u003e);\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e app = express();\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e router = express.Router();\nrouter.get(\u003cspan class=\"hljs-string\"\u003e'/'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003ereq, res, next\u003c/span\u003e) \u003c/span\u003e{\n  req.url = \u003cspan class=\"hljs-string\"\u003e'./index.html'\u003c/span\u003e;\n  next();\n});\napp.use(router);\napp.use(performance({\n    \u003cspan class=\"hljs-attr\"\u003etime\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e, \u003cspan class=\"hljs-comment\"\u003e// 秒为单位\u003c/span\u003e\n    originalDir: \u003cspan class=\"hljs-string\"\u003e'./originalData'\u003c/span\u003e, \u003cspan class=\"hljs-comment\"\u003e// 数据的目录\u003c/span\u003e\n    errorDir: \u003cspan class=\"hljs-string\"\u003e'./errorData'\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003e// 报错的目录\u003c/span\u003e\n}))\napp.use(express.static(\u003cspan class=\"hljs-string\"\u003e'./'\u003c/span\u003e));\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e server = app.listen(\u003cspan class=\"hljs-number\"\u003e3000\u003c/span\u003e)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这里可以设置默认的时间，我这里以10秒为单位,为了demo的效果起见。一般我采用的是一分钟进行一次存储。\u003c/p\u003e\n\u003cp\u003e代码地址：\u003ca target=\"_blank\" href=\"https://github.com/hua1995116/mcharts\"\u003ehttps://github.com/hua1995116/mcharts\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e如有好的建议以及优化的方案，还请各位在Issues上提给我。\u003c/p\u003e\n\u003ch1 class=\"heading\"\u003e进阶（一个利用监控平台的实战栗子）\u003c/h1\u003e\n\u003cp\u003e我利用这个平台对我的一个项目进行了监控。如果你只是纯粹玩的话，还请只阅读上面的原系统地址，可以忽视我这一段，毕竟我这个系统还不够完善。\u003c/p\u003e\n\u003cp\u003e线上demo：\u003ca target=\"_blank\" href=\"http://www.qiufengh.com/#/\"\u003ehttp://www.qiufengh.com/#/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e监控demo：\u003ca target=\"_blank\" href=\"http://qiufengh.com:8080/\"\u003ehttp://qiufengh.com:8080/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e项目: \u003ca target=\"_blank\" href=\"https://github.com/hua1995116/webchat/tree/monitoring\"\u003ehttps://github.com/hua1995116/webchat/tree/monitoring\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e在这里我设置了每过1分钟记录一次日志。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-comment\"\u003e// 监控引入\u003c/span\u003e\napp.use(performance({\n    \u003cspan class=\"hljs-attr\"\u003etime\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e60\u003c/span\u003e, \u003cspan class=\"hljs-comment\"\u003e// 秒为单位\u003c/span\u003e\n    originalDir: \u003cspan class=\"hljs-string\"\u003e'./originalData'\u003c/span\u003e, \u003cspan class=\"hljs-comment\"\u003e// 数据的目录\u003c/span\u003e\n    errorDir: \u003cspan class=\"hljs-string\"\u003e'./errorData'\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003e// 报错的目录\u003c/span\u003e\n}))\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e以及每隔10分钟进行一次解析。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetPrase\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n    setInterval(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\n        parseData();\n      }, \u003cspan class=\"hljs-number\"\u003e1000\u003c/span\u003e * \u003cspan class=\"hljs-number\"\u003e60\u003c/span\u003e * \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"https://user-gold-cdn.xitu.io/2017/12/17/16062ce389311f6b?w=205\u0026amp;h=205\u0026amp;f=gif\u0026amp;s=29900\" src=\"https://user-gold-cdn.xitu.io/2017/12/17/16062ce389311f6b?w=205\u0026amp;h=205\u0026amp;f=gif\u0026amp;s=29900\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e2017-12-20\u003c/p\u003e\n\u003cp\u003e本文只是提供一个思路，如果想要专业的，可以使用\u003ca target=\"_blank\" href=\"https://www.elastic.co/cn/products\"\u003eELK\u003c/a\u003e之类专业的统计分析工具。\u003c/p\u003e\n","buildTime":"1514376878.4486","__v":0}
{"_id":{"$oid":"5a4394d8bbcd9a0a78c8cf4c"},"id":"5a41d10e6fb9a045204c78e5","author":{"$oid":"5a4394d8bbcd9a0a78c8cf39"},"title":"动态规划-01背包问题","meta":{"likeCount":0},"tag":["算法"],"comment":[],"content":"\u003cp\u003e背包问题(Knapsack problem)是一种组合优化的NP完全问题。问题可以描述为：\n给定一组物品，每种物品都有自己的重量和价格，在限定的总重量内，我们如何选择，才能使得物品的总价格最高。\u003c/p\u003e\n\u003ch1 class=\"heading\"\u003e问题\u003c/h1\u003e\n\u003cp\u003e假设山洞里共有a,b,c,d,e这5件宝物（不是5种宝物），它们的重量分别是2,2,6,5,4，\n它们的价值分别是6,3,5,4,6，现在给你个承重为 10 的背包, 怎么装背包，可以才能带走最多的财富。\u003c/p\u003e\n\u003ch1 class=\"heading\"\u003e动态规划\u003c/h1\u003e\n\u003ch2 class=\"heading\"\u003e转化方程\u003c/h2\u003e\n\u003cp\u003e动态规划一个关键的步骤是得到状态转化方程，物体的价值用 \u003ccode\u003ev(k)\u003c/code\u003e 表示，\n重量用 \u003ccode\u003ew(k)\u003c/code\u003e 表示，\u003ccode\u003ef[i, j]\u003c/code\u003e 表示将前 \u003ccode\u003ei\u003c/code\u003e 个物体放入到容量为 \u003ccode\u003ej\u003c/code\u003e 的背包中的最大价值，则有:\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/1609708352aee79d?w=771\u0026amp;h=150\u0026amp;f=png\u0026amp;s=9595\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e求解方法\u003c/h2\u003e\n\u003cp\u003e动态规划有两种等价的实现方法：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e带备忘的自顶向下法。此方法按照自然的递归形式编写过程，但过程中会保存每个子问题的解（通常保存在一个数组或散列表中）。\n当需要一个子问题的解时，过程首先检查是否已经保存过此解。如果是，则直接返回保存的值，从而节省了时间；否则，按通常方式计算\n这个子问题。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e自底向上法。这种方法一般需要恰当定义子问题“规模”的概念，使得任何子问题的求解都只依赖于“更小的”子问题的求解。因而\n我们可以将子问题按规模排序，按由小至大的顺序进行求解。当求解某个子问题时，它所依赖的那些更小的子问题都已求解完毕，\n结果已经保存。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 class=\"heading\"\u003e带备忘的自顶向下方法\u003c/h3\u003e\n\u003cp\u003e下面给出一个带备忘的自顶向下实现：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e v = [\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e]\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e w = [\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e]\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e c = \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e\n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ebag\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003ev, w, c\u003c/span\u003e) \u003c/span\u003e{\n  \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003e_bag\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003ev, w, c, f, s\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-comment\"\u003e// 子问题的规模\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e n = v.length\n    \u003cspan class=\"hljs-comment\"\u003e// 子问题已经被求解\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (f[n][c] \u0026gt; \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) {\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e f[n][c]\n    }\n    \u003cspan class=\"hljs-comment\"\u003e// 从剩下的物品中选择一件\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i \u0026lt; n; i++) {\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e newW = w.slice()\n      newW.splice(i, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e)\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e newV = v.slice()\n      newV.splice(i, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e)\n      \u003cspan class=\"hljs-comment\"\u003e// 选出来的物品重量大于背包剩余容量，则该子问题的解为0\u003c/span\u003e\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (w[i] \u0026gt; c) {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e\n      }\n      \u003cspan class=\"hljs-comment\"\u003e// 否则递归求解，得到子问题的最大的解及当前选择的物品\u003c/span\u003e\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e maxValue = v[i] + _bag(newV, newW, c - w[i], f, s)\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (f[n][c] \u0026lt; maxValue) {\n        f[n][c] = maxValue\n        s[n][c] = {\u003cspan class=\"hljs-attr\"\u003ev\u003c/span\u003e: v[i], \u003cspan class=\"hljs-attr\"\u003ew\u003c/span\u003e: w[i]}\n      }\n    }\n    \u003cspan class=\"hljs-comment\"\u003e// 返回子问题的最大解\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e f[n][c]\n  }\n\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e n = v.length\n  \u003cspan class=\"hljs-comment\"\u003e// 记录最大的价值\u003c/span\u003e\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e f = []\n  \u003cspan class=\"hljs-comment\"\u003e// 记录每一步所做的选择\u003c/span\u003e\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e s = []\n  \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i \u0026lt;= n; i++) {\n    f[i] = []\n    s[i] = []\n    \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e j = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; j \u0026lt;= c; j++) {\n      f[i][j] = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e\n      s[i][j] = \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e\n    }\n  }\n  _bag(v, w, c, f, s)\n\n  \u003cspan class=\"hljs-comment\"\u003e// 打印两个二维数组\u003c/span\u003e\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(f)\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(s)\n\n  \u003cspan class=\"hljs-comment\"\u003e// 从s中得到所选择的物品\u003c/span\u003e\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e selected = []\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e i = n\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e j = c\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e sum = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e\n  \u003cspan class=\"hljs-keyword\"\u003edo\u003c/span\u003e {\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e thing = s[i][j]\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (thing) {\n      selected.push(thing)\n      j -= thing.w\n      i--\n    }\n  } \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e (thing)\n\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e {\n    \u003cspan class=\"hljs-attr\"\u003emaxV\u003c/span\u003e: f[n][c],\n    \u003cspan class=\"hljs-attr\"\u003eselected\u003c/span\u003e: selected\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e说明\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e程序中 \u003ccode\u003ef\u003c/code\u003e 最后如下所示，其中第一行可以忽略，这么做只是为了让数组索引从 1 开始，跟上面的公式保持一致：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:center\"\u003e0\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e1\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e2\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e3\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e4\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e5\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e6\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e7\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e8\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e9\u003c/th\u003e\n\u003cth\u003e10\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd\u003enull\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd\u003enull\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd\u003enull\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e6\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd\u003enull\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e6\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e6\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e6\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e9\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd\u003enull\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd\u003e15\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e其中，\u003ccode\u003ef[5][10]\u003c/code\u003e 就是最后所求的最大价值，即 15。\n从上表还可以知道求解过程中递归求解了哪些问题，即上表中值不为 null 的那些。\n而如果需要知道最后所选择的物品，还需要借助 \u003ccode\u003es\u003c/code\u003e :\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:center\"\u003e0\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e1\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e2\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e3\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e4\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e5\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e6\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e7\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e8\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e9\u003c/th\u003e\n\u003cth\u003e10\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd\u003enull\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd\u003enull\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd\u003enull\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e{ v: 3, w: 2 }\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e{ v: 3, w: 2 }\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e{ v: 3, w: 2 }\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e{ v: 6, w: 4 }\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd\u003enull\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e{ v: 6, w: 4 }\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e{ v: 6, w: 4 }\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e{ v: 6, w: 2 }\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e{ v: 3, w: 2 }\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd\u003enull\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003enull\u003c/td\u003e\n\u003ctd\u003e{ v: 6, w: 2 }\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e其中，\u003ccode\u003es[i][j]\u003c/code\u003e 表示将前 \u003ccode\u003ei\u003c/code\u003e 个物体放入到容量为 \u003ccode\u003ej\u003c/code\u003e 的背包中时所选择的第一个物品\u003c/p\u003e\n\u003cp\u003e现在，让我们来理一下这个过程：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003es[5][10]\u003c/code\u003e 表示将前 5 个物品放到容量为 10 的背包中，选择了物品 \u003ccode\u003e{ v: 6, w: 2 }\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e接下来处理子问题 \u003ccode\u003es[4][8]\u003c/code\u003e ，选择了物品 \u003ccode\u003e{ v: 6, w: 4 }\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e接下来处理子问题 \u003ccode\u003es[3][4]\u003c/code\u003e ，选择了物品 \u003ccode\u003e{ v: 3, w: 2 }\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e接下来处理子问题 \u003ccode\u003es[2][2]\u003c/code\u003e ，没有选择任何物品。\u003c/li\u003e\n\u003cli\u003e得到最后所选择的物品为 \u003ccode\u003e{ v: 6, w: 2 }\u003c/code\u003e, \u003ccode\u003e{ v: 6, w: 4 }\u003c/code\u003e, \u003ccode\u003e{ v: 3, w: 2 }\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 class=\"heading\"\u003e自底向上法\u003c/h3\u003e\n\u003cp\u003e下面是自底向上法的实现：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ebag2\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003ev, w, c\u003c/span\u003e) \u003c/span\u003e{\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e f = []\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e s = []\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e n = v.length\n\n  \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i \u0026lt;= n; i++) {\n    f[i] = []\n    s[i] = []\n    \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e j = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; j \u0026lt;= c; j++) {\n      f[i][j] = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e\n      s[i][j] = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e\n    }\n  }\n\n  \u003cspan class=\"hljs-comment\"\u003e// 遍历物品\u003c/span\u003e\n  \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e; i \u0026lt;= n; i++) {\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e index = i - \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e\n    \u003cspan class=\"hljs-comment\"\u003e// 遍历容量\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e j = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; j \u0026lt;= c; j++) {\n      \u003cspan class=\"hljs-comment\"\u003e// 当前物品放入的情况\u003c/span\u003e\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (w[index] \u0026lt;= j \u0026amp;\u0026amp; v[index] + f[i - \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e][j - w[index]] \u0026gt; f[i - \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e][j]) {\n        f[i][j] = v[index] + f[i - \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e][j - w[index]]\n        s[i][j] = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e\n      }\n      \u003cspan class=\"hljs-comment\"\u003e// 当前物品不放入的情况\u003c/span\u003e\n      \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n        f[i][j] = f[i - \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e][j]\n      }\n    }\n  }\n\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e{\n    \u003cspan class=\"hljs-attr\"\u003ef\u003c/span\u003e: f,\n    \u003cspan class=\"hljs-attr\"\u003es\u003c/span\u003e: s\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e说明\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e首先，注意到这个事实：物品放入的顺序不会影响我们最后的结果。这里按照题目中的顺序依次考察\n每个物品在每个容量的情况下是否放入。\u003c/p\u003e\n\u003cp\u003e仍然用 \u003ccode\u003ef\u003c/code\u003e 来记录最大值，用 \u003ccode\u003es\u003c/code\u003e 来记录选择。\u003c/p\u003e\n\u003cp\u003e不过这里的 \u003ccode\u003es[i][j]\u003c/code\u003e 只需标记当前物品是否放入即可， 所以 \u003ccode\u003es[i][j]\u003c/code\u003e 取值为 0 或 1。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ef\u003c/code\u003e 如下所示:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:center\"\u003ev\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003ew\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e0\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e1\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e2\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e3\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e4\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e5\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e6\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e7\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e8\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e9\u003c/th\u003e\n\u003cth\u003e10\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003e-\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e-\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003e6\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e2\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e6\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e6\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e6\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e6\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e6\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e6\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e6\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e6\u003c/td\u003e\n\u003ctd\u003e6\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003e3\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e2\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e6\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e6\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e9\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e9\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e9\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e9\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e9\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e9\u003c/td\u003e\n\u003ctd\u003e9\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e6\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e6\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e6\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e9\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e9\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e9\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e9\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e11\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e11\u003c/td\u003e\n\u003ctd\u003e14\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003e4\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e6\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e6\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e9\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e9\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e9\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e10\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e11\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e13\u003c/td\u003e\n\u003ctd\u003e14\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003e6\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e4\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e6\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e6\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e9\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e9\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e12\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e12\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e15\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e15\u003c/td\u003e\n\u003ctd\u003e15\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003ccode\u003es\u003c/code\u003e 如下所示:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:center\"\u003ev\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003ew\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e0\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e1\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e2\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e3\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e4\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e5\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e6\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e7\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e8\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e9\u003c/th\u003e\n\u003cth\u003e10\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003e-\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e-\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003e6\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e2\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e1\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003e3\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e2\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e1\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e6\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e1\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003e4\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e1\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003e6\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e4\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e1\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e同样，我们可以反向推导出最后的选择：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003es[5][10]\u003c/code\u003e 为 1，该物体放入袋中\u003c/li\u003e\n\u003cli\u003e考察 \u003ccode\u003es[4][6]\u003c/code\u003e，为 0，说明这个物体不放入\u003c/li\u003e\n\u003cli\u003e考察 \u003ccode\u003es[3][6]\u003c/code\u003e，为 0， 不放入\u003c/li\u003e\n\u003cli\u003e考察 \u003ccode\u003es[2][6]\u003c/code\u003e，为 1， 放入\u003c/li\u003e\n\u003cli\u003e考察 \u003ccode\u003es[1][4]\u003c/code\u003e, 为 1， 放入\u003c/li\u003e\n\u003cli\u003e得到最后所选择的物品为 \u003ccode\u003e{ v: 6, w: 2 }\u003c/code\u003e, \u003ccode\u003e{ v: 3, w: 2 }\u003c/code\u003e, \u003ccode\u003e{ v: 6, w: 4 }\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 class=\"heading\"\u003e总结\u003c/h1\u003e\n\u003cp\u003e以后碰到动态规划相关的问题都可以用这个思路来解决了，关键在于要构造转移函数这个模型。\n个人感觉自顶向下法更加好理解，但是代码略显啰嗦了。\u003c/p\u003e\n","buildTime":"1514375777.9252","__v":0}
{"_id":{"$oid":"5a4394d8bbcd9a0a78c8cf4d"},"id":"5a3f494d6fb9a0450a678f8d","author":{"$oid":"5a4394d8bbcd9a0a78c8cf38"},"title":"[译]使用 CSS Grid：以兼容不支持栅格化布局的浏览器","meta":{"likeCount":0},"tag":["CSS","前端","掘金翻译计划"],"comment":[],"content":"\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e原文地址：\u003ca target=\"_blank\" href=\"https://www.smashingmagazine.com/2017/11/css-grid-supporting-browsers-without-grid/?utm_source=SitePoint\u0026amp;utm_medium=email\u0026amp;utm_campaign=Versioning\"\u003eUsing CSS Grid: Supporting Browsers Without Grid\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e原文作者：\u003ca target=\"_blank\" href=\"https://www.smashingmagazine.com/author/rachel-andrew\"\u003eRachel Andrew\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e译文出自：\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner\"\u003e掘金翻译计划\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e本文永久链接：\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner/blob/master/TODO/css-grid-supporting-browsers-without-grid.md\"\u003ehttps://github.com/xitu/gold-miner/blob/master/TODO/css-grid-supporting-browsers-without-grid.md\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e译者：\u003ca target=\"_blank\" href=\"https://github.com/Raoul1996\"\u003eRaoul1996\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e校对者：\u003ca target=\"_blank\" href=\"https://github.com/AceLeeWinnie\"\u003eAceLeeWinnie\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/su-dan\"\u003esu-dan\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003e摘要\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e当使用任何 CSS 的新特性的时候，浏览器的兼容问题都必须去解决。与 Flexbox 和 CSS Grid 一样，在使用 CSS 新特性布局时，兼容性比性能增强更值得考虑。\u003c/p\u003e\n\u003cp\u003e在这篇文章中，我将探索\u003cstrong\u003e现今处理浏览器兼容问题\u003c/strong\u003e的方法。为了让我们现在就用上 CSS 的新特性，我们可以做出哪些努力，仍然给那些不支持新特性的浏览器提供很好的体验？\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e我们说的支持是什么？\u003c/h3\u003e\n\u003cp\u003e在阐明如何在去支持那些本身不支持网格的浏览器之前，很有必要搞明白 \u003cstrong\u003e支持\u003c/strong\u003e 的含义。支持也许是站点必须在列表中的浏览器上看起来完全相同。这可能意味着对于所有的浏览器，你都可以不用去做一些收尾工作。这可能意味着你在测试这些浏览器的时候对他们能获得一致的体验而感到十分高兴。\u003c/p\u003e\n\u003cp\u003e一个相关的问题就是**你怎么确定要支持的浏览器列表？**即使是一个全新的网站，也不应该拍脑袋就定了。对于今天的大多数的企业都曾经创建过网站。你可能有一些分析工具用于查看网站支持的浏览器，但是要注意这些工具不会检测对移动端的支持情况。如果在较小屏幕上表现不佳，人们便不会在手机上访问这个网站！\u003c/p\u003e\n\u003cp\u003e如果没有任何的分析工具，你可以在 \u003ca target=\"_blank\" href=\"https://caniuse.com/\"\u003eCan I Use\u003c/a\u003e 上面导入你所在位置的数据。\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://www.smashingmagazine.com/wp-content/uploads/2017/11/can-i-use-import-data-large-opt.png\"\u003e\u003c/a\u003e\u003c/p\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://www.smashingmagazine.com/wp-content/uploads/2017/11/can-i-use-import-data-large-opt.png\"\u003e\u003cimg alt=\"在 Can I Use 上可以导入你所在位置的使用情况数据\" src=\"https://user-gold-cdn.xitu.io/2017/12/24/16087364f5ea7e77?w=800\u0026amp;h=611\u0026amp;f=png\u0026amp;s=42887\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/a\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e在 \u003ca target=\"_blank\" href=\"https://caniuse.com/\"\u003eCan I Use\u003c/a\u003e 这个网站上，你可以导入所在位置的使用情况数据。 (\u003ca target=\"_blank\" href=\"https://www.smashingmagazine.com/wp-content/uploads/2017/11/can-i-use-import-data-large-opt.png\"\u003e预览大图\u003c/a\u003e)\u003c/p\u003e\n\u003cp\u003e同样值得在这里牢记网站的目标。例如，希望吸引生活在印度等新兴市场的访问者的网站应该确保能在这些国家用户使用的浏览器中正常运行。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e我仅仅只需要担心旧浏览器吗？\u003c/h3\u003e\n\u003cp\u003e截止发稿，Edge，Chrome，Firefox，Opera，Safari，iOS Safari 都支持了网格布局。\u003c/p\u003e\n\u003cp\u003eIE10 和 IE11 支持带有 \u003ccode\u003e-ms\u003c/code\u003e 前缀的原始规格。对于你正在使用的 \u003cstrong\u003e旧\u003c/strong\u003e 浏览器来说：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eInternet Explorer 9（如果仅考虑新的规范，则为IE 11及更低版本）\u003c/li\u003e\n\u003cli\u003eEdge 15 及以下\u003c/li\u003e\n\u003cli\u003eFirefox 52 之前的版本\u003c/li\u003e\n\u003cli\u003eSafari 和 iOS Safari 10.1 版本之前\u003c/li\u003e\n\u003cli\u003eChrome 57 之前的版本\u003c/li\u003e\n\u003cli\u003eSamsung Internet 6.2 之前的版本\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e然而，正如上一节所述，这些流行的桌面端和移动端浏览器在新兴市场中已经更常用。\u003cstrong\u003e这些浏览器还不支持网格布局\u003c/strong\u003e。比如说从世界范围来看，UC 浏览器占用了 8.1% 的流量，俨然是世界第三大流行的浏览器。但是如果碰巧你住在美国或者欧洲，可能你从来都没有听说过。\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://www.smashingmagazine.com/wp-content/uploads/2017/11/StatCounter-browser-ww-monthly-201610-201710-large-opt.png\"\u003e\u003c/a\u003e\u003c/p\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://www.smashingmagazine.com/wp-content/uploads/2017/11/StatCounter-browser-ww-monthly-201610-201710-large-opt.png\"\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/24/1608735ceb7b3ed0?w=800\u0026amp;h=450\u0026amp;f=png\u0026amp;s=24323\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/a\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e(\u003ca target=\"_blank\" href=\"http://gs.statcounter.com/\"\u003e图片来源\u003c/a\u003e) (\u003ca target=\"_blank\" href=\"https://www.smashingmagazine.com/wp-content/uploads/2017/11/StatCounter-browser-ww-monthly-201610-201710-large-opt.png\"\u003e预览大图\u003c/a\u003e)\u003c/p\u003e\n\u003cp\u003eUC 浏览器不支持网格布局。它不仅针对低功耗设备进行了优化，也适用于那些流量费昂贵地区的用户。这是我们在开始规划支持的一个重要考虑因素。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e有没有 CSS Grid 的 Polyfill（垫片）？\u003c/h3\u003e\n\u003cp\u003e在第一次遇到 CSS Grid 的时候，一个显而易见的问题是：“我可以使用 polyfill 吗？”不幸的是，即使有这样的好事，对于整个布局来说，一个神奇的 polyfill 既不太可能出现，也不是一个好主意。\u003c/p\u003e\n\u003cp\u003e使用旧的布局方式，网格几乎做不到这一点。所以，为了在不支持的浏览器中复制网格布局，需要在 JavaScript 中做很多的工作。即使在资源充足的计算机上，使用了快速渲染引擎，在计算高度和元素的定位方面还是可能会带来一些令人生厌的体验。我们已经知道，\u003cstrong\u003e不支持网格的浏览器\u003c/strong\u003e是新兴市场上低功耗设备上最常见的 \u003cstrong\u003e较老\u003c/strong\u003e，或者较慢的浏览器。为什么硬要在这些设备上放一堆 JavaScript 呢？\u003c/p\u003e\n\u003cp\u003e不要搜索一个 polyfill，而是要考虑如何使用网格布局为那些不支持的浏览器提供更好的体验。在支持的浏览器上，使用网格可以用最少的 CSS 创造复杂的布局，但同时仍然要为那些不支持的浏览器提供良好的体验。这样会比仅仅在这个问题上抛出一个 polyfill 多一些工作，但是这样做的话，你可以保证能提供良好的体验，反而让网站在所有的地方显示相同不是最重要的目标。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e网格布局降级方案\u003c/h3\u003e\n\u003cp\u003e那么，我们如何为正在使用的设备和浏览器提供定制的支持？事实证明，CSS 中有你要的答案。\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003e浏览器忽略那些他们不懂的 CSS\u003c/h4\u003e\n\u003cp\u003e图片的第一部分是浏览器略过他们不懂的 CSS。如果一个浏览器不支持 CSS Grid 布局，遇到 \u003ccode\u003egrid-template-columns\u003c/code\u003e 属性的时候，他不知道这是什么东西，所以就会跳过这行继续解析下面的内容。\u003c/p\u003e\n\u003cp\u003e这就意味着你需要用一些旧的 CSS，就像你过去那样，使用 \u003ccode\u003efloat\u003c/code\u003e 或者 \u003ccode\u003edisplay: table-cell\u003c/code\u003e 在古老浏览器中实现网格样式的布局。不支持网格布局的浏览器将使用此布局并且忽略所有的网格声明。支持网格布局的浏览器将会继续寻找网格指令并且应用他们。这一点上，我们需要考虑如果使用其他布局方法的项目成为网格项目的时候会发生什么情况。\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003e新布局兼容旧布局\u003c/h4\u003e\n\u003cp\u003e规范规定了如果你的页面上有使用其他布局方式定位的元素的时候，网格将会如何处理。\u003c/p\u003e\n\u003cp\u003e使用了浮动（float）或清除（clear）属性的元素，再应用网格成为网格元素的话，将不再表现为浮动或清除，就像从没用过它们一样。在下一个 CodePen 中删除应用了 \u003ccode\u003e.grid\u003c/code\u003e 类的所有属性，你可以看到我们所有的项目是如何浮动的，第三个项目是如何清除浮动的。但是在网格布局中，这将被忽略。\u003c/p\u003e\n\u003cp\u003e可以看下 rachelandrew (\u003ca target=\"_blank\" href=\"https://codepen.io/rachelandrew\"\u003e@rachelandrew\u003c/a\u003e) 在 \u003ca target=\"_blank\" href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e 写的这个 Pen \u003ca target=\"_blank\" href=\"https://codepen.io/rachelandrew/pen/jamLjw/\"\u003e使用 display: grid 覆盖 float 和 clear\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003einline-block\u003c/code\u003e 同样也是如此。\u003ccode\u003einline-block\u003c/code\u003e 可以设置给子项，但是只要父窗口应用了 \u003ccode\u003edisplay: grid\u003c/code\u003e，那么 inline-block 将失效。\u003c/p\u003e\n\u003cp\u003e我经常使用 CSS \u003ccode\u003edisplay: table-cell\u003c/code\u003e 来创建一个列布局，并在非支持网格的浏览器中对齐项目，因为这样 \u003ccode\u003evertical-align\u003c/code\u003e 属性可以生效。\u003c/p\u003e\n\u003cp\u003e如果你以前不知道, 阅读 \u003ca target=\"_blank\" href=\"https://colintoh.com/blog/display-table-anti-hero\"\u003eCSS 布局的反英雄 — “display:table”\u003c/a\u003e。我不建议你现在使用这个作为主要的布局方式，但是它可以作为一个非常有用的回退方案。\u003c/p\u003e\n\u003cp\u003e当你使用 \u003ccode\u003edisplay: table-cell\u003c/code\u003e 创建列，CSS 将创建所谓的 \u003cstrong\u003e匿名框\u003c/strong\u003e 。这些是表格的缺失部分 —— 真正的 HTML 表格中的单元格将在 \u003ccode\u003etable\u003c/code\u003e 元素里边的 \u003ccode\u003etr\u003c/code\u003e 元素内。匿名框基本上解决了这些失踪的父元素。如果你的 \u003ccode\u003etable-cell\u003c/code\u003e 元素变成了一个网格元素。这样这个元素的 table 显示同样会失效，就像什么也没有发生。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003evertical-align\u003c/code\u003e 属性在网格布局中仍然不适用。因此如果你可以在 CSS 表格布局或 \u003ccode\u003einline-block\u003c/code\u003e中使用它，则可以安全的忽略该属性，尽情使用网格布局的框对齐方式。你可以在下一个 CodePen 中看到一个使用 CSS Grid 覆盖 \u003ccode\u003edisplay:table-cell\u003c/code\u003e 和 \u003ccode\u003evertical-align\u003c/code\u003e 的布局。\u003c/p\u003e\n\u003cp\u003e可以看下 rachelandrew (\u003ca target=\"_blank\" href=\"https://codepen.io/rachelandrew\"\u003e@rachelandrew\u003c/a\u003e) 在 \u003ca target=\"_blank\" href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e 写的这个 Pen \u003ca target=\"_blank\" href=\"https://codepen.io/rachelandrew/pen/NwjaKp/\"\u003edisplay: grid 覆盖 display: table-cell 和 vertical-align\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e你同样可以使用 Flexbox 作为一个回退方案，一旦你在一个使用 \u003ccode\u003eflex\u003c/code\u003e 属性或者独立的 \u003ccode\u003eflex-grow\u003c/code\u003e，\u003ccode\u003eflex-shrink\u003c/code\u003e 或者 \u003ccode\u003eflex-basis\u003c/code\u003e 属性的元素上使用 grid 布局，它们（flex 等）同样会失效。\u003c/p\u003e\n\u003cp\u003e最后，请不要忘记多列布局在某种情况下可以作为一个回退方案。当对卡片或图像进行布局时，它将以列而不是行来显示每一项。但是在某些情况下可能是有用的。在容器上应用 \u003ccode\u003ecolumn-count\u003c/code\u003e 或者 \u003ccode\u003ecolumn-width\u003c/code\u003e 使其成为多列容器。然后应用 \u003ccode\u003edisplay:grid\u003c/code\u003e 将忽略 \u003ccode\u003ecolumn-*\u003c/code\u003e 行为。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e特征查询\u003c/h3\u003e\n\u003cp\u003e其他大多数布局方式中，大多都只是针对单个项目而不是其容器。例如在浮动布局中，我们有一堆给定了百分比宽度的项目，为其设置左浮动（float: left）。这将让他们排列在一起。只要总数不超过父容器宽度的 100%，我们就可以实现类似网格的效果。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e.grid \u0026gt; * {\n  \u003cspan class=\"hljs-built_in\"\u003efloat\u003c/span\u003e: left;  \n  width: 33%;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ca target=\"_blank\" href=\"https://www.smashingmagazine.com/wp-content/uploads/2017/11/floating-items-large-opt.png\"\u003e\u003c/a\u003e\u003c/p\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://www.smashingmagazine.com/wp-content/uploads/2017/11/floating-items-large-opt.png\"\u003e\u003cimg alt=\"给定宽度的浮动元素给我们类似网格的感觉\" src=\"https://user-gold-cdn.xitu.io/2017/12/24/1608735d6f0eff43?w=800\u0026amp;h=203\u0026amp;f=png\u0026amp;s=3201\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/a\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e给定宽度的浮动元素给我们类似网格的感觉。 (\u003ca target=\"_blank\" href=\"https://www.smashingmagazine.com/wp-content/uploads/2017/11/floating-items-large-opt.png\"\u003e预览大图\u003c/a\u003e)\u003c/p\u003e\n\u003cp\u003e如果我们把布局方式换成 CSS Grid 布局，在父级上创建一个网格。我们仅仅需要做的就是指定这些元素能横跨多少列。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e.grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-auto-rows: 100px;\n  grid-gap: 20px;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在我们以前的布局中，我们为浮动元素给定了大小。在新的布局中，这些元素变成了网格元素，通常我们并不会给这些元素大小，因为可以从跨过的网格轨迹上确定。\u003c/p\u003e\n\u003cp\u003e在这里，我们只是能够 \u003cstrong\u003e用另一个覆盖一个布局的方式\u003c/strong\u003e 来解决问题。在浮动布局的例子中，一旦指定了百分比大小的元素成为网格元素的时候，大小就会变成它所在网格区域的百分比，而不是整个容器的百分比。你可以使用 Firefox Grid Inspector 来高亮显示这些行 —— 这些元素现在被挤压到了网格单元的一侧。\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://www.smashingmagazine.com/wp-content/uploads/2017/11/grid-inspector-large-opt.png\"\u003e\u003c/a\u003e\u003c/p\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://www.smashingmagazine.com/wp-content/uploads/2017/11/grid-inspector-large-opt.png\"\u003e\u003cimg alt=\"在网格布局中，宽度将成为网格区域的百分比\" src=\"https://user-gold-cdn.xitu.io/2017/12/24/1608735d2bd71304?w=800\u0026amp;h=186\u0026amp;f=png\u0026amp;s=6323\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/a\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e在网格布局中，宽度将成为网格区域的百分比。(\u003ca target=\"_blank\" href=\"https://www.smashingmagazine.com/wp-content/uploads/2017/11/grid-inspector-large-opt.png\"\u003e预览大图\u003c/a\u003e)\u003c/p\u003e\n\u003cp\u003e这是特征查询可以发挥作用的地方。特征查询类似于媒体查询，不是去检查设备的宽度和方向，而是去检查浏览器是否支持 CSS 功能。\u003c/p\u003e\n\u003cp\u003e在我们想要变成网格布局的浮动布局示例中，我们只需要在特征查询中内部重写一个东西 —— 我们想要将宽度重新设置为自动。\u003c/p\u003e\n\u003cp\u003e查看 \u003ca target=\"_blank\" href=\"https://codepen.io/rachelandrew\"\u003e@rachelandrew\u003c/a\u003e 在 \u003ca target=\"_blank\" href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e 写的这个 Pen：\u003ca target=\"_blank\" href=\"https://codepen.io/rachelandrew/pen/vWmeOE/\"\u003edisplay: 特性查询 demo\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e你需要重写多少用于不支持浏览器的 CSS，取决于你要为这些较旧的浏览器创建多少不同的布局。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003eIE10 和 11 版本的网格布局\u003c/h3\u003e\n\u003cp\u003e虽然 Edge 浏览器现在已经升级到支持现代网格布局，但是 IE10 和 IE11 只支持像早期版本那样，在这些浏览器加 \u003ccode\u003e-ms\u003c/code\u003e 前缀的写法。我们今天所知道的网格规范最初来自于微软。对这个老的实现方案，我们不是不高兴。我们应该很高兴他们开始了这个过程，首先是给了我们网格。你可以从这篇文章了解更多：\u003ca target=\"_blank\" href=\"https://alistapart.com/article/the-story-of-css-grid-from-its-creators\"\u003eCSS 网格的故事，来自它的创作者\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e如上所述，你可能决定为 IE10 和 11 提供基于浮动或其他布局类型的回退方法。这个功能也可以正常工作，就像 IE10 和 11 不支持功能查询一样。只要使用这些功能来覆盖旧的方法来检查其支持情况，然后创建支持浏览器的版本，IE10 和 11 将使用较旧的方法。\u003c/p\u003e\n\u003cp\u003e你依旧可以使用 \u003ccode\u003e-ms-grid\u003c/code\u003e 版本来创建回退方法。然而这个前缀的版本和现代网格布局不一样，它是第一个版本，并且也是实验版本。自从运用五年左右以来，情况已经发生了变化。这意味着你不能只使用 autoprefixer 来添加前缀，这种方法可能会让 IE10 和 11 的用户体验比你不做任何处理还要糟。相反，你需要使用这个不同的、更有先的规范来创建一个布局。\u003c/p\u003e\n\u003cp\u003e要注意的要点如下：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e如果没有自动放置，你需要使用基于行的定位将每一个元素放在网格上。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egrid-template-areas\u003c/code\u003e ascii-art 方法不是实现的一部分。\u003c/li\u003e\n\u003cli\u003e不要设置网格间隙的属性\u003c/li\u003e\n\u003cli\u003e你可以不要指定开始行和结束行，而是去指定开始行和要跨越的列数。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e你可以在我的博客文章中找到所有的这些属性的完整细目，\u003ca target=\"_blank\" href=\"https://rachelandrew.co.uk/archives/2016/11/26/should-i-try-to-use-the-ie-implementation-of-css-grid-layout/\"\u003e我应该尝试使用 IE 的网格布局实现方案吗？\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e如果你有大量的用户使用这些浏览器，那么你可能会发现这个老规范是有帮助的。即使你只是用他来解决几个小问题，那这对你来说也是值得的。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e如果要支持这些浏览器，我何苦使用网格呢？\u003c/h3\u003e\n\u003cp\u003e如果你的列表中有不支持的浏览器，那么你 \u003cem\u003e必须\u003c/em\u003e 为他们提供和那些已经被支持的浏览器相同的体验。然后我们就会怀疑是不是应该用网格布局，或者任何新的 CSS 特性。使用可行方案，这个方案最完美。\u003c/p\u003e\n\u003cp\u003e你可能还在考虑使用网格布局是不是有一个优良的回退方案，如果你知道，短期内很可能你会从“必须是相同的”列表中抛弃一堆不兼容的浏览器。特别是如果你知道现在做的开发会有很长的维护周期。然后，你可以在晚一点的时候，只使用网格版本，丢掉回退方案。\u003c/p\u003e\n\u003cp\u003e但是，支持对于你来说意味可能着会失去对一些浏览器的兼容来换取一些开发工作的简化，然而此时还非用网格布局不可，那么这是使用网格布局和针对不兼容浏览器单独设计非网格布局体验的时候。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e向后兼容性测试\u003c/h3\u003e\n\u003cp\u003e测试向后兼容性是最后一步。测试你的回退方案是否奏效的唯一方法就会使用不支持 CSS 网格的浏览器访问你的网站。使用\u003ca target=\"_blank\" href=\"https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/\"\u003e下载微软提供的虚拟机\u003c/a\u003e的这种方式，你可以不必购买其他电脑。然后，就可以用不支持网格布局的 Internet Explorer 进行测试。\u003c/p\u003e\n\u003cp\u003e你可以在手机上下载 UC 浏览器，或\u003ca target=\"_blank\" href=\"http://www.ucweb.com/desktop/\"\u003e使用桌面版\u003c/a\u003e的 Windows 或者虚拟机。\u003c/p\u003e\n\u003cp\u003e还有比如说可以访问整个运行范围内浏览器的远程虚拟机工具 \u003ca target=\"_blank\" href=\"https://www.browserstack.com\"\u003eBrowserStack\u003c/a\u003e。这些服务不是免费的，但是他们而已为你节省大量设置测试虚拟机的时间。\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://www.smashingmagazine.com/wp-content/uploads/2017/11/browserstack-example-large-opt.png\"\u003e\u003c/a\u003e\u003c/p\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://www.smashingmagazine.com/wp-content/uploads/2017/11/browserstack-example-large-opt.png\"\u003e\u003cimg alt=\"BrowserStack 可以访问到许多不同的浏览器和操作系统\" src=\"https://user-gold-cdn.xitu.io/2017/12/24/16087363dcac41f1?w=800\u0026amp;h=506\u0026amp;f=png\u0026amp;s=39802\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/a\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eBrowserStack可以访问到许多不同的浏览器和操作系统。 (\u003ca target=\"_blank\" href=\"https://www.smashingmagazine.com/wp-content/uploads/2017/11/browserstack-example-large-opt.png\"\u003e预览大图\u003c/a\u003e)\u003c/p\u003e\n\u003cp\u003e我看到有人建议切换特征查询值来测试一些不存在的东西。比如测试 \u003ccode\u003edisplay: gridx\u003c/code\u003e。这是能正常工作，但是你需要把所有的网格代码放到特征查询的代码块里边，而不是忽略浏览器会跳过不支持的 CSS 代码的事实。如果你不知道有些网格代码可能会结束在特征查询之外，那么你很容易会得到一个虚假的正确结果。即使你在使用这个方法进行快速检查，我仍然强烈建议你做一些真机测试。\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003e延伸阅读\u003c/h4\u003e\n\u003cp\u003e我已经列出了这篇文章提到的网址，还有一些额外的资源可以帮助你用自己的方式来支持浏览器，同时还能利用到新的布局方式。如果你遇到了任何好的资源，或者特别棘手的问题，都可以将他们添加到这个问题下面。网格布局对于我们所有人都是新生的东西，我们可以在生产环境中使用，但是不可避免会出现一些悬而未决的问题，让我们一起看看。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e“\u003ca target=\"_blank\" href=\"https://alistapart.com/article/the-story-of-css-grid-from-its-creators\"\u003e创造者讲述 CSS Grid 的故事\u003c/a\u003e,” Aaron Gustafson, A List Apart\u003c/li\u003e\n\u003cli\u003e“\u003ca target=\"_blank\" href=\"https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/\"\u003eInternet Explorer 和 Edge 的测试虚拟机\u003c/a\u003e,” Microsoft\u003c/li\u003e\n\u003cli\u003e“\u003ca target=\"_blank\" href=\"https://www.browserstack.com\"\u003eBrowserStack\u003c/a\u003e,” 跨浏览器测试工具\u003c/li\u003e\n\u003cli\u003e“\u003ca target=\"_blank\" href=\"https://rachelandrew.co.uk/archives/2016/11/26/should-i-try-to-use-the-ie-implementation-of-css-grid-layout/\"\u003e我应该尝试使用IE浏览器实现网格布局？\u003c/a\u003e” Rachel Andrew\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://colintoh.com/blog/display-table-anti-hero\"\u003eCSS 布局的反英雄 — “display:table”\u003c/a\u003e,” Colin Toh\u003c/li\u003e\n\u003cli\u003e“\u003ca target=\"_blank\" href=\"https://rachelandrew.co.uk/css/cheatsheets/grid-fallbacks\"\u003eCSS 网格回退和替代备忘录\u003c/a\u003e” Rachel Andrew\u003c/li\u003e\n\u003cli\u003e“\u003ca target=\"_blank\" href=\"https://hacks.mozilla.org/2016/08/using-feature-queries-in-css/\"\u003e在 CSS 中使用特征查询\u003c/a\u003e,” Jen Simmons, Mozilla Hacks\u003c/li\u003e\n\u003cli\u003e“\u003ca target=\"_blank\" href=\"http://gridbyexample.com/learn/2016/12/24/learning-grid-day24/\"\u003e特征查询视频教程\u003c/a\u003e,” Rachel Andrew\u003c/li\u003e\n\u003cli\u003e“\u003ca target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/CSS_Grid_and_Progressive_Enhancement\"\u003eCSS 网格和逐步增强\u003c/a\u003e,” MDN web docs, Mozilla\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner\"\u003e掘金翻译计划\u003c/a\u003e 是一个翻译优质互联网技术文章的社区，文章来源为 \u003ca target=\"_blank\" href=\"https://juejin.im\"\u003e掘金\u003c/a\u003e 上的英文分享文章。内容覆盖 \u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#android\"\u003eAndroid\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#ios\"\u003eiOS\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E5%89%8D%E7%AB%AF\"\u003e前端\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E5%90%8E%E7%AB%AF\"\u003e后端\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E5%8C%BA%E5%9D%97%E9%93%BE\"\u003e区块链\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E4%BA%A7%E5%93%81\"\u003e产品\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E8%AE%BE%E8%AE%A1\"\u003e设计\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD\"\u003e人工智能\u003c/a\u003e等领域，想要查看更多优质译文请持续关注 \u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner\"\u003e掘金翻译计划\u003c/a\u003e、\u003ca target=\"_blank\" href=\"http://weibo.com/juejinfanyi\"\u003e官方微博\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://zhuanlan.zhihu.com/juejinfanyi\"\u003e知乎专栏\u003c/a\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n","buildTime":"1514375628.0006","__v":0}
{"_id":{"$oid":"5a4394d8bbcd9a0a78c8cf4e"},"id":"5a2ff0b2f265da433562bce4","author":{"$oid":"5a4394d8bbcd9a0a78c8cf3e"},"title":"webpack 为什么这么难用？","meta":{"likeCount":0},"tag":["Webpack","前端","Gulp","命令行"],"comment":[],"content":"\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/13/1604d790d18d9693?w=2560\u0026amp;h=1294\u0026amp;f=png\u0026amp;s=201406\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e如今对于每一个前端工程师来说，webpack 已经成为了一项基础技能，它基本上包办了本地开发、编译压缩、性能优化的所有工作，从这个角度上来说，webpack 确实是伟大的，它的诞生意味着一整套工程化体系开始普及，并且慢慢统一了前端自动构建的让前端开发彻底告别了之前的刀耕火种时代。现在 webpack 之于前端开发，正如同 gcc/g++ 之于 C/C++，是一个你无论如何都绕不开的工具。\u003c/p\u003e\n\u003cp\u003e但是，即使它如此伟大，也有一个巨大的问题，那就是 \u003cstrong\u003ewebpack 实在是太难用了！！！\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e我从多年前的 webpack 1.0 时代就一直在用它，现在也不能说完全掌握了它，很多时候真的让我产生了怀疑，究竟是因为我的能力不足，还是因为 webpack 自身的设计就太难用？随着我接触到越来越多的前端项目，听到越来越多的吐槽，我也越发地相信，是 webpack 自身的问题，导致它变得如此复杂又难用。\u003c/p\u003e\n\u003cp\u003e举个简单的例子，一个 vue-cli 生成的最简单的脚手架项目，开发、构建相关的文件就有 14 个之多，代码超过 800 行，而真实的项目只会比这个更多：\n\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/12/1604b648825195af?w=274\u0026amp;h=313\u0026amp;f=png\u0026amp;s=22818\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e所以，既然这篇文章的标题是《webpack 为什么这么难用？》，那我们就好好在这里分析一下，webpack 难用的根本原因。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 class=\"heading\"\u003e一、文档极其不完善\u003c/h1\u003e\n\u003cp\u003e是的，这就是第一位的原因。\u003c/p\u003e\n\u003cp\u003e我作为参加过 webpack 中文文档翻译的人，真的想说 webpack 即使经过了这么多年的不断迭代，如今的文档依然还是是一坨那啥。作为一个开源项目，设计好不好、易用性怎么样、扩展性怎么样这些问题都是仁者见仁智者见智的，但文档写得很烂这一点上，真的没有任何可以开脱的理由。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e对于使用者的不友好\u003c/h2\u003e\n\u003cp\u003e比如，webpack 的插件体系可以说是 webpack 最核心的一部分功能了，基本上一个项目的构建中，大部分任务都是由各种插件完成的。然而，官方文档上对于插件的介绍只有寥寥几句话：\u003ca target=\"_blank\" href=\"https://webpack.js.org/concepts/plugins/\"\u003ewebpack  · Plugins\u003c/a\u003e，甚至推荐你直接去看 webpack 的源码：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/13/1604d879ee6ac065?w=1408\u0026amp;h=200\u0026amp;f=png\u0026amp;s=67980\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e更糟的是，现有的文档里（包括 webpack 一些插件的文档也是），大部分内容都是在告诉你 “\u003cstrong\u003e你这样做就可以了\u003c/strong\u003e”，而没有解释 “\u003cstrong\u003e你为什么需要这么做\u003c/strong\u003e” 以及 “\u003cstrong\u003e你这么做了会有哪些后果\u003c/strong\u003e”。\u003c/p\u003e\n\u003cp\u003e比如，在 target 配置上，\u003ca target=\"_blank\" href=\"https://webpack.js.org/configuration/target/\"\u003e官方文档\u003c/a\u003e里列举了你可以构建到哪些 target，如 \u003ccode\u003enode\u003c/code\u003e、\u003ccode\u003enode-webkit\u003c/code\u003e、\u003ccode\u003eelectron-main\u003c/code\u003e，但都只是简单的一句话带过：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/13/1604f399d6486569?w=1410\u0026amp;h=988\u0026amp;f=png\u0026amp;s=265594\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e想知道 target 为 \u003ccode\u003eelectron-main\u003c/code\u003e 时，和浏览器环境的打包有什么不同？对不起，官方文档不想告诉你，看源码或者去 stackoverflow 上搜吧。\u003c/p\u003e\n\u003cp\u003e官方文档语焉不详的直接后果就是，当你遇到了任何问题，你都没办法在文档里得到直接的回答，而是需要看无数的代码、github issue、stackoverflow、博客文章，然后在自己的项目里反反复复试了好多次，才能大致解决问题。而这种所谓的“解决问题”，一般都是个人经验性的，意味着其它任何一个人想要解决这个问题，都要重复一遍这个流程，时间成本大量上升。\u003c/p\u003e\n\u003cp\u003e这就是为什么使用 webpack 的时候，经常会出现下面的哲学三问：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e这是 webpack 的问题吗？\u003c/li\u003e\n\u003cli\u003e我要怎么解决这个问题？\u003c/li\u003e\n\u003cli\u003e咦我是怎么解决的？\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 class=\"heading\"\u003e对于开发者的不友好\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e我们要如何开发一个 webpack 的插件？\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e官方文档里确实写了一些关于\u003ca target=\"_blank\" href=\"https://webpack.js.org/contribute/writing-a-plugin/\"\u003e如何开发插件\u003c/a\u003e的指南。但这份指南也只有 60 分刚及格的水平，它确实向你介绍了 webpack 插件的基础范例、基本概念以及一些 API，但当你读完这份简短的文档后想自己真的去开发一个插件时，你会发现文档里讲的东西真的远远不够。\u003c/p\u003e\n\u003cp\u003e我们不妨来看看现在 webpack 生态里那些成熟的插件是怎么写的，以 \u003ca target=\"_blank\" href=\"https://github.com/jantimon/html-webpack-plugin\"\u003ehtml-webpack-plugin\u003c/a\u003e 为例，这是一个广泛用于生成 html 文件的插件。在它的源码里你会发现，它引用了\u003cstrong\u003e五个 webpack 内部自带的插件\u003c/strong\u003e（\u003ca target=\"_blank\" href=\"https://github.com/jantimon/html-webpack-plugin/blob/master/lib/compiler.js\"\u003e源码在这里\u003c/a\u003e）：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e NodeTemplatePlugin = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'webpack/lib/node/NodeTemplatePlugin'\u003c/span\u003e);\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e NodeTargetPlugin = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'webpack/lib/node/NodeTargetPlugin'\u003c/span\u003e);\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e LoaderTargetPlugin = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'webpack/lib/LoaderTargetPlugin'\u003c/span\u003e);\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e LibraryTemplatePlugin = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'webpack/lib/LibraryTemplatePlugin'\u003c/span\u003e);\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e SingleEntryPlugin = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'webpack/lib/SingleEntryPlugin'\u003c/span\u003e);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e嗯哼？这五个插件都是用来干什么的？\u003c/p\u003e\n\u003cp\u003e官方文档上对内置的插件一个字都没有提及，是的，甚至连 \u003ca target=\"_blank\" href=\"https://webpack.js.org/plugins/\"\u003ePlugins\u003c/a\u003e 这里都没有。\u003ca target=\"_blank\" href=\"https://github.com/webpack/docs/wiki/internal-webpack-plugins\"\u003e官方的 wiki\u003c/a\u003e 上倒是写了，但真的真的太简略了，而且看起来很久没更新了。\u003c/p\u003e\n\u003cp\u003e再看另外一个同样常用的 \u003ca target=\"_blank\" href=\"https://github.com/webpack-contrib/uglifyjs-webpack-plugin\"\u003euglifyjs-webpack-plugin\u003c/a\u003e，它倒是没依赖 webpack 的内置插件，不过也引用了 webpack 内部的两个文件：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e RequestShortener \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'webpack/lib/RequestShortener'\u003c/span\u003e;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e ModuleFilenameHelpers \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'webpack/lib/ModuleFilenameHelpers'\u003c/span\u003e;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e文档里同样没有对这两个文件做任何介绍。令人欣慰（？）的是，这两个文件从文件名上看，起码是方法库（实际上也确实是），使用起来不会太复杂。\u003c/p\u003e\n\u003cp\u003e换句话说，如果你想给 webpack 写一个广为人知的插件，你就必须深入了解 webpack 的全部，这一点我不反对，毕竟 \u003cstrong\u003ewebpack 开发者\u003c/strong\u003e和 \u003cstrong\u003ewebpack 使用者\u003c/strong\u003e在能力的要求上有高低之分。但即使是有经验的开发者，遇到一个文档如此不完善的开源项目，也是很吃力的。\u003cstrong\u003e很多能帮助开发者的东西本应该正大光明地写在文档和指南里，而不是隐藏在源代码里。\u003c/strong\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 class=\"heading\"\u003e二、过重的插件体系\u003c/h1\u003e\n\u003cp\u003e插件体系是 webpack 的核心，事实上，webpack 的大部分功能都是通过内部插件或者第三方插件来完成的。可以说，webpack 的生态就是建立在众多插件之上的。\u003c/p\u003e\n\u003cp\u003e但插件体系也同样有很多问题。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e插件数量问题\u003c/h2\u003e\n\u003cp\u003e先问一个问题，一个通过 webpack 构建的项目需要多少插件？\u003c/p\u003e\n\u003cp\u003e还是以一个标准的 vue-cli 生成的脚手架项目为例，一共有 7 个第三方插件：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-string\"\u003e\"copy-webpack-plugin\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"^4.0.1\"\u003c/span\u003e,\n\u003cspan class=\"hljs-string\"\u003e\"extract-text-webpack-plugin\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"^3.0.0\"\u003c/span\u003e,\n\u003cspan class=\"hljs-string\"\u003e\"friendly-errors-webpack-plugin\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"^1.6.1\"\u003c/span\u003e,\n\u003cspan class=\"hljs-string\"\u003e\"html-webpack-plugin\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"^2.30.1\"\u003c/span\u003e,\n\u003cspan class=\"hljs-string\"\u003e\"webpack-bundle-analyzer\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"^2.9.0\"\u003c/span\u003e,\n\u003cspan class=\"hljs-string\"\u003e\"optimize-css-assets-webpack-plugin\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"^3.2.0\"\u003c/span\u003e,\n\u003cspan class=\"hljs-string\"\u003e\"uglifyjs-webpack-plugin\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"^1.1.1\"\u003c/span\u003e,\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e以及 7 个 webpack 内置插件：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eHashedModuleIdsPlugin\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eModuleConcatenationPlugin\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCommonsChunkPlugin\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eDefinePlugin\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eHotModuleReplacementPlugin\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eNamedModulesPlugin\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eNoEmitOnErrorsPlugin\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e总共 14 个插件，我们按照平均一个插件含有 2-3 个配置项（这已经是往低了算了）来计算，14 个插件就有 30 多项配置，这已经是一个现代 webpack 开发、构建使用的很基础的配置了，真实的项目只会比这个更多。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e要注意到，30 多个配置项带来的复杂程度是远胜于 30 行代码的。\u003c/strong\u003e 因为配置项已经具有了比较高的抽象性，一项配置包含的副作用是要远大于一行代码的。比如下面是常常用于提取公共模块的 \u003ccode\u003eCommonsChunkPlugin\u003c/code\u003e 的配置：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e webpack.optimize.CommonsChunkPlugin({\n    \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'app'\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003easync\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'vendor-async'\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003echildren\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003eminChunks\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e\n})\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e如果你不是一个 webpack 老手的话，看到这 4 项配置肯定是一脸懵逼的：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ename\u003c/code\u003e 该填什么？随便命个名就好吗？\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003easync\u003c/code\u003e 是什么？异步模块？那为什么是个字符串？\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003echildren\u003c/code\u003e 是个啥？为什么不是 \u003ccode\u003eArray\u003c/code\u003e 而是个 \u003ccode\u003eboolean\u003c/code\u003e?\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eminChunks\u003c/code\u003e 这个数字是什么？\u003ccode\u003echunk\u003c/code\u003e 又是什么？\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e然后你就去看了 \u003ca target=\"_blank\" href=\"https://webpack.js.org/plugins/commons-chunk-plugin/\"\u003eCommonsChunkPlugin 的文档\u003c/a\u003e，十五分钟艰难的阅读之后，你会发现这四项配置都不简单，每一项的更改会给构建带来很大的影响。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e然而坏消息是，像这样的配置在项目里整整有 30 多处！\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e所以我每次改一个项目的构建时，基本都是这样的：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/19/1606cd097fc9e8e0?w=620\u0026amp;h=413\u0026amp;f=jpeg\u0026amp;s=36671\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e面向配置的插件\u003c/h2\u003e\n\u003cp\u003e在讨论这个话题之前，先回答两个问题：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003ewebpack 的插件先后顺序会影响构建结果吗？\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e如果插件顺序不同，会影响哪些东西？\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e实际上，这两个问题我找遍了官方文档，也没有提到插件的顺序会影响哪些东西，stackoverflow 上倒是找到了一个问题：\u003ca target=\"_blank\" href=\"https://stackoverflow.com/questions/41470771/webpack-does-the-order-of-plugins-matter\"\u003eWebpack: Does the order of plugins matter?\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e所以回答就是：\u003cstrong\u003e插件的顺序有影响，但作用不明。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e其实问题不止在插件的顺序先后上，就连一个插件到底对构建产生了哪些影响，我们也很难得知，除非你极其熟悉这个插件或者就是这个插件的作者。为什么会这样？根本原因就是，\u003cstrong\u003ewebpack 的插件是面向配置的，而不是面向过程的\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e什么叫\u003cstrong\u003e面向过程\u003c/strong\u003e？如果你知道或者使用过 gulp 这个自动化工具的话，应该会记得 gulp 管道的概念，即从源头那里得到源数据（js/css/html 源码、图片、字体等等），然后数据通过一个又一个组合起来的管道，最后输出成为构建的结果。写成伪代码的话，大概是这样：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003egulp.src(\u003cspan class=\"hljs-string\"\u003e'某些源文件'\u003c/span\u003e)\n    .pipe(处理一)\n    .pipe(处理二)\n    .pipe(处理三)\n    .dest(\u003cspan class=\"hljs-string\"\u003e'构建结果'\u003c/span\u003e)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这种管道化，或者说面向过程的构建，非常容易 debug 或者修改，因为它构建的每一步过程，都整齐的按照顺序展示给你看了。想要修改其中任何一步的心智负担是很低的，因为它的处理机制非常纯函数。\u003c/p\u003e\n\u003cp\u003e然而如果是 webpack 的话，就类似这样：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e{\n    plugins: [\n        插件一,\n        插件二,\n        插件三\n    ]\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这里，插件一二三是完全面向配置的，没有告诉你任何执行顺序，它们可能会在 webpack 构建的每个时间点触发，你只能从它们的功能上大致猜出它是在哪个时间点工作的。这就是为什么修改一些 webpack 的配置，就像要解开一条放在包里很久的耳机线一样，麻烦又闹心。\u003c/p\u003e\n\u003cp\u003e当然，这种配置化的插件也是有好处的，配置化代表了高集成度，当你只有 1-3 个插件时，维护这些配置的心智负担是可以接受的，并且比维护面向过程的配置更加方便。\u003cstrong\u003e但当插件数量超过这个值的时候，构建的复杂程度就会呈指数式上升\u003c/strong\u003e，我们之前就已经提到了，一个现代的 webpack 项目起码会有 14 个以上的插件以及至少 30 多项配置，这种情况下，面向过程就会好于面向配置，这就是为什么我一直觉得 gulp + webpack 才是正确解决方案的原因。\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e当然还是要说一句，gulp 和 webpack 并不能直接比较，前者是一个 task runner，而后者是一个 module bundler，它们两者之间都有一些相互不可替代的功能。\u003c/em\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 class=\"heading\"\u003e三、配置化是银弹吗？\u003c/h1\u003e\n\u003cp\u003e在日常业务中，特别是大公司的一些运营性质的业务里，我们常常会看到 “某某业务已经实现完全配置化” 这样的字眼，在这个语境里，配置化代表了低维护成本、高灵活性、高封装性。\u003c/p\u003e\n\u003cp\u003e在技术的世界里，配置化也同样是个好东西，很多工具都会宣称自己是完全配置化的，只要你的项目里加入一个配置文件，那么这个工具就可以帮你做很多很多的事情，\u003ca target=\"_blank\" href=\"http://babeljs.io/\"\u003ebabel\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://eslint.org/\"\u003eeslint\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://stylelint.io/\"\u003estylelint\u003c/a\u003e，还有本文讨论的 webpack 都是如此。\u003c/p\u003e\n\u003cp\u003e所以配置化是不是就是所有工具进化的终点了呢？它是不是能解决所有的问题呢？\u003c/p\u003e\n\u003cp\u003e软件工程上有一句耳熟能详的话：“\u003cstrong\u003e\u003ca target=\"_blank\" href=\"http://www.itu.dk/people/hesj/BSUP/artikler/no-silver-bullit.pdf\"\u003e没有银弹\u003c/a\u003e\u003c/strong\u003e”，指的是\u003cstrong\u003e复杂的软件工程问题无法靠简单的答案来解决\u003c/strong\u003e。在前端工程构建这个问题上，也同样不例外。\u003c/p\u003e\n\u003cp\u003e如何解决前端工程的构建？webpack 给出的答案是：\u003cstrong\u003e通过 webpack +  loader + plugin，让一切资源构建可配置。\u003c/strong\u003e 这在它诞生的那个时代看来，是非常厉害的，一份简单的配置文件就帮你搞定了所有资源构建的问题。\u003c/p\u003e\n\u003cp\u003e但是当时间的推移，一个前端项目的构建变得越来越复杂，webpack 的配置也越来越多，维护起来越来越难，这个时候，也就慢慢诞生了诸如 \u003ca target=\"_blank\" href=\"https://github.com/facebookincubator/create-react-app\"\u003ecreate-react-app\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/vuejs/vue-cli\"\u003evue-cli\u003c/a\u003e 这样的脚手架工具，在 webpack 的基础上进一步封装，来帮你自动生成 webpack 的配置。这个时候，webpack 更多地变成了一个“底层”工具，而这些脚手架才是你实际上的“构建工具”，或者说，\u003cstrong\u003e这些脚手架提供的配置，才是你真正的构建配置\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e为什么会这样？\u003c/p\u003e\n\u003cp\u003e这个问题的根源在于，\u003cstrong\u003ewebpack 现在提供的配置的封装性已经不够了\u003c/strong\u003e，它面对一个如今复杂得多的大型前端工程，仅有的配置已经没办法像几年前那样为我们屏蔽掉大部分的构建细节了，所以在它的基础上诞生了如此多的脚手架工具帮我们进一步封装复杂性。\u003c/p\u003e\n\u003cp\u003e所以我们现在可以回答这一段的标题了：配置化是解决复杂度的银弹吗？当然不是，因为\u003cstrong\u003e配置会随着复杂度的提升，而也逐渐变得复杂，维护越来越难，直到超过某个临界值，就会需要在它的基础上进一步封装，产生新的配置化。\u003c/strong\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 class=\"heading\"\u003e四、前端工程构建的未来\u003c/h1\u003e\n\u003cp\u003e正如我在上一章所说的，随着复杂度的上升，需要不断地封装复杂性，以让维护配置的心智成本降到可以接受的程度。而在前端构建工具上，截止到趋势也正是如此：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e前端的远古时代我们不需要构建，因为这时的前端项目还很简单，原始的 html/js/css 就足以应付需求，手工处理这些资源方便又快捷。\u003c/li\u003e\n\u003cli\u003e随着前端的复杂化，手工处理的效率越来越低，grunt、gulp 这样的自动化工具就诞生了，它们屏蔽掉了很多资源处理的细节问题，让资源的处理可以自动完成。\u003c/li\u003e\n\u003cli\u003e随着构建流程越来越多、资源种类越来越多、ECMAScript 的语言特性愈加复杂、开始区分开发/测试/生产环境等等因素，gulpfile/grunt 这样的工具已经不能满足我们的需求，我们需要的是一整套完整的配置化的构建方案，而 webpack 就是这样一种方案。\u003c/li\u003e\n\u003cli\u003e随着 webpack 配置越来越复杂，维护成本也越来越高，于是诞生了很多脚手架工具，帮你生成 webpack 的配置，封装起 webpack 的复杂性。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e那么未来的\u003cstrong\u003e下一代前端构建工具\u003c/strong\u003e是怎样的呢？\u003c/p\u003e\n\u003cp\u003e现在广泛使用的这些脚手架工具，终究依赖的是 webpack，我们实际上需要的是集成度更高、封装性更高（甚至零配置）的构建工具。更详细地说，下一代前端构建工具，必然会有下面的某些特性：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e内置的功能更多，比如自带 babel、dev-server、HMR、sourceMap 等等功能；\u003c/li\u003e\n\u003cli\u003e配置更少，甚至零配置；\u003c/li\u003e\n\u003cli\u003e更低成本区分开发、测试、生产环境；\u003c/li\u003e\n\u003cli\u003e性能更好，整合冗长的构建流程，支持多核 CPU 等；\u003c/li\u003e\n\u003cli\u003e对于新型模块的支持：异步模块、WebAssembly 模块等。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e事实上，这也就是部分 \u003ca target=\"_blank\" href=\"https://github.com/webpack/webpack/issues/6064\"\u003ewebpack 4.0 将会有的新特性\u003c/a\u003e，以及前段时间看到的 \u003ca target=\"_blank\" href=\"https://github.com/parcel-bundler/parcel\"\u003eparcel\u003c/a\u003e 也具有其中的某些特点（虽然它现在看起来还很不成熟）。未来这样的构建工具只会越来越多。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 class=\"heading\"\u003e总结\u003c/h1\u003e\n\u003cp\u003e这篇文章很久之前就在构思了，只是近期在工作上集中遇到了很多 webpack 的坑，让我彻底有动力来吐槽一下它的种种不是。\u003c/p\u003e\n\u003cp\u003ewebpack 为什么这么难用？本文给出的答案浓缩起来就是两点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e文档不完善，导致使用者和开发者遇到问题都很难下手；\u003c/li\u003e\n\u003cli\u003e项目需要使用的插件数量太多，且面向配置，导致维护成本指数级上升。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这些问题未来会有改善吗？当然。其实，这篇文章其实有标题党的嫌疑，更准确的标题应该是：\u003c/p\u003e\n\u003cp\u003e《\u003cstrong\u003e现在的\u003c/strong\u003e webpack 为什么这么难用？》\u003c/p\u003e\n\u003cp\u003e因为这篇文章里提到的问题，都会在 webpack 4.0 中得到改善。\u003c/p\u003e\n\u003cp\u003e额……至于它的文档嘛……算了不提了不提了 O__O \"…\u003c/p\u003e\n","buildTime":"1514377188.5805","__v":0}
{"_id":{"$oid":"5a4394d8bbcd9a0a78c8cf50"},"id":"5a40dbda51882566e4163b77","author":{"$oid":"5a4394d8bbcd9a0a78c8cf41"},"title":"Bootstrap栅格布局源码解读","meta":{"likeCount":0},"tag":["前端","Bootstrap","CSS"],"comment":[],"content":"\u003cblockquote\u003e\n\u003cp\u003e作者：不洗碗工作室 - xinzai\u003c/p\u003e\n\u003cp\u003e版权归作者所有，转载请注明出处\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e首先了解一下bootstrap栅格布局的写法\n\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"01\" src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608d5ae32710b8f?w=938\u0026amp;h=391\u0026amp;f=png\u0026amp;s=70222\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\u003cfigure\u003e\u003cimg alt=\"02\" src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608d5ae3d455742?w=969\u0026amp;h=485\u0026amp;f=png\u0026amp;s=211907\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e了解了之后我们来看bootstrap的css源码\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs css\" lang=\"css\"\u003e\u003cspan class=\"hljs-selector-class\"\u003e.container\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003epadding-right\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e15px\u003c/span\u003e;\n      \u003cspan class=\"hljs-attribute\"\u003epadding-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e15px\u003c/span\u003e;\n        \u003cspan class=\"hljs-attribute\"\u003emargin-right\u003c/span\u003e: auto;\n          \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: auto;\n}\n@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e (min-width: \u003cspan class=\"hljs-number\"\u003e768px\u003c/span\u003e) {\n    \u003cspan class=\"hljs-selector-class\"\u003e.container\u003c/span\u003e {\n          \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e750px\u003c/span\u003e;\n            }\n}\n@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e (min-width: \u003cspan class=\"hljs-number\"\u003e992px\u003c/span\u003e) {\n    \u003cspan class=\"hljs-selector-class\"\u003e.container\u003c/span\u003e {\n          \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e970px\u003c/span\u003e;\n            }\n}\n@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e (min-width: \u003cspan class=\"hljs-number\"\u003e1200px\u003c/span\u003e) {\n    \u003cspan class=\"hljs-selector-class\"\u003e.container\u003c/span\u003e {\n          \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e1170px\u003c/span\u003e;\n            }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这段代码很清楚的设置了container对于不同大小屏幕的响应\n\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"03\" src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608d5ae312293ee?w=1920\u0026amp;h=278\u0026amp;f=png\u0026amp;s=11789\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e我们可以看到最大宽度只有1170px的时候显得很不协调，在大屏下，会有很大的空白\u003c/p\u003e\n\u003cp\u003e所以bootstrap提供了另一种容器\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs css\" lang=\"css\"\u003e\u003cspan class=\"hljs-selector-class\"\u003e.container-fluid\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003epadding-right\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e15px\u003c/span\u003e;\n      \u003cspan class=\"hljs-attribute\"\u003epadding-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e15px\u003c/span\u003e;\n        \u003cspan class=\"hljs-attribute\"\u003emargin-right\u003c/span\u003e: auto;\n          \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: auto;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"04\" src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608d5ae31b2ccc6?w=1920\u0026amp;h=286\u0026amp;f=png\u0026amp;s=12916\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e接下来是行样式\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs css\" lang=\"css\"\u003e\u003cspan class=\"hljs-selector-class\"\u003e.row\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003emargin-right\u003c/span\u003e: -\u003cspan class=\"hljs-number\"\u003e15px\u003c/span\u003e;\n  \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: -\u003cspan class=\"hljs-number\"\u003e15px\u003c/span\u003e;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e没什么特别的，这行就使栅格布局的宽度和container一致了，那为什么container要设置padding呢？可能是为了美观吧~\u003c/p\u003e\n\u003cp\u003e公共的列样式如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs css\" lang=\"css\"\u003e\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-1\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-1\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-md-1\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-1\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-xs-2\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-2\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-md-2\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-2\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-xs-3\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-3\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-md-3\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-3\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-xs-4\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-4\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-md-4\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-4\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-xs-5\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-5\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-md-5\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-5\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-xs-6\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-6\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-md-6\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-6\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-xs-7\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-7\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-md-7\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-7\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-xs-8\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-8\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-md-8\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-8\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-xs-9\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-9\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-md-9\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-9\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-xs-10\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-10\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-md-10\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-10\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-xs-11\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-11\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-md-11\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-11\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-xs-12\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-12\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-md-12\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-12\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003eposition\u003c/span\u003e: relative;\n  \u003cspan class=\"hljs-attribute\"\u003emin-height\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e1px\u003c/span\u003e;\n  \u003cspan class=\"hljs-attribute\"\u003epadding-right\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e15px\u003c/span\u003e;\n  \u003cspan class=\"hljs-attribute\"\u003epadding-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e15px\u003c/span\u003e;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e接下来是针对不同尺寸屏幕的响应式布局了，我们先看针对最小屏幕的布局\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs css\" lang=\"css\"\u003e\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-1\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-xs-2\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-xs-3\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-xs-4\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-xs-5\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-xs-6\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-xs-7\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-xs-8\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-xs-9\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-xs-10\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-xs-11\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-xs-12\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003efloat\u003c/span\u003e: left;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我们来分析一下，首先是对col-xs设置了\u003ccode\u003efloat: left\u003c/code\u003e属性，在公共列样式中我们给他设置了\u003ccode\u003eposition: relative\u003c/code\u003e属性，这样有一个好处就是他具有了双重特性，既可以浮动，又可以相对原来浮动的位置使用\u003ccode\u003etop\u003c/code\u003e \u003ccode\u003eleft\u003c/code\u003e进行布局，这主要是针对排序使用的\u003c/p\u003e\n\u003cp\u003e接下来：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs css\" lang=\"css\"\u003e\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-12\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e100%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-11\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e91.66666667%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-10\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e83.33333333%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-9\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e75%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-8\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e66.66666667%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-7\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e58.33333333%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-6\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e50%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-5\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e41.66666667%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-4\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e33.33333333%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-3\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e25%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-2\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e16.66666667%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-1\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e8.33333333%\u003c/span\u003e;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e设置宽，一看就懂，不说了，下面是排序：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs css\" lang=\"css\"\u003e\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-pull-12\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e100%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-pull-11\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e91.66666667%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-pull-10\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e83.33333333%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-pull-9\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e75%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-pull-8\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e66.66666667%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-pull-7\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e58.33333333%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-pull-6\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e50%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-pull-5\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e41.66666667%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-pull-4\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e33.33333333%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-pull-3\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e25%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-pull-2\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e16.66666667%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-pull-1\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e8.33333333%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-pull-0\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: auto;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-push-12\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e100%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-push-11\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e91.66666667%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-push-10\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e83.33333333%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-push-9\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e75%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-push-8\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e66.66666667%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-push-7\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e58.33333333%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-push-6\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e50%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-push-5\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e41.66666667%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-push-4\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e33.33333333%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-push-3\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e25%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-push-2\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e16.66666667%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-push-1\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e8.33333333%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-push-0\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: auto;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e因为是相对定位，所有的列又是浮动定位，所以我们可以很方便的改变列的顺序，只需要改变需要移动的那一项，其余的列会自动向左靠拢\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e接下来是位置的偏移：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs css\" lang=\"css\"\u003e\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-offset-12\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e100%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-offset-11\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e91.66666667%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-offset-10\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e83.33333333%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-offset-9\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e75%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-offset-8\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e66.66666667%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-offset-7\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e58.33333333%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-offset-6\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e50%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-offset-5\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e41.66666667%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-offset-4\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e33.33333333%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-offset-3\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e25%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-offset-2\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e16.66666667%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-offset-1\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e8.33333333%\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.col-xs-offset-0\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e很简单，不解释了\u003c/p\u003e\n\u003cp\u003e接下来就是响应式布局了，一模一样的东西，顺便吐槽一下，一模一样的东西，为毛要写那么多？看不出来哪里响应了。。可能是less编译的问题吧。。。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs css\" lang=\"css\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e (min-width: \u003cspan class=\"hljs-number\"\u003e768px\u003c/span\u003e) {\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-1\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-2\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-3\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-4\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-5\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-6\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-7\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-8\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-9\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-10\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-11\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-12\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003efloat\u003c/span\u003e: left;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-12\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e100%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-11\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e91.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-10\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e83.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-9\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e75%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-8\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e66.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-7\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e58.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-6\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e50%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-5\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e41.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-4\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e33.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-3\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e25%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-2\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e16.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-1\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e8.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-pull-12\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e100%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-pull-11\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e91.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-pull-10\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e83.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-pull-9\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e75%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-pull-8\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e66.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-pull-7\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e58.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-pull-6\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e50%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-pull-5\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e41.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-pull-4\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e33.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-pull-3\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e25%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-pull-2\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e16.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-pull-1\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e8.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-pull-0\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: auto;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-push-12\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e100%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-push-11\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e91.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-push-10\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e83.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-push-9\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e75%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-push-8\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e66.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-push-7\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e58.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-push-6\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e50%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-push-5\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e41.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-push-4\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e33.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-push-3\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e25%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-push-2\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e16.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-push-1\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e8.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-push-0\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: auto;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-offset-12\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e100%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-offset-11\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e91.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-offset-10\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e83.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-offset-9\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e75%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-offset-8\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e66.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-offset-7\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e58.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-offset-6\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e50%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-offset-5\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e41.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-offset-4\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e33.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-offset-3\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e25%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-offset-2\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e16.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-offset-1\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e8.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-sm-offset-0\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n  }\n}\n@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e (min-width: \u003cspan class=\"hljs-number\"\u003e992px\u003c/span\u003e) {\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-1\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-md-2\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-md-3\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-md-4\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-md-5\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-md-6\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-md-7\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-md-8\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-md-9\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-md-10\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-md-11\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-md-12\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003efloat\u003c/span\u003e: left;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-12\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e100%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-11\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e91.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-10\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e83.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-9\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e75%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-8\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e66.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-7\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e58.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-6\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e50%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-5\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e41.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-4\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e33.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-3\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e25%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-2\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e16.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-1\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e8.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-pull-12\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e100%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-pull-11\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e91.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-pull-10\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e83.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-pull-9\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e75%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-pull-8\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e66.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-pull-7\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e58.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-pull-6\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e50%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-pull-5\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e41.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-pull-4\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e33.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-pull-3\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e25%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-pull-2\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e16.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-pull-1\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e8.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-pull-0\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: auto;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-push-12\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e100%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-push-11\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e91.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-push-10\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e83.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-push-9\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e75%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-push-8\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e66.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-push-7\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e58.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-push-6\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e50%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-push-5\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e41.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-push-4\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e33.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-push-3\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e25%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-push-2\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e16.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-push-1\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e8.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-push-0\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: auto;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-offset-12\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e100%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-offset-11\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e91.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-offset-10\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e83.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-offset-9\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e75%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-offset-8\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e66.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-offset-7\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e58.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-offset-6\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e50%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-offset-5\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e41.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-offset-4\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e33.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-offset-3\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e25%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-offset-2\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e16.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-offset-1\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e8.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-md-offset-0\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n  }\n}\n@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e (min-width: \u003cspan class=\"hljs-number\"\u003e1200px\u003c/span\u003e) {\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-1\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-2\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-3\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-4\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-5\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-6\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-7\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-8\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-9\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-10\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-11\u003c/span\u003e, \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-12\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003efloat\u003c/span\u003e: left;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-12\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e100%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-11\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e91.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-10\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e83.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-9\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e75%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-8\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e66.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-7\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e58.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-6\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e50%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-5\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e41.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-4\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e33.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-3\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e25%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-2\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e16.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-1\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e8.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-pull-12\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e100%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-pull-11\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e91.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-pull-10\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e83.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-pull-9\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e75%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-pull-8\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e66.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-pull-7\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e58.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-pull-6\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e50%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-pull-5\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e41.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-pull-4\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e33.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-pull-3\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e25%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-pull-2\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e16.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-pull-1\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e8.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-pull-0\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eright\u003c/span\u003e: auto;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-push-12\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e100%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-push-11\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e91.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-push-10\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e83.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-push-9\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e75%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-push-8\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e66.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-push-7\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e58.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-push-6\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e50%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-push-5\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e41.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-push-4\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e33.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-push-3\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e25%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-push-2\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e16.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-push-1\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e8.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-push-0\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eleft\u003c/span\u003e: auto;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-offset-12\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e100%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-offset-11\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e91.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-offset-10\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e83.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-offset-9\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e75%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-offset-8\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e66.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-offset-7\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e58.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-offset-6\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e50%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-offset-5\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e41.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-offset-4\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e33.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-offset-3\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e25%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-offset-2\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e16.66666667%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-offset-1\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e8.33333333%\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-selector-class\"\u003e.col-lg-offset-0\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e到了这里，样式都基本上介绍完了，但是，我们还没有收尾，记得我们使用了浮动布局吗？我们还需要清除：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs css\" lang=\"css\"\u003e\u003cspan class=\"hljs-selector-class\"\u003e.row\u003c/span\u003e\u003cspan class=\"hljs-selector-pseudo\"\u003e:before\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003edisplay\u003c/span\u003e: table;\n      \u003cspan class=\"hljs-attribute\"\u003econtent\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\" \"\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-selector-class\"\u003e.row\u003c/span\u003e\u003cspan class=\"hljs-selector-pseudo\"\u003e:after\u003c/span\u003e {\n    \u003cspan class=\"hljs-attribute\"\u003eclear\u003c/span\u003e: both;\n}\n\u003c/code\u003e\u003c/pre\u003e","buildTime":"1514376951.3803","__v":0}
{"_id":{"$oid":"5a43998e00f9d61bc03de62a"},"id":"5a229c9cf265da432652a5ef","author":{"$oid":"5a4393bf95a5f32670e69c41"},"title":"前端入行两年--教会了我这些道理","meta":{"likeCount":0},"tag":["JavaScript","前端"],"comment":[],"content":"\u003ch2\u003e1.前言\u003c/h2\u003e\u003cp\u003e光阴似箭，日月如梭。不得不感慨时间过得很快，2017差不多结束了，一下子我从事前端开发的时间已经两年了。这两年可以说是一波三折，回想这两年的经历，让我忍不住了写下了这篇文章，记录自己在这两年经历的种种种种。这篇文章，打算当做自己的一个经历记录，而对于看这篇文章的你，希望你们能从我的经历里面吸取教训，希望即将步入前端和已经从事前端的你，不要想我这样一波三折，在前端的路走得更好。\u003c/p\u003e\u003ch2\u003e2.大学时光\u003c/h2\u003e\u003cp\u003e考完了第二次高考，紧跟着就是懵懵懂懂的上了大学，报的专业就是‘软件技术(网站设计)’。这么说，我也算是科班出身了，只是大学不是那么出名而已！在大学的时光里面，我并不是每天埋头在电脑前面写代码，学习。生活上有社团，班级的活动我基本都参加，也经常约上同学打篮球，聚餐，外出。这些经历，对于大学而言，是非常珍贵的经历，我想拥有多一些这样的经历。至于学习上，我也努力过，也有懒散过。成就方面，除去一些平常的奖项，比较有成就感的就是班里的成绩和个人素质综合测评我都是第一，因此一等奖学金和国家励志奖学金我没落下过。虽然这些和同级的人参加了什么国家省市的比赛，获得了多少等奖，多少名无法相提并论，但是我不求与他人相比，只求超越自己。在步入大学的第一天，我就想不虚度大学的时光，学好专业的知识，不再因自己的不努力而后悔。这个我算是做到了，只是不完美。至于不完美的原因，主要有两个：\u003c/p\u003e\u003cp\u003e一是自己的坚持和自制力不够，主要表现在两个方面——自己本身打算做一个项目练手，后来就是因为懒散或者技术难题放弃了。还有就是和在图书馆借了书，根本没怎么看，等于拿回宿舍放两三个月再还给图书馆！\u003c/p\u003e\u003cp\u003e\u003cb\u003e无论是否是大学生，无论有老师与否，学习这个都是靠自己的努力，靠自己的坚持，坚持，再坚持\u003c/b\u003e\u003c/p\u003e\u003cp\u003e二是自己在大学的学习里面，我虽然成绩很好，但不代表技术好，因为和同学对比，我的技术差了可不止一两条街。因为在学习上，我最多也是跟着老师和课本上面的内容学习，不了解外面的世界，不知道技术趋势，也没有和行业的人交流过。这也导致我在实习的时候很是吃亏！\u003c/p\u003e\u003cp\u003e\u003cb\u003e大学的知识需要学习，但是外面的技术趋势也得了解。反复折腾大学的项目，功课。学到的知识比较有限。对外面的技术趋势有有了解，加入社区和行业的人交流，学到的会更多，学习效率也更高。\u003c/b\u003e\u003c/p\u003e\u003ch2\u003e3.初入前端\u003c/h2\u003e\u003cp\u003e大学的两年时间感觉一晃就过了，一下就到了大三，出来实习了。在接触前端之前，我写了三个月的php，后来发现自己对前端更有兴趣，所以转前端了。但是这条路并不平坦，因为我找了半个月的的工作，面试了16家公司，15家拒绝，最后一家录用我了，就在两年前的11月，我有了第一份前端的工作。当时听到录用了，想都没想，立马就去入职了，没有上网或者去群聊消息打听过这个公司，对立面的情况一概的不了解。带着兴奋的心理去入职了，一个星期之后，我就在想着什么时候离职了。因为公司虽然是有400人，前端也有50人，但是基本（95%）都是实习生或者应届生，做的东西都是切图(html+css,js基本不需要写)即使是技术经理，当时觉得他技术厉害，现在觉得技术很水。做的项目都是很粗糙的（几千块一个项目，设计+前端+后台，大家可以想下是什么样的项目了），工资基本就是1600-2000，涨薪最多也就2500，每天加班也拼不上3000，在那工作四五年最多4000，福利补贴什么也没有，反倒是扣钱的借口就一大堆。每天开会进行‘洗脑’活动，平均每天入职一人，离职一人，入职没满一年就离职还要扣15个工作日的工资等等等等。公司名称不说了，毕竟当时入职都是你情我愿的事情，只是当时自己太天真而已。\u003c/p\u003e\u003cp\u003e\u003cb\u003e可能是因为我的专业技能学得并不是很好，这个经历现在还历历在目，在从那一次开始，我找工作再也不敢着急了，因为越是着急，越是找不到合适的工作。现在面试的时候我也会多问几句，公司的规章制度，福利补贴，薪资待遇，工作内容等问题，入职之前也多了解下公司，上网看评价（如果是初创的公司，网上没有评价的就爱莫能助了）。\u003c/b\u003e\u003c/p\u003e\u003cp\u003e前端的第一份工作是不如意，但不代表我就自暴自弃，在工作之余，我也有抓紧学习！这几个月我先是看了blue（智能社的创始人）的入门视频，后来又看了红皮书（【javascript高级程序设计】）。我看视频或者看书的时候，我并没有太着急，要逼自己太紧，而是紧盯的自己要劳逸结合，不能懒散。三个月后，视频和红皮书看完了，前端的三大基础，html+css+js有了一个最基本的认识，并不是很牢固的那一种，即使是切图，也是有点粗糙。看完了视频和红皮书的半个月后，我实在是不想再拖了，拿了2月份的工资的当天，就提离职了。当时主管跟我说，我入职没满一年就离职，是要扣15个工作日的工资的，这个月至少要做够15个工作日，我当时并没有理会，直接第二天不来了，合同没签，我走你也没办法！\u003c/p\u003e\u003cp\u003e\u003cb\u003e遇到实在是受不了的公司，不建议在纠缠下去，早点一刀两断或者就是最好的一个决定。当时在这家公司，有些人觉得被扣15个工作日的工资不划算，打算做满一年再离职。我就直接放弃，频繁请假或者上班不做事，自己学习。他不仁我不义，所以三月份免费给他打工的工作日并没有多少。对于这一次离职3月份的几天工资，我也不那么在乎，第一没多少，第二在乎可能会失去更多，代价更大！\u003c/b\u003e\u003c/p\u003e\u003cp\u003e\u003cb\u003e虽然工作的前三年我看重的是收获，待遇次之。如果收获基本没有，待遇也不行，我找不到理由留下，别人也无法说服我留下！\u003c/b\u003e\u003c/p\u003e\u003ch2\u003e4.播种之路\u003c/h2\u003e\u003cp\u003e上一份工作离职了之后，好像面试了5家公司吧，最终入职了一家初创公司，这家公司当时不到10个员工。基本都是技术开发，但是前端只有我一个。所以在这家公司，所有的前端只能靠我自己了，不懂的上网搜，或者在Q群问人。在这家公司里工作，比第一份工作好了很多，很多。但是做的事情，也可以说是比较机械，就是切图，只是比第一份工作复杂了些，也需要写交互特效，因此我的javascript和jquery练得比较多，用起来也顺手了很多。\u003c/p\u003e\u003cp\u003e自己也是在一些前端群里面也是比较活跃了，经常和一些人交流，也会上github看别人的代码！这份工作的前半年，我主要活跃于Q群，但是和那些人聊天，闲聊比较多，代码基本没怎么聊过，有时候也会交流下意见，这些都让我获益匪浅，改变了我很多的认知和做事方式。其中最简单粗暴的一个场景就是：我遇到不懂的，去群上提问，有人回答说：“网上一大堆答案，还来问！”，“看文档啊，写得那么详细！”。正因为被别人说得多了，我遇到问题不再是不懂马上问，而是不懂的先思考，再上网搜，看下有没有类似的答案或者教程，实在是搞不定的再去群里问。在这里也很感谢那些耐心帮我解决难题的大牛，也感谢他们的指导。有时候遇到自己能解答的，我也会尽力而为，毕竟能帮到别人，对自己也是一种实战。在群里，除了答疑和闲聊，也有交流意见，比较有印象的是这些谈话：“我一个星期看完【javascript高级程序设计】，3天看完【javascript dom编程艺术】”，“我买了犀牛书，目标一个月内看完”。\u003c/p\u003e\u003cp\u003e\u003cb\u003e这些话看着很威风。但我当时在想，这些人把看书当成百米赛跑了，谁看得快谁就厉害？为什么看书要加上期限？在自己规定的期限内看完，里面的知识点能吸收多少呢？\u003c/b\u003e\u003c/p\u003e\u003cp\u003e出于这样的心理，我想主要是由两个，一个是为了逼自己学习，避免因为自己懒散而出现有书不看这样的场景。第二个是学习的浮躁心理，看着要学习的这么多，得赶紧看完，再看下一本！\u003c/p\u003e\u003cp\u003e还有一个就是比较深刻一个聊天内容时：有人说想学javascript，但是不知道看什么书，我就推荐红皮书，但是那个人直接回答：“那本我都看完了！”。\u003c/p\u003e\u003cp\u003e\u003cb\u003e那时候我在想，一本书看完了就不能重复再看，还是说一本书只能看一遍，或者是看完了一本书，书上的知识都学会了，不需要看了？\u003c/b\u003e\u003c/p\u003e\u003cp\u003e这份工作的后半年，因为我老是用html+css+javascript+jquery开发项目，以及自己的一些练习。对于群里人说的es6，gulp，webpack，vue，angular，react等这一些完全不懂，甚至根本没听过。那个时候我先是看了阮一峰的【es6标准入门】，学习es6的语法，之后也是对gulp，webpack，angular,vue有了一个最基本的了解，但是还是很懵逼。因为并不是大家所说的前端模块化，工程化。而且这份工作，开发的项目一直用的是html+css+javascript+jquery。没跟上技术的趋势，也使用不了新技术。对自己技术水平，再提升一个等级比较困难，而且待遇方面也没增加，就是在今年年初涨了500。所以，出于对自己成长的考虑，我2月份提出了离职！在3月份正式离职。\u003c/p\u003e\u003cp\u003e离职的时候，还是挺不舍的，因为和这家公司的同事相处不错，也是激发了我的兴趣。这一份工作，增加了我对前端的兴趣，接触新的技术，也感觉是种下了前端的种子！这也解释了为什么我把第二份工作的经历称为我的‘播种之路’。\u003c/p\u003e\u003cp\u003e\u003cb\u003e这又说到找工作的事情，大家找工作的时候，建议问下面试官，应聘的职位的工作内容主要是的。我所见过的一些情况就是：一些群友去面试前端，虽然是前端开发，但是工作内容是做小程序或者切图。然后就觉得这样的工作很无趣，做了几天就离职。所以大家应聘的时候，多问几句！除了薪资待遇，公司环境。工作内容也很重要！\u003c/b\u003e\u003c/p\u003e\u003ch2\u003e5.萌芽之路\u003c/h2\u003e\u003cp\u003e现在这份工作与之前工作不一样，这份工作是在Q群联系的，之前是在网站投简历的。办完了离职手续过了几天，就进入现在这家公司入职了。刚进来的两天，并没有工作任务，只是老大教我怎么使用node.js搭建开发环境，让我知道什么是前端模块化，前端工程化的便利性。给我演示怎么使用gulp，webpack，vue，sass等配合开发项目，以及开发的一些规范。之后就给了两个页面的练手，给老大过目之后，给了一些要求和建议。因为在离职前，我有了解过node.js，gulp，webpack，vue等，所以熟悉公司的技术栈的过程比较顺利。这份工作也让我有了拥抱流行趋势，主流技术的感觉。\u003c/p\u003e\u003cp\u003e\u003cb\u003e当然了，流行趋势和主流的技术我并不是一股脑的学，而是项目用到什么就学什么，觉得什么有兴趣，有学习的价值学什么。如果什么都一股脑的学，而项目上没用上，没实战过，很快就会忘的。所以我现在就是什么需要学，对什么有兴趣，有什么是很有学习价值的就去学什么。\u003c/b\u003e\u003c/p\u003e\u003cp\u003e这份工作的经历，之所以称为‘萌芽之路’：\u003c/p\u003e\u003cp\u003e一是因为我虽然有了拥抱流行趋势，主流技术的感觉。但是一切我都是新学，还是新手，还是很多需要学习。\u003c/p\u003e\u003cp\u003e二是因为入职不久，就被老大催着注册一个github，也经同事的分享，知道了很多的学习资源，对自己改变了很多，每天都看一些社区的文章，公众号的文章，从中学习和了解知识和行业趋势。自己也喜欢在社区上写博客。这也是刚开始。\u003c/p\u003e\u003cp\u003e这个经历，对我的改变，太多太多。改变最大的主要两个方面：\u003cbr\u003e1.对于前端开发，现在并不是像以前那样一味的使用html+css+js+jquery，我有和公司的同事持续的努力，关注前端的趋势，探索前端的技术。我也很感谢公司的两个前端对我的耐心指导。\u003cbr\u003e2.还有一个方面就是在工作之余的时间，以前我主要是活跃于Q群，现在就算有空余的时间，我也基本没看过Q群，而是自己学习，如果有什么需要分享的，就在社区写文章或者交流！\u003c/p\u003e\u003cp\u003e\u003cb\u003e在工作这一方面，特别是接触前端三年以下的人，有人带和没人带是有区别的！有人指导下，可以少走很多弯路。有时候不知道学什么东西了，也可以给出一些建议。前提是，自己也要努力学习。\u003c/b\u003e\u003c/p\u003e\u003cp\u003e\u003cb\u003e大家业不要以为有人带就自己就不需要思考了，完全让别人教！因为教的可能不会一字一字的教，可能就是指导一下，别人也要上班，也要做事的，没那么多时间详细教！别人如果教的太详细，对自己而言，未必是好事，因为教的详细，说的就多，记住的就少，思考也少，容易乱，印象就不深刻。所以建议大家，在向别人请教的时候，要做笔记或者在电脑实际操作，加深自己的印象，不然很容易忘记！好记性不如硬笔头！\u003c/b\u003e\u003c/p\u003e\u003ch2\u003e6.关于社区\u003c/h2\u003e\u003cp\u003e在社区混了也有一段时间了，顺便说下自己的感受。9月加入掘金，是我第三个注册账号的社区，是第二个因为想些博客而加入的社区。写文章很辛苦，是一个脑力活和体力活（针对我自己，一般来说我写一篇文章是4小时左右，有几篇文章写了超过10小时），但是值得。因为好处和收获也不少，主要有下面几个：\u003c/p\u003e1.加深对技术点的学习和理解，方便对日后的使用。也是思考和总结的一个路径。\u003cbr\u003e2.结交更多志同道合的朋友，大家交流意见，互相帮助。\u003cbr\u003e3.提高自己的思维能力和写作水平。\u003cbr\u003e4.当日志使用，看着自己写过的博客，回想着这个过程，也是一个美好的回忆。\u003cbr\u003e5.鞭策自己持续的学习和思考。写博客就是这样神奇，写了第一篇，就是想持续的写下去，要想持续的写下去，自己就必须要持续的学习和思考，否则没内容可写！\u003cbr\u003e\u003cbr\u003e\u003cdiv\u003e\u003cp\u003e其它的好处和收获就不多说了！\u003c/p\u003e\u003cp\u003e虽然我写文章主要是记录，分享，交流意见和认识朋友。但是每一次进入社区的时候，看到自己的文章被喜欢，心里都是挺开心的，因为这也是别人对自己的一种肯定，一种鼓励方式！\u003c/p\u003e\u003cp\u003e既然这篇文章在掘金发布，说下对掘金的感受（这里偏题了，希望大家不要介意）：\u003c/p\u003e\u003cp\u003e内容方面，偶尔有听到说掘金的文章内容比以前水了，我加入掘金有三个月，并不知道以前的掘金文章质量是什么的情况，但是现在掘金的文章质量，给我的感觉挺好的，比其他的一些博客社区要好！文章的显示机制我也觉得很好（首页中，不但能看到新发布的文章，热门的文章，也有作者推荐。其他类似的板块也是如此）！这个让我满意。\u003c/p\u003e\u003cp\u003e用户交流方面，掘金的微信群很多，光是我自己加入的也有几个，群也是比较活跃，在群里，除了能在开发这交流，也能让开发者提供对社区的一个建议！除此之外，掘金也不定时会请一个大牛，进行一个直播分享的教程，干货满满的，很多人都活跃参加！直播结束也会有抽奖\u003c/p\u003e\u003cp\u003e福利方面，掘金的周边送得比较多，每次的活动直播，基本会有抽奖，会送上周边！\u003c/p\u003e\u003cp\u003e遗憾的地方在于：\u003c/p\u003e\u003cp\u003e1.搜索方面，这个。。。个人觉得要优化下吧！\u003c/p\u003e\u003cp\u003e2.文章方面，觉得还是有一个标签分类会比较好！（html，css，javascript，node.js...）\u003c/p\u003e\u003cp\u003e3.周边方面，掘金送的周边很多，比我知道的几个社区都多，但是拿掘金的周边，很大一部分是靠运气！即使有的作者在掘金写了很多的文章，被浏览和被喜欢次数也很多，但是运气不好，或者直播活动参加得少，就很难有机会拿周边。虽然大部分作者写文章不是为了拿周边，但是觉得给些周边，多多少少可以起到一个鼓励的作用！每个季度，每半年给社区贡献前10，前15，前20的作者一点周边这个感觉也不算是很过分的事情！（我拿过一些周边，虽然这些周边在价格上面似乎不高，但每次拿到周边我都很珍惜，因为个人觉得这个是一个额外的收获，也是社区对自己的肯定。可能是因为我是一个比较重情的人吧。）\u003c/p\u003e\u003ch2\u003e7.工作之外\u003c/h2\u003e\u003cp\u003e大家对程序员的印象可能都是‘宅’，‘内向’，‘闷’，‘游戏狂’等，而且大家看文章，看到这里，大家对我的印象可能也是写代码和学习。其实不然，我有自己的兴趣爱好，而且兴趣爱好还比较广泛，只是每一个爱好都没有太深入，水平就是半桶水而已（此处尴尬10000+）。\u003c/p\u003e\u003cp\u003e\u003cb\u003e工作之余，专业技能之外，有自己的兴趣爱好，做自己喜欢做的事情，可能是最简单的幸福。兴趣爱好和早睡早起，吃好喝好这些习惯一样，都是善待自己的一种方式，也能让自己的生活充满乐趣！\u003c/b\u003e\u003c/p\u003e\u003cp\u003e我自已兴趣爱好有：摄影，健身，诗词，篮球，羽毛球，旅游，跑步，做饭，线下交流等！这些兴趣爱好，可能有些因为特别原因我还没行动过，但是未来一定会有行动的。\u003c/p\u003e\u003cp\u003e附上知乎上程序员的神技能：\u003cbr\u003e\u003ca href=\"https://www.zhihu.com/question/67078910\"\u003e程序员除了敲代码，还有哪些隐藏的神技能？\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e8.几句鸡汤\u003c/h2\u003e\u003cp\u003e1.可能很多人像我之前一样，会和别人比较：“同样是一年经验，别人的技术都那么厉害，待遇那么高了！”，“那些人技术水平不如我，但是却找到比我好的工作，有人带，技术也好！”等。对于这些也抱怨过，闷闷不乐过，但是想着我这个样子，除了自己变得颓废之外，改变不了任何情况。也有可能别人的努力我看不到，或者别人的其他方面比我优秀，即使真的只是运气不如别人，那又怎样了！我能做的，只有坚持和努力！现在我的想法是：不求与别人相比，只求超越自己！\u003c/p\u003e\u003cp\u003e2.我不期待突如其来的运气，只期待我的努力能有所收获。努力未必成功，但是不努力一定失败。即使没有成功，至少我在回想以前的时候，我至少努力过，奋斗过，这就足以无怨无悔。我也相信，以后小有成就的我，一定会感谢现在努力的自己！\u003c/p\u003e\u003cp\u003e3.换了几次工作，可能在别人眼里，我换工作很频繁，但是在我自己眼里，我觉得是正确的选择。也是这几次换工作，让我体会到，有时候选择比努力更重要。与其在一个没有什么收获的方向努力，不如选择一个更多收获的方向努力。\u003c/p\u003e\u003ch2\u003e9.未来展望\u003c/h2\u003e\u003cp\u003e关于未来，在学习方面，不断学习是必须的，但是目标我不立得太明确。因为以往的经验告诉我，前端这一个领域，技术更新的非常的快，计划总是赶不上变化。担无论如何变化，未来我继续展望，继续努力，望自己能在行业立足，更上一层楼。也期待能和大家有更多的交流，更多的学习，更大的进步！\u003c/p\u003e\u003cp\u003e需要加微信，方便以后交流的，欢迎添加，备注如：前端-广州-昵称或者名字。我也组了个微信群，需要进的跟我说下！\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/18/16067657e9257013?w=200\u0026amp;h=200\u0026amp;f=jpeg\u0026amp;s=23188\"\u003e\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003c/div\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e","buildTime":"1514379361.6124","__v":0}
{"_id":{"$oid":"5a439bc574ee951f2c48c00f"},"id":"5a3a2036f265da430406c3fe","author":{"$oid":"5a439bc574ee951f2c48c002"},"title":"快速理解JavaScript中call和apply原理","meta":{"likeCount":0},"tag":["JavaScript"],"comment":[],"content":"\u003cp\u003e在了解\u003ccode\u003ecall()\u003c/code\u003e和\u003ccode\u003eapply()\u003c/code\u003e原理之前，我们必须对\u003ccode\u003ethis\u003c/code\u003e的作用和使用方法有所了解，如果你熟悉\u003ccode\u003ethis\u003c/code\u003e 的用法，那么请直接往下看。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003ecall方法:\u003c/h3\u003e\n\u003cp\u003e语法：\u003ccode\u003ecall([thisObj[,arg1[, arg2[, [,.argN]]]]])\u003c/code\u003e\u003cbr\u003e\n定义：调用一个对象的一个方法，以另一个对象替换当前对象。 \u003cbr\u003e\n说明：call 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。 如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003eapply方法：\u003c/h3\u003e\n\u003cp\u003e语法：\u003ccode\u003eapply([thisObj[,argArray]])\u003c/code\u003e\u003cbr\u003e\n定义：应用某一对象的一个方法，用另一个对象替换当前对象。 \u003cbr\u003e\n说明：如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。\n如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj， 并且无法被传递任何参数。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ecall()\u003c/code\u003e和\u003ccode\u003eapply()\u003c/code\u003e的作用十分相似，只是参数类型上的差别，以适应不同的使用场景。它们都是为了改变函数运行时的 context（上下文）而存在的，再说的直白一点，就是为了改变函数内部 this 的指向。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e举例说明\u003c/h3\u003e\n\u003cp\u003e我们有一句很经典的谚语，说的是：龙生龙，凤生凤，老鼠生来会打洞，这从遗传上解释是，动物的某些行为有可能是由一系列基因所调控的，但是，注意，我们偏偏想让龙来打洞呢，该如何去实现？下面将围绕这个话题来解释\u003ccode\u003ecall()\u003c/code\u003e和\u003ccode\u003eapply()\u003c/code\u003e的原理。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs JavaScript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dragon = {\n\u0009\u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e : \u003cspan class=\"hljs-string\"\u003e'foo'\u003c/span\u003e\n\u0009\u003cspan class=\"hljs-comment\"\u003e// other attribute\u003c/span\u003e\n}\n\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e mouse = {\n\u0009\u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e : \u003cspan class=\"hljs-string\"\u003e'tom'\u003c/span\u003e,\n\u0009\u003cspan class=\"hljs-attr\"\u003emakeHole\u003c/span\u003e : \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ewhere\u003c/span\u003e)\u003c/span\u003e{\n\u0009\u0009\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.name + \u003cspan class=\"hljs-string\"\u003e' is making a hole in the '\u003c/span\u003e + where)\n\u0009}\n\u0009\u003cspan class=\"hljs-comment\"\u003e// other attribute\u003c/span\u003e\n}\n\nmouse.makeHole.call(dragon,\u003cspan class=\"hljs-string\"\u003e'hill'\u003c/span\u003e)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e运行上面代码后会在控制台上打印出：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/20/160730fb6f5dfba2?w=299\u0026amp;h=80\u0026amp;f=png\u0026amp;s=4202\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e可以看出，我们声明了一个\u003ccode\u003edragon\u003c/code\u003e的对象，我们并没有赋予它\u003ccode\u003e打洞\u003c/code\u003e的功能，但是我们使用\u003ccode\u003ecall()\u003c/code\u003e继承了\u003ccode\u003emouse\u003c/code\u003e的方法，就可以做到\u003ccode\u003emouse\u003c/code\u003e函数所能做到的事情。\u003c/p\u003e\n\u003cp\u003e这到底是怎么做到的呢？让我们来看看\u003ccode\u003ecall()\u003c/code\u003e的参数：\n第一个是一个对象，这个对象将代替\u003ccode\u003eFunction\u003c/code\u003e类里原本的\u003ccode\u003ethis\u003c/code\u003e对象，我们传入的是\u003ccode\u003ethis\u003c/code\u003e，记住，这个\u003ccode\u003ethis\u003c/code\u003e在\u003ccode\u003emakeHole\u003c/code\u003e函数里指的是未来将要实例化这个函数的对象（我知道这有些拗口），当声明了\u003ccode\u003edragon\u003c/code\u003e的时候，这个\u003ccode\u003ethis\u003c/code\u003e指的就是\u003ccode\u003edragon\u003c/code\u003e。除了第一个参数，后面所有的参数都是传给父函数本身使用的参数。\u003c/p\u003e\n\u003cp\u003e而\u003ccode\u003eapply()\u003c/code\u003e和\u003ccode\u003ecall()\u003c/code\u003e功能几乎一样，唯一的区别就是\u003ccode\u003eapply()\u003c/code\u003e第二个参数只能是数组，这个数组将作为参数传给原函数的参数列表\u003ccode\u003earguments\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e模拟实现call()函数\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003ecall()\u003c/code\u003e函数是什么样的原理呢？我们用一个实例来帮助理解。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-comment\"\u003e//创建Dragon\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDragon\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ename\u003c/span\u003e) \u003c/span\u003e{\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.name = name;\n}\n\n\u003cspan class=\"hljs-comment\"\u003e//创建一个说话的函数\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esay\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003econtent\u003c/span\u003e) \u003c/span\u003e{\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.name + \u003cspan class=\"hljs-string\"\u003e' : '\u003c/span\u003e + content)\n}\n\n\u003cspan class=\"hljs-comment\"\u003e//模拟原生call函数\u003c/span\u003e\n\u003cspan class=\"hljs-built_in\"\u003eFunction\u003c/span\u003e.prototype.myCall = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003econtext\u003c/span\u003e) \u003c/span\u003e{\n  context = context || \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e;\n  \n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e args = [];\n  context.fn = \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e;\n\n  \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e; i \u0026lt; \u003cspan class=\"hljs-built_in\"\u003earguments\u003c/span\u003e.length; i++) {\n    args.push(\u003cspan class=\"hljs-built_in\"\u003earguments\u003c/span\u003e[i]);\n  };\n  \n  context.fn(...args);\n  \u003cspan class=\"hljs-keyword\"\u003edelete\u003c/span\u003e context.fn;\n};\n\n\u003cspan class=\"hljs-comment\"\u003e//实例化一个名字为'foo'的龙\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e foo = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Dragon(\u003cspan class=\"hljs-string\"\u003e'foo'\u003c/span\u003e)\n\n\u003cspan class=\"hljs-comment\"\u003e//让foo说话\u003c/span\u003e\nsay.myCall(foo, \u003cspan class=\"hljs-string\"\u003e'I can talk!'\u003c/span\u003e)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e上面的代码很容易理解，唯一的困难点在于理解在原型链上的\u003ccode\u003emyCall\u003c/code\u003e函数\n我们来分析实现的步骤：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e做一个多场景适配，当\u003ccode\u003emyCall\u003c/code\u003e函数没有接收到参数时，\u003ccode\u003econtext\u003c/code\u003e对应的是\u003ccode\u003ewindow\u003c/code\u003e对象\u003c/li\u003e\n\u003cli\u003e创建一个空数组，用于接收形参。\u003c/li\u003e\n\u003cli\u003e绑定\u003ccode\u003ethis\u003c/code\u003e，这里的\u003ccode\u003ethis\u003c/code\u003e代表的就是上下文中的\u003ccode\u003esay\u003c/code\u003e函数。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efor\u003c/code\u003e循环将参数添加到\u003ccode\u003eargs\u003c/code\u003e数组，循环从1开始是因为第0位是\u003ccode\u003efoo\u003c/code\u003e对象，并非我们需要的参数\u003c/li\u003e\n\u003cli\u003e执行函数，并将\u003ccode\u003eargs\u003c/code\u003e数组作为rest参数传入，这里是ES6的写法，不熟悉的同学参见阮一峰老师的\u003ca target=\"_blank\" href=\"http://es6.ruanyifeng.com/#docs/function#rest-%E5%8F%82%E6%95%B0\"\u003erest 参数\u003c/a\u003e文档\u003c/li\u003e\n\u003cli\u003e删除函数\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e打印结果为：\n\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/20/160730dd0775ddec?w=280\u0026amp;h=81\u0026amp;f=png\u0026amp;s=3873\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e可以看到，这里我们实现了让一个叫做\u003ccode\u003efoo\u003c/code\u003e的龙说话！\n\u003cem\u003e\u003cstrong\u003e\u003ccode\u003eapply()\u003c/code\u003e函数实现方式同样类似，可以修改上述例子实现，主要是在参数一部分做处理。\u003c/strong\u003e\u003c/em\u003e\u003c/p\u003e\n","buildTime":"1514354780.2812","__v":0}
{"_id":{"$oid":"5a439bc574ee951f2c48c010"},"id":"5a3b1a88f265da431440dc4a","author":{"$oid":"5a43940c4d03f52390c25e9c"},"title":"Mobx React  最佳实践","meta":{"likeCount":0},"tag":["React.js","MobX"],"comment":[],"content":"\u003cblockquote\u003e\n\u003cp\u003e如果你不知道mobx是什么，请阅读\u003ca target=\"_blank\" href=\"https://user-gold-cdn.xitu.io/2017/12/23/16083af7396489c1\"\u003e这篇文章\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e在这一篇文章里，将展示一些使用了mobx的React的最佳实践方式，并按照一条一条的规则来展示。在你遇到问题的时候，可以依照着这些规则来解决。\u003c/p\u003e\n\u003cp\u003e这篇文章要求你对于mobx的stores有基本的理解，如果没有的话请先阅读\u003ca target=\"_blank\" href=\"https://mobx.js.org/best/store.html\"\u003e官方文档\u003c/a\u003e。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003estores 代表着UI状态\u003c/h3\u003e\n\u003cp\u003e永远记住，你的stores代表着你的UI状态，这就意味着，当你将你的stores储存下来后，就算你关了网页，再次打开，载入这个stores，你得到的网页也应该是相同的。虽然stores并不是一个本地数据库的角色，但是他依然存储着一些类似于按钮是否可见，input里面的内容之类的UI状态。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs Javascript\" lang=\"Javascript\"\u003e\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSearchStore\u003c/span\u003e \u003c/span\u003e{\n  @observable searchText;\n\n  @action\n  setSearchText = \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003esearchText\u003c/span\u003e) =\u0026gt;\u003c/span\u003e {\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.searchText = searchText\n  }\n}\n\n@observer\n\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSearchInput\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eReact\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eComponent\u003c/span\u003e \u003c/span\u003e{\n\n  handleInputChanged = \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) =\u0026gt;\u003c/span\u003e {\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e { searchStore } = \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.props;\n    searchStore.setSearchText(event.target.value);\n  }\n\n  render() {\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e { searchStore } = \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.props;\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e (\n      \u003cspan class=\"xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003einput\u003c/span\u003e\n        \u003cspan class=\"hljs-attr\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e{searchStore.searchText}\u003c/span\u003e\n        \u003cspan class=\"hljs-attr\"\u003eonChange\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e{this.handleInputChanged}\u003c/span\u003e\n      /\u0026gt;\u003c/span\u003e\n    );\n  }\n}\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e将你的REST API请求和store的action分离\u003c/h3\u003e\n\u003cp\u003e不建议将REST API请求的函数放在stores里面，因为这样以来这些请求代码很难测试。你可以尝试把这些请求函数放在一个类里面，把这个类的代码和store放在一起，在store创建时，这个类也相应创建。然后当你测试时，你也可以优雅的把数据从这些类里面mock上去。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs Javascript\" lang=\"Javascript\"\u003e\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eTodoApi\u003c/span\u003e \u003c/span\u003e{\n\n  fetchTodos = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e =\u0026gt;\u003c/span\u003e request.get(\u003cspan class=\"hljs-string\"\u003e'/todos'\u003c/span\u003e)\n}\n\n\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eTodoStore\u003c/span\u003e \u003c/span\u003e{\n\n  @observable todos = [];\n\n  \u003cspan class=\"hljs-keyword\"\u003econstructor\u003c/span\u003e(todoApi) {\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.todoApi = todoApi;\n  }\n\n  fetchTodos = \u003cspan class=\"hljs-keyword\"\u003easync\u003c/span\u003e () =\u0026gt; {\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e todos = \u003cspan class=\"hljs-keyword\"\u003eawait\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.todoApi.fetchTodos();\n\n    runInAction(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e =\u0026gt;\u003c/span\u003e {\n      \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.todos = todos;\n    });\n  }\n}\n\n\u003cspan class=\"hljs-comment\"\u003e// 在你的主要函数里面\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e todoApi = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e TodoApi();\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e todoStore = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e TodoStore(todoApi);\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e把你的业务逻辑放在stores里面\u003c/h3\u003e\n\u003cp\u003e尽量不要把业务逻辑写在你的组件里面。当你把业务逻辑写在组件里面的时候，你是没有办法来及时定位错误的，因为你的业务逻辑分散在各种不同的组件里面，让你很难来通过行为来定义到底是哪些代码涉及的这个错误。最好就把业务逻辑放在stores的方法里面，从组件里面调用。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e避免使用全局的store实例\u003c/h3\u003e\n\u003cp\u003e请尽量避免使用全局的store实例，因为这样你很难写出有条理而可靠的组件测试。取而代之的是，你可以使用Provider来把你的store inject到你的component实例的props里面。这样你就可以轻松的mock这些store来测试了。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs Javascript\" lang=\"Javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e searchStore = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e SearchStore();\n\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e app = (\n  \u003cspan class=\"xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eProvider\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003esearchStore\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e{searchStore}\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eSearchInput\u003c/span\u003e /\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003eProvider\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n);\n\nReactDom.render(app, container);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ca target=\"_blank\" href=\"https://github.com/mobxjs/mobx-react#provider-and-inject\"\u003e\u003cstrong\u003emobxjs/mobx-react\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e只有在store里面才允许改变属性\u003c/h3\u003e\n\u003cp\u003e请不要直接在组件里面直接操作store的属性值。因为只有store才能够来修改自己的属性。当你要改变属性的时候，请使用相应的store方法。不然的话你的属性修改会散落在各处不受控制，这是很难debug的。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e时刻记得在组件声明 \u003ccode\u003e@observer\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003e在每个组件声明的时候使用@observer来更新组件的状态。不然在嵌套组件里面，子组件没有声明的话，每次状态更新涉及到的都是父组件级的重新渲染。当你都使用了\u003ccode\u003e@observer\u003c/code\u003e时，重新渲染的组件数量会大大降低。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e使用 \u003ccode\u003e@computed\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003e就像下面代码的例子，使用\u003ccode\u003e@computed\u003c/code\u003e属性来处理一些涉及多个属性的逻辑。使用\u003ccode\u003e@computed\u003c/code\u003e可以减少这样的判断类业务逻辑在组件里面出现的频率。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eclass ApplicationStore {\n\n  @observable loggedInUser;\n\n  @observable isInAdminMode;\n\n  @computed isAdminButtonEnabled = () =\u0026gt; {\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e this.loggedInUser.role === \u003cspan class=\"hljs-string\"\u003e'admin'\u003c/span\u003e \u0026amp;\u0026amp; this.isInAdminMode;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e你不需要 react router 来管理状态\u003c/h3\u003e\n\u003cp\u003e你不需要使用react router管理状态。就像我前面所说的，你的store就代表了应用的状态。当你让router来管理部份应用状态的时候，这部分状态就从store里面剥离开来。所以尽量使用store来储存所有的UI状态，这样store的属性就是你的界面所得。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e倾向于编写可控组件\u003c/h3\u003e\n\u003cp\u003e多编写可控组件，这样会大大降低你的测试复杂度，也让你的组件易于管理。\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://reactjs.org/docs/forms.html\"\u003e\u003cstrong\u003eForms – React\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e作者：\u003ca target=\"_blank\" href=\"https://medium.com/@daniel.bischoff?source=post_header_lockup\"\u003eDaniel Bischoff\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e原文：\u003ca target=\"_blank\" href=\"https://medium.com/dailyjs/mobx-react-best-practices-17e01cec4140\"\u003eMobx React — Best Practices\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e翻译：Dominic Ming\u003c/p\u003e\n\u003c/blockquote\u003e\n","buildTime":"1514353552.6641","__v":0}
{"_id":{"$oid":"5a439bc574ee951f2c48c011"},"id":"5a393f9b51882574d23c7977","author":{"$oid":"5a439bc574ee951f2c48c007"},"title":"轻松掌握深拷贝和浅拷贝","meta":{"likeCount":0},"tag":["JavaScript"],"comment":[],"content":"\u003cp\u003e首先，我们必须明确一点，就是JavaScript的变量可以分为以下两种类型：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e基本类型\n\u003cul\u003e\n\u003cli\u003eundefined\u003c/li\u003e\n\u003cli\u003enull\u003c/li\u003e\n\u003cli\u003enumber\u003c/li\u003e\n\u003cli\u003estring\u003c/li\u003e\n\u003cli\u003eboolean\u003c/li\u003e\n\u003cli\u003esymbol\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e基本变量是直接按值存放的，存放在栈内存中的简单数据段，可以直接访问。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e引用类型 Object\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e存放在堆内存中的对象，变量保存的是一个指针，这个指针指向另一个位置。当需要访问引用类型（如对象，数组等）的值时，首先从栈内存中获得该对象的地址指针，然后再从堆内存中取得所需的数据。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003e一个简单的例子\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e a = \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e;\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e obj1 = {\u003cspan class=\"hljs-attr\"\u003eb\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e};\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e obj2 = obj1;\n\nobj2.b = \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e; \n\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(obj1.b); \u003cspan class=\"hljs-comment\"\u003e// 3\u003c/span\u003e\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(obj2.b); \u003cspan class=\"hljs-comment\"\u003e// 3\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e那么问题就来了，有一些场景我们需要将一个对象含的值全部\u003ccode\u003eCopy\u003c/code\u003e给另一个对象，这个时候如果只是简单的赋值操作，只是对指针进行了一个复制，而在堆内存区的值并没有发生改变。所以我们得到以下的结论：\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e什么是深拷贝\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003e深拷贝即是在堆内存区拷贝出一个对象来。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e深拷贝是开辟一块新的内存地址，将原对象的各个属性逐个复制进去。对拷贝对象和源对象各自的操作互不影响。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e实现浅拷贝\u003c/h3\u003e\n\u003cp\u003e之前一直有一个错误实现深拷贝的想法，就是\u003cstrong\u003e遍历一个对象的k-v对并一一复制给另一个对象\u003c/strong\u003e便可以实现\u003cstrong\u003e深拷贝\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e但是是错误的，这个是浅拷贝(shallowCopy)\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e原因很简单，当\u003ccode\u003eK-V\u003c/code\u003e对里\u003ccode\u003evalue\u003c/code\u003e是\u003ccode\u003eObject\u003c/code\u003e的时候，复制过去便仍然是复制引用。比如\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e obj = {\n    a: 1,\n    b:{\n        c: 2,\n        d: 3\n    }\n}\n\n\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e obj2 = {}\n\n\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e item of Object.keys(obj)){\n    obj2[item] = obj[item]\n}\n\nobj2.b.d = 2; \n\nobj.b.d // 此时obj.b.d 变成了2\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e另外一点\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"\u003e\u003ccode\u003eObject.assign\u003c/code\u003e\u003c/a\u003e也是一个\u003ccode\u003eshallowCopy\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javaScript\" lang=\"javaScript\"\u003e \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e obj1 = { \u003cspan class=\"hljs-attr\"\u003ea\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e , \u003cspan class=\"hljs-attr\"\u003eb\u003c/span\u003e: { \u003cspan class=\"hljs-attr\"\u003ec\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e}};\n  \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e obj2 = \u003cspan class=\"hljs-built_in\"\u003eObject\u003c/span\u003e.assign({}, obj1);\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-built_in\"\u003eJSON\u003c/span\u003e.stringify(obj2)); \u003cspan class=\"hljs-comment\"\u003e// { a: 0, b: { c: 0}}\u003c/span\u003e\n  \n  obj1.a = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-built_in\"\u003eJSON\u003c/span\u003e.stringify(obj1)); \u003cspan class=\"hljs-comment\"\u003e// { a: 1, b: { c: 0}}\u003c/span\u003e\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-built_in\"\u003eJSON\u003c/span\u003e.stringify(obj2)); \u003cspan class=\"hljs-comment\"\u003e// { a: 0, b: { c: 0}}\u003c/span\u003e\n  \n  obj2.a = \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e;\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-built_in\"\u003eJSON\u003c/span\u003e.stringify(obj1)); \u003cspan class=\"hljs-comment\"\u003e// { a: 1, b: { c: 0}}\u003c/span\u003e\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-built_in\"\u003eJSON\u003c/span\u003e.stringify(obj2)); \u003cspan class=\"hljs-comment\"\u003e// { a: 2, b: { c: 0}}\u003c/span\u003e\n  \n  obj2.b.c = \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e;\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-built_in\"\u003eJSON\u003c/span\u003e.stringify(obj1)); \u003cspan class=\"hljs-comment\"\u003e// { a: 1, b: { c: 3}}\u003c/span\u003e\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-built_in\"\u003eJSON\u003c/span\u003e.stringify(obj2)); \u003cspan class=\"hljs-comment\"\u003e// { a: 2, b: { c: 3}}\u003c/span\u003e\n  \n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e如何实现深拷贝\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e方法一:\u003cstrong\u003eJSON对象的parse和stringify\u003c/strong\u003e(最简单的)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e obj1 = { \u003cspan class=\"hljs-attr\"\u003ea\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e , \u003cspan class=\"hljs-attr\"\u003eb\u003c/span\u003e: { \u003cspan class=\"hljs-attr\"\u003ec\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e}};\n\n\u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e obj2 = \u003cspan class=\"hljs-built_in\"\u003eJSON\u003c/span\u003e.parse(\u003cspan class=\"hljs-built_in\"\u003eJSON\u003c/span\u003e.stringify(obj1));\n\nobj2.b.c = \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e;\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(obj2.b.c); \u003cspan class=\"hljs-comment\"\u003e// { a: 0 , b: { c: 3}};\u003c/span\u003e\n\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(obj1.b.c); \u003cspan class=\"hljs-comment\"\u003e// { a: 0 , b: { c: 0}};\u003c/span\u003e\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e该方法够处理JSON格式能表示的所有数据类型，但是无法拷贝对象里面的\u003ccode\u003e函数\u003c/code\u003e，\u003ccode\u003e正则表达式\u003c/code\u003e等，而且会丧失所有的\u003ccode\u003econstructor\u003c/code\u003e，也就是说，将是破坏整条\u003ccode\u003eprototype\u003c/code\u003e链。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e方法二：\u003cstrong\u003e递归浅拷贝\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e刚才提到浅拷贝只能拷贝对象的一层，那么对浅拷贝进行递归便可以实现深拷贝。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003edeepCopy\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003eoldObj, newObj\u003c/span\u003e)\u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e key \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e oldObj){\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003etypeof\u003c/span\u003e oldObj[key] != \u003cspan class=\"hljs-string\"\u003e'object'\u003c/span\u003e){\n            \u003cspan class=\"hljs-comment\"\u003e// 是基本类型直接复制\u003c/span\u003e\n            newObj[key] = oldObj[key];\n        }\u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n            newObj[key] = oldObj[key].constructor == \u003cspan class=\"hljs-string\"\u003e'[Function: Array]'\u003c/span\u003e？[]:{};\n            deepCopy(oldObj[key],newObj[key])\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ca target=\"_blank\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments/callee\"\u003e\u003ccode\u003earguments.calle\u003c/code\u003e\u003c/a\u003e可以在匿名函数中实现递归，此处也可以用\u003ccode\u003edeepCopy(oldObj[key],newObj[key])\u003c/code\u003e，该方法的缺陷是，一旦欲拷贝对象和原对象存在相互引用的情况，便可能造成死循环。(一直往下递归仍然判断为Object即造成死循环)所以需要加上判断跳出的语句\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javaScript\" lang=\"javaScript\"\u003e...\nfor(\u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e key \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e oldObj){\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(newObj[key] === oldObj[key]){\n        \u003cspan class=\"hljs-keyword\"\u003econtinue\u003c/span\u003e;\n    }\n    ...\n}\n...\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e方法三：借用工具库\u003ccode\u003eloadash\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003eloadash\u003c/code\u003e有一个\u003ccode\u003e.cloneDeep\u003c/code\u003e的方法可以实现深拷贝。\u003c/p\u003e\n\u003cp\u003e使用方法：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eobj2 = _.cloneDeep(obj1);\u003c/code\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e综上：\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e基本类型变量存贮在栈内存区,存放在堆内存中的对象，变量保存的是一个指针。\u003c/li\u003e\n\u003cli\u003e直接遍历对象一一复制是\u003ccode\u003e浅拷贝\u003c/code\u003e(shallowCopy)\u003c/li\u003e\n\u003cli\u003e深拷贝即是在堆内存区拷贝出一个对象来。\u003c/li\u003e\n\u003cli\u003e深拷贝当然更占内存，请一定要针对不同的场景做不同的拷贝处理。\u003c/li\u003e\n\u003c/ul\u003e\n","buildTime":"1514361956.376","__v":0}
{"_id":{"$oid":"5a439bc574ee951f2c48c012"},"id":"5a387bda6fb9a045211ed1cc","author":{"$oid":"5a439bc574ee951f2c48c00b"},"title":"PC端时间日历插件 功能齐全 无依赖","meta":{"likeCount":0},"tag":["JavaScript"],"comment":[],"content":"\u003cp\u003e时间日历插件，网上有很多版本，功能强大的，功能简单的数不尽数，那为什么我还要写一个日历插件呢？\u003c/p\u003e\u003cp\u003e很认真的告诉你：\u003c/p\u003e\u003cul\u003e\u003cli\u003e我手痒了，就是闲下来随便敲敲。\u003cbr\u003e\u003c/li\u003e\u003cli\u003e开发一个功能齐全的日期选择插件\u003c/li\u003e\u003cli\u003e根据自己的业务需求不断优化更新\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e好 进入正题 简单的阐述一下插件的使用方法，如果你不是傻瓜，肯定会秒懂它的使用。\u003c/p\u003e\u003cp\u003e备注：由于此次开发用的时间很短，还有一些功能没有实现后期会慢慢的加上： 例如 节日显示，皮肤功能等.... ，当然代码也需要精简。\u003c/p\u003e\u003cp\u003e先来找图看看时间选择器的效果：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/19/1606ca5254b11e3f?w=1033\u0026amp;h=453\u0026amp;f=png\u0026amp;s=47883\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e没错就是这个吊样，如果你不需要这个色调，你可以fork我的github项目任意修改美美的色调。\u003c/p\u003e\u003cp\u003e当然也欢迎你给我提很多很多的bug让我改不停😃 。\u003c/p\u003e\u003ch5\u003enpm地址：\u003ca href=\"https://www.npmjs.com/package/zane-calendar\" target=\"_blank\"\u003ehttps://www.npmjs.com/package/zane-calendar\u003c/a\u003e\u003c/h5\u003e\u003ch4\u003egithub地址：\u003ca href=\"https://github.com/wangweianger/zane-data-time-calendar\" target=\"_blank\"\u003ehttps://github.com/wangweianger/zane-data-time-calendar\u003c/a\u003e\u003c/h4\u003e\u003ch4\u003edemo地址：\u003ca href=\"http://www.seosiwei.com/zaneDate/index.html\" target=\"_blank\"\u003ehttp://www.seosiwei.com/zaneDate/index.html\u003c/a\u003e\u003c/h4\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003ch3\u003e说明：\u003c/h3\u003e\u003cul\u003e\u003cli\u003e\u003cp\u003e掉起插件DOM节点可以是input输入框，也可以是其他任意闭合的html标签 \u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e此插件不依赖任何第三方插件，因此可以在任何地方单独使用\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e插件不兼容低版本的IE浏览器，IE浏览器请慎重\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e暂时只支持单个时间段选择，后期会推出多个时间段选择方式\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch3\u003e使用方法：\u003c/h3\u003e\u003ch4\u003e浏览器端直接应用css,js\u003c/h4\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e\u0026lt;link href=\u003cspan class=\"hljs-string\"\u003e\"./dist/zane-calendar.css\"\u003c/span\u003e\u0026gt;\n\u0026lt;script src=\u003cspan class=\"hljs-string\"\u003e\"./dist/zane-calendar.js\"\u003c/span\u003e\u0026gt;\u0026lt;/script\u0026gt;\n\n\u0026lt;!-- 需要加时间插件的输入框 --\u0026gt;\n\u0026lt;input \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"text\"\u003c/span\u003e name=\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e id=\u003cspan class=\"hljs-string\"\u003e\"zane-calendar\"\u003c/span\u003e\u0026gt;\n\n初始化\nzaneDate({\n\u0009elem:\u003cspan class=\"hljs-string\"\u003e'#zane-calendar'\u003c/span\u003e,\n})\u003c/code\u003e\u003c/pre\u003e\u003ch4\u003ewebpack 开发引入方式\u003c/h4\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003econst zaneDate = require(\u003cspan class=\"hljs-string\"\u003e'zane-calendar'\u003c/span\u003e)\n或\nimport zaneDate from \u003cspan class=\"hljs-string\"\u003e'zane-calendar'\u003c/span\u003e\n\n\u0026lt;!-- 需要加时间插件的输入框 --\u0026gt;\n\u0026lt;input \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"text\"\u003c/span\u003e name=\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e id=\u003cspan class=\"hljs-string\"\u003e\"zane-calendar\"\u003c/span\u003e\u0026gt;\n\n初始化\nzaneDate({\n\u0009elem:\u003cspan class=\"hljs-string\"\u003e'#zane-calendar'\u003c/span\u003e,\n})\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003ch4\u003egitHub代码拉取下来运行方式\u003c/h4\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003egit \u003cspan class=\"hljs-built_in\"\u003eclone\u003c/span\u003e https://github.com/wangweianger/zane-data-time-calendar.git\nnpm install\nnpm run dev\nnpm run build\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003ch4\u003e插件参数说明\u003c/h4\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e{\u0009\n        elem:\u003cspan class=\"hljs-string\"\u003e'#zane-calendar'\u003c/span\u003e,   控件的dom原生 注意：仅限制于id选择器\n\u0009\u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e'day'\u003c/span\u003e,   可选类型 day year month time oubleday doubleyear doublemonth doubletime\n\u0009lang:\u003cspan class=\"hljs-string\"\u003e'cn'\u003c/span\u003e,   可选择语言类型 cn , en \n\u0009width:280,  插件宽度配置\n\u0009format:\u003cspan class=\"hljs-string\"\u003e'yyyy-MM-dd HH:mm:ss'\u003c/span\u003e,  时间格式化\n\u0009begintime:\u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e,  开始时间  （单选择器默认选择此项）\n\u0009endtime:\u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e,       结束时间  （double选择器需要）\n\u0009min:\u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e,  可选取时间最小范围 1900-10-01\n\u0009max: \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e,  可选取时间最大范围 2099-12-31\n\u0009position:\u003cspan class=\"hljs-string\"\u003e'fixed'\u003c/span\u003e,  定位方式  暂时只支持 fixed\n\u0009event:\u003cspan class=\"hljs-string\"\u003e'click'\u003c/span\u003e,   事件方式 暂时只支持 click \n        zindex:100,  z-index的值\n\u0009showtime:\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,  是否显示选择时间\n\u0009showclean:\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,  是否显示清除按钮\n\u0009shownow:\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,  是否显示当前按钮\n\u0009showsubmit:\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e, 是否显示提交按钮\n\u0009haveBotBtns:\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e, 是否有底部按钮列表\n\u0009calendarName:\u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e, 此参数勿动 表示当前时间插件实例化对象\n\u0009mounted:()=\u0026gt;{}, 插件加载完成之后调用\n\u0009change:(fulltime,begintime,endtime)=\u0026gt;{}, 时间变更之后调用\n\u0009\u003cspan class=\"hljs-keyword\"\u003edone\u003c/span\u003e:(fulltime,begintime,endtime)=\u0026gt;{}, 选择完成之后调用\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e参数具体配置可参考demo文件\u003c/p\u003e\u003ch4\u003e案例调用方式\u003c/h4\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e默认完整选项\n\u0009zaneDate({\n\u0009\u0009elem:\u003cspan class=\"hljs-string\"\u003e'#zane-calendar'\u003c/span\u003e,\n\u0009})\n\n\u0009只选择年月日\n\u0009zaneDate({\n\u0009\u0009elem:\u003cspan class=\"hljs-string\"\u003e'#zane-calendar'\u003c/span\u003e,\n\u0009\u0009showtime:\u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,\n\u0009})\n\n\u0009使用英文\n\u0009zaneDate({\n\u0009\u0009elem:\u003cspan class=\"hljs-string\"\u003e'#zane-calendar'\u003c/span\u003e,\n\u0009\u0009lang:\u003cspan class=\"hljs-string\"\u003e'en'\u003c/span\u003e,\n\u0009})\n\n\u0009只选择年\n\u0009zaneDate({\n\u0009\u0009elem:\u003cspan class=\"hljs-string\"\u003e'#zane-calendar'\u003c/span\u003e,\n\u0009\u0009\u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e'year'\u003c/span\u003e,\n\u0009})\n\n\u0009只选择月\n\u0009zaneDate({\n\u0009\u0009elem:\u003cspan class=\"hljs-string\"\u003e'#zane-calendar'\u003c/span\u003e,\n\u0009\u0009\u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e'month'\u003c/span\u003e,\n\u0009})\n\n\u0009只选择时间\n\u0009zaneDate({\n\u0009\u0009elem:\u003cspan class=\"hljs-string\"\u003e'#zane-calendar'\u003c/span\u003e,\n\u0009\u0009\u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e'time'\u003c/span\u003e,\n\u0009})\n\n\u0009格式化方式\n\u0009zaneDate({\n\u0009\u0009elem:\u003cspan class=\"hljs-string\"\u003e'#zane-calendar'\u003c/span\u003e,\n\u0009\u0009format:\u003cspan class=\"hljs-string\"\u003e'yyyy年MM月dd日 HH时mm分ss秒'\u003c/span\u003e,\n\u0009})\n\n\u0009限定能选择的最小最大区间\n\u0009zaneDate({\n\u0009\u0009elem:\u003cspan class=\"hljs-string\"\u003e'#zane-calendar'\u003c/span\u003e,\n\u0009\u0009min:\u003cspan class=\"hljs-string\"\u003e'2017-08-01'\u003c/span\u003e,\n\u0009\u0009max:\u003cspan class=\"hljs-string\"\u003e'2017-08-20'\u003c/span\u003e,\n\u0009})\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003ch3\u003e1.1.0 版本 新增double双选择时间配置\u003c/h3\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003econfig.type  新增double类型  可选类型如下：\nday year month time doubleday doubleyear doublemonth doubletime\n\n双日期范围选择\nzaneDate({\n\u0009elem:\u003cspan class=\"hljs-string\"\u003e'#demo21'\u003c/span\u003e,\n\u0009\u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e'doubleday'\u003c/span\u003e,\n\u0009showtime:\u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\n})\n\n双年范围选择\nzaneDate({\n\u0009elem:\u003cspan class=\"hljs-string\"\u003e'#demo22'\u003c/span\u003e,\n\u0009\u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e'doubleyear'\u003c/span\u003e,\n})\n\n双月范围选择\nzaneDate({\n\u0009elem:\u003cspan class=\"hljs-string\"\u003e'#demo23'\u003c/span\u003e,\n\u0009\u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e'doublemonth'\u003c/span\u003e,\n})\n\n双时间选择\nzaneDate({\n\u0009elem:\u003cspan class=\"hljs-string\"\u003e'#demo24'\u003c/span\u003e,\n\u0009\u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e'doubletime'\u003c/span\u003e,\n})\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003ch3\u003e1.2.0 \u003c/h3\u003e\u003cul\u003e\u003cli\u003e\u003cp\u003edoubleday类型新增选择时间，支持时分秒选择\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003edouble类型检测距离右边window边线的距离，若不足，自动排列为上下两个日期\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003econfig.type doubleday支持选择时间范围\n\n双日期范围选择\nzaneDate({\n\u0009elem:\u003cspan class=\"hljs-string\"\u003e'#demo25'\u003c/span\u003e,\n\u0009format:\u003cspan class=\"hljs-string\"\u003e'yyyy-MM-dd HH:mm:ss'\u003c/span\u003e,\n\u0009\u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e'doubleday'\u003c/span\u003e,\n\u0009showtime:\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\n})\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003ch3\u003e1.2.1 版本 新增z-index 参数\u003c/h3\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003ezaneDate({\n\u0009elem:\u003cspan class=\"hljs-string\"\u003e'#zane-calendar'\u003c/span\u003e,\n\u0009zindex:500,\n})\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003ch2\u003e2.0.5 修复 double选择器 默认值\u003c/h2\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e如果你有什么好的建议 或者疑问 请给我留言吧。\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e关注我的博客：\u003ca href=\"https://github.com/wangweianger/myblog\"\u003ezane的个人博客\u003c/a\u003e\u003c/p\u003e\u003cp\u003e原文地址：\u003ca href=\"http://blog.seosiwei.com/detail/8\"\u003e日历插件zaneDate 不依赖任何第三方插件 使用简单\u003c/a\u003e\u003c/p\u003e\u003ch1\u003e\n\u003c/h1\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e","buildTime":"1514373035.765","__v":0}
{"_id":{"$oid":"5a439bc574ee951f2c48c013"},"id":"5a31faf35188257dd57618a2","author":{"$oid":"5a439bc574ee951f2c48c009"},"title":"JavaScript之多小球非对心弹性碰撞","meta":{"likeCount":0},"tag":["JavaScript","GitHub","前端"],"comment":[],"content":"\u003ch2 class=\"heading\"\u003e引言\u003c/h2\u003e\n\u003cp\u003e在学习\u003ccode\u003eJavaScript\u003c/code\u003e的时候，看到一个\u003ca target=\"_blank\" href=\"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Object_building_practice\"\u003e练习事例\u003c/a\u003e，就想到能不能做成类似\u003ccode\u003eWindows\u003c/code\u003e屏幕保护气泡那种效果，经过不断思考尝试，最后做出的效果如下图：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"http://upload-images.jianshu.io/upload_images/3145770-6704ffc3974073d3.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/500\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e思路\u003c/h2\u003e\n\u003cp\u003e其实上面的那种效果就是模拟理想物理环境下的多个小球非对心碰撞(对心碰撞是其特殊情况)，所谓理想物理情况就是没有外力作用的封闭系统，内部遵循动量守恒定律和能量守恒定律。假设小球\u003cstrong\u003eA\u003c/strong\u003e和小球\u003cstrong\u003eB\u003c/strong\u003e的质量分别为\u003ccode\u003e𝑀𝑎\u003c/code\u003e和\u003ccode\u003e𝑀𝖻\u003c/code\u003e，初始速度分别为\u003ccode\u003e𝑉𝑎\u003c/code\u003e和\u003ccode\u003e𝑉𝖻\u003c/code\u003e，碰撞后的速度分别为\u003ccode\u003e𝑉𝑎'\u003c/code\u003e和\u003ccode\u003e𝑉𝖻'\u003c/code\u003e，两个小球的碰撞瞬间的状态如下图：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"http://upload-images.jianshu.io/upload_images/3145770-812a58d90e77f3f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e其中\u003ccode\u003e𝑉𝑠𝑎\u003c/code\u003e和\u003ccode\u003e𝑉𝑠𝖻\u003c/code\u003e是两小球沿球心连线方向上的分速度，\u003ccode\u003e𝑉𝑡𝑎\u003c/code\u003e和\u003ccode\u003e𝑉𝑡𝖻\u003c/code\u003e是两小球垂直球心连线方向上的分速度。碰撞后，由于两小球在垂直球心连线方向上没有力的相互作用，所以速度不变，还是\u003ccode\u003e𝑉𝑡𝑎\u003c/code\u003e和\u003ccode\u003e𝑉𝑡𝖻\u003c/code\u003e，沿球心连线方向上的分速度为\u003ccode\u003e𝑉𝑠𝑎'\u003c/code\u003e和\u003ccode\u003e𝑉𝑠𝖻'\u003c/code\u003e。运用以下物理公式：\u003c/p\u003e\n\u003cp\u003e能量守恒定律：\u003cbr\u003e\n\u003cstrong\u003e𝑀𝑎•𝑉𝑎²/2+𝑀𝖻•𝑉𝖻²/2=𝑀𝑎•𝑉𝑎'²/2+𝑀𝖻•𝑉𝖻'²/2\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e向量运算：\u003cbr\u003e\n\u003cstrong\u003e𝑉𝑎²= 𝑉𝑠𝑎²+𝑉𝑡𝑎²\u003c/strong\u003e\u003cbr\u003e\n\u003cstrong\u003e𝑉𝖻²= 𝑉𝑠𝖻²+𝑉𝑡𝖻²\u003c/strong\u003e\u003cbr\u003e\n\u003cstrong\u003e𝑉𝑎'²= 𝑉𝑠𝑎'²+𝑉𝑡𝑎²\u003c/strong\u003e\u003cbr\u003e\n\u003cstrong\u003e𝑉𝖻'²= 𝑉𝑠𝖻'²+𝑉𝑡𝖻²\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e推导得出：\u003cbr\u003e\n\u003cstrong\u003e𝑀𝑎•𝑉𝑠𝑎²/2+𝑀𝖻•𝑉𝑠𝖻²/2=𝑀𝑎•𝑉𝑠𝑎'²/2+𝑀𝖻•𝑉𝑠𝖻'²/2\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e再联合动量守恒定律：\u003cbr\u003e\n\u003cstrong\u003e𝑀𝑎•𝑉𝑠𝑎+𝑀𝖻•𝑉𝑠𝖻=𝑀𝑎•𝑉𝑠𝑎'+𝑀𝖻•𝑉𝑠𝖻'\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e推导得出：\u003cbr\u003e\n\u003cstrong\u003e𝑉𝑠𝑎'=(𝑉𝑠𝑎•(𝑀𝑎-𝑀𝖻)+2•𝑀𝖻•𝑉𝑠𝖻)/(𝑀𝑎+𝑀𝖻)\u003c/strong\u003e\u003cbr\u003e\n\u003cstrong\u003e𝑉𝑠𝖻'=(𝑉𝑠𝖻•(𝑀𝖻-𝑀𝑎)+2•𝑀𝑎•𝑉𝑠𝑎)/(𝑀𝑎+𝑀𝖻)\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e最后合成碰撞后的速度\u003ccode\u003e𝑉𝑎'\u003c/code\u003e和\u003ccode\u003e𝑉𝖻'\u003c/code\u003e就ok了！\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e代码实现\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// 小球对象构造函数\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e Ball(x, y, speedX, speedY, color, radius, density) {\n  this.x = x;\n  this.y = y;\n  this.speedX = speedX;\n  this.speedY = speedY;\n  this.color = color;\n  this.radius = radius;\n  this.density = density;\n}\n\n// 绘制\nBall.prototype.draw = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e () {\n  ctx.beginPath();\n  ctx.fillStyle = this.color;\n  ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);\n  ctx.fill();\n}\n\n// 边界碰撞检测\nBall.prototype.borderCollisionDetect = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e () {\n  \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e ((this.x + this.radius) \u0026gt;= width \u0026amp;\u0026amp; this.speedX \u0026gt; 0) {\n    this.speedX *= -1;\n  }\n\n  \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e ((this.x - this.radius) \u0026lt;= 0 \u0026amp;\u0026amp; this.speedX \u0026lt; 0) {\n    this.speedX *= -1;\n  }\n\n  \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e ((this.y + this.radius) \u0026gt;= height \u0026amp;\u0026amp; this.speedY \u0026gt; 0) {\n    this.speedY *= -1;\n  }\n\n  \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e ((this.y - this.radius) \u0026lt;= 0 \u0026amp;\u0026amp; this.speedY \u0026lt; 0) {\n    this.speedY *= -1;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// 创建小球对象\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003ecreateBalls\u003c/span\u003e\u003c/span\u003e() {\n  require([\u003cspan class=\"hljs-string\"\u003e'utils'\u003c/span\u003e], \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (utils) {\n    \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e (balls.length \u0026lt; 8) {\n      var ball = new Ball(\n        utils.random(0, width),  // x\n        utils.random(0, height), // y\n        utils.random(1, 8),     // speedX\n        utils.random(1, 8),     // speedY\n        \u003cspan class=\"hljs-string\"\u003e'rgb('\u003c/span\u003e+utils.random(0, 255) +\u003cspan class=\"hljs-string\"\u003e','\u003c/span\u003e+ utils.random(0, 255)+\u003cspan class=\"hljs-string\"\u003e','\u003c/span\u003e+ utils.random(0, 255) +\u003cspan class=\"hljs-string\"\u003e')'\u003c/span\u003e,\n        30,                     // radius\n        1                       // density\n      );\n      balls.push(ball);\n    }\n  });\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// 更新小球速度和位置\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003eupdate\u003c/span\u003e\u003c/span\u003e() {\n  \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e i = 0; i \u0026lt; balls.length; i++) {\n    balls[i].borderCollisionDetect();\n\n    \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e j = i + 1; j \u0026lt; balls.length; j++) {\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (ballsCollisionDetect(balls[i], balls[j])) {\n        collide(balls[i], balls[j]);\n      }\n    }\n\n    // 更新位置\n    balls[i].x += balls[i].speedX;\n    balls[i].y += balls[i].speedY;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// 碰撞检测\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e ballsCollisionDetect(ball1, ball2) {\n  //  当前距离\n  var dx = ball1.x - ball2.x;\n  var dy = ball1.y - ball2.y;\n  var distance = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n\n  //  预测下一时刻会不会碰撞\n  \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e dx_next = ball1.x + ball1.speedX - ball2.x - ball2.speedX;\n  \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e dy_next = ball1.y + ball1.speedY - ball2.y - ball2.speedY;\n  \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e distance_next = Math.sqrt(Math.pow(dx_next, 2) + Math.pow(dy_next, 2));\n\n  \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (distance_next \u0026lt; ball1.radius + ball2.radius \u0026amp;\u0026amp; distance_next \u0026lt; distance) {\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n  }\n  \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// 更新碰撞后的状态\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e collide(ball1, ball2) {\n  require([\u003cspan class=\"hljs-string\"\u003e'Vector2d'\u003c/span\u003e], \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (Vector2d) {\n    // 初始速度向量\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e speed_ball1_initial = new Vector2d(ball1.speedX, ball1.speedY);\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e speed_ball2_initial = new Vector2d(ball2.speedX, ball2.speedY);\n\n    // 球心方向单位向量\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e s = new Vector2d(ball2.x - ball1.x, ball2.y - ball1.y);\n    s = s.normalize();\n\n    // 垂直球心方向单位向量\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e t = s.rotate(Math.PI / 2);\n\n    // 速度在球心向量上的分速度投影\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e speed_ball1_initial_sc = speed_ball1_initial.dotProduct(s)/s.length();\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e speed_ball2_initial_sc = speed_ball2_initial.dotProduct(s)/s.length();\n\n    // 速度在垂直球心向量上的分速度投影\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e speed_ball1_initial_tc = speed_ball1_initial.dotProduct(t)/t.length();\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e speed_ball2_initial_tc = speed_ball2_initial.dotProduct(t)/t.length();\n\n    // 碰撞后球心方向上的分速度\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e speed_ball1_final_sc = (speed_ball1_initial_sc * (ball1.density * Math.pow(ball1.radius,3) - ball2.density * Math.pow(ball2.radius,3)) + 2 * (ball2.density * Math.pow(ball2.radius,3)) * speed_ball2_initial_sc)\n     / (ball1.density * Math.pow(ball1.radius,3) + ball2.density * Math.pow(ball2.radius,3));\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e speed_ball2_final_sc = (speed_ball2_initial_sc * (ball2.density * Math.pow(ball2.radius,3) - ball1.density * Math.pow(ball1.radius,3)) + 2 * (ball1.density * Math.pow(ball1.radius,3)) * speed_ball1_initial_sc)\n     / (ball1.density * Math.pow(ball1.radius,3) + ball2.density * Math.pow(ball2.radius,3));\n\n    // 碰撞后球心方向上的分速度向量\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e speed_ball1_final_s = s.scale(speed_ball1_final_sc);\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e speed_ball2_final_s = s.scale(speed_ball2_final_sc);\n\n    // 碰撞后垂直球心方向上的分速度向量\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e speed_ball1_final_t = t.scale(speed_ball1_initial_tc);\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e speed_ball2_final_t = t.scale(speed_ball2_initial_tc);\n\n    // 结束速度向量\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e speed_ball1_final = speed_ball1_final_s.add(speed_ball1_final_t);\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e speed_ball2_final = speed_ball2_final_s.add(speed_ball2_final_t);\n\n    // 更新速度\n    ball1.speedX = speed_ball1_final.x;\n    ball1.speedY = speed_ball1_final.y;\n\n    ball2.speedX = speed_ball2_final.x;\n    ball2.speedY = speed_ball2_final.y;\n  });\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e缺陷\u003c/h2\u003e\n\u003cp\u003e本代码是通过\u003ccode\u003ewindow.requestAnimationFrame()\u003c/code\u003e方法循环执行来实现动画效果的，它的回调次数是每秒60次，所以对于一些速度\"过快\"的小球，会在撞击边界时出现\"撞出去一小部分\"的情况。还有本代码只考虑了两个小球相撞的情况，没有考虑三个以上小球同时相撞的场景。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e结语\u003c/h2\u003e\n\u003cp\u003e本代码是学习\u003ccode\u003eJavaScript\u003c/code\u003e时的实战演练，能加深对这门语言的理解和掌握。完整代码详见\u003ca target=\"_blank\" href=\"https://github.com/boborz/bouncing-balls\"\u003eGitHub地址\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e参考链接\u003c/h2\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://www.lyblog.net/detail/397.html\"\u003ehttps://www.lyblog.net/detail/397.html\u003c/a\u003e\u003cbr\u003e\n\u003ca target=\"_blank\" href=\"http://www.cnblogs.com/kenkofox/archive/2011/09/06/2168944.html\"\u003ehttp://www.cnblogs.com/kenkofox/archive/2011/09/06/2168944.html\u003c/a\u003e\u003cbr\u003e\n\u003ca target=\"_blank\" href=\"http://tina0152.blog.163.com/blog/static/119447958200910229109326/\"\u003ehttp://tina0152.blog.163.com/blog/static/119447958200910229109326/\u003c/a\u003e\u003cbr\u003e\n\u003ca target=\"_blank\" href=\"http://www.51testing.com/html/66/n-861166-2.html\"\u003ehttp://www.51testing.com/html/66/n-861166-2.html\u003c/a\u003e\u003c/p\u003e\n","buildTime":"1514355936.0325","__v":0}
{"_id":{"$oid":"5a439bc574ee951f2c48c014"},"id":"5a3b22246fb9a045023bcd12","author":{"$oid":"5a439bc574ee951f2c48c003"},"title":"dva + antd + mockjs 实现用户管理","meta":{"likeCount":0},"tag":["JavaScript","API","前端","React.js"],"comment":[],"content":"\u003ch3\u003e1.安装dva-cli\u003c/h3\u003e\u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003enpm install dva-cli -g\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cb\u003e2.\u003c/b\u003e\u003cb\u003e创建应用\u003c/b\u003e\u003c/p\u003e\u003cp\u003e\u003cb\u003e　　dva new dvadashboard  \u003c/b\u003e\u003c/p\u003e\u003cp\u003e\u003cb\u003e　　\u003cb\u003e[\u003cb\u003edvadashboard为项目名]\u003c/b\u003e\u003c/b\u003e\u003c/b\u003e\u003c/p\u003e\u003cp\u003e\u003cb\u003e     \u003cimg alt=\"\" src=\"https://user-gold-cdn.xitu.io/2017/12/21/16076fd59ee8b3f8?w=1012\u0026amp;h=350\u0026amp;f=png\u0026amp;s=47628\"\u003e\u003c/b\u003e\u003c/p\u003e\u003cp\u003e \u003c/p\u003e\u003ch3\u003e3.安装mockjs\u003c/h3\u003e\u003cul\u003e\u003cli\u003e\u003cb\u003e　　\u003c/b\u003enpm install mockjs --save\u003c/li\u003e\u003c/ul\u003e\u003ch3\u003e4.配置mockjs\u003c/h3\u003e\u003cul\u003e\u003cli\u003e\u003cb\u003e　　\u003c/b\u003e打开.roadhogrc.mock.js 设置如下\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cb\u003e　　\u003c/b\u003e\u003c/p\u003e\u003cdiv\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003econst fs=require(\u003cspan class=\"hljs-string\"\u003e'fs'\u003c/span\u003e);\nconst path=require(\u003cspan class=\"hljs-string\"\u003e'path'\u003c/span\u003e);\nconst mockPath=path.join(__dirname+\u003cspan class=\"hljs-string\"\u003e'/mock'\u003c/span\u003e);\n\nconst mock={};\nfs.readdirSync(mockPath).forEach(file=\u0026gt;{\n\n    Object.assign(mock,require(\u003cspan class=\"hljs-string\"\u003e'./mock/'\u003c/span\u003e+file));\n});\n\nmodule.exports=mock;\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e \u003c/p\u003e\u003ch3\u003e5.模拟用户管理API\u003c/h3\u003e\u003cp\u003e\u003cb\u003e　　\u003c/b\u003emock文件夹下新建user.js\u003c/p\u003e\u003cp\u003e\u003cb\u003e　　\u003cimg alt=\"\" src=\"https://user-gold-cdn.xitu.io/2017/12/21/16076fd5a0c55ee3?w=395\u0026amp;h=444\u0026amp;f=png\u0026amp;s=33829\"\u003e\u003c/b\u003e\u003c/p\u003e\u003cp\u003e \u003c/p\u003e\u003cp\u003e　　API设置:\u003c/p\u003e\u003cp\u003e　　这里只模拟俩个api  1.获取所有用户数据  2.添加用户\u003c/p\u003e\u003cdiv\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003econst Mock=require(\u003cspan class=\"hljs-string\"\u003e'mockjs'\u003c/span\u003e);\n\n\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e db=Mock.mock({\n    \u003cspan class=\"hljs-string\"\u003e'data|3-6'\u003c/span\u003e:[{\n        id:\u003cspan class=\"hljs-string\"\u003e'@id'\u003c/span\u003e,\n        name:\u003cspan class=\"hljs-string\"\u003e'@name'\u003c/span\u003e,\n        \u003cspan class=\"hljs-string\"\u003e'age|18-32'\u003c/span\u003e:1\n    }]\n});\n\nmodule.exports={\n    [`GET /api/users`](req,res){\n\n        res.status(200).json(db);\n    },\n\n    [`POST /api/users`](req,res){\n\n        \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e user=req.body;\n        console.log(req);\n        user.id=Mock.mock(\u003cspan class=\"hljs-string\"\u003e'@id'\u003c/span\u003e);\n        db.data.push(user);\n        \n        res.status(200).json(user);\n    }\n}\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e \u003c/p\u003e\u003cp\u003e　　接下来看一下api能不能使用， 进入项目目录， 执行 npm start 启动　　\u003c/p\u003e\u003cp\u003e　　进入默认页面  默认端口号 8000  如下是项目启动后默认页面\u003c/p\u003e\u003cp\u003e \u003cimg alt=\"\" src=\"https://user-gold-cdn.xitu.io/2017/12/21/16076fd59fafa9d0?w=1493\u0026amp;h=914\u0026amp;f=png\u0026amp;s=206885\"\u003e\u003c/p\u003e\u003cp\u003e \u003c/p\u003e\u003cp\u003e　　访问下api   http://localhost:8000/api/users     好了，可以访问  成功返回模拟用户列表数据\u003c/p\u003e\u003cp\u003e　　\u003cimg alt=\"\" src=\"https://user-gold-cdn.xitu.io/2017/12/21/16076fd59dd87329?w=684\u0026amp;h=1033\u0026amp;f=png\u0026amp;s=186574\"\u003e\u003c/p\u003e\u003cp\u003e \u003c/p\u003e\u003ch3\u003e6.安装antd \u003c/h3\u003e\u003cp\u003e\u003cb\u003e　　\u003c/b\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003enpm install antd babel-plugin-import --save\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e　　\u003c/p\u003e\u003cdiv\u003ebabel-plugin-import 是用来按需加载 antd 的脚本和样式的\u003c/div\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003e \u003c/p\u003e\u003cp\u003e　　安装完成后,配置使用antd  修改.roadhogrc文件 \u003c/p\u003e\u003cp\u003e　　添加 [\"import\",{ \"libraryName\":\"antd\",\"style\":\"css\" }]   最后文件如下所示：\u003c/p\u003e\u003cp\u003e　　\u003c/p\u003e\u003cdiv\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e{\n  \u003cspan class=\"hljs-string\"\u003e\"entry\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"src/index.js\"\u003c/span\u003e,\n  \u003cspan class=\"hljs-string\"\u003e\"env\"\u003c/span\u003e: {\n    \u003cspan class=\"hljs-string\"\u003e\"development\"\u003c/span\u003e: {\n      \u003cspan class=\"hljs-string\"\u003e\"extraBabelPlugins\"\u003c/span\u003e: [\n        \u003cspan class=\"hljs-string\"\u003e\"dva-hmr\"\u003c/span\u003e,\n        \u003cspan class=\"hljs-string\"\u003e\"transform-runtime\"\u003c/span\u003e,\n        [\u003cspan class=\"hljs-string\"\u003e\"import\"\u003c/span\u003e,{ \u003cspan class=\"hljs-string\"\u003e\"libraryName\"\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e\"antd\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"style\"\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e\"css\"\u003c/span\u003e }]\n      ]\n    },\n    \u003cspan class=\"hljs-string\"\u003e\"production\"\u003c/span\u003e: {\n      \u003cspan class=\"hljs-string\"\u003e\"extraBabelPlugins\"\u003c/span\u003e: [\n        \u003cspan class=\"hljs-string\"\u003e\"transform-runtime\"\u003c/span\u003e,\n        [\u003cspan class=\"hljs-string\"\u003e\"import\"\u003c/span\u003e,{ \u003cspan class=\"hljs-string\"\u003e\"libraryName\"\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e\"antd\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"style\"\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e\"css\"\u003c/span\u003e }]\n      ]\n    }\n  }\n}\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e \u003c/p\u003e\u003cp\u003e　　\u003c/p\u003e\u003ch3\u003e7.定义路由\u003c/h3\u003e\u003cul\u003e\u003cli\u003e\u003cb\u003e　　\u003c/b\u003e在src/routes/ 文件夹下新建 usersPage.js\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e \u003c/p\u003e\u003cp\u003e\u003cb\u003e　　这可能是最简单的一个页面了\u003c/b\u003e\u003c/p\u003e\u003cdiv\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003eimport { connect } from \u003cspan class=\"hljs-string\"\u003e'dva'\u003c/span\u003e;\n\nconst UserPage=()=\u0026gt;{\n\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e (\n        \u0026lt;div\u0026gt;\n            \u0026lt;h1\u0026gt;UserPage\u0026lt;/h1\u0026gt;\n        \u0026lt;/div\u0026gt;\n    );\n};\n\n\u003cspan class=\"hljs-built_in\"\u003eexport\u003c/span\u003e default connect()(UserPage);\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\u003cli\u003e 注册路由信息  修改src/router.js文件\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e　　顺手加了个组件动态加载\u003c/p\u003e\u003cdiv\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003eimport React from \u003cspan class=\"hljs-string\"\u003e'react'\u003c/span\u003e;\nimport { Router, Route, Switch } from \u003cspan class=\"hljs-string\"\u003e'dva/router'\u003c/span\u003e;\nimport dynamic from \u003cspan class=\"hljs-string\"\u003e'dva/dynamic'\u003c/span\u003e;\nimport IndexPage from \u003cspan class=\"hljs-string\"\u003e'./routes/IndexPage'\u003c/span\u003e;\n\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e RouterConfig({ \u003cspan class=\"hljs-built_in\"\u003ehistory\u003c/span\u003e,app }) {\n\n  const UserPage=dynamic({\n    app,\n    \n    component:()=\u0026gt;import(\u003cspan class=\"hljs-string\"\u003e'./routes/usersPage'\u003c/span\u003e)\n  });\n\n  \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e (\n    \u0026lt;Router \u003cspan class=\"hljs-built_in\"\u003ehistory\u003c/span\u003e={\u003cspan class=\"hljs-built_in\"\u003ehistory\u003c/span\u003e}\u0026gt;\n      \u0026lt;Switch\u0026gt;\n        \u0026lt;Route path=\u003cspan class=\"hljs-string\"\u003e\"/\"\u003c/span\u003e exact component={IndexPage} /\u0026gt;\n        \u0026lt;Route path=\u003cspan class=\"hljs-string\"\u003e\"/users\"\u003c/span\u003e exact component={UserPage} /\u0026gt;\n      \u0026lt;/Switch\u0026gt;\n    \u0026lt;/Router\u0026gt;\n  );\n}\n\n\u003cspan class=\"hljs-built_in\"\u003eexport\u003c/span\u003e default RouterConfig;\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e \u003c/p\u003e\u003cp\u003e查看一下路由配置效果  访问http://localhost:8000/#/users\u003c/p\u003e\u003cp\u003e显示内容了\u003c/p\u003e\u003cp\u003e\u003cimg alt=\"\" src=\"https://user-gold-cdn.xitu.io/2017/12/21/16076fd5a057ee4f?w=709\u0026amp;h=642\u0026amp;f=png\u0026amp;s=23222\"\u003e\u003c/p\u003e\u003ch3\u003e8.添加与服务端通讯\n\u003c/h3\u003e\u003cul\u003e\u003cli\u003e\u003cb\u003e　　\u003c/b\u003e修改src/utils/request.js如下  用于提供基础的ajax数据访问 \u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cb\u003e　　\u003c/b\u003e\u003c/p\u003e\u003cdiv\u003e也有不少使用axio的 具体优缺点还没研究。\u003c/div\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003e\u003cb\u003e　　\u003c/b\u003e\u003c/p\u003e\u003cdiv\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003eimport fetch from \u003cspan class=\"hljs-string\"\u003e'dva/fetch'\u003c/span\u003e;\n\nconst checkStatus=(response)=\u0026gt;{\n\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(response.status\u0026gt;=200 \u0026amp;\u0026amp; response.status\u0026lt;=200){\n\n      \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e response;\n    }\n\n    const error=new Error(response.statusText);\n    error.response=response;\n    throw error;\n};\n\n\u003cspan class=\"hljs-built_in\"\u003eexport\u003c/span\u003e default async \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e request(url,options={}) {\n    \n    options.headers={\n        \u003cspan class=\"hljs-string\"\u003e'Content-Type'\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e'application/json'\u003c/span\u003e\n    }\n    const response=await fetch(url,options);\n    checkStatus(response);\n    const data=await response.json();\n\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e data;\n}\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e \u003c/p\u003e\u003cp\u003e这里为了理解简单  省略一层 user.service (封装基础ajax通讯 提供业务接口)  在业务层中直接调用request里方法 【只是为了学习方便】\u003c/p\u003e\u003cul\u003e\u003cli\u003e然后在src/models下新建user.js\u003c/li\u003e\u003c/ul\u003e\u003cdiv\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003eimport request from \u003cspan class=\"hljs-string\"\u003e'../utils/request'\u003c/span\u003e;\nconst User={\n    namespace:\u003cspan class=\"hljs-string\"\u003e\"user\"\u003c/span\u003e,\n\n    state:{\n        list:[],\n        visibleModal:\u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\n    },\n    reducers:{\n        save(state,{ payload:{ data:list } }){\n\n            \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e {\n                ...state,\n                list\n            };\n        }\n    },\n    effects:{\n        * query({},{ call,put }){\n            const { data }=yield call(request,\u003cspan class=\"hljs-string\"\u003e'/api/users'\u003c/span\u003e,{ method:\u003cspan class=\"hljs-string\"\u003e'GET'\u003c/span\u003e });\n            yield put({\u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e'save'\u003c/span\u003e,payload:{ data }});\n        },\n        * create({ payload:{ user } },{ call,put }){\n            yield call(request,\u003cspan class=\"hljs-string\"\u003e'/api/users'\u003c/span\u003e,{ \n                body:JSON.stringify(user),\n                method:\u003cspan class=\"hljs-string\"\u003e'POST'\u003c/span\u003e\n            });\n            yield put({\u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e'query'\u003c/span\u003e,payload:{  }});\n        }\n    }, \n    subscriptions:{\n        setup({ dispatch,\u003cspan class=\"hljs-built_in\"\u003ehistory\u003c/span\u003e }){\n\n            console.log(\u003cspan class=\"hljs-string\"\u003e'running subscriptions ...'\u003c/span\u003e);\n            \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e history.listen(({ pathname,search })=\u0026gt;{\n\n                console.log(`pathname: \u003cspan class=\"hljs-variable\"\u003e${pathname}\u003c/span\u003e`);\n                dispatch({ \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e'query'\u003c/span\u003e});\n            });\n        }\n    }\n};\n\n\u003cspan class=\"hljs-built_in\"\u003eexport\u003c/span\u003e default User;\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003c/p\u003e\u003cdiv\u003e这里主要体现dva对redux react-saga的封装处理  一目了然了\u003c/div\u003e\u003cp\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003e然后注册model  修改路由处代码为：\u003c/li\u003e\u003c/ul\u003e\u003cdiv\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003eimport React from \u003cspan class=\"hljs-string\"\u003e'react'\u003c/span\u003e;\nimport { Router, Route, Switch } from \u003cspan class=\"hljs-string\"\u003e'dva/router'\u003c/span\u003e;\nimport dynamic from \u003cspan class=\"hljs-string\"\u003e'dva/dynamic'\u003c/span\u003e;\nimport IndexPage from \u003cspan class=\"hljs-string\"\u003e'./routes/IndexPage'\u003c/span\u003e;\n\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e RouterConfig({ \u003cspan class=\"hljs-built_in\"\u003ehistory\u003c/span\u003e,app }) {\n\n  const UserPage=dynamic({\n    app,\n    models:()=\u0026gt;[\n      import(\u003cspan class=\"hljs-string\"\u003e'./models/user'\u003c/span\u003e)\n    ],\n    component:()=\u0026gt;import(\u003cspan class=\"hljs-string\"\u003e'./routes/usersPage'\u003c/span\u003e)\n  });\n\n  \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e (\n    \u0026lt;Router \u003cspan class=\"hljs-built_in\"\u003ehistory\u003c/span\u003e={\u003cspan class=\"hljs-built_in\"\u003ehistory\u003c/span\u003e}\u0026gt;\n      \u0026lt;Switch\u0026gt;\n        \u0026lt;Route path=\u003cspan class=\"hljs-string\"\u003e\"/\"\u003c/span\u003e exact component={IndexPage} /\u0026gt;\n        \u0026lt;Route path=\u003cspan class=\"hljs-string\"\u003e\"/users\"\u003c/span\u003e exact component={UserPage} /\u0026gt;\n      \u0026lt;/Switch\u0026gt;\n    \u0026lt;/Router\u0026gt;\n  );\n}\n\n\u003cspan class=\"hljs-built_in\"\u003eexport\u003c/span\u003e default RouterConfig;\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e \u003c/p\u003e\u003cp\u003e \u003c/p\u003e\u003ch3\u003e9.新建用户数据列表组件 使用antd的Tabel承载\u003c/h3\u003e\u003cp\u003e\u003cb\u003e  \u003c/b\u003e顺手也把添加用户的表单建了吧\u003c/p\u003e\u003cp\u003e\u003cb\u003e\u003cimg alt=\"\" src=\"https://user-gold-cdn.xitu.io/2017/12/21/16076fd5a90c0e87?w=333\u0026amp;h=749\u0026amp;f=png\u0026amp;s=51355\"\u003e\u003c/b\u003e\u003c/p\u003e\u003cp\u003euser.js\u003c/p\u003e\u003cdiv\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003eimport { Table,Button } from \u003cspan class=\"hljs-string\"\u003e'antd'\u003c/span\u003e;\nimport { connect } from \u003cspan class=\"hljs-string\"\u003e'dva'\u003c/span\u003e;\nimport UserModal from \u003cspan class=\"hljs-string\"\u003e'./create'\u003c/span\u003e;\n\nconst UserTable = ({ list,dispatch }) =\u0026gt; {\n\n    const createUser=(user)=\u0026gt;{\n        dispatch({\n            \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e'user/create'\u003c/span\u003e,\n            payload:{\n                user\n            }\n        });\n    };\n\n    const columns=[\n        {\n            Title:\u003cspan class=\"hljs-string\"\u003e'ID'\u003c/span\u003e,\n            dataIndex:\u003cspan class=\"hljs-string\"\u003e'id'\u003c/span\u003e\n        },\n        {\n            Title:\u003cspan class=\"hljs-string\"\u003e'NAME'\u003c/span\u003e,\n            dataIndex:\u003cspan class=\"hljs-string\"\u003e'name'\u003c/span\u003e\n        },\n        {\n            Title:\u003cspan class=\"hljs-string\"\u003e'AGE'\u003c/span\u003e,\n            dataIndex:\u003cspan class=\"hljs-string\"\u003e'age'\u003c/span\u003e\n        }\n    ];\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e (\n        \u0026lt;div\u0026gt;\n            \u0026lt;UserModal record={ {} } ok={ createUser }\u0026gt;\n                \u0026lt;Button \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"primary\"\u003c/span\u003e\u0026gt;NEW\u0026lt;/Button\u0026gt;\n            \u0026lt;/UserModal\u0026gt;\n            \u0026lt;Table\n                columns={ columns }\n                dataSource={ list }\n                rowKey={ t=\u0026gt;t.id }\n                pagination={ \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e }\u0026gt;\n                {/* users datatable */}\n            \u0026lt;/Table\u0026gt;\n        \u0026lt;/div\u0026gt;\n    );\n};\n\n\u003cspan class=\"hljs-built_in\"\u003eexport\u003c/span\u003e default connect(({ user }) =\u0026gt; {\n\n    console.log(user);\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e {\n        list: user.list\n    };\n})(UserTable);\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e \u003c/p\u003e\u003cp\u003ecreate.js\u003c/p\u003e\u003cdiv\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003eimport React,{ Component } from \u003cspan class=\"hljs-string\"\u003e'react'\u003c/span\u003e;\nimport { Modal,Form,Input } from \u003cspan class=\"hljs-string\"\u003e'antd'\u003c/span\u003e;\n\nclass UserModal extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            visible:\u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\n        };\n    }\n\n    \n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003erender\u003c/span\u003e\u003c/span\u003e(){\n        const { children,form:{ getFieldDecorator },record,ok }=this.props;\n\n        const showModal=()=\u0026gt;{\n\n            this.setState({\n                visible:\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\n            });\n        };\n        const hideModal=()=\u0026gt;{\n\n            this.setState({\n                visible:\u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\n            });\n        };\n        const save=()=\u0026gt;{\n\n            this.props.form.validateFields((err,val)=\u0026gt;{\n                //val ==\u0026gt; record\n\n                // console.log(val);\n                ok(val);\n                hideModal();\n            });\n        };\n\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e (\n            \u0026lt;div\u0026gt;\n                \u0026lt;span onClick={ showModal }\u0026gt;\n                    { children }\n                \u0026lt;/span\u0026gt;\n                \u0026lt;Modal\n                    title=\u003cspan class=\"hljs-string\"\u003e\"Create User\"\u003c/span\u003e\n                    visible={ this.state.visible }\n                    onCancel={ hideModal }\n                    onOk={ save }\u0026gt;\n                    \u0026lt;Form\u0026gt;\n                        \u0026lt;Form.Item label=\u003cspan class=\"hljs-string\"\u003e\"Name\"\u003c/span\u003e\u0026gt;\n                            {\n                                getFieldDecorator(\u003cspan class=\"hljs-string\"\u003e'name'\u003c/span\u003e, {\n                                    initialValue: record.name\n                                })(\u0026lt;Input /\u0026gt;)\n                            }\n                        \u0026lt;/Form.Item\u0026gt;\n                        \u0026lt;Form.Item\u0026gt;\n                            {\n                                getFieldDecorator(\u003cspan class=\"hljs-string\"\u003e'age'\u003c/span\u003e,{\n                                    initialValue:record.age\n                                })(\u0026lt;Input /\u0026gt;)\n                            }\n                        \u0026lt;/Form.Item\u0026gt;\n                    \u0026lt;/Form\u0026gt;\n                \u0026lt;/Modal\u0026gt;\n            \u0026lt;/div\u0026gt;\n        );\n    };\n}\n\n\n\u003cspan class=\"hljs-built_in\"\u003eexport\u003c/span\u003e default Form.create()(UserModal);\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eusersPage.js\u003c/p\u003e\u003cdiv\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003eimport { connect } from \u003cspan class=\"hljs-string\"\u003e'dva'\u003c/span\u003e;\nimport Main from \u003cspan class=\"hljs-string\"\u003e'../components/layout/main'\u003c/span\u003e;\nimport UserTable from \u003cspan class=\"hljs-string\"\u003e'../components/user/user'\u003c/span\u003e;\n\nconst UserPage=()=\u0026gt;{\n\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e (\n        \u0026lt;Main\u0026gt;\n            \u0026lt;h1\u0026gt;UserPage\u0026lt;/h1\u0026gt;\n            \u0026lt;UserTable /\u0026gt;\n        \u0026lt;/Main\u0026gt;\n    );\n};\n\n\u003cspan class=\"hljs-built_in\"\u003eexport\u003c/span\u003e default connect()(UserPage);\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e \u003c/p\u003e\u003ch3\u003e10.效果演示\u003c/h3\u003e\u003cp\u003e\u003cb\u003e\u003cimg alt=\"\" src=\"https://user-gold-cdn.xitu.io/2017/12/21/16076fd5c27b0fa3?w=993\u0026amp;h=824\u0026amp;f=gif\u0026amp;s=814817\"\u003e\u003c/b\u003e\u003c/p\u003e\u003cp\u003e \u003c/p\u003e\u003ch3\u003e 11.源码下载 \u003c/h3\u003e\u003cp\u003e\u003cb\u003e      或者   https://pan.baidu.com/s/1bo1R7o7\u003c/b\u003e\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e","buildTime":"1514359858.2258","__v":0}
{"_id":{"$oid":"5a439bc574ee951f2c48c015"},"id":"5a3933756fb9a045167d52b1","author":{"$oid":"5a439bc574ee951f2c48bfff"},"title":"Vue自定义指令","meta":{"likeCount":0},"tag":["Vue.js","JavaScript","前端"],"comment":[],"content":"\u003ch1 class=\"heading\"\u003e前言\u003c/h1\u003e\n\u003cp\u003eVue.js是一套构建用户界面的渐进式框架（官方说明）。通俗点来说，Vue.js是一个轻量级的，易上手易使用的，便捷，灵活性强的前端MVVM框架。简洁的API，良好健全的中文文档，使开发者能够较容易的上手Vue框架。\u003c/p\u003e\n\u003cp\u003e本系列文章将结合个人在使用Vue中的一些经(cai)验(keng)和一些案例，对Vue框架掌握的部分知识进行输出，同时也巩固对Vue框架的理解。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch1 class=\"heading\"\u003e\u003cstrong\u003eVue自定义指令\u003c/strong\u003e\u003c/h1\u003e\n\u003c/blockquote\u003e\n\u003ch2 class=\"heading\"\u003e简述\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eVue除了提供了默认内置的指令外，还允许开发人员根据实际情况自定义指令，它的作用价值在于当开发人员在某些场景下需要对普通DOM元素进行操作的时候。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 class=\"heading\"\u003e注册自定义指令\u003c/h2\u003e\n\u003cp\u003eVue自定义指令和组件一样存在着全局注册和局部注册两种方式。先来看看注册全局指令的方式，通过 \u003ccode\u003eVue.directive( id, [definition] )\u003c/code\u003e 方式注册全局指令，第一个参数为自定义指令名称（\u003cstrong\u003e指令名称不需要加 \u003ccode\u003ev-\u003c/code\u003e 前缀，默认是自动加上前缀的，使用指令的时候一定要加上前缀\u003c/strong\u003e），第二个参数可以是对象数据，也可以是一个指令函数。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"app\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"demo\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- 全局注册 --\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"text\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eplaceholder\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"我是全局自定义指令\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ev-focus\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"actionscript\"\u003e\n    Vue.directive(\u003cspan class=\"hljs-string\"\u003e\"focus\"\u003c/span\u003e, {\n        inserted: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(el)\u003c/span\u003e\u003c/span\u003e{\n            el.focus();\n        }\n    })\n    \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Vue({\n        el: \u003cspan class=\"hljs-string\"\u003e\"#app\"\u003c/span\u003e\n    })\n\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\n\u003cp\u003e这个简单案例当中，我们通过注册一个 \u003ccode\u003ev-focus\u003c/code\u003e 指令，实现了在页面加载完成之后自动让输入框获取到焦点的小功能。其中 \u003ccode\u003einserted\u003c/code\u003e 是自定义指令的钩子函数，后面的内容会详细讲解。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e全局注册好了，那么再来看看如何注册局部自定义指令，通过在Vue实例中添加\n\u003ccode\u003edirectives\u003c/code\u003e 对象数据注册局部自定义指令。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"app\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"demo\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- 局部注册 --\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"text\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eplaceholder\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"我是局部自定义指令\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ev-focus2\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"actionscript\"\u003e\n    \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Vue({\n        el: \u003cspan class=\"hljs-string\"\u003e\"#app\"\u003c/span\u003e,\n        directives: {\n            focus2: {\n                inserted: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(el)\u003c/span\u003e\u003c/span\u003e{\n                    el.focus();\n                }\n            }\n        }\n    })\n\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e钩子函数\u003c/h2\u003e\n\u003cp\u003e一个指令定义对象可以提供如下几个钩子函数 (均为可选)：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003ebind\u003c/strong\u003e：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003einserted\u003c/strong\u003e：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eupdate\u003c/strong\u003e：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003ecomponentUpdated\u003c/strong\u003e：指令所在组件的 VNode 及其子 VNode 全部更新后调用。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eunbind\u003c/strong\u003e：只调用一次，指令与元素解绑时调用。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e这段是从官方文档copy来的，相信应该都一看就明白的。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e那么这几个钩子函数怎么使用呢？先来看看钩子函数的几个参数吧。指令钩子函数会被传入以下参数:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eel\u003c/strong\u003e: 指令所绑定的元素，可以用来直接操作 DOM，就是放置指令的那个元素。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003ebinding\u003c/strong\u003e: 一个对象，里面包含了几个属性，这里不多展开说明，官方文档上都有很详细的描述。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003evnode\u003c/strong\u003e：Vue 编译生成的虚拟节点。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eoldVnode\u003c/strong\u003e：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e自定义指令也可以传递多个值,可以用javascript表达式字面量传递，看例子：\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ev-demo\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"{ color: 'white', text: 'hello!' }\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n    Vue.directive(\u003cspan class=\"hljs-string\"\u003e'demo'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003eel, binding\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(binding.value.color) \u003cspan class=\"hljs-comment\"\u003e// \"white\"\u003c/span\u003e\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(binding.value.text)  \u003cspan class=\"hljs-comment\"\u003e// \"hello!\"\u003c/span\u003e\n    })\n\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e说了这么多理论知识，那么现在就来动手写一个简单的案例吧。假设这样的看一个场景：\u003ccode\u003e当你在阅览某网站的图片时，可能会由于图片资源比较大而加载缓慢，需要消耗一小段时间来呈现到眼前，这个体验肯定是不太友好的（就像网站切换页面，有时候会加载资源比较慢，为了给用户较好的体验，一般都会先出一个正在加载的友好提示页面），所以这个案例的功能就是在图片资源还没加载出来时，先显示默认背景图，当图片资源真正加载出来了之后，再把真实图片放置到对应的位置上并显示出来。\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"app2\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"demo\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ev-for\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"item in imageList\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"../assets/image/bg.png\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ealt\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"默认图\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ev-image\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"item.url\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n    Vue.directive(\u003cspan class=\"hljs-string\"\u003e\"image\"\u003c/span\u003e, {\n        \u003cspan class=\"hljs-attr\"\u003einserted\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eel, binding\u003c/span\u003e) \u003c/span\u003e{\n            \u003cspan class=\"hljs-comment\"\u003e//为了真实体现效果，用了延时操作\u003c/span\u003e\n            setTimeout(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\n                el.setAttribute(\u003cspan class=\"hljs-string\"\u003e\"src\"\u003c/span\u003e, binding.value);\n            }, \u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.random() * \u003cspan class=\"hljs-number\"\u003e1200\u003c/span\u003e)\n        }\n    })\n    \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Vue({\n        \u003cspan class=\"hljs-attr\"\u003eel\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"#app2\"\u003c/span\u003e,\n        \u003cspan class=\"hljs-attr\"\u003edata\u003c/span\u003e: {\n            \u003cspan class=\"hljs-attr\"\u003eimageList\u003c/span\u003e: [\n                {\n                    \u003cspan class=\"hljs-attr\"\u003eurl\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"http://consumer-img.huawei.com/content/dam/huawei-cbg-site/greate-china/cn/mkt/homepage/section4/home-s4-p10-plus.jpg\"\u003c/span\u003e\n                },\n                {\n                    \u003cspan class=\"hljs-attr\"\u003eurl\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"http://consumer-img.huawei.com/content/dam/huawei-cbg-site/greate-china/cn/mkt/homepage/section4/home-s4-watch2-pro-banner.jpg\"\u003c/span\u003e\n                },\n                {\n                    \u003cspan class=\"hljs-attr\"\u003eurl\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"http://consumer-img.huawei.com/content/dam/huawei-cbg-site/en/mkt/homepage/section4/home-s4-matebook-x.jpg\"\u003c/span\u003e\n                }\n            ]\n        }\n    })\n\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e源码解读\u003c/h2\u003e\n\u003cp\u003eVuetify 框架库中，有提供几种自定义指令API，包括浏览器窗口缩放 \u003ccode\u003ev-resize\u003c/code\u003e，浏览器滚动条滑动 \u003ccode\u003ev-scroll\u003c/code\u003e 等自定义指令，现在就来学习一波 Vuetify 中自定义指令源码吧。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003ev-resize 自定义指令\u003c/h3\u003e\n\u003cp\u003e在 \u003ccode\u003esrc/directives/resize.js\u003c/code\u003e 中，是 \u003ccode\u003ev-resize\u003c/code\u003e 自定义指令操作的核心代码。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003einserted\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003eel, binding\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-comment\"\u003e//指令的绑定值，是一个function函数\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e callback = binding.value\n\n    \u003cspan class=\"hljs-comment\"\u003e//延时执行函数的毫秒数\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e debounce = binding.arg || \u003cspan class=\"hljs-number\"\u003e200\u003c/span\u003e\n\n    \u003cspan class=\"hljs-comment\"\u003e//禁止执行与事件关联的默认动作\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e options = binding.options || { \u003cspan class=\"hljs-attr\"\u003epassive\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e }\n\n    \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e debounceTimeout = \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e onResize = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e =\u0026gt;\u003c/span\u003e {\n        clearTimeout(debounceTimeout)\n        debounceTimeout = setTimeout(callback, debounce, options)\n    }\n\n    \u003cspan class=\"hljs-comment\"\u003e//监听窗口缩放\u003c/span\u003e\n    \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.addEventListener(\u003cspan class=\"hljs-string\"\u003e'resize'\u003c/span\u003e, onResize, options)\n\n    \u003cspan class=\"hljs-comment\"\u003e//存储监听窗口缩放事件的参数，方便在unbind钩子函数中解除事件绑定的时候使用到\u003c/span\u003e\n    el._onResize = {\n        callback,\n        options\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!binding.modifiers || !binding.modifiers.quiet) {\n        onResize()\n    }\n}\n\n\u003cspan class=\"hljs-comment\"\u003e//绑定的DOM元素被移除时触发\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eunbind\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003eel, binding\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e { callback, options } = el._onResize\n\n    \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.removeEventListener(\u003cspan class=\"hljs-string\"\u003e'resize'\u003c/span\u003e, callback, options)\n    \u003cspan class=\"hljs-keyword\"\u003edelete\u003c/span\u003e el._onResize\n}\n\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e {\n    \u003cspan class=\"hljs-comment\"\u003e//指令名称\u003c/span\u003e\n    name: \u003cspan class=\"hljs-string\"\u003e'resize'\u003c/span\u003e,\n    inserted,\n    unbind\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e可以看到，定义了 \u003ccode\u003einserted\u003c/code\u003e 和 \u003ccode\u003eunbind\u003c/code\u003e 两个钩子函数，unbind 钩子函数是用来解除监听事件的。inserted 钩子函数中，绑定监听了窗口缩放事件并执行回调函数，并采用简单的函数防抖来防止操作过度频繁，大致的流程就是这样子的。\u003c/p\u003e\n\u003cp\u003e可能你会发现，上面的代码中，采用的都是es6标准语法写的，对于还不太熟悉es6语法的童鞋来说，可能阅读起来会比较的吃力，那么下面就转换成es5语法来完整的实现这个指令的功能，但是建议还是尽量去熟悉es6标准语法，因为这是前端发展进程中的必然趋势。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003einsertedFn\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003eel, binding\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e callback = binding.value;\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e debounce = \u003cspan class=\"hljs-number\"\u003e200\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e options = {\u003cspan class=\"hljs-attr\"\u003epassive\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e};\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e debounceTimeout = \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e onResize = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        clearTimeout(debounceTimeout);\n        debounceTimeout = setTimeout(callback, debounce, options);\n    }\n\n    \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.addEventListener(\u003cspan class=\"hljs-string\"\u003e\"resize\"\u003c/span\u003e, onResize, options);\n\n    el._onResize = {\n        \u003cspan class=\"hljs-attr\"\u003ecallback\u003c/span\u003e: callback,\n        \u003cspan class=\"hljs-attr\"\u003eoptions\u003c/span\u003e: options\n    };\n}\n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eunbindFn\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003eel, binding\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e callback = el._onResize.callback;\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e options = el._onResize.options;\n    \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.removeEventListener(\u003cspan class=\"hljs-string\"\u003e\"resize\"\u003c/span\u003e, callback, options);\n    \u003cspan class=\"hljs-keyword\"\u003edelete\u003c/span\u003e el._onResize;\n}\n\nVue.directive(\u003cspan class=\"hljs-string\"\u003e\"resize\"\u003c/span\u003e, {\n    \u003cspan class=\"hljs-attr\"\u003einserted\u003c/span\u003e: insertedFn,\n    \u003cspan class=\"hljs-attr\"\u003eunbind\u003c/span\u003e: unbindFn\n})\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e完整的案例可以点击这里查看：\u003ca target=\"_blank\" href=\"https://github.com/webproblem/IntoVue/blob/master/example/directive/v-resize.html\"\u003ev-resize自定义指令\u003c/a\u003e。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eVuetify 中更多的自定义指令案例源码都可以在 github 中找到，附上 Vuetify 的 github 地址：\u003ca target=\"_blank\" href=\"https://github.com/vuetifyjs/vuetify\"\u003ehttps://github.com/vuetifyjs/vuetify\u003c/a\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 class=\"heading\"\u003e总结\u003c/h2\u003e\n\u003cp\u003e列举的都是一些简单的Vue自定义指令的知识，在实际项目中的不同场景会存在着各种坑。\u003cbr\u003e\nVue自定义指令还可以在图片懒加载的场景下使用，\u003ccode\u003evue-lazyload\u003c/code\u003e 就是有利用自定义指令实现图片懒加载的，可能的话，后面可以分析一波 \u003ccode\u003evue-lazyload\u003c/code\u003e 的源码。\u003c/p\u003e\n\u003ch1 class=\"heading\"\u003e后记\u003c/h1\u003e\n\u003cp\u003e本着学习和总结的态度写的文章，文中有任何错误和问题，可以在github上指出 \u003ca target=\"_blank\" href=\"https://github.com/webproblem/IntoVue/issues\"\u003eissues\u003c/a\u003e 。文中的案例都放置在github上，地址：\u003ca target=\"_blank\" href=\"https://github.com/webproblem/IntoVue\"\u003ehttps://github.com/webproblem/IntoVue\u003c/a\u003e。\u003c/p\u003e\n","buildTime":"1514361936.2987","__v":0}
{"_id":{"$oid":"5a439bc674ee951f2c48c016"},"id":"5a40475b6fb9a0450809e088","author":{"$oid":"5a4394d8bbcd9a0a78c8cf42"},"title":"【quickhybrid】API多平台支撑的实现","meta":{"likeCount":0},"tag":["API","前端","微信","Promise"],"comment":[],"content":"\u003ch2 class=\"heading\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e在框架规划时，就有提到过这个框架的一些常用功能需要支持\u003ccode\u003eH5\u003c/code\u003e环境下的调用，也就是需要实现API的多平台支撑\u003c/p\u003e\n\u003cp\u003e为什么要多平台支撑？核心仍然是复用代码，比如在微信下，在钉钉下，在quick容器下，\n如果没有多平台支撑，那么\u003ccode\u003equick.ui.alert\u003c/code\u003e只能用于quick容器下，钉钉和微信下就得分别用其它代码实现，\n代码复用率低，如果实现了多平台支撑。那么三个平台中同一个功能的代码则是一样的。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e什么样的多平台支撑\u003c/h2\u003e\n\u003cp\u003e当然了，本框架实现的多平台支撑和一般框架的有点区别。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e一般的框架中支持多个平台更多的是一个polyfill\u003c/strong\u003e，譬如\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-comment\"\u003e// 假设以前不支持h5\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e oldToast = quick.ui.toast;\n\nquick.ui.toast = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e...\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (os.h5) {\n        \u003cspan class=\"hljs-comment\"\u003e// 做一些h5中做的\u003c/span\u003e\n        ...\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n        oldToast(...);\n    }\n};\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这就是垫片实现，如果是新的环境，用新的实现，否则用老的实现\u003c/p\u003e\n\u003cp\u003e而__本框架中的多平台实现是直接内置到了框架核心中__，也就是说框架本身就支持多平台API的设置\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003equick.extendModule(\u003cspan class=\"hljs-string\"\u003e'ui'\u003c/span\u003e, [{\n    \u003cspan class=\"hljs-attr\"\u003enamespace\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'toast'\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003eos\u003c/span\u003e: [\u003cspan class=\"hljs-string\"\u003e'h5'\u003c/span\u003e],\n    \u003cspan class=\"hljs-attr\"\u003edefaultParams\u003c/span\u003e: {\n        \u003cspan class=\"hljs-attr\"\u003emessage\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e,\n    },\n    runCode(...rest) {\n        \u003cspan class=\"hljs-comment\"\u003e// 定义h5环境中的做法\u003c/span\u003e\n        ...\n    },\n}, ...];\n\nquick.extendModule(\u003cspan class=\"hljs-string\"\u003e'ui'\u003c/span\u003e, [{\n    \u003cspan class=\"hljs-attr\"\u003enamespace\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'toast'\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003eos\u003c/span\u003e: [\u003cspan class=\"hljs-string\"\u003e'quick'\u003c/span\u003e],\n    \u003cspan class=\"hljs-attr\"\u003edefaultParams\u003c/span\u003e: {\n        \u003cspan class=\"hljs-attr\"\u003emessage\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e,\n    },\n    runCode(...rest) {\n        \u003cspan class=\"hljs-comment\"\u003e// 定义quick环境中的做法\u003c/span\u003e\n        ...\n    },\n}, ...];\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在框架内部定义API时，不再是直接的\u003ccode\u003equick.ui.alert = xxx\u003c/code\u003e，而是通过特定的API单独给某个环境下定义实现\u003c/p\u003e\n\u003cp\u003e而且，框架中的定义，每一个API都是有\u003ccode\u003equick\u003c/code\u003e，\u003ccode\u003eh5\u003c/code\u003e环境下的实现的。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e多平台支撑的核心\u003c/h2\u003e\n\u003cp\u003e从上述的介绍中也可以看到，多平台支撑主要是前端的实现，与原生API，原生API在这里面只能算一个环境下的实现\u003c/p\u003e\n\u003cp\u003e核心就是基于：\u003cstrong\u003e\u003ccode\u003eObject.defineProperty\u003c/code\u003e，重写set和get\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-built_in\"\u003eObject\u003c/span\u003e.defineProperty(apiParent, apiName, {\n    \u003cspan class=\"hljs-attr\"\u003econfigurable\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003eenumerable\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003eget\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eproxyGetter\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        \u003cspan class=\"hljs-comment\"\u003e// 需要根据不同的环境，返回对应下的内容\u003c/span\u003e\n        ...\n    },\n    \u003cspan class=\"hljs-attr\"\u003eset\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eproxySetter\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        \u003cspan class=\"hljs-comment\"\u003e// 可以提示禁止修改API\u003c/span\u003e\n    },\n});\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e本框架中的多平台实现代码可以参考源码，这里不赘述，下文中会介绍如何简单的实现一个多平台支撑API\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e实现一个多平台支撑API\u003c/h2\u003e\n\u003cp\u003e我们先预设最终的结果：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003equick.os.quick = \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\nquick.ui.alert(\u003cspan class=\"hljs-string\"\u003e'hello'\u003c/span\u003e); \u003cspan class=\"hljs-comment\"\u003e// quick-hello\u003c/span\u003e\n\nquick.os.quick = \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\nquick.ui.alert(\u003cspan class=\"hljs-string\"\u003e'hello'\u003c/span\u003e); \u003cspan class=\"hljs-comment\"\u003e// h5-hello\u003c/span\u003e\n\nquick.ui.alert = \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e; \u003cspan class=\"hljs-comment\"\u003e// 提示：不允许修改quick API\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e那么要达到上述的要求，应该如何做呢？\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e写一个雏形\u003c/h3\u003e\n\u003cp\u003e最简单的，先假设这些实现都已经存在，然后直接基于\u003ccode\u003edefineProperty\u003c/code\u003e返回\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ealertH5\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003emessage\u003c/span\u003e) \u003c/span\u003e{\n    alert(\u003cspan class=\"hljs-string\"\u003e'h5-'\u003c/span\u003e + message);\n}\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ealertQuick\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003emessage\u003c/span\u003e) \u003c/span\u003e{\n    alert(\u003cspan class=\"hljs-string\"\u003e'quick-'\u003c/span\u003e + message);\n}\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e quick = {};\n\nquick.ui = {};\nquick.os = {\n    \u003cspan class=\"hljs-attr\"\u003equick\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,\n};\n\n\u003cspan class=\"hljs-built_in\"\u003eObject\u003c/span\u003e.defineProperty(quick.ui, \u003cspan class=\"hljs-string\"\u003e'alert'\u003c/span\u003e, {\n    \u003cspan class=\"hljs-attr\"\u003econfigurable\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003eenumerable\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003eget\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eproxyGetter\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        \u003cspan class=\"hljs-comment\"\u003e// 需要根据不同的环境，返回对应下的内容\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (quick.os.quick) {\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e alertQuick;\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e alertH5;\n        }\n    },\n    \u003cspan class=\"hljs-attr\"\u003eset\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eproxySetter\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        \u003cspan class=\"hljs-comment\"\u003e// 可以提示禁止修改API\u003c/span\u003e\n        alert(\u003cspan class=\"hljs-string\"\u003e'不允许修改quick API'\u003c/span\u003e);\n    },\n});\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e那么，它的调用结果是\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003equick.os.quick = \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\nquick.ui.alert(\u003cspan class=\"hljs-string\"\u003e'hello'\u003c/span\u003e); \u003cspan class=\"hljs-comment\"\u003e// quick-hello\u003c/span\u003e\n\nquick.os.quick = \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\nquick.ui.alert(\u003cspan class=\"hljs-string\"\u003e'hello'\u003c/span\u003e); \u003cspan class=\"hljs-comment\"\u003e// h5-hello\u003c/span\u003e\n\nquick.ui.alert = \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e; \u003cspan class=\"hljs-comment\"\u003e// 提示：不允许修改quick API\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e虽然效果和预设的一样，但是很明显还需优化完善\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e增加拓展API的方法\u003c/h3\u003e\n\u003cp\u003e拓展方式的定义如下\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e quick = {};\n\nquick.os = {\n    \u003cspan class=\"hljs-attr\"\u003equick\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,\n};\n\u003cspan class=\"hljs-comment\"\u003e/**\n * 存放所有的代理 api对象\n * 每一个命名空间下的每一个os都可以执行\n * proxyapi[namespace][os]\n */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e proxysApis = {};\n\u003cspan class=\"hljs-comment\"\u003e// 支持的所有环境\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e supportOsArray = [\u003cspan class=\"hljs-string\"\u003e'quick'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'h5'\u003c/span\u003e];\n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetCurrProxyApiOs\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ecurrOs\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, len = supportOsArray.length; i \u0026lt; len; i += \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (currOs[supportOsArray[i]]) {\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e supportOsArray[i];\n        }\n    }\n\n    \u003cspan class=\"hljs-comment\"\u003e// 默认是h5\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'h5'\u003c/span\u003e;\n}\n\n\u003cspan class=\"hljs-comment\"\u003e// 如获取quick.ui.alert\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetModuleApiParentByNameSpace\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003emodule, namespace\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e apiParent = \u003cspan class=\"hljs-built_in\"\u003emodule\u003c/span\u003e;\n    \u003cspan class=\"hljs-comment\"\u003e// 只取命名空间的父级,如果仅仅是xxx，是没有父级的\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e parentNamespaceArray = \u003cspan class=\"hljs-regexp\"\u003e/[.]/\u003c/span\u003e.test(namespace) ? namespace.replace(\u003cspan class=\"hljs-regexp\"\u003e/[.][^.]+$/\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e).split(\u003cspan class=\"hljs-string\"\u003e'.'\u003c/span\u003e) : [];\n\n    parentNamespaceArray.forEach((item) = \u0026gt;{\n        apiParent[item] = apiParent[item] || {};\n        apiParent = apiParent[item];\n    });\n\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e apiParent;\n}\n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eproxyApiNamespace\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eapiParent, apiName, finalNameSpace\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-comment\"\u003e// 代理API，将apiParent里的apiName代理到Proxy执行\u003c/span\u003e\n    \u003cspan class=\"hljs-built_in\"\u003eObject\u003c/span\u003e.defineProperty(apiParent, apiName, {\n        \u003cspan class=\"hljs-attr\"\u003econfigurable\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n        \u003cspan class=\"hljs-attr\"\u003eenumerable\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n        \u003cspan class=\"hljs-attr\"\u003eget\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eproxyGetter\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n            \u003cspan class=\"hljs-comment\"\u003e// 确保get得到的函数一定是能执行的\u003c/span\u003e\n            \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e nameSpaceApi = proxysApis[finalNameSpace];\n\n            \u003cspan class=\"hljs-comment\"\u003e// 得到当前是哪一个环境，获得对应环境下的代理对象\u003c/span\u003e\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e nameSpaceApi[getCurrProxyApiOs(quick.os)] || nameSpaceApi.h5;\n        },\n        \u003cspan class=\"hljs-attr\"\u003eset\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eproxySetter\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n            alert(\u003cspan class=\"hljs-string\"\u003e'不允许修改quick API'\u003c/span\u003e);\n        },\n    });\n}\n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eextendApi\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003emoduleName, apiParam\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!apiParam || !apiParam.namespace) {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!quick[moduleName]) {\n        quick[moduleName] = {};\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e api = apiParam;\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e modlue = quick[moduleName];\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e apiNamespace = api.namespace;\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e apiParent = getModuleApiParentByNameSpace(modlue, apiNamespace);\n    \u003cspan class=\"hljs-comment\"\u003e// 最终的命名空间是包含模块的\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e finalNameSpace = moduleName + \u003cspan class=\"hljs-string\"\u003e'.'\u003c/span\u003e + apiNamespace;\n    \u003cspan class=\"hljs-comment\"\u003e// 如果仅仅是xxx，直接取xxx，如果aa.bb，取bb\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e apiName = \u003cspan class=\"hljs-regexp\"\u003e/[.]/\u003c/span\u003e.test(apiNamespace) ? api.namespace.match(\u003cspan class=\"hljs-regexp\"\u003e/[.][^.]+$/\u003c/span\u003e)[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e].substr(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) : apiNamespace;\n\n    \u003cspan class=\"hljs-comment\"\u003e// 这里防止触发代理，就不用apiParent[apiName]了，而是用proxysApis[finalNameSpace]\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!proxysApis[finalNameSpace]) {\n        \u003cspan class=\"hljs-comment\"\u003e// 如果还没有代理这个API的命名空间，代理之，只需要设置一次代理即可\u003c/span\u003e\n        proxyApiNamespace(apiParent, apiName, finalNameSpace);\n    }\n\n    \u003cspan class=\"hljs-comment\"\u003e// 一个新的API代理，会替换以前API命名空间中对应的内容\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e apiRuncode = api.runCode;\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e oldProxyNamespace = proxysApis[finalNameSpace] || {};\n\n    proxysApis[finalNameSpace] = {};\n\n    supportOsArray.forEach((osTmp) = \u0026gt;{\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (api.os \u0026amp;\u0026amp; api.os.indexOf(osTmp) !== \u003cspan class=\"hljs-number\"\u003e-1\u003c/span\u003e) {\n            \u003cspan class=\"hljs-comment\"\u003e// 如果存在这个os，并且合法，重新定义\u003c/span\u003e\n            proxysApis[finalNameSpace][osTmp] = apiRuncode;\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (oldProxyNamespace[osTmp]) {\n            \u003cspan class=\"hljs-comment\"\u003e// 否则仍然使用老版本的代理\u003c/span\u003e\n            proxysApis[finalNameSpace][osTmp] = oldProxyNamespace[osTmp];\n        }\n    });\n}\n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eextendModule\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003emoduleName, apis\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!apis || !\u003cspan class=\"hljs-built_in\"\u003eArray\u003c/span\u003e.isArray(apis)) {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!quick[moduleName]) {\n        quick[moduleName] = [];\n    }\n    \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, len = apis.length; i \u0026lt; len; i += \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) {\n        extendApi(moduleName, apis[i]);\n    }\n\n}\n\nquick.extendModule = extendModule;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e上述代码中增加了些复杂度，有一个统一管理所有代理调用的池，然后每次会更新对于环境下的代理\u003c/p\u003e\n\u003cp\u003e基于上述的方式可以如下拓展对于环境下的API\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003equick.extendModule(\u003cspan class=\"hljs-string\"\u003e'ui'\u003c/span\u003e, [{\n    \u003cspan class=\"hljs-attr\"\u003enamespace\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'alert'\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003eos\u003c/span\u003e: [\u003cspan class=\"hljs-string\"\u003e'h5'\u003c/span\u003e],\n    \u003cspan class=\"hljs-attr\"\u003edefaultParams\u003c/span\u003e: {\n        \u003cspan class=\"hljs-attr\"\u003emessage\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e,\n    },\n    runCode(message) {\n        alert(\u003cspan class=\"hljs-string\"\u003e'h5-'\u003c/span\u003e + message);\n    },\n}]);\n\nquick.extendModule(\u003cspan class=\"hljs-string\"\u003e'ui'\u003c/span\u003e, [{\n    \u003cspan class=\"hljs-attr\"\u003enamespace\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'alert'\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003eos\u003c/span\u003e: [\u003cspan class=\"hljs-string\"\u003e'quick'\u003c/span\u003e],\n    \u003cspan class=\"hljs-attr\"\u003edefaultParams\u003c/span\u003e: {\n        \u003cspan class=\"hljs-attr\"\u003emessage\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e,\n    },\n    runCode(message) {\n        alert(\u003cspan class=\"hljs-string\"\u003e'quick-'\u003c/span\u003e + message);\n    },\n}]);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e最终的调用如下（结果和预期一致）\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003equick.os.quick = \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\nquick.ui.alert(\u003cspan class=\"hljs-string\"\u003e'hello'\u003c/span\u003e); \u003cspan class=\"hljs-comment\"\u003e// quick-hello\u003c/span\u003e\nquick.os.quick = \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\nquick.ui.alert(\u003cspan class=\"hljs-string\"\u003e'hello'\u003c/span\u003e); \u003cspan class=\"hljs-comment\"\u003e// h5-hello\u003c/span\u003e\nquick.ui.alert = \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e; \u003cspan class=\"hljs-comment\"\u003e// 提示：不允许修改quick API\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e虽然就一两个API来说，这类拓展方式看起来很复杂，但是当API一多，特别是还需批量预处理时（如默认参数，Promise支持等），它的优势就出来了\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e多平台支撑在quick中的应用\u003c/h3\u003e\n\u003cp\u003equick hybrid框架中，默认支持\u003ccode\u003equick\u003c/code\u003e和\u003ccode\u003eh5\u003c/code\u003e有种环境，核心代码就是上述列举的（当然，内部增加了一些代理，默认参数处理等，会稍微复杂一点）。\u003c/p\u003e\n\u003cp\u003e基于这个核心，然后可以将框架的定义和API定义分开打包\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003equick.js\nquick.h5.js\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这样，最终看起来\u003ccode\u003eh5\u003c/code\u003e下的API定义就是一个拓展包，是没有它也不会影响quick环境下的使用，而且，如果增加一个新的环境(比如dd)，\n只需要再新增另一个环境的拓展包而已，各种写法都是一样的，这样便于了统一维护\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e返回根目录\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://github.com/quickhybrid/quickhybrid/issues/12\"\u003e【quickhybrid】如何实现一个Hybrid框架\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 class=\"heading\"\u003e源码\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003egithub\u003c/code\u003e上这个框架的实现\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://github.com/quickhybrid/quickhybrid\"\u003equickhybrid/quickhybrid\u003c/a\u003e\u003c/p\u003e\n","buildTime":"1514363380.883","__v":0}
{"_id":{"$oid":"5a439bc674ee951f2c48c017"},"id":"5a37c8fd6fb9a04512390dc1","author":{"$oid":"5a439bc574ee951f2c48c00a"},"title":"css-3秒（大概吧...）快速撸出YY游戏页面（三）","meta":{"likeCount":0},"tag":["HTML","CSS"],"comment":[],"content":"\u003cp\u003e\u003cstrong\u003e有哪里不懂的，请在下面留言，我每天都看，有时间我会一一解答，看评论区也许有人提出了跟你同样想问的问题，可以看看我给出的回答，不用重复提问。\u003c/strong\u003e\u003cbr\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://juejin.im/post/5a367f9b51882572ed55a9b7\"\u003ecss-3秒（大概吧...）快速撸出YY游戏页面（一）\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://juejin.im/post/5a375a815188252a3d3818b1\"\u003ecss-3秒（大概吧...）快速撸出YY游戏页面（二）\u003c/a\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e首先我们看看页面的样子\u003c/h2\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/18/16069ee1758a05cb?w=1127\u0026amp;h=960\u0026amp;f=jpeg\u0026amp;s=401532\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e接着上一篇，我们这篇来写nav部分下面的焦点图\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e声明，本教程只是为了帮助大家更好的理解css的一些细节，所以在这三篇里没有都涉及js，下面开始的轮播图我也只是讲解其中的css，其中我给出的代码可能有些样式没给全，这些不是讲解的重点，大家可以在实际练习时自行补上。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 class=\"heading\"\u003e首先我们先看看今天要写的部分\u003c/h4\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/18/16069fa6635e031e?w=1215\u0026amp;h=312\u0026amp;f=png\u0026amp;s=209997\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e轮播图部分我随便找了五张图，大家做练习的时候也随意，一图五用也OK，因为这里不涉及js，只是单讲css\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 class=\"heading\"\u003e结构\u0026amp;样式详解\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e由图可以看出我们要写的主体部分后面有背景色且上下有边距，于是我们先给一个大盒子，设上背景色和上下padding值\u003c/li\u003e\n\u003cli\u003e下一级的盒子是中间的，所以加上类名gWidth这个我们之前写好的版心，顺手再加个类名clearfix来清楚浮动，因为我们里面的内容是分左右两大块浮动的\u003c/li\u003e\n\u003cli\u003e先来看左边这块，这个是新闻banner轮播区域，在这里的轮播图的做法是用ul li结构，给出五个li浮动成一行，每个li里面都有一张图，那么这图张图排成了一行，如果不给ul的父盒子设置固定宽度，那么这五个图片在同一行会把这个父盒子顶得很长，给ul的父盒子设置固定一张图片的宽度且加上（overflow:hidden;）超出部分隐藏，然后用js控制没几秒ul向左移动一张图片宽度的距离还有ul这个父盒子左右两个按钮也加上事件控制其移动，JS在这里点到为止，因为在这里主要还是讲解css\u003c/li\u003e\n\u003cli\u003e我们来给ul这个大长条的父盒子加一个固定宽度和高度且设置为（position: relative;）而ul自身设为（position: absolute;），因为我们把ul设置了absolute，那么ul会跳出文档流，这里如果不给我们刚刚设了relative的这个盒子没有设置固定高度，那么这个盒子高度为零，因为absolute跳出文档流之后他的内容将不再撑起高度，打个比方就好像你把气球里面的空气拿走，那么这个气球就会缩小。\u003c/li\u003e\n\u003cli\u003e可能有人已经注意到了我们给一些包裹有浮动内容的盒子都随手设置了clearfix，那为何此处的ul.banner_list没有给clearfix，里面包裹着的li不是也浮动的吗？这个问题我会在完结这个系列教程篇章之后的单独写一篇关于高度坍塌详细讲解的技术分享在此补上链接跳转，因为这个不单单只有clearfix这个知识点，其中浮动和绝对定位还有其他东西都有很大的紧密型，可以算是一个体系,我在这篇里面做了略微详细的讲解帮助大家理解\u003ca target=\"_blank\" href=\"https://juejin.im/post/5a3ad71a6fb9a0450f2217f1\"\u003ecss-让我们再深入一点看看ul-li结构里的浮动和绝对定位（float \u0026amp; absolute）\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e来看下ul.banner_list下的li，我们给li设置了（position: relative;），li里面的描述的div.banner_fd设置了（position: absolute;）且定位在li的底部，并没有和图片挤在一块，有些时候这个图片描述的div还会设置有透明度，所以此处用这种做法。这里需要注意的点是我们给div.banner_fd设置了一个（width:100%），这是因为absolute会隐式的把我们这个div变成行块（display:inline-block;），这样的话我们不给他设置百分百的宽度那他的宽度则由内容h3来撑开而不是像原本的block独占一行，那么看起来就显得很短，右边留出了很多空白，这就和我们图上的样子变得不一样了。\u003c/li\u003e\n\u003cli\u003e左边的做法大体上和前两篇写的nav的做法相似，在这里不再讲解，该页面的剩余其他内容都可以在这三篇的讲解里面找到相同的答案，各位同学请自行发挥脑洞开始练习吧。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"pt30 pb30 bg_qian\"\u003c/span\u003e\u0026gt;\n    \u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"gWidth clearfix\"\u003c/span\u003e\u0026gt;\n        \u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"banner fl\"\u003c/span\u003e\u0026gt;\n            \u0026lt;ul class=\u003cspan class=\"hljs-string\"\u003e\"banner_list\"\u003c/span\u003e\u0026gt;\n                \u0026lt;li\u0026gt;\n                    \u0026lt;img src=\u003cspan class=\"hljs-string\"\u003e\"images/banner/3.jpg\"\u003c/span\u003e alt=\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e\u0026gt;\n                    \u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"banner_fd\"\u003c/span\u003e\u0026gt;\n                        \u0026lt;h3\u0026gt;阿斯顿发撒的发撒的发是\u0026lt;/h3\u0026gt;\n                    \u0026lt;/div\u0026gt;\n                \u0026lt;/li\u0026gt;\n                \u0026lt;li\u0026gt;\n                    \u0026lt;img src=\u003cspan class=\"hljs-string\"\u003e\"images/banner/2.jpg\"\u003c/span\u003e alt=\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e\u0026gt;\n                    \u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"banner_fd\"\u003c/span\u003e\u0026gt;\n                        \u0026lt;h3\u0026gt;阿斯顿发撒的发撒的发是\u0026lt;/h3\u0026gt;\n                    \u0026lt;/div\u0026gt;\n                \u0026lt;/li\u0026gt;\n                \u0026lt;li\u0026gt;\n                    \u0026lt;img src=\u003cspan class=\"hljs-string\"\u003e\"images/banner/3.jpg\"\u003c/span\u003e alt=\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e\u0026gt;\n                    \u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"banner_fd\"\u003c/span\u003e\u0026gt;\n                        \u0026lt;h3\u0026gt;阿斯顿发撒的发撒的发是\u0026lt;/h3\u0026gt;\n                    \u0026lt;/div\u0026gt;\n                \u0026lt;/li\u0026gt;\n                \u0026lt;li\u0026gt;\n                    \u0026lt;img src=\u003cspan class=\"hljs-string\"\u003e\"images/banner/4.jpg\"\u003c/span\u003e alt=\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e\u0026gt;\n                    \u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"banner_fd\"\u003c/span\u003e\u0026gt;\n                        \u0026lt;h3\u0026gt;阿斯顿发撒的发撒的发是\u0026lt;/h3\u0026gt;\n                    \u0026lt;/div\u0026gt;\n                \u0026lt;/li\u0026gt;\n                \u0026lt;li\u0026gt;\n                    \u0026lt;img src=\u003cspan class=\"hljs-string\"\u003e\"images/banner/5.jpg\"\u003c/span\u003e alt=\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e\u0026gt;\n                    \u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"banner_fd\"\u003c/span\u003e\u0026gt;\n                        \u0026lt;h3\u0026gt;阿斯顿发撒的发撒的发是\u0026lt;/h3\u0026gt;\n                    \u0026lt;/div\u0026gt;\n                \u0026lt;/li\u0026gt;\n            \u0026lt;/ul\u0026gt;\n            \u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e class=\u003cspan class=\"hljs-string\"\u003e\"prev\"\u003c/span\u003e\u0026gt;\u0026lt;/a\u0026gt;\n            \u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e class=\u003cspan class=\"hljs-string\"\u003e\"next\"\u003c/span\u003e\u0026gt;\u0026lt;/a\u0026gt;\n        \u0026lt;/div\u0026gt;\n        \u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"news_box fr\"\u003c/span\u003e\u0026gt;\n            \u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"ghd\"\u003c/span\u003e\u0026gt;\n                \u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"ghd_cont hd_big clearfix\"\u003c/span\u003e\u0026gt;\n                    \u0026lt;ul class=\u003cspan class=\"hljs-string\"\u003e\"news_nav clearfix\"\u003c/span\u003e\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e class=\u003cspan class=\"hljs-string\"\u003e\"active\"\u003c/span\u003e\u0026gt;新闻\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;活动\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;新闻\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;活动\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;新闻\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\n                    \u0026lt;/ul\u0026gt;\n                    \u0026lt;!--\n                       \u0026lt;h3 class=\u003cspan class=\"hljs-string\"\u003e\"title\"\u003c/span\u003e\u0026gt;爱上对方\u0026lt;/h3\u0026gt;\n                       \u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e class=\u003cspan class=\"hljs-string\"\u003e\"more\"\u003c/span\u003e\u0026gt;更多+\u0026lt;/a\u0026gt;\n--\u0026gt;\n                \u0026lt;/div\u0026gt;\n            \u0026lt;/div\u0026gt;\n            \u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"news_bd\"\u003c/span\u003e\u0026gt;\n                \u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"news_item\"\u003c/span\u003e\u0026gt;\n                    \u0026lt;h3 class=\u003cspan class=\"hljs-string\"\u003e\"big_title\"\u003c/span\u003e\u0026gt;啊手动阀手动阀打发手动阀手动阀\u0026lt;/h3\u0026gt;\n                    \u0026lt;ul class=\u003cspan class=\"hljs-string\"\u003e\"list\"\u003c/span\u003e\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;span\u0026gt;[招募]\u0026lt;/span\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;啊手动阀手动阀手动阀\u0026lt;/a\u0026gt;\u0026lt;em\u0026gt;2000-20-20\u0026lt;/em\u0026gt;\u0026lt;/li\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;span\u0026gt;[招募]\u0026lt;/span\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;啊手动阀手动阀手动阀\u0026lt;/a\u0026gt;\u0026lt;em\u0026gt;2000-20-20\u0026lt;/em\u0026gt;\u0026lt;/li\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;span\u0026gt;[招募]\u0026lt;/span\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;啊手动阀手动阀手动阀\u0026lt;/a\u0026gt;\u0026lt;em\u0026gt;2000-20-20\u0026lt;/em\u0026gt;\u0026lt;/li\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;span\u0026gt;[招募]\u0026lt;/span\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;啊手动阀手动阀手动阀\u0026lt;/a\u0026gt;\u0026lt;em\u0026gt;2000-20-20\u0026lt;/em\u0026gt;\u0026lt;/li\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;span\u0026gt;[招募]\u0026lt;/span\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;啊手动阀手动阀手动阀\u0026lt;/a\u0026gt;\u0026lt;em\u0026gt;2000-20-20\u0026lt;/em\u0026gt;\u0026lt;/li\u0026gt;\n                    \u0026lt;/ul\u0026gt;\n                \u0026lt;/div\u0026gt;\n                \u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"news_item hide\"\u003c/span\u003e\u0026gt;\n                    \u0026lt;h3 class=\u003cspan class=\"hljs-string\"\u003e\"big_title\"\u003c/span\u003e\u0026gt;啊手动阀手动阀打发手动阀手动阀\u0026lt;/h3\u0026gt;\n                    \u0026lt;ul class=\u003cspan class=\"hljs-string\"\u003e\"list\"\u003c/span\u003e\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;span\u0026gt;[招募]\u0026lt;/span\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;啊手动阀手动阀手动阀\u0026lt;/a\u0026gt;\u0026lt;em\u0026gt;2000-20-20\u0026lt;/em\u0026gt;\u0026lt;/li\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;span\u0026gt;[招募]\u0026lt;/span\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;啊手动阀手动阀手动阀\u0026lt;/a\u0026gt;\u0026lt;em\u0026gt;2000-20-20\u0026lt;/em\u0026gt;\u0026lt;/li\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;span\u0026gt;[招募]\u0026lt;/span\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;啊手动阀手动阀手动阀\u0026lt;/a\u0026gt;\u0026lt;em\u0026gt;2000-20-20\u0026lt;/em\u0026gt;\u0026lt;/li\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;span\u0026gt;[招募]\u0026lt;/span\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;啊手动阀手动阀手动阀\u0026lt;/a\u0026gt;\u0026lt;em\u0026gt;2000-20-20\u0026lt;/em\u0026gt;\u0026lt;/li\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;span\u0026gt;[招募]\u0026lt;/span\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;啊手动阀手动阀手动阀\u0026lt;/a\u0026gt;\u0026lt;em\u0026gt;2000-20-20\u0026lt;/em\u0026gt;\u0026lt;/li\u0026gt;\n                    \u0026lt;/ul\u0026gt;\n                \u0026lt;/div\u0026gt;\n                \u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"news_item hide\"\u003c/span\u003e\u0026gt;\n                    \u0026lt;h3 class=\u003cspan class=\"hljs-string\"\u003e\"big_title\"\u003c/span\u003e\u0026gt;啊手动阀手动阀打发手动阀手动阀\u0026lt;/h3\u0026gt;\n                    \u0026lt;ul class=\u003cspan class=\"hljs-string\"\u003e\"list\"\u003c/span\u003e\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;span\u0026gt;[招募]\u0026lt;/span\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;啊手动阀手动阀手动阀\u0026lt;/a\u0026gt;\u0026lt;em\u0026gt;2000-20-20\u0026lt;/em\u0026gt;\u0026lt;/li\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;span\u0026gt;[招募]\u0026lt;/span\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;啊手动阀手动阀手动阀\u0026lt;/a\u0026gt;\u0026lt;em\u0026gt;2000-20-20\u0026lt;/em\u0026gt;\u0026lt;/li\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;span\u0026gt;[招募]\u0026lt;/span\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;啊手动阀手动阀手动阀\u0026lt;/a\u0026gt;\u0026lt;em\u0026gt;2000-20-20\u0026lt;/em\u0026gt;\u0026lt;/li\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;span\u0026gt;[招募]\u0026lt;/span\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;啊手动阀手动阀手动阀\u0026lt;/a\u0026gt;\u0026lt;em\u0026gt;2000-20-20\u0026lt;/em\u0026gt;\u0026lt;/li\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;span\u0026gt;[招募]\u0026lt;/span\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;啊手动阀手动阀手动阀\u0026lt;/a\u0026gt;\u0026lt;em\u0026gt;2000-20-20\u0026lt;/em\u0026gt;\u0026lt;/li\u0026gt;\n                    \u0026lt;/ul\u0026gt;\n                \u0026lt;/div\u0026gt;\n                \u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"news_item hide\"\u003c/span\u003e\u0026gt;\n                    \u0026lt;h3 class=\u003cspan class=\"hljs-string\"\u003e\"big_title\"\u003c/span\u003e\u0026gt;啊手动阀手动阀打发手动阀手动阀\u0026lt;/h3\u0026gt;\n                    \u0026lt;ul class=\u003cspan class=\"hljs-string\"\u003e\"list\"\u003c/span\u003e\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;span\u0026gt;[招募]\u0026lt;/span\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;啊手动阀手动阀手动阀\u0026lt;/a\u0026gt;\u0026lt;em\u0026gt;2000-20-20\u0026lt;/em\u0026gt;\u0026lt;/li\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;span\u0026gt;[招募]\u0026lt;/span\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;啊手动阀手动阀手动阀\u0026lt;/a\u0026gt;\u0026lt;em\u0026gt;2000-20-20\u0026lt;/em\u0026gt;\u0026lt;/li\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;span\u0026gt;[招募]\u0026lt;/span\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;啊手动阀手动阀手动阀\u0026lt;/a\u0026gt;\u0026lt;em\u0026gt;2000-20-20\u0026lt;/em\u0026gt;\u0026lt;/li\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;span\u0026gt;[招募]\u0026lt;/span\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;啊手动阀手动阀手动阀\u0026lt;/a\u0026gt;\u0026lt;em\u0026gt;2000-20-20\u0026lt;/em\u0026gt;\u0026lt;/li\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;span\u0026gt;[招募]\u0026lt;/span\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;啊手动阀手动阀手动阀\u0026lt;/a\u0026gt;\u0026lt;em\u0026gt;2000-20-20\u0026lt;/em\u0026gt;\u0026lt;/li\u0026gt;\n                    \u0026lt;/ul\u0026gt;\n                \u0026lt;/div\u0026gt;\n                \u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"news_item hide\"\u003c/span\u003e\u0026gt;\n                    \u0026lt;h3 class=\u003cspan class=\"hljs-string\"\u003e\"big_title\"\u003c/span\u003e\u0026gt;啊手动阀手动阀打发手动阀手动阀\u0026lt;/h3\u0026gt;\n                    \u0026lt;ul class=\u003cspan class=\"hljs-string\"\u003e\"list\"\u003c/span\u003e\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;span\u0026gt;[招募]\u0026lt;/span\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;啊手动阀手动阀手动阀\u0026lt;/a\u0026gt;\u0026lt;em\u0026gt;2000-20-20\u0026lt;/em\u0026gt;\u0026lt;/li\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;span\u0026gt;[招募]\u0026lt;/span\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;啊手动阀手动阀手动阀\u0026lt;/a\u0026gt;\u0026lt;em\u0026gt;2000-20-20\u0026lt;/em\u0026gt;\u0026lt;/li\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;span\u0026gt;[招募]\u0026lt;/span\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;啊手动阀手动阀手动阀\u0026lt;/a\u0026gt;\u0026lt;em\u0026gt;2000-20-20\u0026lt;/em\u0026gt;\u0026lt;/li\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;span\u0026gt;[招募]\u0026lt;/span\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;啊手动阀手动阀手动阀\u0026lt;/a\u0026gt;\u0026lt;em\u0026gt;2000-20-20\u0026lt;/em\u0026gt;\u0026lt;/li\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;span\u0026gt;[招募]\u0026lt;/span\u0026gt;\u0026lt;a href=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;啊手动阀手动阀手动阀\u0026lt;/a\u0026gt;\u0026lt;em\u0026gt;2000-20-20\u0026lt;/em\u0026gt;\u0026lt;/li\u0026gt;\n                    \u0026lt;/ul\u0026gt;\n                \u0026lt;/div\u0026gt;\n            \u0026lt;/div\u0026gt;\n        \u0026lt;/div\u0026gt;\n    \u0026lt;/div\u0026gt;\n\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e/*焦点图*/\n\n.banner {\n    width: 497px;\n    height: 246px;\n    position: relative;\n    overflow: hidden;\n}\n\n.banner_list {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 500%;\n}\n\n.banner_list li {\n    \u003cspan class=\"hljs-built_in\"\u003efloat\u003c/span\u003e: left;\n    position: relative;\n}\n\n.banner_list img {\n    width: 497px;\n    height: 246px;\n}\n\n.banner_fd {\n    position: absolute;\n    left: 0;\n    bottom: 0;\n    width: 100%;\n    height: 40px;\n    background-color: \u003cspan class=\"hljs-comment\"\u003e#fff;\u003c/span\u003e\n}\n\n.banner_fd h3 {\n    font: 14px/16px \u003cspan class=\"hljs-string\"\u003e\"Microsoft YaHei\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"微软雅黑\"\u003c/span\u003e;\n    height: 16px;\n    border-left: solid 3px \u003cspan class=\"hljs-comment\"\u003e#DD3A29;\u003c/span\u003e\n    padding-left: 8px;\n    margin: 12px 9px;\n}\n\n.prev,\n.next {\n    width: 30px;\n    height: 50px;\n    filter: progid: DXImageTransform.Microsoft.gradient(enabled=\u003cspan class=\"hljs-string\"\u003e'true'\u003c/span\u003e, startColorstr=\u003cspan class=\"hljs-string\"\u003e'#7F000000'\u003c/span\u003e, endColorstr=\u003cspan class=\"hljs-string\"\u003e'#7F000000'\u003c/span\u003e);\n    background-color: rgba(0, 0, 0, 0.8);\n    position: absolute;\n    top: 50%;\n    margin-top: -45px;\n}\n\n.prev {\n    left: 0;\n}\n\n.next {\n    right: 0;\n}\n\n.news_box {\n    background-color: \u003cspan class=\"hljs-comment\"\u003e#fff;\u003c/span\u003e\n    width: 497px;\n    height: 246px;\n}\n\n.news_nav {\n    height: 42px;\n    font: 12px/42px \u003cspan class=\"hljs-string\"\u003e\"Microsoft YaHei\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"微软雅黑\"\u003c/span\u003e;\n    padding: 0 3px;\n}\n\n.news_nav li {\n    \u003cspan class=\"hljs-built_in\"\u003efloat\u003c/span\u003e: left;\n}\n\n.news_nav a {\n    display: inline-block;\n    padding: 0 14px;\n    color: \u003cspan class=\"hljs-comment\"\u003e#393742;\u003c/span\u003e\n}\n\n.news_nav .active {\n    color: \u003cspan class=\"hljs-comment\"\u003e#f00;\u003c/span\u003e\n}\n\n.news_bd {\n    padding: 7px 20px 0;\n}\n\n.big_title {\n    height: 41px;\n    font: 16px/41px \u003cspan class=\"hljs-string\"\u003e\"Microsoft YaHei\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"微软雅黑\"\u003c/span\u003e;\n    text-align: center;\n    color: \u003cspan class=\"hljs-comment\"\u003e#dd3a29;\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e","buildTime":"1514353985.7619","__v":0}
{"_id":{"$oid":"5a439bc674ee951f2c48c018"},"id":"5a20141ef265da43085dd06e","author":{"$oid":"5a439bc574ee951f2c48c00c"},"title":"常见的布局类问题及面经","meta":{"likeCount":0},"tag":["CSS"],"comment":[],"content":"\u003cdiv\u003e\u003cdiv\u003e\u003cp\u003e自己的地址\u003cbr\u003e\u003ca href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FCodingMeUp%2Fsome_notes%2Fissues%2F13\"\u003egithub.com/CodingMeUp/…\u003c/a\u003e\u003c/p\u003e\n\u003ch3\u003e定期更新面经P5 P6面经、欢迎star\u003c/h3\u003e\u003ch3\u003e左边定宽、右边自适应（类似管理台）\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003ch4\u003e方案一 左边设置左浮动，右边宽度设置100% ()\u003c/h4\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e  .left {\n    \u003cspan class=\"hljs-built_in\"\u003efloat\u003c/span\u003e: left;\n  }\n  .right {\n    width: 100%\n  }\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003cli\u003e\u003ch4\u003e方案二 左设置左浮动、右边也左浮动 但是使用calc去补宽度长度计算（方案一二没有完全分层）\u003c/h4\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e  .left {\n    \u003cspan class=\"hljs-built_in\"\u003efloat\u003c/span\u003e: left;\n  }\n  .right {\n    width: calc(100vw-200px);\n  }\u003c/code\u003e\u003c/pre\u003e-【分析】\u003c/li\u003e\n\u003c/ul\u003e\n\u003col\u003e\n\u003cli\u003e浮动。（注意：为了不影响其他元素，别忘了在父级上清除浮动）\u003c/li\u003e\n\u003cli\u003ecalc() = calc(四则运算) 用于在 css 中动态计算长度值，需要注意的是，运算符前后都需要保留一个空格，例如：width: calc(100% - 10px)；\u003c/li\u003e\n\u003cli\u003evw： viewport width。1vw = viewport 宽度的 1%, 100vw = viewport width,\u003cbr\u003e同样的还有 vh： viewport height。1vw = viewport 高度的 1%， 100vh = viewport height。\u003cbr\u003e浏览器支持情况： 主流浏览器、IE10+\u003cbr\u003evw 和 vh 会随着viewport 的变化而变化，因此十分适合于自适应场景来使用。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ch4\u003e方案三 父容器设置 display：flex；right部分设置 flex：1\u003c/h4\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e  .contain {\n    display: flex\n  }\n  .right {\n    flex: 1\n  }\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003cli\u003e\u003ch4\u003e方案四 右边div套个包裹、并前置、左及包裹 双浮动左\u003c/h4\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e .contain{\n   background: pink;\n   \u003cspan class=\"hljs-built_in\"\u003efloat\u003c/span\u003e: left;\n   width: 100%;\n }\n\n .left{\n   height: 200px;\n   width: 200px;\n   \u003cspan class=\"hljs-built_in\"\u003efloat\u003c/span\u003e: left;\n   margin-left: -100%;\n   background: red;\n }\n\n .right {\n   background: blue;\n   height: 300px;\n   margin-left: 200px;\n }\u003c/code\u003e\u003c/pre\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e\u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"contain\"\u003c/span\u003e\u0026gt;\n \u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"right\"\u003c/span\u003e\u0026gt;\n   rrr\n \u0026lt;/div\u0026gt;\n\u0026lt;/div\u0026gt;\n\u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"left\"\u003c/span\u003e\u0026gt;lll \u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e【分析】\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003col\u003e\n\u003cli\u003e首先设置左边部分和右边部分左浮动，并为自适应部分（Right）设置宽度100%。此时的效果是这样的：\u003c/li\u003e\n\u003cli\u003e设置左边部分左外边距为负100%，此时效果如下：\u003cbr\u003e但是右边部分的宽度仍然为100%，部分内容被 Left 所覆盖。\u003c/li\u003e\n\u003cli\u003e为 Right 部分添加左边距（即 Left 部分的宽度）\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3\u003e总结\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e关于左侧宽度固定，右侧宽度自适应两列布局的一种很常用的方法我相信大家都知道。就是利用左侧元素浮动，或者绝对定位的方式使其脱离常规文档流，让两个块级元素能够在同一行显示。然后右侧元素 margin-left 的值等于左侧元素宽度，这时右侧元素将紧挨着左侧元素，由于块元素的宽度会自动默认充满剩下的屏幕，所以就实现了右侧自适应的效果了。\u003c/li\u003e\n\u003cli\u003e第二种方法，我利用的是创建一个新的BFC（块级格式化上下文）来防止文字环绕的原理来实现的。BFC就是一个相对独立的布局环境，它内部元素的布局不受外面布局的影响。它可以通过以下任何一种方式来创建：\u003cbr\u003efloat的值不为none\u003cbr\u003eposition的值不为static或者relative\u003cbr\u003edisplay的值为 table-cell, table-caption, inline-block, flex, 或者 inline-flex中的其中一个\u003cbr\u003eoverflow的值不为visible\u003cbr\u003e　　关于BFC，在w3c里是这样描述的：在BFC中，每个盒子的左外边框紧挨着包含块的左边框（从右到左的格式化时，则为右边框紧挨）。即使在浮动里也是这样的（尽管一个包含块的边框会因为浮动而萎缩），除非这个包含块的内部创建了一个新的BFC。\u003ch4\u003e这样，当我们给右侧的元素单独创建一个BFC时，它将不会紧贴在包含块的左边框，而是紧贴在左元素的右边框。就像是箱子一个个排列 而不是叠上去\u003c/h4\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e\u0026lt;!DOCTYPE\u0026gt;\n\u0026lt;html lang=\u003cspan class=\"hljs-string\"\u003e\"en\"\u003c/span\u003e\u0026gt;\n\u0026lt;head\u0026gt;\n  \u0026lt;meta charset=\u003cspan class=\"hljs-string\"\u003e\"UTF-8\"\u003c/span\u003e\u0026gt;\n  \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt;\n  \u0026lt;link rel=\u003cspan class=\"hljs-string\"\u003e\"stylesheet\"\u003c/span\u003e href=\u003cspan class=\"hljs-string\"\u003e\"test.css\"\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\n\u0026lt;/head\u0026gt;\n\u0026lt;style media=\u003cspan class=\"hljs-string\"\u003e\"screen\"\u003c/span\u003e\u0026gt;\n.one {\n\u003cspan class=\"hljs-built_in\"\u003efloat\u003c/span\u003e: left;\nheight: 100px;\nwidth: 300px;\nbackground-color: blue;\n}\n.two {\noverflow: auto;\nheight: 200px;\nbackground-color: red;\n}\n\u0026lt;/style\u0026gt;\n\u0026lt;body\u0026gt;\n  \u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"one\"\u003c/span\u003e\u0026gt;\u0026lt;/div\u0026gt;\n  \u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"two\"\u003c/span\u003e\u0026gt;第二种方法\u0026lt;/div\u0026gt;\n\u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003e左右定宽 中间自适应\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cp\u003eposition（绝对定位法） center的div需要放在最后面\u003cbr\u003e绝对定位法原理是将左右两边使用absolute定位，因为绝对定位使其脱离文档流，后面的center会自然流动到他们上面，然后使用margin属性，留出左右元素的宽度，既可以使中间元素自适应屏幕宽度。\u003c/p\u003e\n\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e\u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e'left'\u003c/span\u003e\u0026gt;left\u0026lt;/div\u0026gt;\n\u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e'right'\u003c/span\u003e\u0026gt;right\u0026lt;/div\u0026gt;\n\u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e'center'\u003c/span\u003e\u0026gt;center\u0026lt;/div\u0026gt;\n.left,.right{\n  position: absolute;\n  width: 200px;\n  height: 200px;\n  background-color: \u003cspan class=\"hljs-comment\"\u003e#df8793;\u003c/span\u003e\n  top:0;\n}\n.left{\n  left:0px;\n}\n.right{\n  right: 0px;\n}\n.center{\n  margin: 0 210px;\n  overflow: hidden;\n  background-color: yellow;\n  height: 200px;\n}\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003efloat：自身浮动法 center的div需要放在最后面\u003cbr\u003e自身浮动法的原理就是使用对左右使用分别使用float:left和float:right，float使左右两个元素脱离文档流，中间元素正常在正常文档流中，使用margin指定左右外边距对其进行一个定位。\u003c/p\u003e\n\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e\u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e'left'\u003c/span\u003e\u0026gt;left\u0026lt;/div\u0026gt;\n\u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e'right'\u003c/span\u003e\u0026gt;right\u0026lt;/div\u0026gt;\n\u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e'center'\u003c/span\u003e\u0026gt;center\u0026lt;/div\u0026gt;\n.left,.right{\n  width: 200px;\n  height: 200px;\n  background-color: \u003cspan class=\"hljs-comment\"\u003e#df8793;\u003c/span\u003e\n}\n.left{\n  \u003cspan class=\"hljs-built_in\"\u003efloat\u003c/span\u003e: left;\n}\n.right{\n  \u003cspan class=\"hljs-built_in\"\u003efloat\u003c/span\u003e: right;\n}\n.center{\n  margin: 0 210px;\n  overflow: hidden;\n  background-color: yellow;\n  height: 200px;\n}\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e圣杯布局\u003cbr\u003e圣杯布局的原理是margin负值法。使用圣杯布局首先需要在center元素外部包含一个div，包含div需要设置float属性使其形成一个BFC，并设置宽度，并且这个宽度要和left块的margin负值进行配合\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e\u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e'wrap'\u003c/span\u003e\u0026gt;\n    \u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e'center'\u003c/span\u003e\u0026gt;center\u0026lt;/div\u0026gt;\n\u0026lt;/div\u0026gt;\n\u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e'left'\u003c/span\u003e\u0026gt;left\u0026lt;/div\u0026gt;\n\u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e'right'\u003c/span\u003e\u0026gt;right\u0026lt;/div\u0026gt;\n\n.wrap{\n    width: 100%;    // .left  margin-left 同步\n    \u003cspan class=\"hljs-built_in\"\u003efloat\u003c/span\u003e: left;\n    height: 200px;\n    background-color: \u003cspan class=\"hljs-comment\"\u003e#238978;\u003c/span\u003e\n}\n.center{\n    margin: 0 210px;\n}\n.left{\n    \u003cspan class=\"hljs-built_in\"\u003efloat\u003c/span\u003e: left;\n    margin-left: -100%; // .wrap width同步\n    width: 200px;\n    height: 200px;\n    background-color: \u003cspan class=\"hljs-comment\"\u003e#eee;\u003c/span\u003e\n}\n.right{\n    \u003cspan class=\"hljs-built_in\"\u003efloat\u003c/span\u003e: left;\n    margin-left: -200px;\n    width: 200px;\n    height: 200px;\n    background-color: \u003cspan class=\"hljs-comment\"\u003e#eee;\u003c/span\u003e\n}\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003eflex布局\u003cbr\u003e在外围包裹一层div，设置为display：flex；中间设置flex：1；但是盒模型默认紧紧挨着，可以使用margin控制外边距。\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e\u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e'wrap'\u003c/span\u003e\u0026gt;\n  \u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e'left'\u003c/span\u003e\u0026gt;left\u0026lt;/div\u0026gt;\n  \u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e'center'\u003c/span\u003e\u0026gt;center\u0026lt;/div\u0026gt;\n  \u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e'right'\u003c/span\u003e\u0026gt;right\u0026lt;/div\u0026gt;\n\u0026lt;/div\u0026gt;\n.wrap{\n  display: flex;\n}\n.center{\n  flex:1;\n  margin: 0 10px;\n  background-color: pink;\n}\n.left{\n  width: 200px;\n  height: 200px;\n  background-color: \u003cspan class=\"hljs-comment\"\u003e#eee;\u003c/span\u003e\n}\n.right{\n  width: 200px;\n  height: 200px;\n  background-color: \u003cspan class=\"hljs-comment\"\u003e#eee;\u003c/span\u003e\n}\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003e水平居中\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e行内元素的居中 (父元素 text-align: center ) 这样子元素如果为inline-block 就会居中\u003c/li\u003e\n\u003cli\u003e块状元素居中 (块状没法用text-align) \u003cul\u003e\n\u003cli\u003e宽度一定： 我们使用对该元素margin: auto来实现 或 margin: 20px auto 并且一定要设置宽度值width 一起使用\u003cul\u003e\n\u003cli\u003e宽度不定 :\u003cbr\u003e1) 加table标签设置  margin:0 auto  将需要进行居中的元素，用一个大表格将其围起来（而且这个表格只有这一个单元格哦），然后设置表格的属性（如第2条方法）居中就行。不过缺点是加了不少的无用标签，代码看起来比较臃肿。\u003cbr\u003e2) display: inline  设置text-align:center 居中的块级元素的display属性设置为inline，这样的目的是先把块级元素变为行内元素，可以在一行内显示，然后将这些元素的父级元素text-align设置为：center即可。大概原理就是：块级-\u0026gt;行内-\u0026gt;居中(参照第1条方法)，不过缺点也很明显，块级元素的一些特点没有了，例如高度、宽度设置等。\u003cbr\u003e3) 运用float属性，主要的思想也就是将所需要居中的元素先float到左边，这样就能在一行内显示，然后将整个列表float到父元素左边，然后设置left来设置居中。怎么设置呢？先设置父元素：left:50%，这样整个父元素就往右便宜50%，然后设置列表：right:50%，这样列表的东西再往左走父元素的50%，这样就达到了居中的目的 基本思想也就是将父元素（容器）先往右偏移父容器宽度的50%，然后再将列表的元素向左相对偏移50%，就可以得到居中的效果。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003e垂直居中\u003c/h3\u003e\u003cp\u003e1) 固定高度\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eline-height + height  但是 固定高度，无法实现两行文本的垂直居中对齐\u003c/li\u003e\n\u003cli\u003eabsolute 固定高度 无法自适应内容 元素脱离文档流\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e\u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"container\"\u003c/span\u003e\u0026gt;Hello World！\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e.container {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    margin-left: -150px;\n    margin-top: -150px;\n    width: 300px;\n    height: 300px;\n    border: 1px solid red;\n}\n// 支持calc \n.container {\n    position: absolute;\n    left: calc(50% - 150px);\n    top: calc(50% - 150px);\n    width: 300px;\n    height: 300px;\n    border: 1px solid red;\n}\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003cli\u003e空标签+float:left  \u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e\u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"space\"\u003c/span\u003e\u0026gt;\u0026lt;/div\u0026gt;\n\u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"container\"\u003c/span\u003e\u0026gt;\n\u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"inner\"\u003c/span\u003e\u0026gt;\n    hello world！\n\u0026lt;/div\u0026gt;\n\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e.space {\n    \u003cspan class=\"hljs-built_in\"\u003efloat\u003c/span\u003e: left;\n    height: 50%;\n    margin-top: -150px;\n}\n.container {\n    clear: both;\n    height: 300px;\n    border: 1px solid red;\n    position: relative;\n}\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e2) 高度自适应\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCSS3里使用transform里的translate()的两个百分比参数 如果两个参数都为百分比值，此时会基于自身宽度和高定进行移动。此函数移动的机制同position:relative相似\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e\u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"container\"\u003c/span\u003e\u0026gt;Hello World！\u0026lt;/div\u0026gt;\n.container {\n position: absolute;\n top: 50%;\n left: 50%;\n transform: translate(-50%, -50%); // 自身宽度和高度的一半\n border: 1px solid red;\n}\n优点：无需定高度。高度随内容自适应。\n缺点：元素脱离文档流。如果需要居中的元素已经在高度上超过了视口，那它的顶部会被视口裁切掉。\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e摆脱maigin 百分比靠父元素宽度的问题  50%加上translate负值并不能实现垂直居中布局。 改用\u003cbr\u003evh来做\u003c/p\u003e\n\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e\u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"container\"\u003c/span\u003e\u0026gt;Hello World！\u0026lt;/div\u0026gt;\n\n .container {\n     width: 300px;\n     margin: 50vh auto 0;\n     transform: translateY(-50%);\n     border: 1px solid red;\n }\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003cli\u003eflex布局 \u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e\u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"container\"\u003c/span\u003e\u0026gt;\n \u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"inner\"\u003c/span\u003e\u0026gt;\n     \u0026lt;p\u0026gt;hello world!\u0026lt;/p\u0026gt;\n \u0026lt;/div\u0026gt;\n\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e .container {\n     display: flex;\n     height: 100vh;\n }\n .inner {\n     margin: auto;\n }\u003c/code\u003e\u003c/pre\u003e当我们使父元素display: flex时，margin: auto不仅可以水平居中，也能够实现垂直居中。这是因为auto外边距会平分水平或垂直方向上的额外空间。\u003cbr\u003e当然，也可以使用justify-content: center来定义弹性项目主轴的对齐方式，align-items: center来定义弹性项目侧轴的对齐方式。\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e .container {\n     display: flex;\n     justify-content: center;\n     align-items: center;\n     height: 100vh;\n }\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e模拟表格 父display:table 子display: table-cell vertical-align: middle\u003c/p\u003e\n\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e\u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"container\"\u003c/span\u003e\u0026gt;\n  \u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"inner\"\u003c/span\u003e\u0026gt;\n      hello world！\n  \u0026lt;/div\u0026gt;\n\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e  .container {\n      display: table;         /* 让div以表格的形式渲染 */\n      width: 100%;\n      border: 1px solid red;\n  }\n\n  .inner {\n      display: table-cell;    /* 让子元素以表格的单元格形式渲染 */\n      text-align: center;\n      vertical-align: middle;\n  }\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cbr\u003e作者：渺渺惜雨怀_\u003cbr\u003e链接：https://juejin.im/post/5a1e2f246fb9a045186a7db2\u003cbr\u003e来源：掘金\u003cbr\u003e著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\u003c/div\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e","buildTime":"1514379030.3252","__v":0}
{"_id":{"$oid":"5a439bc674ee951f2c48c019"},"id":"5a38830351882506a463bbcc","author":{"$oid":"5a439bc574ee951f2c48c00d"},"title":"Vue-TypeScript全面教程(附实例代码和一键构建工具)","meta":{"likeCount":0},"tag":["Vue.js","JavaScript","TypeScript","Vuex","vue-router"],"comment":[],"content":"\u003cdiv align=\"center\"\u003e\n    \u003cimg width=\"126\" src=\"https://user-gold-cdn.xitu.io/2017/12/18/160677915f752873?w=650\u0026amp;h=562\u0026amp;f=jpeg\u0026amp;s=20697\"\u003e\n    \u003cimg width=\"110\" src=\"https://user-gold-cdn.xitu.io/2017/12/18/160677916080b3e2?w=434\u0026amp;h=432\u0026amp;f=jpeg\u0026amp;s=12495\"\u003e\n\u003c/div\u003e\n\u003ch2 class=\"heading\"\u003e功能\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e轮播\u003c/li\u003e\n\u003cli\u003e搜索\u003c/li\u003e\n\u003cli\u003e列表\u003c/li\u003e\n\u003cli\u003e懒加载\u003c/li\u003e\n\u003cli\u003e简单动画\u003c/li\u003e\n\u003cli\u003eloading\u003c/li\u003e\n\u003cli\u003evue-router.ts\u003c/li\u003e\n\u003cli\u003evuex.ts\u003c/li\u003e\n\u003cli\u003evue-class-component使用\u003c/li\u003e\n\u003cli\u003evuex-class使用\u003c/li\u003e\n\u003cli\u003exxx.d.ts声明文件\u003c/li\u003e\n\u003cli\u003e基于类的编写方式\u003c/li\u003e\n\u003cli\u003emock数据\u003c/li\u003e\n\u003cli\u003etsconfig.json\u003c/li\u003e\n\u003cli\u003ewebpack配置\u003c/li\u003e\n\u003cli\u003e\u003cb\u003evue-typescript-cli\u003c/b\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e项目地址：\u003ca target=\"_blank\" href=\"https://github.com/SimonZhangITer/vue-typescript-dpapp-demo\"\u003ehttps://github.com/SimonZhangITer/vue-typescript-dpapp-demo\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e欢迎提建议，觉得不错的给个star~\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e完成后的简单例子\u003c/h2\u003e\n\u003cp\u003e基于类的写法加上静态类型检查，简直不能再嗨\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u0026lt;script lang=\"ts\"\u0026gt;\nimport Vue from \"vue\";\nimport Component from \"vue-class-component\";\nimport { State } from \"vuex-class\";\n\n@Component\nexport default class Shops extends Vue {\n  @State shops: StoreState.shop[];\n  @State searchVal: string;\n\n  get shopList(): StoreState.shop[] {\n    const shops = this.shops;\n    const searchVal = this.searchVal;\n    return shops.filter(\n      (el: StoreState.shop) =\u0026gt; el.shopName.indexOf(searchVal) \u0026gt; -1\n    );\n  }\n}\n\u0026lt;/script\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 class=\"heading\"\u003e为什么使用TypeScript\u003c/h1\u003e\n\u003ch3 class=\"heading\"\u003e1. JavaScript的超集\u003c/h3\u003e\n\u003cp\u003e支持所有原生JavaScript的语法\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e2. 强类型语言\u003c/h3\u003e\n\u003cp\u003e现在很多主流语言都是强类型的，而这点也一直是JavaScript所被人诟病的地方。使用TypeScript之后，将会在代码调试、重构等步骤节省很多时间。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e比如说：函数在返回值的时候可能经过复杂的操作，那我们如果想要知道这个值的结构就需要去仔细阅读这段代码。那如果有了TypeScript之后，直接就可以看到函数的返回值结构，将会非常的方便\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 class=\"heading\"\u003e3. 强大的IDE支持\u003c/h3\u003e\n\u003cp\u003e现在的主流编辑器如\u003ccode\u003eVSCode\u003c/code\u003e、\u003ccode\u003eWebStorm\u003c/code\u003e、\u003ccode\u003eAtom\u003c/code\u003e、\u003ccode\u003eSublime\u003c/code\u003e等都对TypeScript有着非常友好的支持，主要体现在智能提示上，非常的方便\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e4. 可运行于任何浏览器、计算机、操作系统\u003c/h3\u003e\n\u003cp\u003e强大的编译引擎\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e5. 迭代更新快\u003c/h3\u003e\n\u003cp\u003e不断更新，提供更加方便友好的Api\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e6. 微软和Google爸爸\u003c/h3\u003e\n\u003cp\u003eTypeScript是微软开发的语言，而Google的\u003ccode\u003eAngular\u003c/code\u003e使用的就是TypeScript，所以不用担心会停止维护，至少在近几年内TypeScript都会一门主流开发语言\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e7. npm下载量非常高\u003c/h3\u003e\n\u003cp\u003e截止2017.12.17, TypeScript在全球范围内的npm日均下载量在\u003ccode\u003e30w\u003c/code\u003e左右，这个数字将近是vue下载量的10倍，可见TypeScript还是非常受欢迎的\u003c/p\u003e\n\u003ch1 class=\"heading\"\u003eVue-TypeScript-Cli\u003c/h1\u003e\n\u003cp\u003e官方虽然明确提出对TypeScript的支持，但是并没有明确的配置文档，自己在配置的时候还是需要查阅很多资料以及踩很多坑的（这个过程真的很蓝瘦-_-）\u003c/p\u003e\n\u003cp\u003e但是现在可以不用踩这个坑啦，我基于官方的\u003ccode\u003evue-cli\u003c/code\u003e写了一个\u003ca target=\"_blank\" href=\"https://github.com/SimonZhangITer/vue-typescript-template\"\u003evue-typescript-cli\u003c/a\u003e，可以一键构建TypeScript模板\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e用法\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003evue init SimonZhangITer/vue-typescript-template \u0026lt;project-name\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e比如\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003evue init SimonZhangITer/vue-typescript-template my-project\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e然后配置好的TypeScript模板就下载到\u003ccode\u003e./my-project\u003c/code\u003e文件夹了，\u003ccode\u003enpm run dev\u003c/code\u003e即可运行\u003c/p\u003e\n\u003ch1 class=\"heading\"\u003eTypeScript配置\u003c/h1\u003e\n\u003cp\u003e这里记录一下当时的踩坑过程，所有配置已经在\u003ca target=\"_blank\" href=\"https://github.com/SimonZhangITer/vue-typescript-template\"\u003evue-typescript-template\u003c/a\u003e配置完毕\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e1. Webpack\u003c/h2\u003e\n\u003ch4 class=\"heading\"\u003e安装ts-loader\u003c/h4\u003e\n\u003cp\u003e首先需要安装\u003ccode\u003ets-loader\u003c/code\u003e，这是TypeScript为Webpack提供的编译器，类似于\u003ccode\u003ebabel-loader\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003enpm i ts-loader -D\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 class=\"heading\"\u003e配置rules\u003c/h4\u003e\n\u003cp\u003e接着在Webpack的\u003ccode\u003emodule.rules\u003c/code\u003e里面添加对ts的支持(我这里的webpack版本是2.x)：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e{\n    \u003cspan class=\"hljs-attr\"\u003etest\u003c/span\u003e: \u003cspan class=\"hljs-regexp\"\u003e/\\.vue$/\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003eloader\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'vue-loader'\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003eoptions\u003c/span\u003e: vueLoaderConfig\n},\n{\n    \u003cspan class=\"hljs-attr\"\u003etest\u003c/span\u003e: \u003cspan class=\"hljs-regexp\"\u003e/\\.ts$/\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003eloader\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'ts-loader'\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003eoptions\u003c/span\u003e: {\n      \u003cspan class=\"hljs-attr\"\u003eappendTsSuffixTo\u003c/span\u003e: [\u003cspan class=\"hljs-regexp\"\u003e/\\.vue$/\u003c/span\u003e],\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 class=\"heading\"\u003e配置extensions\u003c/h4\u003e\n\u003cp\u003e添加可识别文件后缀对ts的支持，如：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003eextensions: [\u003cspan class=\"hljs-string\"\u003e'.js'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'.vue'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'.json'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'.ts'\u003c/span\u003e]\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e2. tsconfig.json\u003c/h2\u003e\n\u003cp\u003e创建tsconfig.json文件，放在根目录下，和\u003ccode\u003epackage.json\u003c/code\u003e同级\u003c/p\u003e\n\u003cp\u003e配置内容主要也看个人需求，具体可以去typescript的官网查看，但是有一点需要注意：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e在Vue中，你需要引入 strict: true (或者至少 noImplicitThis: true，这是 strict 模式的一部分) 以利用组件方法中 this 的类型检查，否则它会始终被看作 any 类型。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e这里列出我的配置，功能在注释中给出\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e{\n  \u003cspan class=\"hljs-string\"\u003e\"include\"\u003c/span\u003e: [\n    \u003cspan class=\"hljs-string\"\u003e\"src/*\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-string\"\u003e\"src/**/*\"\u003c/span\u003e\n  ],\n  \u003cspan class=\"hljs-string\"\u003e\"exclude\"\u003c/span\u003e: [\n    \u003cspan class=\"hljs-string\"\u003e\"node_modules\"\u003c/span\u003e\n  ],\n  \u003cspan class=\"hljs-string\"\u003e\"compilerOptions\"\u003c/span\u003e: {\n    \u003cspan class=\"hljs-comment\"\u003e// types option has been previously configured\u003c/span\u003e\n    \u003cspan class=\"hljs-string\"\u003e\"types\"\u003c/span\u003e: [\n      \u003cspan class=\"hljs-comment\"\u003e// add node as an option\u003c/span\u003e\n      \u003cspan class=\"hljs-string\"\u003e\"node\"\u003c/span\u003e\n    ],\n    \u003cspan class=\"hljs-comment\"\u003e// typeRoots option has been previously configured\u003c/span\u003e\n    \u003cspan class=\"hljs-string\"\u003e\"typeRoots\"\u003c/span\u003e: [\n      \u003cspan class=\"hljs-comment\"\u003e// add path to @types\u003c/span\u003e\n      \u003cspan class=\"hljs-string\"\u003e\"node_modules/@types\"\u003c/span\u003e\n    ],\n    \u003cspan class=\"hljs-comment\"\u003e// 以严格模式解析\u003c/span\u003e\n    \u003cspan class=\"hljs-string\"\u003e\"strict\"\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n    \u003cspan class=\"hljs-comment\"\u003e// 在.tsx文件里支持JSX\u003c/span\u003e\n    \u003cspan class=\"hljs-string\"\u003e\"jsx\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"preserve\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-comment\"\u003e// 使用的JSX工厂函数\u003c/span\u003e\n    \u003cspan class=\"hljs-string\"\u003e\"jsxFactory\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"h\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-comment\"\u003e// 允许从没有设置默认导出的模块中默认导入\u003c/span\u003e\n    \u003cspan class=\"hljs-string\"\u003e\"allowSyntheticDefaultImports\"\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n    \u003cspan class=\"hljs-comment\"\u003e// 启用装饰器\u003c/span\u003e\n    \u003cspan class=\"hljs-string\"\u003e\"experimentalDecorators\"\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n    \u003cspan class=\"hljs-string\"\u003e\"strictFunctionTypes\"\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,\n    \u003cspan class=\"hljs-comment\"\u003e// 允许编译javascript文件\u003c/span\u003e\n    \u003cspan class=\"hljs-string\"\u003e\"allowJs\"\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n    \u003cspan class=\"hljs-comment\"\u003e// 采用的模块系统\u003c/span\u003e\n    \u003cspan class=\"hljs-string\"\u003e\"module\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"esnext\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-comment\"\u003e// 编译输出目标 ES 版本\u003c/span\u003e\n    \u003cspan class=\"hljs-string\"\u003e\"target\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"es5\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-comment\"\u003e// 如何处理模块\u003c/span\u003e\n    \u003cspan class=\"hljs-string\"\u003e\"moduleResolution\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"node\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-comment\"\u003e// 在表达式和声明上有隐含的any类型时报错\u003c/span\u003e\n    \u003cspan class=\"hljs-string\"\u003e\"noImplicitAny\"\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n    \u003cspan class=\"hljs-string\"\u003e\"lib\"\u003c/span\u003e: [\n      \u003cspan class=\"hljs-string\"\u003e\"dom\"\u003c/span\u003e,\n      \u003cspan class=\"hljs-string\"\u003e\"es5\"\u003c/span\u003e,\n      \u003cspan class=\"hljs-string\"\u003e\"es6\"\u003c/span\u003e,\n      \u003cspan class=\"hljs-string\"\u003e\"es7\"\u003c/span\u003e,\n      \u003cspan class=\"hljs-string\"\u003e\"es2015.promise\"\u003c/span\u003e\n    ],\n    \u003cspan class=\"hljs-string\"\u003e\"sourceMap\"\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n    \u003cspan class=\"hljs-string\"\u003e\"pretty\"\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e3. 修改main.js\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e把项目主文件\u003ccode\u003emain.js\u003c/code\u003e修改成\u003ccode\u003emain.ts\u003c/code\u003e，里面的写法基本不变，但是有一点需要注意：\n引入Vue文件的时候需要加上\u003ccode\u003e.vue\u003c/code\u003e后缀,否则编辑器识别不到\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e把webpack的entry文件也修改成\u003ccode\u003emain.ts\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 class=\"heading\"\u003e4. vue-shims.d.ts\u003c/h2\u003e\n\u003cp\u003eTypeScript并不支持Vue文件，所以需要告诉TypeScript\u003ccode\u003e*.vue\u003c/code\u003e文件交给vue编辑器来处理。解决方案就是在创建一个vue-shims.d.ts文件，建议放在src目录下再创建一个\u003ccode\u003etypings\u003c/code\u003e文件夹，把这个声明文件放进去，如：\u003ccode\u003esrc/typings/vue-shims.d.ts\u003c/code\u003e，文件内容：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ccode\u003e*.d.ts\u003c/code\u003e类型文件不需要手动引入，TypeScript会自动加载\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003edeclare \u003cspan class=\"hljs-built_in\"\u003emodule\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'*.vue'\u003c/span\u003e {\n  \u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e Vue \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'vue'\u003c/span\u003e\n  \u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e Vue\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e到这里TypeScript在Vue中配置就完成了，可以愉快的撸代码了~\u003c/p\u003e\n\u003ch1 class=\"heading\"\u003e第三方插件库\u003c/h1\u003e\n\u003cp\u003e现在Vue官方已经明确提出支持TypeScript，并考虑出一个对应的\u003ccode\u003evue-cli\u003c/code\u003e，在这之前，Vue开发团队已经开发出了一些插件库来支持TypeScript，这里简单和大家介绍一下。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003eVue-Class-Component\u003c/h3\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://github.com/vuejs/vue-class-component\"\u003evue-class-component\u003c/a\u003e是官方维护的TypeScript装饰器，写法比较扁平化。Vue对其做到完美兼容，如果你在声明组件时更喜欢基于类的 API，这个库一定不要错过\u003c/p\u003e\n\u003cp\u003eps：用了这个装饰器之后写方法不需要额外加逗号，贼嗨~~~\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e Vue \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"vue\"\u003c/span\u003e;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e Component \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"vue-class-component\"\u003c/span\u003e;\n\n@Component\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eApp\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eVue\u003c/span\u003e \u003c/span\u003e{\n  name:string = \u003cspan class=\"hljs-string\"\u003e'Simon Zhang'\u003c/span\u003e\n\n  \u003cspan class=\"hljs-comment\"\u003e// computed\u003c/span\u003e\n  get MyName():string {\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e`My name is \u003cspan class=\"hljs-subst\"\u003e${\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.name}\u003c/span\u003e`\u003c/span\u003e\n  }\n\n  \u003cspan class=\"hljs-comment\"\u003e// methods\u003c/span\u003e\n  sayHello():\u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e {\n    alert(\u003cspan class=\"hljs-string\"\u003e`Hello \u003cspan class=\"hljs-subst\"\u003e${\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.name}\u003c/span\u003e`\u003c/span\u003e)\n  }\n\n  mounted() {\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.sayHello();\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这个代码如果用原生Vue语法来写的话就是这样：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e {\n  data () {\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e {\n      \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Simon Zhang'\u003c/span\u003e\n    }\n  },\n\n  mounted () {\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.sayHello()\n  },\n\n  \u003cspan class=\"hljs-attr\"\u003ecomputed\u003c/span\u003e: {\n    MyName() {\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e`My name is \u003cspan class=\"hljs-subst\"\u003e${\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.name}\u003c/span\u003e`\u003c/span\u003e\n    }\n  },\n\n  \u003cspan class=\"hljs-attr\"\u003emethods\u003c/span\u003e: {\n    sayHello() {\n      alert(\u003cspan class=\"hljs-string\"\u003e`Hello \u003cspan class=\"hljs-subst\"\u003e${\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.name}\u003c/span\u003e`\u003c/span\u003e)\n    },\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003eVuex-Class\u003c/h3\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://github.com/ktsn/vuex-class\"\u003evuex-class\u003c/a\u003e是基于基于\u003ccode\u003evue-class-component\u003c/code\u003e对Vuex提供的装饰器。它的作者同时也是\u003ccode\u003evue-class-component\u003c/code\u003e的主要贡献者，质量还是有保证的。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e Vue \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"vue\"\u003c/span\u003e;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e Component \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"vue-class-component\"\u003c/span\u003e;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { State, Action, Getter } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"vuex-class\"\u003c/span\u003e;\n\n@Component\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eApp\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eVue\u003c/span\u003e \u003c/span\u003e{\n  name:string = \u003cspan class=\"hljs-string\"\u003e'Simon Zhang'\u003c/span\u003e\n  @State login: boolean;\n  @Action initAjax: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e =\u0026gt;\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e;\n  @Getter load: boolean;\n\n  get isLogin(): boolean {\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.login;\n  }\n\n  mounted() {\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.initAjax();\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e上面的代码就相当于：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e {\n  data() {\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e {\n      \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Simon Zhang'\u003c/span\u003e\n    }\n  },\n\n  mounted() {\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.initAjax()\n  },\n\n  \u003cspan class=\"hljs-attr\"\u003ecomputed\u003c/span\u003e: {\n    login() {\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.$store.state.login\n    },\n    load() {\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.$store.getters.load\n    }\n  },\n\n  \u003cspan class=\"hljs-attr\"\u003emethods\u003c/span\u003e: {\n    initAjax() {\n      \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.$store.dispatch(\u003cspan class=\"hljs-string\"\u003e'initAjax'\u003c/span\u003e)\n    }\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003eVue-Property-Decorator\u003c/h3\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://github.com/kaorun343/vue-property-decorator\"\u003evue-property-decorator\u003c/a\u003e 是在 vue-class-component 上增强了更多的结合 Vue 特性的装饰器，新增了这 7 个装饰器\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e@Emit\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@Inject\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@Model\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@Prop\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@Provide\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@Watch\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@Component\u003c/code\u003e (从 vue-class-component 继承)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 class=\"heading\"\u003e坑\u003c/h1\u003e\n\u003ch3 class=\"heading\"\u003e引入部分第三方库的时候需要额外声明文件\u003c/h3\u003e\n\u003cp\u003e比如说我想引入\u003ccode\u003evue-lazyload\u003c/code\u003e,虽然已经在本地安装，但是typescript还是提示找不到模块。原因是typescript是从\u003ccode\u003enode_modules/@types\u003c/code\u003e目录下去找模块声明，有些库并没有提供typescript的声明文件，所以就需要自己去添加\u003c/p\u003e\n\u003cp\u003e解决办法：在\u003ccode\u003esrc/typings\u003c/code\u003e目前下建一个\u003ccode\u003etools.d.ts\u003c/code\u003e文件，声明这个模块即可\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003edeclare \u003cspan class=\"hljs-built_in\"\u003emodule\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'vue-awesome-swiper'\u003c/span\u003e {\n  \u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e swiper: any\n  \u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e swiperSlide: any\n}\n\ndeclare \u003cspan class=\"hljs-built_in\"\u003emodule\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'vue-lazyload'\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e对vuex的支持不是很好\u003c/h3\u003e\n\u003cp\u003e在TypeScript里面使用不了mapState、mapGetters等方法，只能一个变量一个变量的去引用，这个要麻烦不少。不过使用\u003ccode\u003evuex-class\u003c/code\u003e库之后，写法上也还算简洁美观\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003emodules\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eVue\u003c/span\u003e \u003c/span\u003e{\n  @State login: boolean; \u003cspan class=\"hljs-comment\"\u003e// 对应this.$store.state.login\u003c/span\u003e\n  @State headline: StoreState.headline[]; \u003cspan class=\"hljs-comment\"\u003e// 对应this.$store.state.headline\u003c/span\u003e\n\n  private swiperOption: \u003cspan class=\"hljs-built_in\"\u003eObject\u003c/span\u003e = {\n    \u003cspan class=\"hljs-attr\"\u003eautoplay\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003eloop\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003edirection\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"vertical\"\u003c/span\u003e\n  };\n\n  logoClick(): \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e {\n    alert(\u003cspan class=\"hljs-string\"\u003e\"点我干嘛\"\u003c/span\u003e);\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 class=\"heading\"\u003e项目截图\u003c/h1\u003e\n\u003cdiv align=\"center\"\u003e\n    \u003cimg width=\"266\" src=\"https://user-gold-cdn.xitu.io/2017/12/19/1606cbfbc7479390?w=746\u0026amp;h=1328\u0026amp;f=png\u0026amp;s=102179\"\u003e\n    \u003cimg width=\"266\" src=\"https://user-gold-cdn.xitu.io/2017/12/19/1606cbfbcc83c25c?w=742\u0026amp;h=1326\u0026amp;f=png\u0026amp;s=473135\"\u003e\n    \u003cimg width=\"266\" src=\"https://user-gold-cdn.xitu.io/2017/12/19/1606cbfbcc4586fc?w=740\u0026amp;h=1320\u0026amp;f=jpeg\u0026amp;s=290167\"\u003e\n\u003c/div\u003e\n\u003ch1 class=\"heading\"\u003e总结\u003c/h1\u003e\n\u003cp\u003eTypeScript还是非常值得学习和使用一个语言，还是有很多优点的\u003c/p\u003e\n\u003cp\u003e欢迎大家对我的项目提建议，觉得不错的给个Star~\u003c/p\u003e\n\u003cp\u003e项目地址：\u003ca target=\"_blank\" href=\"https://github.com/SimonZhangITer/vue-typescript-dpapp-demo\"\u003ehttps://github.com/SimonZhangITer/vue-typescript-dpapp-demo\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eQQ交流群：323743292\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003eBuild Setup\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-comment\"\u003e# 安装依赖\u003c/span\u003e\nnpm install\n\n\u003cspan class=\"hljs-comment\"\u003e# 启动项目\u003c/span\u003e\nnpm run dev\n\n\u003cspan class=\"hljs-comment\"\u003e# 打包项目\u003c/span\u003e\nnpm run build\n\u003c/code\u003e\u003c/pre\u003e","buildTime":"1514377685.1389","__v":0}
{"_id":{"$oid":"5a439bc674ee951f2c48c01a"},"id":"5a0b29756fb9a045167cb643","author":{"$oid":"5a439bc574ee951f2c48c001"},"title":"别再拿奇技淫巧搬砖了","meta":{"likeCount":0},"tag":["设计模式","前端","程序员","API"],"comment":[],"content":"\u003cp\u003e在技术社区中，经常会看见一些博客鼓吹编程语言的各种【高级特性】与【进阶模式】，并且给出一些使用这些特性的【优雅】代码。那么学习和使用这些东西是好是坏，有何利弊呢？本文旨在帮助你给出自己的判断。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e技巧的小聪明与大智慧\u003c/h2\u003e\u003cp\u003e有不少人以使用语言、框架的冷门特性为荣，通过使用各种生僻的 API 来展示自己对框架的熟悉，进而认为自己的编程能力和技术水平比起编写朴素逻辑的同学要高。这个观点合理吗？下面，我们用几个例子来给出一个推论：\u003c/p\u003e\n\u003cp\u003e首先，在招聘开发同学时，有一个很有趣的现象，即对于越高层级的应聘者，对具体编码技巧的考察越少，而对架构能力、业务理解、工程素质的考察越多。请注意，对架构、业务与工程的理解绝非通用性的沟通、管理等【软素质】，而是作为工程师实打实的专业能力。\u003c/p\u003e\n\u003cp\u003e另一方面，在技术社区中最火热的内容，往往是各种框架、类库的【入门指南】。从各种爆款的【XXX 从入门到精通】到【手把手教你学 XXX】，最热门的内容的仍然是这些 API 怎么调、模式怎么套一类的技巧性知识。\u003c/p\u003e\n\u003cp\u003e综合这些现象以及一些常识，我们可以得到下面这三个条件：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e越高级的程序员，技巧性知识在能力树内的比重越小。\u003c/li\u003e\n\u003cli\u003e高级程序员的比重远小于初级程序员。\u003c/li\u003e\n\u003cli\u003e程序员社区中的多数，最关注的恰好是技巧性知识。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e根据这几个条件，我们可以给出一个不严谨的推论：\u003cstrong\u003e最关注并醉心于编程技巧的，很可能恰恰是广大处于初级水平的程序员。\u003c/strong\u003e这样一来，炫耀技巧的行为也就不能表明技术水平的高超了。\u003c/p\u003e\n\u003cp\u003e需要澄清的是，这里我们\u003cstrong\u003e绝对不是认为编程技巧不重要\u003c/strong\u003e。相反，高级程序员对技巧的熟悉显然远超初级同学，而许多技巧性的代码更能够在数量级上优化并解决问题。那么我们该怎么评价这样的代码呢？\u003c/p\u003e\n\u003cp\u003e会运用各种高级特性的同学，毫无疑问是【聪明】的。但在什么场合使用、怎样使用，则需要所谓【智慧】的判断。这就好像 Facebook 和 Google 的代码规范里时常出现的这句话：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eUse your best judgement.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e虽然好听，但这其实一个非常形而上的概念。下面我们会做一些更具体化的讨论，抽离出一些常见的奇技淫巧。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e常见的奇技淫巧\u003c/h2\u003e\u003cblockquote\u003e\n\u003cp\u003e幸福的家庭都是相似的，不幸的家庭各有各的不幸。\u003c/p\u003e\n\u003cp\u003e——托尔斯泰\u003c/p\u003e\n\u003cp\u003e好的代码都是相似的，烂的代码各有各的烂。\u003c/p\u003e\n\u003cp\u003e\u003cdel\u003e——鲁迅\u003c/del\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e如果我们用【奇技淫巧】来评价某段代码，那么这段代码的质量多半好不到哪里去。对于使用了各种技巧的代码，我们也能够找到不少【把技巧运用得很糟糕】的场景，来指明它们各自的问题所在。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e使用危险语义\u003c/h3\u003e\u003cp\u003e不少人在读了些【XX 高级程序设计】之类的书以后，会为了炫耀自己对【高级特性】的理解，而将它们运用到实际项目中。在前端范畴内，这些行为包括但不限于：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e学会 \u003ccode\u003e==\u003c/code\u003e 和 \u003ccode\u003e===\u003c/code\u003e 的区别后，在不同场合使用不同的符号实现判断逻辑。\u003c/li\u003e\n\u003cli\u003e学会 \u003ccode\u003e变量提升\u003c/code\u003e 的行为后，使用它来实现特殊的代码执行顺序。\u003c/li\u003e\n\u003cli\u003e学会 \u003ccode\u003eprototype\u003c/code\u003e 和 \u003ccode\u003econstructor\u003c/code\u003e 后，使用它们实现各种继承关系。\u003c/li\u003e\n\u003cli\u003e学会 \u003ccode\u003ethis\u003c/code\u003e 的各种指向规则后，使用特殊的规则来绑定上下文。\u003c/li\u003e\n\u003cli\u003e……\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e使用这些特性的代码当然能够运行，但这里的问题在于这些语义都是危险的，或是语言的设计问题造成的糟粕。\u003cstrong\u003e在明知它们难以使用，并且早有成熟替代方案的情况下，为什么要使用它们来显示自己的技术水平呢？\u003c/strong\u003e偏偏在前端社区，这样的行为又是此起彼伏。比如，光是搞懂各种 \u003ccode\u003ethis\u003c/code\u003e 的指向规则，就足够写一篇长文（在许多技术社区这早已经是日经的无聊文章了）。而 \u003ccode\u003e==\u003c/code\u003e 这种罄竹难书的特性，居然也有很多人在读了博客【深入掌握】后拿来【合理使用】。至于 \u003ccode\u003e变量提升\u003c/code\u003e 这样完全反直觉的设计缺陷，都有的是人拿来编排出各种花哨的面试题。\u003c/p\u003e\n\u003cp\u003e当然，这里绝不是反对去了解这些所谓的【高级特性】如何工作，以及它们为什么会产生令人困惑的行为。对每一位希望成长的靠谱同学，学习它们都是很重要的。这里给出的建议是：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e至少学懂它们一次，达到\u003cstrong\u003e能够指出它的问题在哪\u003c/strong\u003e的程度。\u003c/li\u003e\n\u003cli\u003e学会这些特性的替代方案，知道如何避免踩坑。\u003c/li\u003e\n\u003cli\u003e除非维护底层基础库，否则坚决不在代码中使用它们。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e每一门编程语言，在自己的发展过程中都难免留下遗留的问题。对于 JS 这种一个周末诞生，前向兼容要求又非常之高的语言来说，这个问题更是严重。但随着软件工程的发展，这些设计缺陷带来的危险语义已经慢慢淡出历史，而在现在，深入学习、掌握和使用它们，和深入 IE6 兼容性问题一样已经逐渐过时了。而如果有人用这些问题来刁难你，你大可以这么怼回去：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e对，我知道 \u003ccode\u003ethis\u003c/code\u003e 有四种绑定方式，我还知道回字有四种写法呢。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 class=\"heading\"\u003e套用设计模式\u003c/h3\u003e\u003cblockquote\u003e\n\u003cp\u003e总的来说，如果光从字面上讲，程序里确实是有一些“模式”可以发掘的。因为你总是可以借鉴以前的经验，用来构造新的程序。你可以把这种经验叫做“模式”。可是自从《设计模式》（通常叫做 GoF，“Gang of Four”，“四人帮”）这本书在 1994 年发表以来，“设计模式”这个词有了新的，扭曲的含义。它变成了一种教条，带来了公司里程序的严重复杂化以及效率低下。\u003c/p\u003e\n\u003cp\u003e——\u003ca href=\"http://www.yinwang.org/blog-cn/2013/03/07/design-patterns\"\u003e《解密 “设计模式”》\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e设计模式也是一个非常泛滥的技术文章主题。比如，有不少文章将《设计模式》里十几种模式都搬到了 JS 上，再用上面提到的各种【高级特性】来模拟这个、实现那个，最后升华一句说这些模式都是【优秀的程序员必须掌握】的，这样在简历上加一行【掌握各种设计模式】简直逼格满满啊！\u003c/p\u003e\n\u003cp\u003e设计模式的产生初衷，是为了补充 Java 这样的静态语言的不足。许多【经典】设计模式，在编程语言的演化中，早已成为语言机制的一部分。比如，\u003ccode\u003eexport\u003c/code\u003e 内建了对单例模式的支持、将内容用 \u003ccode\u003efunction\u003c/code\u003e 包装一层就是工厂模式、\u003ccode\u003eyield\u003c/code\u003e 也实现了迭代器模式等等。再比如，JS 的动态性使得 JSON 的灵活性大大超越了反射，而函数一等公民的设计也使得 JS 的回调函数比 Java 的回调接口或 Visitor 等模式灵活得多。\u003cstrong\u003e\u003cdel\u003e既然你已经有了更高级的飞机杯，为什么还要学习如何优雅地撸管呢？\u003c/del\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e许多鼓吹设计模式的文章，其流毒并不在于它们人为制造了不必要的复杂度，而是造成了一种【不用 XX 模式就说明你的水平不行】的错觉。至少，在个人阅读过的优秀开源项目源码中，并没有发现生搬硬套模式的地方，而是描述清楚代码要解决的问题，而后给出易读的抽象即可。你当然可以事后总结出它们实现了某些模式，但我更愿意相信作者不是按照【这里要使用 XX 模式】的思维方式来编码的。然而，对许多缺乏鉴别能力的新手同学，如果没有阅读高质量代码的经验，在公司历史项目老代码的【熏陶】下，也可能走上套模式的八股之路。私以为这是很可惜的。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e紧缩代码行数\u003c/h3\u003e\u003cp\u003e我们都知道，复制粘贴得到的冗长重复代码是糟糕的。但是，复制粘贴多数发生在工期紧张，来不及优化的场景下。按照天朝同学们的工作强度，这也是可以理解的。但与之相对地，是另一种矫枉过正的行为，即为了实现代码的【最简】，用各种匪夷所思的手段去【精简】代码。\u003c/p\u003e\n\u003cp\u003e比如，刚刚入门函数式编程的同学，可能会对 \u003ccode\u003ea(b(c(d, e(f, g))))\u003c/code\u003e 这样的代码情有独钟，认为通过深度嵌套的函数，能够大大减少中间变量，进而节约代码量；再比如，一些同学喜欢把各种判断逻辑用逻辑运算符连接起来，一鼓作气地串成 \u003ccode\u003ea || b \u0026amp;\u0026amp; c \u0026amp;\u0026amp; d\u003c/code\u003e 这样的判断逻辑在一行中写完；还有，对于工具函数，也很常见参数越写越多，然后【一口气一行传完所有参数】的情形。\u003c/p\u003e\n\u003cp\u003e我们不妨再考虑一下，这样的代码可读性真的更高吗？深层嵌套的函数调用会带来大量形如 \u003ccode\u003e))))))\u003c/code\u003e 的右括号，这在 Lisp 中被诟病已久；单行的判断逻辑不利于调试；传入大量参数的函数行为往往趋于复杂而不易调试（想想高考时区区 \u003ccode\u003ef(x, y)\u003c/code\u003e 就能玩出多少花样，\u003ccode\u003ef(a, b, c, d, e)\u003c/code\u003e 的变量排列组合起来可以有多么复杂）。\u003c/p\u003e\n\u003cp\u003e这些编码实践其实都很容易无痛地替换为可读性更强的形式，也并非什么大问题。不过，\u003cstrong\u003e刻意去制造这样的代码\u003c/strong\u003e多少就会和后面的维护者过意不去了。对于具体的换行、缩进实践，用形如 \u003ca href=\"https://standardjs.com\"\u003eJavaScript Standard Style\u003c/a\u003e 这样的工具就能够自动化地处理掉绝大多数的情形了。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e隐式改写常识\u003c/h3\u003e\u003cblockquote\u003e\n\u003cp\u003eExplicit is better than implicit.\u003c/p\u003e\n\u003cp\u003e——\u003ca href=\"http://legacy.python.org/dev/peps/pep-0020/\"\u003e《The Zen of Python》\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e现代的工程框架一般都提供了许多定制用的接口，开发者可以轻松地通过这些接口改写框架的行为。比如，React 开放了 context，Redux 和 MobX 一类的库利用这个接口，大大优化了 \u003ccode\u003eprops\u003c/code\u003e 深度传递的体验。不过，对框架有许多约定俗成的隐式【共识】，在一般的业务代码中被不合理地定制时，就会造成很大的困扰了。这类改写通常发生在不起眼的地方，但其影响范围往往反而很大。\u003c/p\u003e\n\u003cp\u003e比如，在我们维护过的某个项目中，出现过一种将 \u003ccode\u003eReact.Component\u003c/code\u003e 基础类【巧妙地】改写，替换为自己的 \u003ccode\u003eXXX.BaseComponent\u003c/code\u003e 的行为。定制后的组件并没有什么和业务逻辑相关的改动，而是加入了一些莫名其妙的初始化代码。这样一来，原本对 React 组件基类隐式的【通用常识】就失效了。在维护时，替换后的组件初看之下并没有什么特别之处，但一旦替换回去就会造成问题。并且，这些黑科技代码既没有注释也没有文档，更不知道加入它们的初衷是为了解决什么问题。对于这样的编码实践，恐怕除了\u003cstrong\u003e自作聪明\u003c/strong\u003e以外也没有什么更合理的评价了。\u003c/p\u003e\n\u003cp\u003e再比如，这个项目里有另一种【巧妙的】实践，会将 \u003ccode\u003ewindow.fetch\u003c/code\u003e 根据请求的路径，替换为三四种不同的定制版本（放心吧，不会告诉你为什么要这么做的！）。这样，在维护者编写新的 \u003ccode\u003efetch\u003c/code\u003e 的时候，就不能够运用任何之前对 \u003ccode\u003efetch\u003c/code\u003e 隐式的已有知识，而是必须追踪到前人的定制版本里去调试了，是不是很神奇呢？\u003c/p\u003e\n\u003cp\u003e还有一些隐式的实践，其问题在于【副作用】。比如，在看到一句 \u003ccode\u003euser = getUser(id)\u003c/code\u003e 的时候，你恐怕不会希望这个 \u003ccode\u003egetUser\u003c/code\u003e 函数不光帮你查询了用户，还默默地帮你弹了个提示、发了个请求、再清空了当前数据吧？当然，在前端领域内，其本身的一部分复杂度就在于对大量 UI、网络等副作用的管理。不过如果调用一个函数会造成许多【牵一发而动全身】的结果，许多维护者可能会选择弃用重写，从而造成复杂度的进一步增加。\u003c/p\u003e\n\u003cp\u003e当然，相信有不少厂商还是会非常喜欢带隐式副作用的代码的。比如，\u003cstrong\u003e隐式安装全家桶的 360\u003c/strong\u003e。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e重复发明轮子\u003c/h3\u003e\u003cp\u003e在技术社区也经常能看到形如【最全常用前端工具函数】的合集，并且它们的点赞数量往往也很高。不过，500 合一的小霸王游戏卡，真的比超级玛丽好玩吗？\u003c/p\u003e\n\u003cp\u003e作者有幸拜读过一些这样的文章，发现这些打包赠送的函数，常常甚至连固定的主题都没有：左一个 \u003ccode\u003egetCookie\u003c/code\u003e，右一个 \u003ccode\u003edeepClone\u003c/code\u003e，上一个 \u003ccode\u003eisEmail\u003c/code\u003e，下一个 \u003ccode\u003escrollTop\u003c/code\u003e。而其中的每个实现，都只有区区几行【把英文函数名翻译成中文】级别的注释，没有测试用例、依赖配置和文档说明，美其名曰【小而美】。\u003c/p\u003e\n\u003cp\u003e这样的代码值得复制到你的项目中复用吗？不客气地说，它们只是满足【我会造轮子】性冲动的产物而已。个人当然充分相信作者有能力随手写出一个优雅的深拷贝，但项目不是面试，对于一个稳定可信赖的轮子，在简单实现之外，更需要不少与代码无关的内容。按照《人月神话》的经验，软件项目中实际编码的时间只占 1/6，而剩余的时间更需要测试、文档、沟通。对于对质量要求更高的库代码，信手编写或从网上复制粘贴（哦不，说好听点叫内联）的代码真的堪用吗？\u003c/p\u003e\n\u003cp\u003e在正式的项目中使用类库时，稳定的已有依赖若能满足要求，那么显然是第一选择。如果遇上了需要自己动手造轮子的地方，那就尽心把代码之外，一个靠谱项目剩下的 5/6 也做好吧，不要去重复发明质量低劣的轮子。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e追求高阶抽象\u003c/h3\u003e\u003cp\u003e最后这一点恐怕比较小众，因为对不少只靠复制粘贴就能够实现需求的人而言，这显然和他们的习惯是相违背的。不过，正因为如此，它才是一种更加进阶的【奇技淫巧】。\u003c/p\u003e\n\u003cp\u003e【高阶】听起来就是个纯净的圣杯。【高阶函数】和【高阶组件】看上去更是【高端程序员】的绝配。不过，如果需要维护这样的高阶函数，你会怎么想呢？\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"JavaScript\"\u003e() =\u0026gt; \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e =\u0026gt;\u003c/span\u003e () =\u0026gt; \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e =\u0026gt;\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e123\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e一个 \u003ccode\u003e返回返回返回返回 123 的函数的函数的函数的函数\u003c/code\u003e，确实很高阶，但真的不会把你绕晕吗…\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e总结\u003c/h2\u003e\u003cp\u003e不少同学如果一路读完（忍受）到了这里，可能会吐槽【这些技巧在复杂啊高级啊什么的场景下很重要啊 blahblah】，故而在最后澄清几点：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e对于多数影响维护性的技巧，在日常编写的业务逻辑里不仅不需出现，还应尽量避免。尤其对于【这里刚好能用上昨天学的那个 API】这类的动机，更需要三思。\u003c/li\u003e\n\u003cli\u003e在正经的大型开源项目中，不可避免地存在不少技巧性 Hack。这时候你很可能会发现相应的地方会有不少注释不厌其烦地告诉你为什么这么写，这是\u003cstrong\u003e非常\u003c/strong\u003e值得借鉴学习的。\u003c/li\u003e\n\u003cli\u003e这里并不是反对去掌握高阶的编程技巧，而是希望不要将一些【自作聪明】的代码草率地引入正式项目中，给后面的维护带来不便。\u003c/li\u003e\n\u003cli\u003e如果希望抛开业务项目的沉重包袱，去学习一下如何【正确地运用奇技淫巧】，参与开源项目或许是一条捷径。对于这一点，希望本文的前作 \u003ca href=\"https://juejin.im/post/59f98a196fb9a045132a03ed\"\u003e零起点的开源社区贡献指南\u003c/a\u003e 能够有所帮助。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e最后对于可能的质疑，作者个人的 \u003ca href=\"https://github.com/doodlewind\"\u003eGithub\u003c/a\u003e 里有些简单的玩具轮子，吐槽请不要客气…😅\u003c/p\u003e\n","buildTime":"1514378033.1362","__v":0}
{"_id":{"$oid":"5a439bc674ee951f2c48c01b"},"id":"5a37075051882527a13d9418","author":{"$oid":"5a439bc574ee951f2c48c001"},"title":"从时间旅行的乌托邦，看状态管理的设计误区","meta":{"likeCount":0},"tag":["React.js","Redux","RxJS","MobX"],"comment":[],"content":"\u003cp\u003eRedux 的状态管理理念非常优雅，随之附带的时间旅行调试支持也非常酷炫。但这个特性是否是传说中的银弹，又会给使用者带来什么额外的负担呢？让我们重新思考一下吧。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e什么是时间旅行？\u003c/h2\u003e\n\u003cp\u003e在 2015 年的 React Europe 会议上，Dan Abramov 展示了通过 Redux DevTools 让开发者在历史状态中自由穿梭，从而提升调试体验的 \u003ca target=\"_blank\" href=\"https://www.youtube.com/watch?v=xsSnOQynTHs\"\u003eDemo\u003c/a\u003e，这个工具的使用体验非常惊艳，也取得了非常好的反响。在此之后，Vuex 与 MobX 等状态管理库也陆续在它们的调试工具中引入了对类似功能的支持。\u003c/p\u003e\n\u003cp\u003e我们可以认为，前端状态管理领域中，狭义的『时间旅行』概念是在满足了下面这几个前提后，开发时在历史状态中任意回溯的功能：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e将局部 state 统一到全局 store 中做状态管理。\u003c/li\u003e\n\u003cli\u003e开发环境中安装了与状态管理库配套的 DevTools，或引入了特殊的监控组件。\u003c/li\u003e\n\u003cli\u003e开发环境中启用了 Webpack 的 HMR 热加载。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e需要特别注意的是，这个功能完全是\u003cstrong\u003e调试时\u003c/strong\u003e使用的。不过，由于这个能力给人的印象过于深刻，它也成为了许多人转向 React + Redux 技术栈的主要理由之一：漂亮的概念模型加上漂亮的调试体验，这套方案简直就是神器啊！而正如 React 第一个在浏览器里实现了声明式渲染一样，Redux 也第一个在浏览器里实现了理想中的调试体验，这些原创性的工作对前端领域的贡献是非常大的。在下文中，我们对 React + Redux 一些潜在问题的分析，也是建立在尊重社区工作的基础上的。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e为什么你不需要时间旅行？\u003c/h2\u003e\n\u003cp\u003e在刚刚结束的 D2 上，笔者虽然没有看到完全颠覆性的新轮子，但对于不少开放性的问题获得了全新的答案。这其中的一个问题帮助笔者重新梳理了对前端的理解，并构成了本节最主要的论据。\u003cstrong\u003e这个问题是：前端的复杂应用该如何分类？\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e传统上，我们会将功能作为区分应用类别的维度。比如：管理后台、活动 H5、聊天 IM、电商购物、视频直播……我们有非常多细分领域，每个领域都有不同的业务痛点和侧重点，这样看来要想一通百通地『打通任督二脉』是很困难的。但有没有更简单的划分方式呢？这里，我们有了一个更简单的答案，即将复杂的前端应用简单地分为两类：\u003cstrong\u003e数据驱动\u003c/strong\u003e和\u003cstrong\u003e事件驱动\u003c/strong\u003e。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e数据驱动的前端应用\u003c/h3\u003e\n\u003cp\u003e这类应用的业务复杂度完全来自于\u003cstrong\u003e后台无穷无尽的数据和复杂业务流程\u003c/strong\u003e。比如，一个购物网站的浏览页并没有太多的输入需要处理，但来自后端接口的商品数据可以是千人千面的；再比如 12306 的订票平台，虽然它的前端界面显得简陋，但整个业务流程的复杂度可能不是一个普通用户甚至开发者所能想象的。概况地说，这类最多让用户填几个表单和验证码的应用，业务逻辑里的坑有多深常常只有摸过的同学才懂。这些应用都可以理解为是\u003cstrong\u003e数据驱动\u003c/strong\u003e的。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e事件驱动的前端应用\u003c/h3\u003e\n\u003cp\u003e相比之下，事件驱动的前端应用，其复杂度则来自于\u003cstrong\u003e用户的输入事件\u003c/strong\u003e。比如，一个富文本编辑器在编辑时就算完全不对接后台接口，光是处理用户的粘贴、选中和键盘等事件，就可以成为传说中的『天坑』；再比如一个 H5 版的《太鼓达人》游戏只需要从后端拉取静态的音乐资源，但用户点击的节奏只要差上几十毫秒，界面的状态和最后的结果都可能完全不同。构建这类应用的时候，其难点主要来自于在大量不同类型的异步事件可以任意地排列组合，使得可能的状态空间极度膨胀而容易出错——相信只要在页面中同时维护过几个定时器的同学都能理解。我们可以把这样的应用归类为\u003cstrong\u003e事件驱动\u003c/strong\u003e的。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e时间旅行与应用分类\u003c/h3\u003e\n\u003cp\u003e时间旅行的概念，和上面提及的两种应用分类有什么关系呢？这牵扯到很多技术选型中决定使用 Redux 的动机：\u003cstrong\u003eRedux 开发工具能支持时间旅行，所以我们的应用在遇到类似需要回溯状态的场景时，上 Redux 的风险更小。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e这听起来确实充分考虑了后期的拓展性，但它的问题在哪呢？一旦我们重新考虑了对应用的分类维度，那么对时间旅行的能力就会出现\u003cstrong\u003e截然不同的需求\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e数据驱动的前端应用，\u003cstrong\u003e几乎完全不需要时间旅行的能力\u003c/strong\u003e。由于来自后端的数据才是实质上的 Single Source of Truth，在前端基于状态管理工具的回溯操作非常容易破坏这种对数据源的依赖，导致前后端的状态不一致。一个非常简单的例子是：如果某管理后台应用的表单页支持了时间旅行，那么对表单提交事件的『旅行』重放显然会带来重复的 POST 请求，而这并不是一个\u003cstrong\u003e幂等\u003c/strong\u003e的操作，这时前端的时间旅行甚至会违背 RESTful 的理念。\u003c/li\u003e\n\u003cli\u003e事件驱动的前端应用，\u003cstrong\u003e非常重度依赖时间旅行类的技术\u003c/strong\u003e。市面上几乎所有的靠谱富文本编辑器，都维护了自己的一套撤销栈——这就是时间旅行的核心功能！再比如，游戏的进度保存、读取功能也是典型的时间旅行功能。对这类应用，时间旅行甚至是影响体验的核心因素之一：一个撤销后内容格式会出莫名其妙问题的富文本编辑器，对用户还有什么信赖感可言呢？至于一个读取不了之前进度的游戏就更不用说了。甚至，只要撤销功能实现得好，用户在遇上预期外行为乃至编辑器 bug 的时候，也能自己撤销回去，然后尝试其它的交互方式来达成目标——时间旅行是用户体验最后的守卫者！\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e从上面的讨论中我们可以发现，只有对于\u003cstrong\u003e事件驱动\u003c/strong\u003e的前端应用，时间旅行的功能才有意义（并且还是极其重大的意义！）。而对于管理后台等\u003cstrong\u003e数据驱动\u003c/strong\u003e的前端应用，时间旅行只是可有可无的锦上添花罢了——这个业务场景下，把时间旅行作为选择 Redux 的重大理由，实在有些牵强。\u003c/p\u003e\n\u003cp\u003e相信很多同学看到这里会 argue 说，在管理后台业务中使用 Redux 是有很多成功案例的，难道你认为他们的架构师都是错的吗？并且，Redux 除了时间旅行外还有很多额外的好处，这些东西在决策时都比时间旅行重要得多呀！诚然，Redux 的流行程度已经证明它能够支撑『大规模』的前端应用，但框架的设计一定是伴随着 trade-off 的。 \u003cstrong\u003e在一个不需要时间旅行的业务场景下，Redux 中为了实现时间旅行而引入的一些框架设计就会带来额外的问题。\u003c/strong\u003e 因此下面我们要探讨的问题就是：Redux 为了率先实现时间旅行的特性，牺牲了哪些东西呢？\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e时间旅行技术栈有什么负担？\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e她那时候还太年轻，不知道所有命运赠送的礼物，早已在暗中标好了价格。\u003c/p\u003e\n\u003cp\u003e——《断头王后》\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e在刚刚发现 Redux 能够彻底解决 React 中 props 层层传递的问题时，大家非常激动：哇你看这个无状态的组件好优雅啊！哇你看只要全部状态提到 store 里，开发时我们就能随便丝般顺滑地回退啦！很快，两条最佳实践出现了：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e尽可能编写无状态组件，它们的状态由全局 store 管理。\u003c/li\u003e\n\u003cli\u003e全局 store 的数据结构应该尽量扁平。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e那么，按照这两条最佳实践开发出的应用，会存在什么问题呢？\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e全局状态的反模式\u003c/h3\u003e\n\u003cp\u003e在时间旅行的诱惑下，把全部状态都交给 store 来管理，然后彻底干掉 \u003ccode\u003esetState\u003c/code\u003e 实在是太有诱惑里了：不仅能完美支持时间旅行，还能解决 React 里一个貌似烦人的问题。然而把全部状态交给 store 管理的时候，坑是少不了的，目前 Redux 在官方文档里对此的意见是 \u003ccode\u003eThere is no \"right\" answer for this\u003c/code\u003e，也就是说将全部状态提到 store 中的实践也可以认为是合理的。但真的是这样吗？\u003c/p\u003e\n\u003cp\u003e不知道有多少同学在初学编程的时候，听到过前辈这样的告诫：\u003cstrong\u003e少用全局变量\u003c/strong\u003e。而 React 技术栈中看似高大上的全局状态，只不过是拿 Context 粉饰一新的全局变量而已——你以为穿了件 \u003ccode\u003estore\u003c/code\u003e 的马甲人家就不认识你了吗？全局变量该有的问题，全局状态一个都躲不掉：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e全局状态非常容易造成\u003cstrong\u003e命名冲突\u003c/strong\u003e，这在一个扁平化的 store 里体现得非常明显：各种 Redux 的二道贩子封装框架往往也喜欢定义一些自己的命名约定来保证『一致性』，殊不知如果命名这种事情都不能通过语言的作用域机制本身，而是需要靠脆弱的约定来保证的话，那显然是在人为加重思维负担：在没有作用域机制的汇编语言里去用匈牙利命名法无可厚非，但在 2017 年的软件工程里还在维护这种层面的约定，真的不是在开历史的倒车吗？——当然不是了！汇编语言能支持时间旅行吗？\u003c/li\u003e\n\u003cli\u003e全局状态很难表达\u003cstrong\u003e嵌套的数据类型\u003c/strong\u003e。在 Redux 全家桶里更新 \u003ccode\u003e{a: {b: {c: {d: 1 }}}}\u003c/code\u003e 几乎是必须借助辅助工具的。对于一个富文本编辑器来说，如果想要表达『表格里支持嵌套表格』的信息，Redux 对应的原生 JSON 数据结构也显得非常单薄，基本必须上 Immutable——不过为什么我不直接使用 Immutable，跳过 Redux 这一层呢？笔者折腾过的 Slate.js 就是这么做的。哦你说 Facebook 亲生的 Draft.js 吗？它用了 Immutable 没错，不过人家实现的是优雅的扁平数据结构，绝不支持表格这种伪需求的。\u003c/li\u003e\n\u003cli\u003e全局状态的内存模型不符合经典的\u003cstrong\u003e计算机体系结构\u003c/strong\u003e。对于一个比浏览器中网页复杂得多的桌面 GUI，每个窗口对应的进程，其对应的内存空间是相互独立，还是混杂在一个支持时间旅行的『全局状态』里呢？——这不正说明了桌面操作系统的落后吗！Mac 和 Windows 这些老古董能像我们基于 Redux 写的网页这样优雅地时间旅行吗？\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e到此为止，对于 Redux 推崇的扁平全局 store，我们已经有足够多的理由来质疑了。虽然这么设计 store 和时间旅行之间没有直接的关系，但对『易于调试、易于推理、易于理解』的『优雅』的全局状态，其诱惑很有可能让开发者踏进更大的陷阱里。这是值得担心的。\u003c/p\u003e\n\u003cp\u003e当然了，Redux 确实解决了一个痛点问题，即深度嵌套的组件间状态通信的问题。但解决这个问题，并不代表着我们就必须把状态全部提到全局层面。这个问题的体现，可以简单理解为： \u003cstrong\u003e在 A 组件里实现的方法，触发它的事件在 B 组件里，而 C 组件又需要订阅执行结果……\u003c/strong\u003e 这时候纯 React 处理起来确实棘手，但只要将 store 放置在 A、B、C 三个组件中最顶级的一个里——而不需要放置在全局——而后通过 Context 的定制，就足够解决这个问题了。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e时间旅行与 Boilerplate\u003c/h3\u003e\n\u003cp\u003e另一方面，对 Redux 普遍的一个诟病在于它的 Boilerplate 代码比较多，要发一个简单的请求，都要 Action、Reducer、Middleware 走一波，思维负担比较大。这个细节其实和时间旅行的实现原理之间有着微妙的关系，简单来说，可以理解为 Redux \u003cstrong\u003e为了调试体验，牺牲了开发体验\u003c/strong\u003e：\u003c/p\u003e\n\u003cp\u003e在 Dan Abramov 的演讲里，提及了 Webpack HMR 和 Redux DevTools 相结合所带来的一个重要能力：一旦你更改了某个 Reducer 的代码，那么所有的 Action 都会重新求值，更新状态。\u003c/p\u003e\n\u003cp\u003e我们可以把 HMR 的粒度理解为函数级别的热替换（此处笔者理解尚浅，有错漏请务必指出），而 Redux 中实现状态管理逻辑的最小粒度，恰好就是 Reducer 这样的纯函数。从而，对于 Dan 本人而言，在 Redux 的架构上实现这样『只要发现某个函数被 patch 了，那么就把所有 JSON 格式的 Action 重新跑一遍』的特性，就不需要什么奇技淫巧的操作了——于是他在一周内就实现了 Redux DevTools，确实非常强！这时候的代价就是：使用 Redux 的开发者必须在开发阶段使用这一套显得繁重的机制，来使得 Dan 能轻松地改进调试体验……技术上的取舍没有绝对的对错，对于开发和调试成本的权衡，这里不做评论。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e时间旅行并非开箱即用\u003c/h3\u003e\n\u003cp\u003e除了 Redux 对时间旅行的支持方式带来的一些问题以外，另外一种隐形的坑在于这种想法：『Redux DevTools 对时间旅行支持得很好，所以在我的应用里整合这个功能应该也不难。』前文已经提及，在实现一个\u003cstrong\u003e事件驱动\u003c/strong\u003e型的前端应用时，时间旅行的功能确实特别重要。但实现这个特性的难度，恐怕不是拉进一个 Redux 就能简单实现的。这里以富文本编辑这个事件驱动型应用为例，列举几个业务中遇到的具体例子：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在使用 Slate.js 时，撤销栈在某些情况下会被意外清空。阅读了源码后我们发现，当时的撤销栈实现，会把编辑器初始化时的更改作为栈的第一项推进去。在尝试撤销掉这一项的时候，带来的副作用会意外地破坏编辑器的计数逻辑，导致本应可以重做回去的内容丢失。这个 bug 我们已经提 PR 解决了，但类似的撤销栈细节 Issue 还有不少。\u003c/li\u003e\n\u003cli\u003e一些业务场景，在撤销与重做时很难通过 push 和 pop 这样基本的栈操作解决。譬如，在上传图片的过程中用户仍然可以输入文本，这时对『进度条进度变更』的撤销事件操作，就会在撤销栈中和用户的输入事件相互『夹杂』而加大撤销的难度。\u003c/li\u003e\n\u003cli\u003e对连续发生的输入事件，需要做不同的去重处理。比如用户连续地输入了一行文本，那么在撤销时，就需要一次性将整行撤销；而如果用户缓慢地逐字输入，那么就应该逐字撤销。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这些场景里，针对每个案例的解决方案都和 Redux 的理念没有太多关系。而对于一些复杂度更高的场景（如富文本编辑的实时协同），这时实现时间旅行的基础就已经不再是简单的撤销栈 + 全量状态替换，而是已经涉及到 OT 等足够写不少论文的高级算法了。这样看来，事件驱动型的应用里，如果需要实现时间旅行类型的功能，阻碍有二：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRedux 原生的机制即便对这个需求的基础情形，也没有很针对性的解决方案。\u003c/li\u003e\n\u003cli\u003e对于这个需求的进阶情形，解决方案几乎完全和 Redux 完全无关。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e因此这里的问题总结而言也比较讽刺：在需要时间旅行特性的应用里，Redux 除了引入它的一套约定外，帮不上什么忙。再结合上文的讨论，你可以发现对于时间旅行而言，它在数据驱动的应用里基本不需要实现，而在事件驱动的应用里实现时，Redux 的帮助也很有限……\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e我们有什么替代方案？\u003c/h2\u003e\n\u003cp\u003e这篇文章不是来推销新轮子的，不过对于上文中的两种应用场景，我们都确实地发现有更合适的状态管理方案选择。MobX 和 RxJS 是笔者之前有偏好的两个库，在重新审视场景后，会发现它们恰好各有所长：\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003eMobX 与数据驱动应用\u003c/h3\u003e\n\u003cp\u003e数据驱动的应用中，领域模型很可能非常细碎而繁多（比如对于每种不同的表单，都可以有自己的数据模型），而且对于每种领域模型，封装出与之对应的增查改删能力就基本足够满足需求了。这时候，MobX 状态管理的抽象显得非常自然：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e基于 class 的数据模型结构，可以非常轻松地封装每种模型的增查改删操作。并且可以非常方便地实例化多个不同 store 的实例，注入到所需的组件中。对于 store 间通信，实例化子 store 时注入一个到 RootStore 的引用即可。\u003c/li\u003e\n\u003cli\u003e基于 TS 的类型声明远比 Redux 里原始的字符串常量 + 原生 JS 对象要先进。\u003c/li\u003e\n\u003cli\u003e基于依赖追踪的更新机制能够精确地做到在对象某个属性更新时，按需更新组件。在一般的业务场景下，这比全量更改状态再 Diff 的操作的性能要更好。作为参考，在一个大量重绘的场景下，Dan Abramov 亲自操刀优化后的 Redux 实现，才基本达到了 MobX 开箱即用的水平。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e需要注意的是，MobX 在重绘时的性能优势是以访问劫持后更大的内存占用为代价的。关于这个 trade-off，笔者在 D2 上恰好也向分享 Web 优化的 UC 内核开发者讲师咨询了内存占用对前端性能的影响。根据 dalao 的回复，这方面主要的案例仍然是来自于大量下载图片等明显的反模式，而状态管理中数据模型的内存消耗则不是一个影响性能的瓶颈点。从这个角度来看，MobX 在设计上的权衡与取舍可以认为是值得的。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003eRxJS 与事件驱动应用\u003c/h3\u003e\n\u003cp\u003e事件驱动的前端应用中，对异步逻辑的把握则显得非常重要。这方面，\u003ccode\u003eredux-saga\u003c/code\u003e 一类的库提供了一些处理异步副作用的方式，但如果你了解了 RxJS，会发现 Saga 看似强大的能力在 Rx 的事件流思维模型面前，简直就是玩具。\u003c/p\u003e\n\u003cp\u003e如果用数据驱动应用的思维来理解 RxJS，你只会感觉它的 API 十分沉重，侵入性很强。实际上，你需要在事件驱动的场景下来感受这一套理念的强大。这里的一个例子，是每天等电梯时电梯的调度方式：电梯的状态直接由用户按下楼层按钮的事件流所决定，这时通过 RxJS 的响应式编程能够很合理地建模这个业务。作为从例子出发学习 RxJS 的教程，笔者之前撰写过一篇\u003ca target=\"_blank\" href=\"https://juejin.im/post/59a2d93051882511264e8617\"\u003e《响应式编程入门：实现电梯调度模拟器》\u003c/a\u003e的专栏，还有一个配套的 \u003ca target=\"_blank\" href=\"https://github.com/doodlewind/rx-elevator-demo\"\u003eDemo\u003c/a\u003e 实现，欢迎有兴趣的同学阅读。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e总结\u003c/h2\u003e\n\u003cp\u003e毫无疑问，时间旅行是一个强大的调试特性。本文讨论的是将时间旅行从调试工具向业务中落地时，可能涉及的一些问题：数据驱动的前端应用对它的需求不大；Redux 实现时间旅行的特性带来了一些反模式；实现时间旅行时要处理的其它技术细节大大超出了 Redux 所能处理的范畴等。作为替代，基于 OO 的状态管理工具 MobX 和基于响应式编程的 RxJS 是笔者在不同场景下更青睐的。对于 GraphQL 等文中没有涉及到的新轮子，希望有相关经验的读者 dalao 能不吝赐教。\u003c/p\u003e\n\u003cp\u003e本文看起来处处都在针对 Redux，虽然这里确实存在一些利益相关（笔者始终不太喜欢它，对它的使用也不如 MobX、RxJS 甚至 Vuex 深），但文中的结论是以实际的场景作为支撑的，绝对没有 \u003ccode\u003eRedux API 好难学所以它肯定很烂\u003c/code\u003e 这样的想法。而 Redux 团队的工作，也是非常值得尊敬的。如果文中有任何对 Redux 和时间旅行在理解上的偏差，希望读者指出，我也非常愿意根据讨论去修正、优化自己的观念。\u003c/p\u003e\n\u003cp\u003e最后的一点私货，是笔者对前端『圈子』的一点理解：个人发现这个领域里很多人对于日常使用的框架和工具有着一种盲目的崇拜情绪：不允许别人评论自己所用框架的问题；将框架的设计问题解释成『你不好用是因为你水平不够』的玄学问题；给同类工具直接贴上『不好』的标签……或许这确实体现了某种对前端的『执着和热爱』，但这也使得国内社区的讨论氛围相比国外，显得很糟糕。笔者在面试时喜欢提的一个开放性问题是『你偏好的这个框架有哪些不好？』，这个问题不仅有区分度（许多表现平庸的候选人常常为了体现自己对框架的熟悉，直接回答『我觉得没有什么不好』……），并且反向的思考其实更有助于我们去结合实际场景，理解框架设计的原理和取舍。\u003c/p\u003e\n\u003cp\u003e感谢坚持看到这里的你，希望本文能对你有所帮助~\u003c/p\u003e\n","buildTime":"1514375583.7982","__v":0}
{"_id":{"$oid":"5a439bc674ee951f2c48c01c"},"id":"5a33265b518825067065ab12","author":{"$oid":"5a439bc574ee951f2c48c008"},"title":"基于盒马鲜生改编的微信小程序","meta":{"likeCount":0},"tag":["微信小程序","微信","API","JavaScript"],"comment":[],"content":"\u003cp\u003e前段时间，随着马化腾现身全国多地用微信小程序乘坐公交的新闻出现，微信小程序的热度可谓是更上了一层。微信小程序现身至今，因其不用下载就可使用的方便等优点，发展趋势一直良好。\u003c/p\u003e\n\u003cp\u003e盒马鲜生的问世也是充满了热度，实现了快速配送，可谓是阿里巴巴对线下超市完全重构的新零售业态。\u003c/p\u003e\n\u003cp\u003e两个都这么方便的东西碰撞到一起，会发生什么呢？\u003c/p\u003e\n\u003cp\u003e最近正好在学习微信小程序，于是照着盒马鲜生APP改编了一个微信小程序。\u003c/p\u003e\n\u003cp\u003e文末有GitHub源码地址，之后我也会不断更新完善这个小程序。如果你也对这个微信小程序感兴趣，欢迎交流，共同学习。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e功能简介\u003c/h2\u003e\n\u003cp\u003e本着便利的理念，实现了商城类APP的主要功能。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e用户能够根据点击不同的商品分类，跳转页面看到各种商品的列表。\u003c/li\u003e\n\u003cli\u003e点击商品可以加入购物车，在购物车中还能实现对商品的增加或者减少数量、全选反选商品、删除购物车商品等操作。\u003c/li\u003e\n\u003cli\u003e首页中，点击左上角的按钮能够添加默认收货地址。\u003c/li\u003e\n\u003cli\u003e点击右上角的扫一扫标志，还能扫描二维码（下面的gif介绍是模拟器的效果，只能打开电脑中的图片进行扫描，真机可以打开相机进行扫描）。\u003c/li\u003e\n\u003cli\u003e首页中最顶上实现了图片轮播及自动切换，底部实现了滚动视图，能够横着滑动展示商品信息。\n我们先来看看效果图，稍后再仔细介绍每一点的实现方式。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 class=\"heading\"\u003e页面简介\u003c/h3\u003e\n\u003cp\u003e这里主要介绍了该小程序的主要界面信息、展示了几个页面跳转及商品列表信息。请关注首页上方的图片轮播及底部的横向滚动视图。\n\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/15/16057d14cffa1e83?w=286\u0026amp;h=504\u0026amp;f=gif\u0026amp;s=2188369\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e关于购物车的操作\u003c/h3\u003e\n\u003cp\u003e将商品加入购物车。\n\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/15/16057d1bc8d35d45?w=286\u0026amp;h=504\u0026amp;f=gif\u0026amp;s=1608570\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n对购物车中商品的数量进行增加或者减少。\n\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/15/16057d20ffe9886a?w=286\u0026amp;h=504\u0026amp;f=gif\u0026amp;s=257306\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n对购物车的商品进行全选或反选。\n\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/15/16057d25711a1131?w=286\u0026amp;h=504\u0026amp;f=gif\u0026amp;s=336845\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n删除购物车内商品。\n\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/15/16057d28395edd2d?w=286\u0026amp;h=504\u0026amp;f=gif\u0026amp;s=150802\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e增加默认收货地址、二维码扫一扫\u003c/h3\u003e\n\u003cp\u003e新增收货地址。\n\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/15/16057d2b6f21f3fe?w=286\u0026amp;h=504\u0026amp;f=gif\u0026amp;s=264719\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n二维码扫一扫（这里是模拟机测试的，只能添加本地图片进行扫描，真机可以打开相机扫一扫）\n\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/15/16057d2e7caff4d8?w=286\u0026amp;h=504\u0026amp;f=gif\u0026amp;s=303875\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\u003cbr\u003e\n接下来就是实现方式的介绍。\u003cp\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e功能实现详解\u003c/h2\u003e\n\u003ch3 class=\"heading\"\u003e首页图片轮播和底部的滚动视图\u003c/h3\u003e\n\u003cp\u003e微信小程序自带组件 滑块视图容器swiper，能够实现滑块视图，每一个视图都放在一个swiper-item中。设置参数auto:play就可以自动播放导致swiper变化。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;swiper class=\u003cspan class=\"hljs-string\"\u003e\"page__bd__scroll\"\u003c/span\u003e current=\u003cspan class=\"hljs-string\"\u003e'{{activeIndex}}'\u003c/span\u003e bindchange=\u003cspan class=\"hljs-string\"\u003e'swiperTab'\u003c/span\u003e autoplay=\u003cspan class=\"hljs-string\"\u003e\"true\"\u003c/span\u003e interval=\u003cspan class=\"hljs-string\"\u003e\"2000\"\u003c/span\u003e duration=\u003cspan class=\"hljs-string\"\u003e\"1000\"\u003c/span\u003e\u0026gt;\n  // interval是自动切换时间间隔，duration是滑动动画时长\n  // 每一个swiper-item就是一个视图\n  \u0026lt;swiper-item\u0026gt;\n    \u0026lt;image class=\u003cspan class=\"hljs-string\"\u003e\"page__scroll__item\"\u003c/span\u003e src=\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e/\u0026gt;\n  \u0026lt;/swiper-item\u0026gt;\n  \u0026lt;swiper-item\u0026gt;\n    \u0026lt;image class=\u003cspan class=\"hljs-string\"\u003e\"page__scroll__item\"\u003c/span\u003e src=\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e/\u0026gt;\n  \u0026lt;/swiper-item\u0026gt;\n  \u0026lt;swiper-item\u0026gt;\n    \u0026lt;image class=\u003cspan class=\"hljs-string\"\u003e\"page__scroll__item\"\u003c/span\u003e src=\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e/\u0026gt;\n  \u0026lt;/swiper-item\u0026gt;\n  \u0026lt;swiper-item\u0026gt;\n    \u0026lt;image class=\u003cspan class=\"hljs-string\"\u003e\"page__scroll__item\"\u003c/span\u003e src=\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e/\u0026gt;\n  \u0026lt;/swiper-item\u0026gt;\n  \u0026lt;swiper-item\u0026gt;\n    \u0026lt;image class=\u003cspan class=\"hljs-string\"\u003e\"page__scroll__item\"\u003c/span\u003e src=\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e/\u0026gt;\n  \u0026lt;/swiper-item\u0026gt;\n\u0026lt;/swiper\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e横向滚动视图的实现：\u003c/p\u003e\n\u003cp\u003e微信自带组件 可滚动视图区域scroll-view，通过设置属性名scroll-x或者scroll-y可以实现视图的横向滚动或者纵向滚动。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// 属性名scroll-x定义了该视图允许横向滚动\n\u0026lt;scroll-view scroll-x class=\u003cspan class=\"hljs-string\"\u003e\"scrollx-section__content\"\u003c/span\u003e\u0026gt;\n  // 利用循环从后台获取数据，在视图中有多个view，也就是在页面中能看到的多个商品展示。\n  \u0026lt;block wx:\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"{{scrollXList}}\"\u003c/span\u003e wx:key=\u003cspan class=\"hljs-string\"\u003e\"index\"\u003c/span\u003e wx:\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e-index=\u003cspan class=\"hljs-string\"\u003e\"index\"\u003c/span\u003e\u0026gt;\n    \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"scrollx-section__content__item\"\u003c/span\u003e\u0026gt;\n      \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"scrollx-section__item__wrapper\"\u003c/span\u003e\u0026gt;\n        \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"view__wrapper__image\"\u003c/span\u003e\u0026gt;\n            \u0026lt;image src=\u003cspan class=\"hljs-string\"\u003e\"https://user-gold-cdn.xitu.io/2017/12/15/16057cf8f3865280\"\u003c/span\u003e /\u0026gt;\n        \u0026lt;/view\u0026gt;\n        \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"view__wrapper__intro\"\u003c/span\u003e\u0026gt;\n          \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"wrapper__intro__title\"\u003c/span\u003e\u0026gt;\n            \u0026lt;text\u0026gt;{{item.name}}\u0026lt;/text\u0026gt;\n            \u0026lt;text\u0026gt;{{item.secName}}\u0026lt;/text\u0026gt;\n          \u0026lt;/view\u0026gt;\n          \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"wrapper__intro__content left\"\u003c/span\u003e\u0026gt;\n            \u0026lt;text\u0026gt;{{item.leftTitle}}\u0026lt;/text\u0026gt;\n            \u0026lt;text\u0026gt;{{item.leftSecTitle}}\u0026lt;/text\u0026gt;\n          \u0026lt;/view\u0026gt;\n          \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"wrapper__intro__content right\"\u003c/span\u003e\u0026gt;\n              \u0026lt;text\u0026gt;{{item.rightTitle}}\u0026lt;/text\u0026gt;\n              \u0026lt;text\u0026gt;{{item.rightSecTitle}}\u0026lt;/text\u0026gt;\n          \u0026lt;/view\u0026gt;\n          \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"wrapper__intro__price\"\u003c/span\u003e\u0026gt;\n            \u0026lt;a\u0026gt;￥{{item.price}}\u0026lt;/a\u0026gt;\u0026lt;a\u0026gt;/{{item.unit}}\u0026lt;/a\u0026gt;\u0026lt;a id=\u003cspan class=\"hljs-string\"\u003e\"{{index}}\"\u003c/span\u003e bindtap=\u003cspan class=\"hljs-string\"\u003e\"addInCart\"\u003c/span\u003e\u0026gt;+\u0026lt;/a\u0026gt;\n          \u0026lt;/view\u0026gt;\n        \u0026lt;/view\u0026gt;\n      \u0026lt;/view\u0026gt;\n    \u0026lt;/view\u0026gt;\n  \u0026lt;/block\u0026gt;\n\u0026lt;/scroll-view\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e关于购物车的操作\u003c/h3\u003e\n\u003ch4 class=\"heading\"\u003e将商品加入购物车\u003c/h4\u003e\n\u003cp\u003e在不同的页面根据分类信息能够跳转到不同的页面进入商品列表，比如能在首页和分类页，可以根据分类信息进入不同的商品列表，将商品加入购物车。要想在首页、商品分类界面、购物车多个界面都获取到购物车列表信息，单个页面的数据作用域只在本文件夹，要想多个页面共同操作同一个数据应该怎么做呢？\u003c/p\u003e\n\u003cp\u003e对于在多个页面进行传值的数据，我们可以在app.js中设置一个全局变量，再在每个页面都引入这个全局数据，就可以实现多个页面共用一个数据了。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// app.js中的全局变量\nglobalData: {\n  cardList: [],\n  goodsSortsChoice: null // 用来标记首页商品分类  用户点击了哪个分类，进而显示不一样的商品列表\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这里我设置了两个全局变量。cardList是购物车数据，用户点击商品加入购物车，就能将商品加入该数组。goodsSortsChoice是一个标记。在首页和分类界面都有不同的分类介绍，该标记能记住用户在分类界面点击了哪一个分类，然后根据这个用户的点击，跳转至商品展示界面，展示不同的信息。\u003c/p\u003e\n\u003cp\u003e在商品列表界面，为每一件商品的加入购物车选项都添加了一个点击事件addCount，同时，要判断用户点击了哪一件商品，就要为每一件商品加上一个index，这里我的做法是在循环输出后台的商品列表数据时，为每个循环动态绑定data-index=\"index\"，再为每一个“+”设置一个id=\"{{index}}\"，进行点击判断。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;block wx:\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"{{goods}}\"\u003c/span\u003e wx:key=\u003cspan class=\"hljs-string\"\u003e\"index\"\u003c/span\u003e wx:\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e-index=\u003cspan class=\"hljs-string\"\u003e\"index\"\u003c/span\u003e\u0026gt;\n    \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"weui-cells\"\u003c/span\u003e\u0026gt;\n        \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"weui-cell\"\u003c/span\u003e\u0026gt;\n            \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"weui-cell__hd\"\u003c/span\u003e\u0026gt;\n                \u0026lt;image src=\u003cspan class=\"hljs-string\"\u003e\"https://user-gold-cdn.xitu.io/2017/12/15/16057cf8f3865280\"\u003c/span\u003e /\u0026gt;\n            \u0026lt;/view\u0026gt;\n            \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"weui-cell__bd\"\u003c/span\u003e\u0026gt;\n                \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"goodsList__bd__intro\"\u003c/span\u003e\u0026gt;{{item.name}}\u0026lt;/view\u0026gt;\n                \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"view__bd__price\"\u003c/span\u003e\u0026gt;\n                    \u0026lt;text class=\u003cspan class=\"hljs-string\"\u003e\"price left\"\u003c/span\u003e\u0026gt;￥{{item.price}}/{{item.unit}}\u0026lt;/text\u0026gt;\n                    \u0026lt;text class=\u003cspan class=\"hljs-string\"\u003e\"add right\"\u003c/span\u003e bindtap=\u003cspan class=\"hljs-string\"\u003e\"addInCart\"\u003c/span\u003e id=\u003cspan class=\"hljs-string\"\u003e\"{{index}}\"\u003c/span\u003e\u0026gt;+\u0026lt;/text\u0026gt;\n                \u0026lt;/view\u0026gt;\n            \u0026lt;/view\u0026gt;\n        \u0026lt;/view\u0026gt;\n    \u0026lt;/view\u0026gt;\n\u0026lt;/block\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ejs部分就是实现将商品加入购物车的方法addInCart。这里将商品加入购物车前要先遍历已有的购物车数组进行判断，如果商品已经在购物车中，就直接将购物车中的该商品数量加一，否则才直接将商品添加至全局的购物车数组。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eaddInCart: \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(e) {\n  const good = this.data.goods[e.currentTarget.id]; // 根据index，判断用户点击了哪个商品加入购物车\n  const cart = app.globalData.cardList; // 获取购物车列表\n  // 设置一个标记，判断用户想加入购物车的商品是否已经存在购物车了\n  var flag = \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n  // some 是es6新增的方法，用于遍历整个数组，如果数组中存在一个及以上元素，就返回\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\n  flag = cart.some((item) =\u0026gt; {\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e item === good;\n  })\n  console.log(flag);\n  // 如果购物车中没有该元素，就将该商品加入购物车，否则就将该商品的购买数量加一\n  \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(!flag) {\n    cart.push(good); // 用户选择商品加入购物车后，将该商品加入购物车列表\n    wx.showToast({\n      title: \u003cspan class=\"hljs-string\"\u003e'商品已加入购物车'\u003c/span\u003e,\n      icon: \u003cspan class=\"hljs-string\"\u003e'success'\u003c/span\u003e,\n      duration: 2000\n    })\n  } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n    // 商品已经存在购物车，直接将购买数量加一\n    this.data.goods[e.currentTarget.id].count ++;\n  }\n},\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ewx.showToast是微信自带的API，能够在页面中出现一个弹窗。\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003e增加或减少购物车中商品的购买数量\u003c/h4\u003e\n\u003cp\u003e增减商品购买数量的思想是，给加减号分别绑定两个点击事件 addCount 和 reduceCount，并且在循环输出购物车列表的商品时，为加减号添加index索引，用于判断用户点击了哪一件商品。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;block wx:\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"{{goodsList}}\"\u003c/span\u003e wx:key=\u003cspan class=\"hljs-string\"\u003e\"index\"\u003c/span\u003e data-index=\u003cspan class=\"hljs-string\"\u003e\"index\"\u003c/span\u003e\u0026gt;\n    \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"weui-cell\"\u003c/span\u003e\u0026gt;\n        \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"weui-cell__hd\"\u003c/span\u003e\u0026gt;\n            \u0026lt;icon id=\u003cspan class=\"hljs-string\"\u003e\"{{index}}\"\u003c/span\u003e bindtap=\u003cspan class=\"hljs-string\"\u003e\"selectGoods\"\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"{{item.type}}\"\u003c/span\u003e color=\u003cspan class=\"hljs-string\"\u003e\"#23a3ff\"\u003c/span\u003e\u0026gt;\u0026lt;/icon\u0026gt;\n        \u0026lt;/view\u0026gt;\n        \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"weui-cell__bd\"\u003c/span\u003e\u0026gt;\n            \u0026lt;image src=\u003cspan class=\"hljs-string\"\u003e\"https://user-gold-cdn.xitu.io/2017/12/15/16057cf8f3865280\"\u003c/span\u003e /\u0026gt;\n        \u0026lt;/view\u0026gt;\n        \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"weui-cell__ft right\"\u003c/span\u003e\u0026gt;\n            \u0026lt;text class=\u003cspan class=\"hljs-string\"\u003e\"proIntr left\"\u003c/span\u003e\u0026gt;{{item.name}}\u0026lt;/text\u0026gt;\n            \u0026lt;text class=\u003cspan class=\"hljs-string\"\u003e\"price left\"\u003c/span\u003e\u0026gt;￥{{item.price}}/{{item.unit}}\u0026lt;/text\u0026gt;\n            \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"count\"\u003c/span\u003e\u0026gt;\n                \u0026lt;text class=\u003cspan class=\"hljs-string\"\u003e\"reduce left\"\u003c/span\u003e bindtap=\u003cspan class=\"hljs-string\"\u003e\"reduceCount\"\u003c/span\u003e id=\u003cspan class=\"hljs-string\"\u003e\"{{index}}\"\u003c/span\u003e\u0026gt;-\u0026lt;/text\u0026gt;\n                \u0026lt;text class=\u003cspan class=\"hljs-string\"\u003e\"number left\"\u003c/span\u003e\u0026gt;{{item.count}}\u0026lt;/text\u0026gt;\n                \u0026lt;text class=\u003cspan class=\"hljs-string\"\u003e\"add left\"\u003c/span\u003e bindtap=\u003cspan class=\"hljs-string\"\u003e\"addCount\"\u003c/span\u003e id=\u003cspan class=\"hljs-string\"\u003e\"{{index}}\"\u003c/span\u003e\u0026gt;+\u0026lt;/text\u0026gt;\n            \u0026lt;/view\u0026gt;\n        \u0026lt;/view\u0026gt;\n    \u0026lt;/view\u0026gt;\n\u0026lt;/block\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ejs部分：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// 增加商品数量\naddCount:\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (e) {\n  var that = this;\n  // 根据点击事件获取用户点击了哪一件商品\n  const goodId = e.currentTarget.id;\n  that.data.goodsList[goodId].count++;\n  this.setData({\n    goodsList: that.data.goodsList\n  })\n  // 每一次增减商品数量都要重新计算购物车总钱数\n  this.sumMoney();\n},\n// 减少商品数量\nreduceCount: \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(e) {\n  var that = this;\n  const goodId = e.currentTarget.id;\n  \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(that.data.goodsList[goodId].count \u0026lt;= 1) {\n    that.data.goodsList[goodId].count = 1;\n    wx.showModal({\n      title: \u003cspan class=\"hljs-string\"\u003e'数量小于1'\u003c/span\u003e,\n      content: \u003cspan class=\"hljs-string\"\u003e'不允许操作'\u003c/span\u003e,\n      duration: 2000\n    })\n  } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n    that.data.goodsList[goodId].count--;\n  }\n  this.setData({\n    goodsList: that.data.goodsList\n  })\n  // 每一次增减商品数量都要重新计算购物车总钱数\n  this.sumMoney();\n},\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 class=\"heading\"\u003e购物车商品总价的计算\u003c/h4\u003e\n\u003cp\u003e对于选中的商品，调用sumMoney()计算总价。该方法是遍历购物车中的商品，获得每件商品的单价和件数，进行相乘后相加。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// 计算所有商品的钱数\nsumMoney: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n  // count用于记录每件商品的购买数量\n  var count = 0;\n  // goods是购物车中的商品，对其进行遍历，计算价格\n  const goods = this.data.goodsList;\n  \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e i = 0; i \u0026lt; goods.length; i++) {\n    count += goods[i].count*goods[i].price;\n  }\n  this.setData({\n    sum: count\n  })\n},\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e商品的全选和反选\u003c/h3\u003e\n\u003cp\u003e选中的商品和未选中的商品，在列表中展示时，最重要的一个差别是商品列前是蓝色的小勾还是空心的圆点。\u003c/p\u003e\n\u003cp\u003e因此要先为购物车的商品设置一个状态，对界面的样式进行改变。对于这个状态值，是在加载购物车界面前就要有该状态，因此最先我想在后台数据中为每个商品添加一个状态值。但是这样做有很大的不足之处，对于这个状态值，只有购物车界面需要，对于其他界面来说是多余的，给后台多添加一个数据就意味着要更改所有后台商品数据，增大了实现的复杂度。后面我又想到了一个方法。在购物车界面加载前，先遍历一遍购物车，为每一件购物车添加一个属性type=\"success\"（type参数设置的妙处：success 和 circle类名是微信组件icon的一个状态值，能显示小勾或空心圆点）。\n购物车onload方法，遍历购物车中的商品，添加状态type：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eonLoad: \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (options) {\n  const cardList = app.globalData.cardList;\n  cardList.map(item =\u0026gt; {\n    item.type = \u003cspan class=\"hljs-string\"\u003e\"success\"\u003c/span\u003e;\n  });\n},\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e前台界面展示部分:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;icon id=\u003cspan class=\"hljs-string\"\u003e\"{{index}}\"\u003c/span\u003e bindtap=\u003cspan class=\"hljs-string\"\u003e\"selectGoods\"\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"{{item.type}}\"\u003c/span\u003e color=\u003cspan class=\"hljs-string\"\u003e\"#23a3ff\"\u003c/span\u003e\u0026gt;\u0026lt;/icon\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e通过这种方式，就实现了动态改变商品状态的方法。\n我们可以创建一个方法，遍历购物车中的商品，如果全选了，就吧全选的选项勾上。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// 用来判断是否全选\nallSelected: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n  const goods = this.data.goodsList;\n  // some是es6新增的方法，如果数组中至少有一个符合条件的，就会返回\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\n  var symbol = goods.some(good =\u0026gt; {\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e good.type === \u003cspan class=\"hljs-string\"\u003e\"circle\"\u003c/span\u003e\n  })\n  // 经过symbol标记，如果购物车中有未选中的商品，全选状态就是空心圆\n  \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(symbol) {\n    this.data.allStatus = \u003cspan class=\"hljs-string\"\u003e\"circle\"\u003c/span\u003e\n  } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n    // 如果购物车中所有商品都被选中了，全选状态就是一个勾\n    this.data.allStatus = \u003cspan class=\"hljs-string\"\u003e\"success\"\u003c/span\u003e\n  }\n  this.setData({\n    allStatus: this.data.allStatus\n  })\n},\n\u003c/code\u003e\u003c/pre\u003e\u003cbr\u003e\n说回全选和反选操作。全选就是页面底部总计一栏，打上了勾为全选，首先给全选框设置一个点击事件。若当前为全选状态，点击后变成空心原点，反之亦然。\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"shopping__ft\"\u003c/span\u003e\u0026gt;\n    \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"shopping__ft__hd\"\u003c/span\u003e\u0026gt;\n        \u0026lt;!-- 给全选按钮一个点击事件selOrUnsel --\u0026gt;\n        \u0026lt;icon bindtap=\u003cspan class=\"hljs-string\"\u003e\"selOrUnsel\"\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"{{allStatus}}\"\u003c/span\u003e color=\u003cspan class=\"hljs-string\"\u003e\"#23a3ff\"\u003c/span\u003e\u0026gt;\u0026lt;/icon\u0026gt;\n        全选\n    \u0026lt;/view\u0026gt;\n    \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"shopping__ft__bd\"\u003c/span\u003e\u0026gt;\n        \u0026lt;text\u0026gt;合计：\u0026lt;/text\u0026gt;\n        \u0026lt;text\u0026gt;￥{{sum}}\u0026lt;/text\u0026gt;\n    \u0026lt;/view\u0026gt;\n    \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"shopping__ft__ft\"\u003c/span\u003e bindtap=\u003cspan class=\"hljs-string\"\u003e\"sumMoney\"\u003c/span\u003e\u0026gt;\n        去结算\n    \u0026lt;/view\u0026gt;\n\u0026lt;/view\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ejs实现：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eselOrUnsel: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n  // 获得全选按钮和商品列表\n  const status = this.data.allStatus;\n  const goods = this.data.goodsList;\n  // 点击按钮后查看当前全选框的状态，对其进行取反的改变，并且对商品进行全选或反选\n  \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(status === \u003cspan class=\"hljs-string\"\u003e\"success\"\u003c/span\u003e) {\n    // 如果全选按钮之前是选中的，就变成空心圆\n    this.data.allStatus = \u003cspan class=\"hljs-string\"\u003e\"circle\"\u003c/span\u003e;\n    // 遍历商品列表的每一项进行设置状态属性未未选中\n    goods.map(good =\u0026gt; {\n      good.type = \u003cspan class=\"hljs-string\"\u003e\"circle\"\u003c/span\u003e;\n    })\n  } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n    this.data.allStatus = \u003cspan class=\"hljs-string\"\u003e\"success\"\u003c/span\u003e;\n    // 如果点击之前未选中全选按钮，就进行全选。遍历购物车列表改变所有商品的状态值\n    goods.map(good =\u0026gt; {\n      good.type = \u003cspan class=\"hljs-string\"\u003e\"success\"\u003c/span\u003e;\n    })\n  }\n  // 将结果设置回页面上进行显示\n  this.setData({\n    goodsList: this.data.goodsList\n  })\n  this.setData({\n    allStatus: this.data.allStatus\n  })\n},\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 class=\"heading\"\u003e删除购物车中的商品\u003c/h4\u003e\n\u003cp\u003e购物车界面右上角有一个删除，能够删除选定的商品。先给“删除”添加一个点击事件delGoods。：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"shopping__hd\"\u003c/span\u003e\u0026gt;\n    \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"shopping__hd__content\"\u003c/span\u003e\u0026gt;\n        \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"shopping__title\"\u003c/span\u003e\u0026gt;\n            购物车\n            \u0026lt;a class=\u003cspan class=\"hljs-string\"\u003e\"shopping__title__delete right\"\u003c/span\u003e bindtap=\u003cspan class=\"hljs-string\"\u003e\"delGoods\"\u003c/span\u003e\u0026gt;删除\u0026lt;/a\u0026gt;\n        \u0026lt;/view\u0026gt;\n    \u0026lt;/view\u0026gt;\n\u0026lt;/view\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ejs实现 delGoods 方法,用一个数组存放已经选中的要删除的商品，再遍历要删除的商品数组，用 splice 方法逐个删除。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// 删除商品\ndelGoods: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n  const goods = this.data.goodsList;\n  // 对购物车中所有的元素进行遍历，找出选中的元素，组成selGoods数组\n  const selGoods = goods.map(good =\u0026gt; {\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(good.type === \u003cspan class=\"hljs-string\"\u003e\"success\"\u003c/span\u003e) {\n      \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e good;\n    }\n  })\n  wx.showModal({\n    title: \u003cspan class=\"hljs-string\"\u003e\"确定要删除所选商品？\"\u003c/span\u003e,\n    success: (res) =\u0026gt; {\n      // 用户点击确定\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(res.confirm) {\n        // 对要删除的元素数组进行遍历，逐个用splice方法进行删除\n        selGoods.map(sel =\u0026gt; {\n          goods.splice(sel);\n        })\n        // 删除成功以后从新设置页面的值\n        this.setData({\n          goodsList: this.data.goodsList\n        })\n      } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (res.cancel) {\n\n      }\n    }\n  })\n},\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e添加默认收货地址\u003c/h3\u003e\n\u003cp\u003e在首页的左上角有个小点，点击能够添加默认的收货地址。\u003c/p\u003e\n\u003cp\u003e添加默认收货地址也需要在多个页面进行传值，因为显示默认地址和设置默认地址不在同一个界面。考虑到默认收货地址需要长期存储在用户的个人信息中，这次我们用到了 storage 进行数据的存储。\u003c/p\u003e\n\u003cp\u003e话不多说，要实现功能，绑定一个事件 chooseAddr 先。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;!-- 我现在是首页 --\u0026gt;\n\u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"page__hd__input-left left\"\u003c/span\u003e\u0026gt;\n  \u0026lt;image src=\u003cspan class=\"hljs-string\"\u003e\"https://user-gold-cdn.xitu.io/2017/12/15/16057cf8f81b6d70\"\u003c/span\u003e bindtap=\u003cspan class=\"hljs-string\"\u003e\"chooseAddr\"\u003c/span\u003e /\u0026gt;\n\u0026lt;/view\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e将页面跳转到默认收货地址展示界面，这里能显示输入的收货地址\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003echooseAddr: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n  wx.navigateTo({\n    url: \u003cspan class=\"hljs-string\"\u003e\"../chooseAddress/chooseAddress\"\u003c/span\u003e\n  })\n},\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在显示默认收货地址的界面，右上角还有一个按钮，可以新增收货地址，那我们再跳转一遍页面到设置默认收货地址界面吧。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;!-- 我是显示默认收货地址的界面 --\u0026gt;\n\u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"choose-addr__hd\"\u003c/span\u003e\u0026gt;\n    \u0026lt;text class=\u003cspan class=\"hljs-string\"\u003e\"choose-addr__title\"\u003c/span\u003e\u0026gt;选择收货地址\u0026lt;/text\u0026gt;\n    \u0026lt;text class=\u003cspan class=\"hljs-string\"\u003e\"choose-addr__add right\"\u003c/span\u003e bindtap=\u003cspan class=\"hljs-string\"\u003e\"addNewAddr\"\u003c/span\u003e\u0026gt;新增地址\u0026lt;/text\u0026gt;\n\u0026lt;/view\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// 我要跳转到设置默认收货地址界面啦\naddNewAddr: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n  wx.navigateTo({\n    url: \u003cspan class=\"hljs-string\"\u003e\"../newAddr/newAddr\"\u003c/span\u003e\n  })\n},\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在设置默认收货地址界面，给每个输入框分别设置输入改变事件bindinput，用于获得输入框的内容。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"newAddr__bd\"\u003c/span\u003e\u0026gt;\n    \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"weui-cells weui-cells_form gray-input\"\u003c/span\u003e\u0026gt;\n        \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"weui-cell\"\u003c/span\u003e\u0026gt;\n            \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"weui-cell__hd\"\u003c/span\u003e\u0026gt;\n                \u0026lt;text class=\u003cspan class=\"hljs-string\"\u003e\"weui-label mr60\"\u003c/span\u003e\u0026gt;收货地址\u0026lt;/text\u0026gt;\n            \u0026lt;/view\u0026gt;\n            \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"weui-cell__bd\"\u003c/span\u003e\u0026gt;\n                \u0026lt;input bindinput=\u003cspan class=\"hljs-string\"\u003e\"getAddress\"\u003c/span\u003e class=\u003cspan class=\"hljs-string\"\u003e\"weui-input\"\u003c/span\u003e placeholder=\u003cspan class=\"hljs-string\"\u003e\"请输入收货地址\"\u003c/span\u003e /\u0026gt;\n            \u0026lt;/view\u0026gt;\n        \u0026lt;/view\u0026gt;\n        \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"weui-cell\"\u003c/span\u003e\u0026gt;\n            \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"weui-cell__hd\"\u003c/span\u003e\u0026gt;\n                \u0026lt;text class=\u003cspan class=\"hljs-string\"\u003e\"weui-label mr94\"\u003c/span\u003e\u0026gt;门牌号\u0026lt;/text\u0026gt;\n            \u0026lt;/view\u0026gt;\n            \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"weui-cell__bd\"\u003c/span\u003e\u0026gt;\n                \u0026lt;input bindinput=\u003cspan class=\"hljs-string\"\u003e\"getNum\"\u003c/span\u003e class=\u003cspan class=\"hljs-string\"\u003e\"weui-input\"\u003c/span\u003e placeholder=\u003cspan class=\"hljs-string\"\u003e\"门牌号\"\u003c/span\u003e /\u0026gt;\n            \u0026lt;/view\u0026gt;\n        \u0026lt;/view\u0026gt;\n    \u0026lt;/view\u0026gt;\n    \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"weui-cells weui-cells_form second-weui-cells\"\u003c/span\u003e\u0026gt;\n        \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"weui-cell\"\u003c/span\u003e\u0026gt;\n            \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"weui-cell__hd\"\u003c/span\u003e\u0026gt;\n                \u0026lt;text class=\u003cspan class=\"hljs-string\"\u003e\"weui-label mr48\"\u003c/span\u003e\u0026gt;联系人\u0026lt;/text\u0026gt;\n            \u0026lt;/view\u0026gt;\n            \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"weui-cell__bd\"\u003c/span\u003e\u0026gt;\n                \u0026lt;input bindinput=\u003cspan class=\"hljs-string\"\u003e\"getName\"\u003c/span\u003e class=\u003cspan class=\"hljs-string\"\u003e\"weui-input\"\u003c/span\u003e placeholder=\u003cspan class=\"hljs-string\"\u003e\"联系人\"\u003c/span\u003e /\u0026gt;\n            \u0026lt;/view\u0026gt;\n        \u0026lt;/view\u0026gt;\n        \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"weui-cell\"\u003c/span\u003e\u0026gt;\n            \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"weui-cell__hd\"\u003c/span\u003e\u0026gt;\n                \u0026lt;label class=\u003cspan class=\"hljs-string\"\u003e\"weui-label mr44\"\u003c/span\u003e\u0026gt;手机号\u0026lt;/label\u0026gt;\n            \u0026lt;/view\u0026gt;\n            \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"weui-cell__bd\"\u003c/span\u003e\u0026gt;\n                \u0026lt;input bindinput=\u003cspan class=\"hljs-string\"\u003e\"getPhone\"\u003c/span\u003e class=\u003cspan class=\"hljs-string\"\u003e\"weui-input\"\u003c/span\u003e placeholder=\u003cspan class=\"hljs-string\"\u003e\"请输入手机号\"\u003c/span\u003e /\u0026gt;\n            \u0026lt;/view\u0026gt;\n        \u0026lt;/view\u0026gt;\n    \u0026lt;/view\u0026gt;\n\u0026lt;/view\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e输入改变事件获得输入框的内容：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003edata: {\n  address: \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e,\n  num: \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e,\n  name: \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e,\n  phone: \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e\n},\n\ngetAddress: \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(e) {\n  this.setData({\n    address: e.detail.value\n  })\n},\ngetNum: \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(e) {\n  this.setData({\n    num: e.detail.value\n  })\n},\ngetName: \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(e) {\n  this.setData({\n    name: e.detail.value\n  })\n},\ngetPhone: \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(e) {\n  this.setData({\n    phone: e.detail.value\n  })\n},\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e当当当！说了这么多，storage 存储数据的重点来啦！\u003c/p\u003e\n\u003cp\u003ewxml 界面，设置一个点击事件 saveInfo ，点击后进行数据的保存：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"newAddr__hd\"\u003c/span\u003e\u0026gt;\n    \u0026lt;text class=\u003cspan class=\"hljs-string\"\u003e\"newAddr__add left\"\u003c/span\u003e bindtap=\u003cspan class=\"hljs-string\"\u003e\"backToChooseAddr\"\u003c/span\u003e\u0026gt;返回\u0026lt;/text\u0026gt;\n    \u0026lt;text class=\u003cspan class=\"hljs-string\"\u003e\"newAddr__title\"\u003c/span\u003e\u0026gt;选择收货地址\u0026lt;/text\u0026gt;\n    \u0026lt;text bindtap=\u003cspan class=\"hljs-string\"\u003e\"saveInfo\"\u003c/span\u003e class=\u003cspan class=\"hljs-string\"\u003e\"newAddr__add right\"\u003c/span\u003e\u0026gt;保存\u0026lt;/text\u0026gt;\n\u0026lt;/view\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e微信提供了一个API：wx.setStorage 能按照键（key）值（data）对的方式在缓存中存数据。\u003c/p\u003e\n\u003cp\u003ekey 是 本地缓存中的指定的 key，data 是需要存储的内容，success 是接口调用成功的回调函数。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// 用户点击保存后，对输入的数据进行存储，并反馈存储状态\nsaveInfo: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n  wx.setStorage({\n    key: \u003cspan class=\"hljs-string\"\u003e\"name\"\u003c/span\u003e,\n    data: [{address:this.data.address}, {num: this.data.num}, {name: this.data.name}, {phone: this.data.phone}],\n    success: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n      // 数据设置成功后，弹框提示用户信息保存完整，并跳回展示默认地址的界面\n      wx.showToast({\n        title: \u003cspan class=\"hljs-string\"\u003e\"地址保存成功\"\u003c/span\u003e,\n        icon: \u003cspan class=\"hljs-string\"\u003e'success'\u003c/span\u003e,\n        duration: 2000\n      })\n      \u003cspan class=\"hljs-built_in\"\u003eset\u003c/span\u003eTimeout(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e(){\n        wx.navigateTo({\n          url: \u003cspan class=\"hljs-string\"\u003e\"../chooseAddress/chooseAddress\"\u003c/span\u003e\n        })\n      },1000);\n      \n    }\n  })\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e数据设置成功后，跳回展示默认地址的界面。在这里，我们要获取缓存中的数据。\u003c/p\u003e\n\u003cp\u003e微信提供了一个API：wx.getStorage 能从本地缓存中异步获取指定 key 对应的内容。key 是本地缓存中的指定的 key，success 是接口调用的回调函数。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eonShow: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e () {\n  var that = this;\n  wx.getStorage({\n    key: \u003cspan class=\"hljs-string\"\u003e\"name\"\u003c/span\u003e,\n    success: \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(res) {\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(res.data.length \u0026gt; 0) {\n        that.setData({\n          address: res.data[0].address,\n          num: res.data[1].num,\n          name: res.data[2].name,\n          phone: res.data[3].phone\n        })\n      }\n    }\n  })\n},\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e扫描二维码\u003c/h3\u003e\n\u003cp\u003e在首页的右上角，有一个扫一扫的图片，点击后能扫描二维码。\u003c/p\u003e\n\u003cp\u003e给这张图片绑定一个点击事件scan:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"page__hd__input-right left\"\u003c/span\u003e\u0026gt;\n  \u0026lt;image bindtap=\u003cspan class=\"hljs-string\"\u003e\"scan\"\u003c/span\u003e src=\u003cspan class=\"hljs-string\"\u003e\"https://user-gold-cdn.xitu.io/2017/12/15/16057cf8f3b9287a\"\u003c/span\u003e /\u0026gt;\n\u0026lt;/view\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e调用微信自带的 API：wx.scanCode 就能扫描二维码啦。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003escan: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n  wx.scanCode({\n    success: (res) =\u0026gt; {\n      console.log(res)\n    }\n  })\n},\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e后台数据\u003c/h2\u003e\n\u003cp\u003e关于后台数据的来源，我使用的是用 \u003ca target=\"_blank\" href=\"https://www.easy-mock.com/\"\u003eeasymock\u003c/a\u003e 构建模拟数据。easymock 对于暂时只关注前台界面的程序员来说是真的超级好用。之前写过一篇文章\u003ca target=\"_blank\" href=\"https://segmentfault.com/a/1190000011996034\"\u003e使用Easy Mock构建模拟数据\u003c/a\u003e欢迎移步查看。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e写在最后\u003c/h2\u003e\n\u003cp\u003e写微信小程序最重要的可能就是查看文档了。微信给开发人员提供了很详细的各种组件和API的介绍和使用方法。\u003c/p\u003e\n\u003cp\u003e附上\u003ca target=\"_blank\" href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/component/\"\u003e微信小程序开发文档\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e最后奉上GitHub源码地址：https://github.com/TeanLee/hema\u003c/p\u003e\n\u003cp\u003e如果觉得还不错的话，请给个start鼓励一下哟~\u003c/p\u003e\n\u003cp\u003e本小程序我也会不断更新，欢迎批评、指导、交流：\u003c/p\u003e\n\u003cp\u003eWeChat：ltt598625763\u003c/p\u003e\n\u003cp\u003eEmail：ltt598625763@qq.com\u003c/p\u003e\n","buildTime":"1514355640.5626","__v":0}
{"_id":{"$oid":"5a439bc674ee951f2c48c01d"},"id":"5a3867b06fb9a0451543fe4a","author":{"$oid":"5a439bc574ee951f2c48c00e"},"title":"简易版Swiper是怎么炼成的","meta":{"likeCount":0},"tag":[],"comment":[],"content":"\u003cp\u003e\u003ca target=\"_blank\" href=\"https://lvpangpang.github.io/js-pluggs/mobile-carousel/index.html\"\u003e效果预览地址\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://github.com/lvpangpang/js-pluggs\"\u003egithub源码地址\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e先来2张图\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/18/16069340a05f94ab?w=498\u0026amp;h=401\u0026amp;f=png\u0026amp;s=133154\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/18/160693510fc6bc79?w=450\u0026amp;h=318\u0026amp;f=png\u0026amp;s=123750\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e淘宝京东这种购物商城H5站不可缺少的就是轮播插件（组件是更加全面的插件），而这次也是本胖自己都记不清是第几次写一个移动端轮播插件。\u003c/p\u003e\n\u003cp\u003e写一个插件之前，我们要做的就是分析，不是有句话，70%的时间在思考，30%的时间在敲代码。多思考，多分析就能少写代码，少走弯路。\u003c/p\u003e\n\u003cp\u003e1.需求分析（该插件要实现的功能）：\u003c/p\u003e\n\u003cp\u003eA.插件容器能根据用户手指行为而滑动\u003c/p\u003e\n\u003cp\u003eB.无缝滑动,就是能一直往一个方向滑动\u003c/p\u003e\n\u003cp\u003eC.懒加载除了第一张以后的所有图片\u003c/p\u003e\n\u003cp\u003eD.自动播放\u003c/p\u003e\n\u003cp\u003e主要需求点就是上面3点，下面就让我们一步一步来实现。\u003c/p\u003e\n\u003cp\u003e2.代码组织\u003c/p\u003e\n\u003cp\u003e用js写一个插件其实就是实现一个class，这次由于是需要兼容低端机并且不想通过babel，所以本胖是用ES5的方式组织代码的，用的是组合模式。也就是把插件需要的所有变量写函数内部，把插件里面的所有共享的方法写该函数的prototype上面。（这种模式下将一个ES5插件转为ES6插件只需要1分钟即可）。下面是这个插件最初的模子。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e Swiper(dom, options) {\n    this.dom = dom;\n    this.options = options;\n     this.init();}\nSwiper.prototype = {    init : \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e(){}\n};\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e3.功能实现\u003c/p\u003e\n\u003cp\u003eA.需要设置的参数\u003c/p\u003e\n\u003cp\u003e我们可以想象一下这个插件需要哪些内部参数变量（这里本胖感觉就是需要观察和经验的地方，这种能力是需要靠写代码来培养的），下面是本胖认为这个插件需要的内部参数。每个参数都有注释哈。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003ethis.dom = dom;\n// 包裹整个插件的容器\nthis.swiperDom = document.querySelector( dom + \u003cspan class=\"hljs-string\"\u003e' .swiper-wrapper'\u003c/span\u003e );\n// 容器宽度\nthis.winWidth = this.swiperDom.clientWidth;\nthis.options = options || {};\n// sliding块数组，这里要在确定的容器下面查找，否则会出现多余的dom结构，当一个页面有多个该插件调用的时候\nthis.slidingList = this.swiperDom.querySelectorAll( \u003cspan class=\"hljs-string\"\u003e'.swiper-slide'\u003c/span\u003e );\n// 圆点容器\nthis.pagination = document.querySelector( dom + \u003cspan class=\"hljs-string\"\u003e' .pagination'\u003c/span\u003e );\n// 整个容器每次开始滑动的translateX\nthis.startLeft = 0;\n// 整个容器每次结束滑动的translateX   \nthis.endLeft = 0;\n// 每次手指开始滑动时候距离屏幕左边的距离（不包含滚动条距离，下同）\nthis.startX = 0;\n// 每次手指开始滑动时候距离屏幕上边的距离    \nthis.startY = 0;\n// 判断该次滑动是否是横向滑动\nthis.swipeX = \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n// 判断该次滑动是否是轴向滑动\nthis.swipeY = \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;   \n//  圆点domList\nthis.paginationList = null;\n// 当前显示的index\nthis.index = 1;\n// banner总数\nthis.num = this.slidingList.length;\nthis.reg = /\\-?[0-9]+/g;\n// 每次手指开始触摸屏幕的时间点\nthis.startTime = 0;\n// 每次手指离开屏幕的时间点\nthis.endTime = 0;\n// 判断一次滑动是否完整结束,可以防止用户滑动过快导致一些bug\nthis.oneEnd = \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n// 定时器\nthis.timer = null;\n// 是否第一次\nthis.isFirst = \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eB.插件容器能根据用户手指行为而滑动\u003c/p\u003e\n\u003cp\u003e很显然，我们需要借助浏览器给我们的3个事件\u003c/p\u003e\n\u003cp\u003etouchstart，touchmove，touchend\n既然是事件的话，那么我们就需要绑定，那么这3个事件的绑定一定是在上面的init函数里面。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e // 绑定手指触摸事件\nthis.swiperDom.addEventListener(\u003cspan class=\"hljs-string\"\u003e'touchstart'\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(event) {\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e ( this.oneEnd ) {\n        this.startListener(event);\n    }\n}.bind(this));\n\n// 绑定手指滑动事件            \nthis.swiperDom.addEventListener(\u003cspan class=\"hljs-string\"\u003e'touchmove'\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(event) {\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e ( this.oneEnd ) {\n         this.moveListener(event);\n    }\n}.bind(this));\n\n// 绑定手指结束滑动事件            \nthis.swiperDom.addEventListener(\u003cspan class=\"hljs-string\"\u003e'touchend'\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(event) {\n    this.endListener(event);\n}.bind(this));\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e上面用了bind函数来避免大量使用var oThis = this；这种代码。\u003c/p\u003e\n\u003cp\u003e接下来就是实现\u003c/p\u003e\n\u003cp\u003ethis.startListener()，this.moveListener()，this.endListener()这3个事件方法。\u003c/p\u003e\n\u003cp\u003ethis.startListener():\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// touchstart事件\nstartListener : \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(event) {\n    var target = event.targetTouches[0];\n    // 禁止自动播放（如果设置了定时器时间间隔）\n    clearInterval(this.timer);       \n    // 获取当前时间，后面用来判断是否点滑需要用到 \n    this.startTime = (new Date()).getTime();\n    // 记录当前滑动容器的translate3d值\n    this.startLeft = parseFloat(this.swiperDom.style.webkitTransform.match(this.reg)[1]);\n    this.startX = target.pageX;\n    this.startY = target.pageY; \n},\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e该方法的作用是获取用户手指一开始在屏幕的位置以及touchstart事件触发的时候当前容器的translate3d值（本胖是通过改变translate3d来让容器滑动的）\u003c/p\u003e\n\u003cp\u003e注意这里获取了一个touchstart事件触发的时刻，是用来判断是否需要触发点滑事件的。\u003c/p\u003e\n\u003cp\u003ethis.moveListener()：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// touchmove事件\nmoveListener : \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(event) {\n    var target = event.targetTouches[0];\n    this.moveX = target.pageX;\n    this.moveY = target.pageY;\n    // 判断是X轴滑动\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e ( this.swipeX  \u0026amp;\u0026amp; this.cal(this.startX, this.startY, this.moveX, this.moveY) ) {\n        this.swipeY = \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n        var x = parseFloat(this.startLeft + this.moveX - this.startX);\n        this.swiperDom.style.webkitTransform =  \u003cspan class=\"hljs-string\"\u003e'translate3d('\u003c/span\u003e+ x +\u003cspan class=\"hljs-string\"\u003e'px,0px,0px)'\u003c/span\u003e;\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n        this.swipeX = \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n    }\n},\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003etouchmove事件需要做的事情就是判断当前用户手指的意图是不是想沿X轴，本胖用了this.cal(this.startX, this.startY, this.moveX, this.moveY)才判断用户意图。\u003c/p\u003e\n\u003cp\u003ethis.endListener()：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// touchend事件\nendListener : \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (event) {\n    // 重新开启自动播放（如果设置了定时器时间间隔）\n    this.setTimer();\n    this.oneEnd = \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n    // 获取当前时间，后面用来判断是否点滑需要用到         \n    this.endTime = (new Date()).getTime();\n    this.endLeft = this.getTranslate3d();\n    // 滑动距离\n    var distance = Math.abs(this.endLeft - this.startLeft),\n        halfW\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003eWith = this.winWidth/2,\n        left = this.startLeft;\n    // 手指接触屏幕时间大于300ms，开启点滑效果\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e ( this.endTime - this.startTime \u0026lt;= 300 ) {\n        halfW\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003eWith = 30;\n    }\n    \n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e ( this.endLeft \u0026lt;= this.startLeft ) {\n        // 向左滑动 未过临界值\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e ( distance \u0026lt;= halfW\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003eWith ) {\n            left = this.startLeft;\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n            left = this.startLeft - this.winWidth;\n        }\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n        // 向右滑动 未过临界值\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e ( distance \u0026lt;= halfW\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003eWith ) {\n            left = this.startLeft;\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n            left = this.startLeft + this.winWidth;\n        }\n    }\n    this.swiperDom.style.webkitTransition = \u003cspan class=\"hljs-string\"\u003e'transform 300ms'\u003c/span\u003e;\n    this.swiperDom.style.webkitTransform =  \u003cspan class=\"hljs-string\"\u003e'translate3d('\u003c/span\u003e+ left +\u003cspan class=\"hljs-string\"\u003e'px,0px,0px)'\u003c/span\u003e;\n    // 触发动态滑动结束事件\n    this.transitionEndListener();\n},\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这个事件是该插件的重点，里面获取了手指离开屏幕的时间，以及通过用户已经滑动的距离来设置容器最终的滑动距离，这里的规则是如果时间间隔在0-300ms之内（表现为用户在短时间手指划过，单手操作的时候很容易发生这种现象），并且容器滑动的距离比30px大，那么就认为用户想换一张图片，否则容器还原。如果时间间隔大于300ms，并且容器滑动距离比容器的可视宽度一般多，那么也认为用户想换一张图片，否则容器还原。这里判断是否切换的逻辑和淘宝首页banner是一样的，其实还可以有很多哈。\u003c/p\u003e\n\u003cp\u003eC.无缝滑动,就是能一直往一个方向滑动\u003c/p\u003e\n\u003cp\u003e本胖这里是在容器最前面和最后面都加了一个dom，最前面加的是最后面的dom，最后面加的是最前面的dom，代码如下\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// 克隆收尾的图片结构，为无缝轮播做准备\nvar firstNode = this.slidingList[0].cloneNode(\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e),\n    lastNode = this.slidingList[this.num - 1].cloneNode(\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e),\n    oFrag = document.createDocumentFragment();\nthis.swiperDom.insertBefore(lastNode, this.slidingList[0]);\nthis.swiperDom.appendChild(firstNode);\nthis.swiperDom.style.webkitTransform = \u003cspan class=\"hljs-string\"\u003e'translate3d('\u003c/span\u003e+-this.winWidth+\u003cspan class=\"hljs-string\"\u003e'px,0px,0px)'\u003c/span\u003e;\nthis.slidingList = document.querySelectorAll( this.dom + \u003cspan class=\"hljs-string\"\u003e' .swiper-slide'\u003c/span\u003e);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e然后就是一开始用户看到的是实际第二个dom（这个dom本来是index=0，由于在最前面加了一个dom，所以就变成了index=1）\u003c/p\u003e\n\u003cp\u003e然后就是每次滑动过后在最前面和最后面做一个判断\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// 动态滑动结束事件\ntransitionEndListener : \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n    this.isFirst = \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n    this.swiperDom.addEventListener(\u003cspan class=\"hljs-string\"\u003e\"webkitTransitionEnd\"\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n        this.oneEnd = \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n        this.swiperDom.style.webkitTransition = \u003cspan class=\"hljs-string\"\u003e'transform 0ms'\u003c/span\u003e;\n        // 重新计算当前index\n        this.index = -(this.getTranslate3d())/this.winWidth - 1;\n        \n        // 对2种临界状态做一个判断\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e( this.index===-1 ) {\n            this.index = this.num-1;\n            this.swiperDom.style.webkitTransform =  \u003cspan class=\"hljs-string\"\u003e'translate3d('\u003c/span\u003e+ (-this.winWidth * (this.num)) +\u003cspan class=\"hljs-string\"\u003e'px,0px,0px)'\u003c/span\u003e;\n        }\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e( this.index\u0026gt;=this.num ) {\n            this.index = 0;\n            this.swiperDom.style.webkitTransform =  \u003cspan class=\"hljs-string\"\u003e'translate3d('\u003c/span\u003e+ -this.winWidth +\u003cspan class=\"hljs-string\"\u003e'px,0px,0px)'\u003c/span\u003e;\n        }\n        this.lazyPlay(this.index+1);\n\n        // 给pagination里面的圆点添加对应样式\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(var i=0; i\u0026lt;this.num; i++) {\n            this.paginationList[i].className = \u003cspan class=\"hljs-string\"\u003e'swiper-pagination-bullet'\u003c/span\u003e;\n        }\n        this.paginationList[this.index].className = \u003cspan class=\"hljs-string\"\u003e'swiper-pagination-bullet swiper-pagination-bullet-active'\u003c/span\u003e;\n\n    }.bind(this), \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n},\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e对了这里的滑动动画本胖是用了webkitTransition，所以可以在webkitTransitionEnd事件里面判断一次滑动是否结束即可。\u003c/p\u003e\n\u003cp\u003eD.懒加载除了第一张以后的所有图片\u003c/p\u003e\n\u003cp\u003e这里的思路和其他图片懒加载插件一样，就是一开始不给图片设置真实的src，而是把图片地址放在data-src里面，然后在适当的时机去加载正式的图片即可。（懒加载的思想很重要）\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// 如果开启了懒加载模式\nlazyPlay : \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(index) {      \n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e ( this.options.lazyLoading ) {\n        var slidingDom = this.slidingList[index];\n            imgDom = slidingDom.querySelector(\u003cspan class=\"hljs-string\"\u003e'img'\u003c/span\u003e),\n            lazyDom = slidingDom.querySelector(\u003cspan class=\"hljs-string\"\u003e'.swiper-lazy-preloader'\u003c/span\u003e);\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e ( imgDom.getAttribute(\u003cspan class=\"hljs-string\"\u003e'data-src'\u003c/span\u003e) ) {\n            imgDom.src = imgDom.getAttribute(\u003cspan class=\"hljs-string\"\u003e'data-src'\u003c/span\u003e);\n            imgDom.removeAttribute(\u003cspan class=\"hljs-string\"\u003e'data-src'\u003c/span\u003e);\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e ( lazyDom ) {\n                slidingDom.removeChild(lazyDom);\n            }\n        }\n        // 如果是第一个则将最后一个由第一个克隆的也转化\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e ( index === 1 ) {\n            this.lazyPlay(this.num+1);\n        }\n        // 如果是最后一个则将第0个由第this.num-1个克隆的也转化        \n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e ( index === this.num ) {\n            this.lazyPlay(0);            \n        }\n    }\n},\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eE.自动播放\u003c/p\u003e\n\u003cp\u003e这个就简单了，设置一个定时器即可，在手指移入的时候清空这个定时器，手指移开的时候重新开始计时就可以了。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// 自动轮播\nautoMove : \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n    this.isFirst ? this.index++ : this.index= this.index + 2;\n    this.swiperDom.style.webkitTransition = \u003cspan class=\"hljs-string\"\u003e'transform 300ms'\u003c/span\u003e;\n    this.swiperDom.style.webkitTransform =  \u003cspan class=\"hljs-string\"\u003e'translate3d('\u003c/span\u003e+ (-this.index * this.winWidth) +\u003cspan class=\"hljs-string\"\u003e'px,0px,0px)'\u003c/span\u003e;\n    this.transitionEndListener();\n},\n\n// 自动轮播定时\n\u003cspan class=\"hljs-built_in\"\u003eset\u003c/span\u003eTimer : \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n     \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e ( this.options.autoplay \u0026gt;= 1000 ) {\n        this.timer = \u003cspan class=\"hljs-built_in\"\u003eset\u003c/span\u003eInterval(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n            this.autoMove();\n        }.bind(this), this.options.autoplay );\n    }\n},\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e本篇文章没有什么技术难点，只是对自己造轮子的过程的记录以及对一个插件是怎么炼成的总结\u003c/p\u003e\n\u003cp\u003e本文完\u003c/p\u003e\n","buildTime":"1514376278.3139","__v":0}
{"_id":{"$oid":"5a439bc674ee951f2c48c01e"},"id":"5a091afe6fb9a044ff30f402","author":{"$oid":"5a439bc574ee951f2c48c004"},"title":"打造自己的JavaScript武器库","meta":{"likeCount":0},"tag":["JavaScript","NPM"],"comment":[],"content":"\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://user-gold-cdn.xitu.io/2017/11/20/15fd922881ec0523?w=640\u0026amp;h=442\u0026amp;f=jpeg\u0026amp;s=84322\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e自己打造一把趁手的武器，高效率完成前端业务代码。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch1 class=\"heading\"\u003e前言\u003c/h1\u003e\u003cp\u003e作为战斗在业务一线的前端，要想少加班，就要想办法提高工作效率。这里提一个小点，我们在业务开发过程中，经常会重复用到\u003ccode\u003e日期格式化\u003c/code\u003e、\u003ccode\u003eurl参数转对象\u003c/code\u003e、\u003ccode\u003e浏览器类型判断\u003c/code\u003e、\u003ccode\u003e节流函数\u003c/code\u003e等一类函数，这些工具类函数，基本上在每个项目都会用到，为避免不同项目多次复制粘贴的麻烦，我们可以统一封装，发布到\u003ccode\u003enpm\u003c/code\u003e，以提高开发效率。\u003c/p\u003e\n\u003cp\u003e这里，笔者已经封装并发布了自己的武器库 \u003ca href=\"https://github.com/proYang/outils\"\u003eoutils\u003c/a\u003e，如果你对本项目感兴趣，欢迎\u003ca href=\"https://github.com/proYang/outils\"\u003e star \u003c/a\u003e本项目。当然你也可以在本项目的基础上封装自己的武器库。\u003c/p\u003e\n\u003ch1 class=\"heading\"\u003e常用函数汇总\u003c/h1\u003e\u003cp\u003e这里先分类整理下，之前项目中多次用到的工具函数。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e1.Array\u003c/h2\u003e\u003ch3 class=\"heading\"\u003e1.1 arrayEqual\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * \n * @desc 判断两个数组是否相等\n * @param {Array} arr1 \n * @param {Array} arr2 \n * @return {Boolean}\n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003earrayEqual\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003earr1, arr2\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (arr1 === arr2) \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (arr1.length != arr2.length) \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i \u0026lt; arr1.length; ++i) {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (arr1[i] !== arr2[i]) \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n}\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e2.Class\u003c/h2\u003e\u003ch3 class=\"heading\"\u003e2.1 addClass\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * \n * @desc   为元素添加class\n * @param  {HTMLElement} ele \n * @param  {String} cls \n */\u003c/span\u003e\n\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e hasClass = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'./hasClass'\u003c/span\u003e);\n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eaddClass\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eele, cls\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!hasClass(ele, cls)) {\n        ele.className += \u003cspan class=\"hljs-string\"\u003e' '\u003c/span\u003e + cls;\n    }\n}\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e2.2 hasClass\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * \n * @desc 判断元素是否有某个class\n * @param {HTMLElement} ele \n * @param {String} cls \n * @return {Boolean}\n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ehasClass\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eele, cls\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eRegExp\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'(\\\\s|^)'\u003c/span\u003e + cls + \u003cspan class=\"hljs-string\"\u003e'(\\\\s|$)'\u003c/span\u003e)).test(ele.className);\n}\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e2.3 removeClass\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * \n * @desc 为元素移除class\n * @param {HTMLElement} ele \n * @param {String} cls \n */\u003c/span\u003e\n\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e hasClass = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'./hasClass'\u003c/span\u003e);\n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eremoveClass\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eele, cls\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (hasClass(ele, cls)) {\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e reg = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eRegExp\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'(\\\\s|^)'\u003c/span\u003e + cls + \u003cspan class=\"hljs-string\"\u003e'(\\\\s|$)'\u003c/span\u003e);\n        ele.className = ele.className.replace(reg, \u003cspan class=\"hljs-string\"\u003e' '\u003c/span\u003e);\n    }\n}\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e3.Cookie\u003c/h2\u003e\u003ch3 class=\"heading\"\u003e3.1 getCookie\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * \n * @desc 根据name读取cookie\n * @param  {String} name \n * @return {String}\n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetCookie\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ename\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e arr = \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.cookie.replace(\u003cspan class=\"hljs-regexp\"\u003e/\\s/g\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e).split(\u003cspan class=\"hljs-string\"\u003e';'\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i \u0026lt; arr.length; i++) {\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e tempArr = arr[i].split(\u003cspan class=\"hljs-string\"\u003e'='\u003c/span\u003e);\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (tempArr[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e] == name) {\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003edecodeURIComponent\u003c/span\u003e(tempArr[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e]);\n        }\n    }\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e;\n}\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e3.2 removeCookie\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e setCookie = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'./setCookie'\u003c/span\u003e);\n\u003cspan class=\"hljs-comment\"\u003e/**\n * \n * @desc 根据name删除cookie\n * @param  {String} name \n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eremoveCookie\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ename\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-comment\"\u003e// 设置已过期，系统会立刻删除cookie\u003c/span\u003e\n    setCookie(name, \u003cspan class=\"hljs-string\"\u003e'1'\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e-1\u003c/span\u003e);\n}\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e3.3 setCookie\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * \n * @desc  设置Cookie\n * @param {String} name \n * @param {String} value \n * @param {Number} days \n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetCookie\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ename, value, days\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e date = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e();\n    date.setDate(date.getDate() + days);\n    \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.cookie = name + \u003cspan class=\"hljs-string\"\u003e'='\u003c/span\u003e + value + \u003cspan class=\"hljs-string\"\u003e';expires='\u003c/span\u003e + date;\n}\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e4.Device\u003c/h2\u003e\u003ch3 class=\"heading\"\u003e4.1 getExplore\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * \n * @desc 获取浏览器类型和版本\n * @return {String} \n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetExplore\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e sys = {},\n        ua = navigator.userAgent.toLowerCase(),\n        s;\n    (s = ua.match(\u003cspan class=\"hljs-regexp\"\u003e/rv:([\\d.]+)\\) like gecko/\u003c/span\u003e)) ? sys.ie = s[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e]:\n        (s = ua.match(\u003cspan class=\"hljs-regexp\"\u003e/msie ([\\d\\.]+)/\u003c/span\u003e)) ? sys.ie = s[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e] :\n        (s = ua.match(\u003cspan class=\"hljs-regexp\"\u003e/edge\\/([\\d\\.]+)/\u003c/span\u003e)) ? sys.edge = s[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e] :\n        (s = ua.match(\u003cspan class=\"hljs-regexp\"\u003e/firefox\\/([\\d\\.]+)/\u003c/span\u003e)) ? sys.firefox = s[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e] :\n        (s = ua.match(\u003cspan class=\"hljs-regexp\"\u003e/(?:opera|opr).([\\d\\.]+)/\u003c/span\u003e)) ? sys.opera = s[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e] :\n        (s = ua.match(\u003cspan class=\"hljs-regexp\"\u003e/chrome\\/([\\d\\.]+)/\u003c/span\u003e)) ? sys.chrome = s[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e] :\n        (s = ua.match(\u003cspan class=\"hljs-regexp\"\u003e/version\\/([\\d\\.]+).*safari/\u003c/span\u003e)) ? sys.safari = s[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e] : \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n    \u003cspan class=\"hljs-comment\"\u003e// 根据关系进行判断\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (sys.ie) \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e (\u003cspan class=\"hljs-string\"\u003e'IE: '\u003c/span\u003e + sys.ie)\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (sys.edge) \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e (\u003cspan class=\"hljs-string\"\u003e'EDGE: '\u003c/span\u003e + sys.edge)\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (sys.firefox) \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e (\u003cspan class=\"hljs-string\"\u003e'Firefox: '\u003c/span\u003e + sys.firefox)\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (sys.chrome) \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e (\u003cspan class=\"hljs-string\"\u003e'Chrome: '\u003c/span\u003e + sys.chrome)\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (sys.opera) \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e (\u003cspan class=\"hljs-string\"\u003e'Opera: '\u003c/span\u003e + sys.opera)\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (sys.safari) \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e (\u003cspan class=\"hljs-string\"\u003e'Safari: '\u003c/span\u003e + sys.safari)\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'Unkonwn'\u003c/span\u003e\n}\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e4.2 getOS\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * \n * @desc 获取操作系统类型\n * @return {String} \n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetOS\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e userAgent = \u003cspan class=\"hljs-string\"\u003e'navigator'\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e \u0026amp;\u0026amp; \u003cspan class=\"hljs-string\"\u003e'userAgent'\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e navigator \u0026amp;\u0026amp; navigator.userAgent.toLowerCase() || \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e vendor = \u003cspan class=\"hljs-string\"\u003e'navigator'\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e \u0026amp;\u0026amp; \u003cspan class=\"hljs-string\"\u003e'vendor'\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e navigator \u0026amp;\u0026amp; navigator.vendor.toLowerCase() || \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e appVersion = \u003cspan class=\"hljs-string\"\u003e'navigator'\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e \u0026amp;\u0026amp; \u003cspan class=\"hljs-string\"\u003e'appVersion'\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e navigator \u0026amp;\u0026amp; navigator.appVersion.toLowerCase() || \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e;\n\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-regexp\"\u003e/mac/i\u003c/span\u003e.test(appVersion)) \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'MacOSX'\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-regexp\"\u003e/win/i\u003c/span\u003e.test(appVersion)) \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'windows'\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-regexp\"\u003e/linux/i\u003c/span\u003e.test(appVersion)) \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'linux'\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-regexp\"\u003e/iphone/i\u003c/span\u003e.test(userAgent) || \u003cspan class=\"hljs-regexp\"\u003e/ipad/i\u003c/span\u003e.test(userAgent) || \u003cspan class=\"hljs-regexp\"\u003e/ipod/i\u003c/span\u003e.test(userAgent)) \u003cspan class=\"hljs-string\"\u003e'ios'\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-regexp\"\u003e/android/i\u003c/span\u003e.test(userAgent)) \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'android'\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-regexp\"\u003e/win/i\u003c/span\u003e.test(appVersion) \u0026amp;\u0026amp; \u003cspan class=\"hljs-regexp\"\u003e/phone/i\u003c/span\u003e.test(userAgent)) \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'windowsPhone'\u003c/span\u003e\n}\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e5.Dom\u003c/h2\u003e\u003ch3 class=\"heading\"\u003e5.1 getScrollTop\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * \n * @desc 获取滚动条距顶部的距离\n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetScrollTop\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e (\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.documentElement \u0026amp;\u0026amp; \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.documentElement.scrollTop) || \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.body.scrollTop;\n}\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e5.2 offset\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * \n * @desc  获取一个元素的距离文档(document)的位置，类似jQ中的offset()\n * @param {HTMLElement} ele \n * @returns { {left: number, top: number} }\n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eoffset\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eele\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e pos = {\n        \u003cspan class=\"hljs-attr\"\u003eleft\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,\n        \u003cspan class=\"hljs-attr\"\u003etop\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e\n    };\n    \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e (ele) {\n        pos.left += ele.offsetLeft;\n        pos.top += ele.offsetTop;\n        ele = ele.offsetParent;\n    };\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e pos;\n}\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e5.3 scrollTo\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e getScrollTop = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'./getScrollTop'\u003c/span\u003e);\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e setScrollTop = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'./setScrollTop'\u003c/span\u003e);\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e requestAnimFrame = (\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.requestAnimationFrame ||\n        \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.webkitRequestAnimationFrame ||\n        \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.mozRequestAnimationFrame ||\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003ecallback\u003c/span\u003e) \u003c/span\u003e{\n            \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.setTimeout(callback, \u003cspan class=\"hljs-number\"\u003e1000\u003c/span\u003e / \u003cspan class=\"hljs-number\"\u003e60\u003c/span\u003e);\n        };\n})();\n\u003cspan class=\"hljs-comment\"\u003e/**\n * \n * @desc  在${duration}时间内，滚动条平滑滚动到${to}指定位置\n * @param {Number} to \n * @param {Number} duration \n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003escrollTo\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eto, duration\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (duration \u0026lt; \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) {\n        setScrollTop(to);\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e\n    }\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e diff = to - getScrollTop();\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (diff === \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e step = diff / duration * \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\n    requestAnimationFrame(\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.abs(step) \u0026gt; \u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.abs(diff)) {\n                setScrollTop(getScrollTop() + diff);\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e;\n            }\n            setScrollTop(getScrollTop() + step);\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (diff \u0026gt; \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e \u0026amp;\u0026amp; getScrollTop() \u0026gt;= to || diff \u0026lt; \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e \u0026amp;\u0026amp; getScrollTop() \u0026lt;= to) {\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e;\n            }\n            scrollTo(to, duration - \u003cspan class=\"hljs-number\"\u003e16\u003c/span\u003e);\n        });\n}\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e5.4 setScrollTop\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * \n * @desc 设置滚动条距顶部的距离\n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetScrollTop\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003evalue\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.scrollTo(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, value);\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e value;\n}\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e6.Keycode\u003c/h2\u003e\u003ch3 class=\"heading\"\u003e6.1 getKeyName\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e keyCodeMap = {\n    \u003cspan class=\"hljs-number\"\u003e8\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Backspace'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e9\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Tab'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e13\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Enter'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e16\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Shift'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Ctrl'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e18\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Alt'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e19\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Pause'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e20\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Caps Lock'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Escape'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e32\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Space'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e33\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Page Up'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e34\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Page Down'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'End'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e36\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Home'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e37\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Left'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e38\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Up'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e39\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Right'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e40\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Down'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e42\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Print Screen'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e45\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Insert'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e46\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Delete'\u003c/span\u003e,\n\n    \u003cspan class=\"hljs-number\"\u003e48\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'0'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'1'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'2'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e51\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'3'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e52\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'4'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e53\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'5'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e54\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'6'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e55\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'7'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e56\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'8'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e57\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'9'\u003c/span\u003e,\n\n    \u003cspan class=\"hljs-number\"\u003e65\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'A'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e66\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'B'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e67\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'C'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e68\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'D'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e69\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'E'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e70\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'F'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e71\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'G'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e72\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'H'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e73\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'I'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e74\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'J'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e75\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'K'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e76\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'L'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e77\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'M'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e78\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'N'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e79\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'O'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'P'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e81\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Q'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e82\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'R'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e83\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'S'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e84\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'T'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e85\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'U'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e86\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'V'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e87\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'W'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e88\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'X'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e89\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Y'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e90\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Z'\u003c/span\u003e,\n\n    \u003cspan class=\"hljs-number\"\u003e91\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Windows'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e93\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Right Click'\u003c/span\u003e,\n\n    \u003cspan class=\"hljs-number\"\u003e96\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Numpad 0'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e97\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Numpad 1'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e98\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Numpad 2'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e99\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Numpad 3'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Numpad 4'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e101\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Numpad 5'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e102\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Numpad 6'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e103\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Numpad 7'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e104\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Numpad 8'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e105\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Numpad 9'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e106\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Numpad *'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e107\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Numpad +'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e109\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Numpad -'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e110\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Numpad .'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e111\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Numpad /'\u003c/span\u003e,\n\n    \u003cspan class=\"hljs-number\"\u003e112\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'F1'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e113\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'F2'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e114\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'F3'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e115\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'F4'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e116\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'F5'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e117\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'F6'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e118\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'F7'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e119\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'F8'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e120\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'F9'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e121\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'F10'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e122\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'F11'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e123\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'F12'\u003c/span\u003e,\n\n    \u003cspan class=\"hljs-number\"\u003e144\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Num Lock'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e145\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'Scroll Lock'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e182\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'My Computer'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e183\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'My Calculator'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e186\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e';'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e187\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'='\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e188\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e','\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e189\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'-'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e190\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'.'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e191\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'/'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e192\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'`'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e219\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'['\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e220\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'\\\\'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e221\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e']'\u003c/span\u003e,\n    \u003cspan class=\"hljs-number\"\u003e222\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'\\''\u003c/span\u003e\n};\n\u003cspan class=\"hljs-comment\"\u003e/**\n * @desc 根据keycode获得键名\n * @param  {Number} keycode \n * @return {String}\n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetKeyName\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ekeycode\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (keyCodeMap[keycode]) {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e keyCodeMap[keycode];\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n        \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e'Unknow Key(Key Code:'\u003c/span\u003e + keycode + \u003cspan class=\"hljs-string\"\u003e')'\u003c/span\u003e);\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e;\n    }\n};\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e7.Object\u003c/h2\u003e\u003ch3 class=\"heading\"\u003e7.1 deepClone\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * @desc 深拷贝，支持常见类型\n * @param {Any} values\n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003edeepClone\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003evalues\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e copy;\n\n    \u003cspan class=\"hljs-comment\"\u003e// Handle the 3 simple types, and null or undefined\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e == values || \u003cspan class=\"hljs-string\"\u003e\"object\"\u003c/span\u003e != \u003cspan class=\"hljs-keyword\"\u003etypeof\u003c/span\u003e values) \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e values;\n\n    \u003cspan class=\"hljs-comment\"\u003e// Handle Date\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (values \u003cspan class=\"hljs-keyword\"\u003einstanceof\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e) {\n        copy = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e();\n        copy.setTime(values.getTime());\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e copy;\n    }\n\n    \u003cspan class=\"hljs-comment\"\u003e// Handle Array\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (values \u003cspan class=\"hljs-keyword\"\u003einstanceof\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eArray\u003c/span\u003e) {\n        copy = [];\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, len = values.length; i \u0026lt; len; i++) {\n            copy[i] = deepClone(values[i]);\n        }\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e copy;\n    }\n\n    \u003cspan class=\"hljs-comment\"\u003e// Handle Object\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (values \u003cspan class=\"hljs-keyword\"\u003einstanceof\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eObject\u003c/span\u003e) {\n        copy = {};\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e attr \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e values) {\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (values.hasOwnProperty(attr)) copy[attr] = deepClone(values[attr]);\n        }\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e copy;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003ethrow\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eError\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"Unable to copy values! Its type isn't supported.\"\u003c/span\u003e);\n}\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e7.2 isEmptyObject\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * \n * @desc   判断`obj`是否为空\n * @param  {Object} obj\n * @return {Boolean}\n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eisEmptyObject\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eobj\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!obj || \u003cspan class=\"hljs-keyword\"\u003etypeof\u003c/span\u003e obj !== \u003cspan class=\"hljs-string\"\u003e'object'\u003c/span\u003e || \u003cspan class=\"hljs-built_in\"\u003eArray\u003c/span\u003e.isArray(obj))\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e !\u003cspan class=\"hljs-built_in\"\u003eObject\u003c/span\u003e.keys(obj).length\n}\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e8.Random\u003c/h2\u003e\u003ch3 class=\"heading\"\u003e8.1 randomColor\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * \n * @desc 随机生成颜色\n * @return {String} \n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erandomColor\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'#'\u003c/span\u003e + (\u003cspan class=\"hljs-string\"\u003e'00000'\u003c/span\u003e + (\u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.random() * \u003cspan class=\"hljs-number\"\u003e0x1000000\u003c/span\u003e \u0026lt;\u0026lt; \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e).toString(\u003cspan class=\"hljs-number\"\u003e16\u003c/span\u003e)).slice(\u003cspan class=\"hljs-number\"\u003e-6\u003c/span\u003e);\n}\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e8.2 randomNum \u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * \n * @desc 生成指定范围随机数\n * @param  {Number} min \n * @param  {Number} max \n * @return {Number} \n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erandomNum\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003emin, max\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.floor(min + \u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.random() * (max - min));\n}\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e9.Regexp\u003c/h2\u003e\u003ch3 class=\"heading\"\u003e9.1 isEmail\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * \n * @desc   判断是否为邮箱地址\n * @param  {String}  str\n * @return {Boolean} \n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eisEmail\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003estr\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-regexp\"\u003e/\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*/\u003c/span\u003e.test(str);\n}\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e9.2 isIdCard\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * \n * @desc  判断是否为身份证号\n * @param  {String|Number} str \n * @return {Boolean}\n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eisIdCard\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003estr\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-regexp\"\u003e/^(^[1-9]\\d{7}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}$)|(^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])((\\d{4})|\\d{3}[Xx])$)$/\u003c/span\u003e.test(str)\n}\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e9.3 isPhoneNum\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * \n * @desc   判断是否为手机号\n * @param  {String|Number} str \n * @return {Boolean} \n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eisPhoneNum\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003estr\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-regexp\"\u003e/^(0|86|17951)?(13[0-9]|15[012356789]|17[678]|18[0-9]|14[57])[0-9]{8}$/\u003c/span\u003e.test(str)\n}\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e9.4 isUrl\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * \n * @desc   判断是否为URL地址\n * @param  {String} str \n * @return {Boolean}\n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eisUrl\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003estr\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-regexp\"\u003e/[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?\u0026amp;//=]*)/i\u003c/span\u003e.test(str);\n}\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e10.String\u003c/h2\u003e\u003ch3 class=\"heading\"\u003e10.1 digitUppercase\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * \n * @desc   现金额转大写\n * @param  {Number} n \n * @return {String}\n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003edigitUppercase\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003en\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e fraction = [\u003cspan class=\"hljs-string\"\u003e'角'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'分'\u003c/span\u003e];\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e digit = [\n        \u003cspan class=\"hljs-string\"\u003e'零'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'壹'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'贰'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'叁'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'肆'\u003c/span\u003e,\n        \u003cspan class=\"hljs-string\"\u003e'伍'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'陆'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'柒'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'捌'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'玖'\u003c/span\u003e\n    ];\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e unit = [\n        [\u003cspan class=\"hljs-string\"\u003e'元'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'万'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'亿'\u003c/span\u003e],\n        [\u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'拾'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'佰'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'仟'\u003c/span\u003e]\n    ];\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e head = n \u0026lt; \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ? \u003cspan class=\"hljs-string\"\u003e'欠'\u003c/span\u003e : \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e;\n    n = \u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.abs(n);\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e s = \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i \u0026lt; fraction.length; i++) {\n        s += (digit[\u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.floor(n * \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e * \u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.pow(\u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e, i)) % \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e] + fraction[i]).replace(\u003cspan class=\"hljs-regexp\"\u003e/零./\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e);\n    }\n    s = s || \u003cspan class=\"hljs-string\"\u003e'整'\u003c/span\u003e;\n    n = \u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.floor(n);\n    \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i \u0026lt; unit[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e].length \u0026amp;\u0026amp; n \u0026gt; \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i++) {\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e p = \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e j = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; j \u0026lt; unit[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e].length \u0026amp;\u0026amp; n \u0026gt; \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; j++) {\n            p = digit[n % \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e] + unit[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e][j] + p;\n            n = \u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.floor(n / \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e);\n        }\n        s = p.replace(\u003cspan class=\"hljs-regexp\"\u003e/(零.)*零$/\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e).replace(\u003cspan class=\"hljs-regexp\"\u003e/^$/\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'零'\u003c/span\u003e) + unit[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e][i] + s;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e head + s.replace(\u003cspan class=\"hljs-regexp\"\u003e/(零.)*零元/\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'元'\u003c/span\u003e)\n        .replace(\u003cspan class=\"hljs-regexp\"\u003e/(零.)+/g\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'零'\u003c/span\u003e)\n        .replace(\u003cspan class=\"hljs-regexp\"\u003e/^整$/\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'零元整'\u003c/span\u003e);\n};\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e11.Support\u003c/h2\u003e\u003ch3 class=\"heading\"\u003e11.1 isSupportWebP\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * \n * @desc 判断浏览器是否支持webP格式图片\n * @return {Boolean} \n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eisSupportWebP\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e !![].map \u0026amp;\u0026amp; \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.createElement(\u003cspan class=\"hljs-string\"\u003e'canvas'\u003c/span\u003e).toDataURL(\u003cspan class=\"hljs-string\"\u003e'image/webp'\u003c/span\u003e).indexOf(\u003cspan class=\"hljs-string\"\u003e'data:image/webp'\u003c/span\u003e) == \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n}\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e12.Time\u003c/h2\u003e\u003ch3 class=\"heading\"\u003e12.1 formatPassTime\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * @desc   格式化${startTime}距现在的已过时间\n * @param  {Date} startTime \n * @return {String}\n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eformatPassTime\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003estartTime\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e currentTime = \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e.parse(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e()),\n        time = currentTime - startTime,\n        day = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(time / (\u003cspan class=\"hljs-number\"\u003e1000\u003c/span\u003e * \u003cspan class=\"hljs-number\"\u003e60\u003c/span\u003e * \u003cspan class=\"hljs-number\"\u003e60\u003c/span\u003e * \u003cspan class=\"hljs-number\"\u003e24\u003c/span\u003e)),\n        hour = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(time / (\u003cspan class=\"hljs-number\"\u003e1000\u003c/span\u003e * \u003cspan class=\"hljs-number\"\u003e60\u003c/span\u003e * \u003cspan class=\"hljs-number\"\u003e60\u003c/span\u003e)),\n        min = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(time / (\u003cspan class=\"hljs-number\"\u003e1000\u003c/span\u003e * \u003cspan class=\"hljs-number\"\u003e60\u003c/span\u003e)),\n        month = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(day / \u003cspan class=\"hljs-number\"\u003e30\u003c/span\u003e),\n        year = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(month / \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (year) \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e year + \u003cspan class=\"hljs-string\"\u003e\"年前\"\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (month) \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e month + \u003cspan class=\"hljs-string\"\u003e\"个月前\"\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (day) \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e day + \u003cspan class=\"hljs-string\"\u003e\"天前\"\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (hour) \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e hour + \u003cspan class=\"hljs-string\"\u003e\"小时前\"\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (min) \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e min + \u003cspan class=\"hljs-string\"\u003e\"分钟前\"\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'刚刚'\u003c/span\u003e\n}\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e12.2 formatRemainTime\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * \n * @desc   格式化现在距${endTime}的剩余时间\n * @param  {Date} endTime  \n * @return {String}\n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eformatRemainTime\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eendTime\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e startDate = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(); \u003cspan class=\"hljs-comment\"\u003e//开始时间\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e endDate = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(endTime); \u003cspan class=\"hljs-comment\"\u003e//结束时间\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e t = endDate.getTime() - startDate.getTime(); \u003cspan class=\"hljs-comment\"\u003e//时间差\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e d = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,\n        h = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,\n        m = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,\n        s = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (t \u0026gt;= \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) {\n        d = \u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.floor(t / \u003cspan class=\"hljs-number\"\u003e1000\u003c/span\u003e / \u003cspan class=\"hljs-number\"\u003e3600\u003c/span\u003e / \u003cspan class=\"hljs-number\"\u003e24\u003c/span\u003e);\n        h = \u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.floor(t / \u003cspan class=\"hljs-number\"\u003e1000\u003c/span\u003e / \u003cspan class=\"hljs-number\"\u003e60\u003c/span\u003e / \u003cspan class=\"hljs-number\"\u003e60\u003c/span\u003e % \u003cspan class=\"hljs-number\"\u003e24\u003c/span\u003e);\n        m = \u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.floor(t / \u003cspan class=\"hljs-number\"\u003e1000\u003c/span\u003e / \u003cspan class=\"hljs-number\"\u003e60\u003c/span\u003e % \u003cspan class=\"hljs-number\"\u003e60\u003c/span\u003e);\n        s = \u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.floor(t / \u003cspan class=\"hljs-number\"\u003e1000\u003c/span\u003e % \u003cspan class=\"hljs-number\"\u003e60\u003c/span\u003e);\n    }\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e d + \u003cspan class=\"hljs-string\"\u003e\"天 \"\u003c/span\u003e + h + \u003cspan class=\"hljs-string\"\u003e\"小时 \"\u003c/span\u003e + m + \u003cspan class=\"hljs-string\"\u003e\"分钟 \"\u003c/span\u003e + s + \u003cspan class=\"hljs-string\"\u003e\"秒\"\u003c/span\u003e;\n}\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e13.Url\u003c/h2\u003e\u003ch3 class=\"heading\"\u003e13.1 parseQueryString\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * \n * @desc   url参数转对象\n * @param  {String} url  default: window.location.href\n * @return {Object} \n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eparseQueryString\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eurl\u003c/span\u003e) \u003c/span\u003e{\n    url = url == \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e ? \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.location.href : url\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e search = url.substring(url.lastIndexOf(\u003cspan class=\"hljs-string\"\u003e'?'\u003c/span\u003e) + \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e)\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!search) {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e {}\n    }\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eJSON\u003c/span\u003e.parse(\u003cspan class=\"hljs-string\"\u003e'{\"'\u003c/span\u003e + \u003cspan class=\"hljs-built_in\"\u003edecodeURIComponent\u003c/span\u003e(search).replace(\u003cspan class=\"hljs-regexp\"\u003e/\"/g\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'\\\\\"'\u003c/span\u003e).replace(\u003cspan class=\"hljs-regexp\"\u003e/\u0026amp;/g\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'\",\"'\u003c/span\u003e).replace(\u003cspan class=\"hljs-regexp\"\u003e/=/g\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'\":\"'\u003c/span\u003e) + \u003cspan class=\"hljs-string\"\u003e'\"}'\u003c/span\u003e)\n}\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e13.2 stringfyQueryString\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * \n * @desc   对象序列化\n * @param  {Object} obj \n * @return {String}\n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003estringfyQueryString\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eobj\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!obj) \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e pairs = [];\n\n    \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e key \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e obj) {\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e value = obj[key];\n\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (value \u003cspan class=\"hljs-keyword\"\u003einstanceof\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eArray\u003c/span\u003e) {\n            \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i \u0026lt; value.length; ++i) {\n                pairs.push(\u003cspan class=\"hljs-built_in\"\u003eencodeURIComponent\u003c/span\u003e(key + \u003cspan class=\"hljs-string\"\u003e'['\u003c/span\u003e + i + \u003cspan class=\"hljs-string\"\u003e']'\u003c/span\u003e) + \u003cspan class=\"hljs-string\"\u003e'='\u003c/span\u003e + \u003cspan class=\"hljs-built_in\"\u003eencodeURIComponent\u003c/span\u003e(value[i]));\n            }\n            \u003cspan class=\"hljs-keyword\"\u003econtinue\u003c/span\u003e;\n        }\n\n        pairs.push(\u003cspan class=\"hljs-built_in\"\u003eencodeURIComponent\u003c/span\u003e(key) + \u003cspan class=\"hljs-string\"\u003e'='\u003c/span\u003e + \u003cspan class=\"hljs-built_in\"\u003eencodeURIComponent\u003c/span\u003e(obj[key]));\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e pairs.join(\u003cspan class=\"hljs-string\"\u003e'\u0026amp;'\u003c/span\u003e);\n}\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e14.Function\u003c/h2\u003e\u003ch3 class=\"heading\"\u003e14.1 throttle\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * @desc   函数节流。\n * 适用于限制`resize`和`scroll`等函数的调用频率\n *\n * @param  {Number}    delay          0 或者更大的毫秒数。 对于事件回调，大约100或250毫秒（或更高）的延迟是最有用的。\n * @param  {Boolean}   noTrailing     可选，默认为false。\n *                                    如果noTrailing为true，当节流函数被调用，每过`delay`毫秒`callback`也将执行一次。\n *                                    如果noTrailing为false或者未传入，`callback`将在最后一次调用节流函数后再执行一次.\n *                                    （延迟`delay`毫秒之后，节流函数没有被调用,内部计数器会复位）\n * @param  {Function}  callback       延迟毫秒后执行的函数。`this`上下文和所有参数都是按原样传递的，\n *                                    执行去节流功能时，调用`callback`。\n * @param  {Boolean}   debounceMode   如果`debounceMode`为true，`clear`在`delay`ms后执行。\n *                                    如果debounceMode是false，`callback`在`delay` ms之后执行。\n *\n * @return {Function}  新的节流函数\n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ethrottle\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003edelay, noTrailing, callback, debounceMode\u003c/span\u003e) \u003c/span\u003e{\n\n    \u003cspan class=\"hljs-comment\"\u003e// After wrapper has stopped being called, this timeout ensures that\u003c/span\u003e\n    \u003cspan class=\"hljs-comment\"\u003e// `callback` is executed at the proper times in `throttle` and `end`\u003c/span\u003e\n    \u003cspan class=\"hljs-comment\"\u003e// debounce modes.\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e timeoutID;\n\n    \u003cspan class=\"hljs-comment\"\u003e// Keep track of the last time `callback` was executed.\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e lastExec = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n\n    \u003cspan class=\"hljs-comment\"\u003e// `noTrailing` defaults to falsy.\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003etypeof\u003c/span\u003e noTrailing !== \u003cspan class=\"hljs-string\"\u003e'boolean'\u003c/span\u003e) {\n        debounceMode = callback;\n        callback = noTrailing;\n        noTrailing = \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e;\n    }\n\n    \u003cspan class=\"hljs-comment\"\u003e// The `wrapper` function encapsulates all of the throttling / debouncing\u003c/span\u003e\n    \u003cspan class=\"hljs-comment\"\u003e// functionality and when executed will limit the rate at which `callback`\u003c/span\u003e\n    \u003cspan class=\"hljs-comment\"\u003e// is executed.\u003c/span\u003e\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ewrapper\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e self = \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e elapsed = \u003cspan class=\"hljs-built_in\"\u003eNumber\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e()) - lastExec;\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e args = \u003cspan class=\"hljs-built_in\"\u003earguments\u003c/span\u003e;\n\n        \u003cspan class=\"hljs-comment\"\u003e// Execute `callback` and update the `lastExec` timestamp.\u003c/span\u003e\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eexec\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n            lastExec = \u003cspan class=\"hljs-built_in\"\u003eNumber\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e());\n            callback.apply(self, args);\n        }\n\n        \u003cspan class=\"hljs-comment\"\u003e// If `debounceMode` is true (at begin) this is used to clear the flag\u003c/span\u003e\n        \u003cspan class=\"hljs-comment\"\u003e// to allow future `callback` executions.\u003c/span\u003e\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eclear\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n            timeoutID = \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e;\n        }\n\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (debounceMode \u0026amp;\u0026amp; !timeoutID) {\n            \u003cspan class=\"hljs-comment\"\u003e// Since `wrapper` is being called for the first time and\u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e// `debounceMode` is true (at begin), execute `callback`.\u003c/span\u003e\n            exec();\n        }\n\n        \u003cspan class=\"hljs-comment\"\u003e// Clear any existing timeout.\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (timeoutID) {\n            clearTimeout(timeoutID);\n        }\n\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (debounceMode === \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e \u0026amp;\u0026amp; elapsed \u0026gt; delay) {\n            \u003cspan class=\"hljs-comment\"\u003e// In throttle mode, if `delay` time has been exceeded, execute\u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e// `callback`.\u003c/span\u003e\n            exec();\n\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (noTrailing !== \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e) {\n            \u003cspan class=\"hljs-comment\"\u003e// In trailing throttle mode, since `delay` time has not been\u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e// exceeded, schedule `callback` to execute `delay` ms after most\u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e// recent execution.\u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e//\u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e// If `debounceMode` is true (at begin), schedule `clear` to execute\u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e// after `delay` ms.\u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e//\u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e// If `debounceMode` is false (at end), schedule `callback` to\u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e// execute after `delay` ms.\u003c/span\u003e\n            timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e ? delay - elapsed : delay);\n        }\n\n    }\n\n    \u003cspan class=\"hljs-comment\"\u003e// Return the wrapper function.\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e wrapper;\n\n};\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e14.2 debounce\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * @desc 函数防抖 \n * 与throttle不同的是，debounce保证一个函数在多少毫秒内不再被触发，只会执行一次，\n * 要么在第一次调用return的防抖函数时执行，要么在延迟指定毫秒后调用。\n * @example 适用场景：如在线编辑的自动存储防抖。\n * @param  {Number}   delay         0或者更大的毫秒数。 对于事件回调，大约100或250毫秒（或更高）的延迟是最有用的。\n * @param  {Boolean}  atBegin       可选，默认为false。\n *                                  如果`atBegin`为false或未传入，回调函数则在第一次调用return的防抖函数后延迟指定毫秒调用。\n                                    如果`atBegin`为true，回调函数则在第一次调用return的防抖函数时直接执行\n * @param  {Function} callback      延迟毫秒后执行的函数。`this`上下文和所有参数都是按原样传递的，\n *                                  执行去抖动功能时，，调用`callback`。\n *\n * @return {Function} 新的防抖函数。\n */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e throttle = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'./throttle'\u003c/span\u003e);\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003edebounce\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003edelay, atBegin, callback\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e callback === \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e ? throttle(delay, atBegin, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e) : throttle(delay, callback, atBegin !== \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n};\u003c/code\u003e\u003c/pre\u003e\u003ch1 class=\"heading\"\u003e封装\u003c/h1\u003e\u003cp\u003e除了对上面这些常用函数进行封装， 最重要的是支持合理化的引入，这里我们使用\u003ccode\u003ewebpack\u003c/code\u003e统一打包成\u003ccode\u003eUMD\u003c/code\u003e 通用模块规范，支持\u003ccode\u003ewebpack\u003c/code\u003e、\u003ccode\u003eRequireJS\u003c/code\u003e、\u003ccode\u003eSeaJS\u003c/code\u003e等模块加载器，亦或直接通过\u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e标签引入。\u003c/p\u003e\n\u003cp\u003e但这样，还是不能让人满意。因为完整引入整个库，略显浪费，我们不可能用到所有的函数。那么，就支持\u003cstrong\u003e按需引入\u003c/strong\u003e吧\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e1.目录结构说明\u003c/h2\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e│  .babelrc\n│  .gitignore\n│  .travis.yml\n│  LICENSE\n│  package.json\n│  README.md\n│  \u003cspan class=\"hljs-built_in\"\u003eset\u003c/span\u003eCookie.js  // 拷贝到根路径的函数模块，方便按需加载\n│  \u003cspan class=\"hljs-built_in\"\u003eset\u003c/span\u003eScrollTop.js\n│  stringfyQueryString.js\n│   ...\n│   ...\n│  \n├─min\n│      outils.min.js  // 所有函数统一打包生成的全量压缩包\n│      \n├─script  // 本项目开发脚本目录\n│      build.js  // 打包构建脚本\n│      test.js  // 测试脚本\n│      webpack.conf.js  // webpack打包配置文件\n│      \n├─src // 源码目录\n│  │  index.js  // webpack入口文件\n│  │  \n│  ├─array\n│  │      \n│  ├─class\n│  │      \n│  ├─cookie\n│  │      \n│  ├─device\n│  │      \n│  ├─dom\n│  │      \n│  ├─keycode\n│  │      \n│  ├─object\n│  │      \n│  ├─random\n│  │      \n│  ├─regexp\n│  │      \n│  ├─string\n│  │      \n│  ├─support\n│  │      \n│  ├─time\n│  │      \n│  └─url\n│          \n└─\u003cspan class=\"hljs-built_in\"\u003etest\u003c/span\u003e // 测试用例目录\n    │  array.test.js\n    │  class.test.js\n    │  cookie.test.js\n    │  device.test.js\n    │  dom.test.js\n    │  index.html\n    │  keycode.test.js\n    │  object.test.js\n    │  random.test.js\n    │  regexp.test.js\n    │  string.test.js\n    │  support.test.js\n    │  time.test.js\n    │  url.test.js\n    │  \n    └─_lib // 测试所用到的第三方库\n            mocha.css\n            mocha.js\n            power-assert.js\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e2.构建脚本\u003c/h2\u003e\u003cp\u003e这里主要说明一下项目中\u003ca href=\"https://github.com/proYang/outils/blob/master/script/build.js\"\u003e build.js \u003c/a\u003e的构建过程\u003cbr\u003e第一步，构建全量压缩包，先删除\u003ccode\u003emin\u003c/code\u003e目录中之前的\u003ccode\u003eoutils.min.js\u003c/code\u003e，后通过\u003ccode\u003ewebpack\u003c/code\u003e打包并保存新的压缩包至\u003ccode\u003emin\u003c/code\u003e目录中：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e    ......\n    ......\n    \u003cspan class=\"hljs-comment\"\u003e// 删除旧的全量压缩包\u003c/span\u003e\n    rm(path.resolve(rootPath, \u003cspan class=\"hljs-string\"\u003e'min'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e`\u003cspan class=\"hljs-subst\"\u003e${pkg.name}\u003c/span\u003e.min.js`\u003c/span\u003e), err =\u0026gt; {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (err) \u003cspan class=\"hljs-keyword\"\u003ethrow\u003c/span\u003e (err)\n        webpack(config, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003eerr, stats\u003c/span\u003e) \u003c/span\u003e{\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (err) \u003cspan class=\"hljs-keyword\"\u003ethrow\u003c/span\u003e (err)\n            building.stop()\n            process.stdout.write(stats.toString({\n                \u003cspan class=\"hljs-attr\"\u003ecolors\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n                \u003cspan class=\"hljs-attr\"\u003emodules\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,\n                \u003cspan class=\"hljs-attr\"\u003echildren\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,\n                \u003cspan class=\"hljs-attr\"\u003echunks\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,\n                \u003cspan class=\"hljs-attr\"\u003echunkModules\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\n            }) + \u003cspan class=\"hljs-string\"\u003e'\\n\\n'\u003c/span\u003e)\n            resolve()\n            \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(chalk.cyan(\u003cspan class=\"hljs-string\"\u003e'  Build complete.\\n'\u003c/span\u003e))\n        })\n    })\n    ......\n    ......\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e第二步，拷贝函数模块至根目录，先删除根目录中之前的函数模块，后拷贝\u003ccode\u003esrc\u003c/code\u003e下面一层目录的所有\u003ccode\u003ejs\u003c/code\u003e文件至根目录。这么做的目的是，拷贝到根路径，在引入的时候，直接\u003ccode\u003erequire('outils/\u0026lt;方法名\u0026gt;')\u003c/code\u003e即可，缩短引入的路径，也算是提高点效率。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e// 替换模块文件\u003c/span\u003e\n    ......\n    ......\n    \u003cspan class=\"hljs-comment\"\u003e// 先删除根目录中之前的函数模块\u003c/span\u003e\n    rm(\u003cspan class=\"hljs-string\"\u003e'*.js'\u003c/span\u003e, err =\u0026gt; {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (err) \u003cspan class=\"hljs-keyword\"\u003ethrow\u003c/span\u003e (err)\n        \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e folderList = fs.readdirSync(path.resolve(rootPath, \u003cspan class=\"hljs-string\"\u003e'src'\u003c/span\u003e))\n        folderList.forEach(\u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003eitem, index\u003c/span\u003e) =\u0026gt;\u003c/span\u003e {\n            \u003cspan class=\"hljs-comment\"\u003e// 拷贝`src`下面一层目录的所有`js`文件至根目录\u003c/span\u003e\n            copy(\u003cspan class=\"hljs-string\"\u003e`src/\u003cspan class=\"hljs-subst\"\u003e${item}\u003c/span\u003e/*.js`\u003c/span\u003e, rootPath, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003eerr, files\u003c/span\u003e) \u003c/span\u003e{\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (err) \u003cspan class=\"hljs-keyword\"\u003ethrow\u003c/span\u003e err;\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (index === folderList.length - \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) {\n                    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(chalk.cyan(\u003cspan class=\"hljs-string\"\u003e'  Copy complete.\\n'\u003c/span\u003e))\n                    copying.stop()\n                }\n            })\n        })\n    })\n    ......\n    ......\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e3.书写测试用例\u003c/h2\u003e\u003cp\u003e俗话说，不写测试用例的前端不是一个好程序员。那就不能怂，就是干。\u003c/p\u003e\n\u003cp\u003e但是因为时间关系，本项目暂时通过项目中的\u003ca href=\"https://github.com/proYang/outils/blob/master/script/test.js\"\u003e test.js \u003c/a\u003e，启动了一个\u003ccode\u003ekoa\u003c/code\u003e静态服务器，来加载\u003ccode\u003emocha\u003c/code\u003e网页端的测试页面，让笔者书写项目时，可以在本地对函数功能进行测试。\u003cbr\u003e但是后续将使用\u003ccode\u003etravis-ci\u003c/code\u003e配合\u003ccode\u003eGithub\u003c/code\u003e来做持续化构建，自动发布到\u003ccode\u003enpm\u003c/code\u003e。改用\u003ccode\u003ekarma\u003c/code\u003e，\u003ccode\u003emocha\u003c/code\u003e，\u003ccode\u003epower-assert\u003c/code\u003e做单元测试，使用\u003ccode\u003eCoverage\u003c/code\u003e测试覆盖率。这一部分，后续更新。\u003c/p\u003e\n\u003cp\u003e这里给大家推荐一个好用的断言库\u003ca href=\"https://www.npmjs.com/package/power-assert\"\u003e power-assert \u003c/a\u003e，这个库记住\u003ccode\u003eassert(value, [message])\u003c/code\u003e一个API就基本无敌，从此再也不用担心记不住断言库的API。\u003c/p\u003e\n\u003cp\u003e本项目的所有测试用例都在\u003ccode\u003etest\u003c/code\u003e目录下，大家可以作一定参考。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e更新：单元测试，已使用\u003ccode\u003ekarma\u003c/code\u003e，\u003ccode\u003emocha\u003c/code\u003e，\u003ccode\u003epower-assert\u003c/code\u003e，使用\u003ccode\u003eCoverage\u003c/code\u003e测试覆盖率，并集成\u003ca href=\"https://travis-ci.org/\"\u003e travis-ci \u003c/a\u003e配合\u003ccode\u003eGithub\u003c/code\u003e来做持续化构建，可以参考本项目的\u003ccode\u003etravis\u003c/code\u003e配置文件\u003ca href=\"https://github.com/proYang/outils/blob/master/.travis.yml\"\u003e .travis.yml \u003c/a\u003e和\u003ccode\u003ekarma\u003c/code\u003e的配置文件\u003ca href=\"https://github.com/proYang/outils/blob/master/script/karma.conf.js\"\u003e karma.conf.js \u003c/a\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch1 class=\"heading\"\u003e发布\u003c/h1\u003e\u003cp\u003e首先放到\u003ccode\u003eGithub\u003c/code\u003e托管一下，当然你也可以直接\u003ca href=\"https://github.com/proYang/outils/\"\u003efork\u003c/a\u003e本项目，然后再加入你自己的函数。\u003cbr\u003e以笔者项目，举个栗子:\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e1.添加自己的函数\u003c/h3\u003e\u003cp\u003e在\u003ccode\u003esrc\u003c/code\u003e目录下，新建分类目录或者选择一个分类，在子文件夹中添加函数模块文件（建议一个小功能保存为一个JS文件）。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * \n * @desc   判断是否NaN\n * @param  {Any} value \n * @return {Boolean}\n */\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eisNaN\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003evalue\u003c/span\u003e) \u003c/span\u003e{    \n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e value !== value;\n};\n\nmodules.export = \u003cspan class=\"hljs-built_in\"\u003eisNaN\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e然后记得在\u003ccode\u003esrc/index.js\u003c/code\u003e文件中暴露\u003ccode\u003eisNaN\u003c/code\u003e函数\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e2.单元测试\u003c/h3\u003e\u003cp\u003e在\u003ccode\u003etest\u003c/code\u003e文件新建测试用例\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003edescribe(\u003cspan class=\"hljs-string\"\u003e'#isNaN()'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n    it(\u003cspan class=\"hljs-string\"\u003e`outils.isNaN(NaN) should return true`\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        assert(outils.isNaN(\u003cspan class=\"hljs-literal\"\u003eNaN\u003c/span\u003e))\n    })\n    it(\u003cspan class=\"hljs-string\"\u003e`outils.isNaN('value') should return false`\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        assert.notEqual(outils.isNaN(\u003cspan class=\"hljs-literal\"\u003eNaN\u003c/span\u003e))\n    })\n})\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cdel\u003e然后记得在\u003ccode\u003etest/index.html\u003c/code\u003e中引入之前创建的测试用例脚本。\u003c/del\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e3.测试并打包\u003c/h3\u003e\u003cp\u003e执行\u003ccode\u003enpm run test\u003c/code\u003e，看所有的测试用例是否通过。如果没有问题，执行\u003ccode\u003enpm run build\u003c/code\u003e构建，之后提交到个人的 github 仓库即可。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e4.发布到\u003ccode\u003enpm\u003c/code\u003e\u003c/h3\u003e\u003cp\u003e在\u003ca href=\"https://www.npmjs.com/\"\u003e www.npmjs.com \u003c/a\u003e注册账号，修改本地\u003ccode\u003epackage.json\u003c/code\u003e中的\u003ccode\u003ename\u003c/code\u003e、\u003ccode\u003eversion\u003c/code\u003e、\u003ccode\u003eauthor\u003c/code\u003e等信息，最后\u003ccode\u003enpm publish\u003c/code\u003e就大功告成了。\u003cbr\u003e注意：向\u003ccode\u003enpm\u003c/code\u003e发包，要把镜像源切到\u003ca href=\"https://www.npmjs.com/\"\u003e www.npmjs.com \u003c/a\u003e，使用\u003ccode\u003ecnpm\u003c/code\u003e等第三方镜像源会报错。\u003c/p\u003e\n\u003ch1 class=\"heading\"\u003e使用\u003c/h1\u003e\u003ch3 class=\"heading\"\u003e1.浏览器\u003c/h3\u003e\u003cp\u003e直接下载\u003ccode\u003emin\u003c/code\u003e目录下的\u003ca href=\"https://github.com/proYang/outils/blob/master/min/outils.min.js\"\u003e outils.min.js \u003c/a\u003e，通过\u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e标签引入。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"outils.min.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"actionscript\"\u003e\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e OS = outils.getOS()\n  \u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e注意： 本仓库代码会持续更新，如果你需要不同版本的增量压缩包或源码，请到\u003ca href=\"https://github.com/proYang/outils/releases\"\u003e github Release \u003c/a\u003e页面下载对应版本号的代码。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e2.Webpack、RequireJS、SeaJS等模块加载器\u003c/h3\u003e\u003cp\u003e先使用\u003ccode\u003enpm\u003c/code\u003e安装\u003ccode\u003eoutils\u003c/code\u003e。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e$ npm install --save-dev outils\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e// 完整引入\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e outils = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'outils'\u003c/span\u003e)\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e OS = outils.getOS()\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e推荐使用方法\u003c/strong\u003e  \u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-comment\"\u003e// 按需引入require('outils/\u0026lt;方法名\u0026gt;')\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e getOS = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'outils/getOS'\u003c/span\u003e)\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e OS = getOS()\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e当然，你的开发环境有\u003ccode\u003ebabel\u003c/code\u003e编译\u003ccode\u003eES6\u003c/code\u003e语法的话，也可以这样使用：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"JavaScript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e getOS \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'outils/getOS'\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e// 或\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { getOS } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"outils\"\u003c/span\u003e;\u003c/code\u003e\u003c/pre\u003e\u003ch1 class=\"heading\"\u003e总结\u003c/h1\u003e\u003cp\u003e这里只是简单封装，发布到\u003ccode\u003enpm\u003c/code\u003e上，省去下次复制粘贴的功夫，或者直接Goole的时间。如果笔者的库中，没有你常用的函数，或者你有更好的建议，欢迎来本项目的\u003ca href=\"https://github.com/proYang/outils/issues\"\u003e Github Issues \u003c/a\u003e交流，如果觉得不错，欢迎\u003ca href=\"https://github.com/proYang/outils\"\u003e star \u003c/a\u003e本项目。\u003c/p\u003e\n\u003cp\u003e当然，更好的建议是\u003ca href=\"https://github.com/proYang/outils\"\u003e fork \u003c/a\u003e本项目，或者直接新建自己的项目，添加自己 \u003cstrong\u003e想要的\u003c/strong\u003e 、\u003cstrong\u003e常用的\u003c/strong\u003e 、\u003cstrong\u003e记不住的\u003c/strong\u003e 函数，甚至是可以抽象出来的功能，封装成自己顺手、熟悉的库。 这样才能打造出你自己的武器库，瞬间提高你的单兵作战（开发）能力。\u003c/p\u003e\n\u003cp\u003e工欲善其事必先利其器。有了属于自己的这把利器，希望加班也会变成奢望。O(∩_∩)O哈哈~\u003c/p\u003e\n","buildTime":"1514380199.8183","__v":0}
{"_id":{"$oid":"5a44e660e8623327d0d60efd"},"id":"5a3e241f6fb9a0452a3c883e","author":{"$oid":"5a44e660e8623327d0d60ef1"},"title":"Mobx 初探","meta":{"likeCount":0},"tag":["React.js","MobX"],"comment":[],"content":"\u003ch2 class=\"heading\"\u003e什么是Mobx\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://cn.mobx.js.org/\"\u003e官网\u003c/a\u003e\n\u003ca target=\"_blank\" href=\"https://github.com/mobxjs/mobx\"\u003egithub-mobx\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eMobX 是一个经过战火洗礼的库，\n它通过透明的函数响应式编程\n(transparently applying functional reactive programming - TFRP)\n使得状态管理变得简单和可扩展。\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"pic\" src=\"https://user-gold-cdn.xitu.io/2017/12/23/16082bd0d39dc37d?w=1407\u0026amp;h=483\u0026amp;f=png\u0026amp;s=79147\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e更多详细介绍，请移步官网细阅。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e为什么使用Mobx\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eReact 和 MobX 是一对强力组合。React 通过提供机制把应用状态转换为可渲染组件树并对其进行渲染。而MobX提供机制来存储和更新应用状态供 React 使用。 ——官方文档\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e可能我们都比较熟悉Redux,简而言之Mobx是比Redux更有力的和React结合使用的助手。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e如何使用\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e下面我们就用一个例子简单的使用Mobx——ToDOList.\nTalking is cheap, show me your code!\n\u003ca target=\"_blank\" href=\"https://github.com/GitHubJiKe/parcel-react-demo\"\u003e代码地址\u003c/a\u003e 由于没有和parcel使用初探的代码分离，所以，希望你也能看的明白\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 class=\"heading\"\u003e编辑器\u003c/h3\u003e\n\u003cp\u003eVSCode\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003e编辑器配置\u003c/h4\u003e\n\u003cblockquote\u003e\n\u003cp\u003e为了使用Es.next的装饰器语言@，需要配置VsCode，具体——\u003ca target=\"_blank\" href=\"http://cn.mobx.js.org/best/decorators.html\"\u003e如何(不)使用装饰器\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"vscode setup\" src=\"https://user-gold-cdn.xitu.io/2017/12/23/16082bd1381522e2?w=710\u0026amp;h=326\u0026amp;f=jpeg\u0026amp;s=54808\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e依赖\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e//package.json file setup:\n  \u003cspan class=\"hljs-string\"\u003e\"dependencies\"\u003c/span\u003e: {\n    \u003cspan class=\"hljs-string\"\u003e\"mobx\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"^3.4.1\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-string\"\u003e\"mobx-react\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"^4.3.5\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-string\"\u003e\"react\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"^16.2.0\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-string\"\u003e\"react-dom\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"^16.2.0\"\u003c/span\u003e\n    }\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e//package.json file setup:\n  \u003cspan class=\"hljs-string\"\u003e\"devDependencies\"\u003c/span\u003e: {\n    \u003cspan class=\"hljs-string\"\u003e\"babel-cli\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"^6.26.0\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-string\"\u003e\"babel-plugin-transform-decorators-legacy\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"^1.3.4\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-string\"\u003e\"babel-preset-env\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"^1.6.1\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-string\"\u003e\"babel-preset-es2015\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"^6.24.1\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-string\"\u003e\"babel-preset-react\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"^6.24.1\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-string\"\u003e\"babel-preset-stage-1\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"^6.24.1\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-string\"\u003e\"mobx-react-devtools\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"^4.2.15\"\u003c/span\u003e,\n    }\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e配置\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e//.babelrc file setup:\n{\n  \u003cspan class=\"hljs-string\"\u003e\"presets\"\u003c/span\u003e: [\n    \u003cspan class=\"hljs-string\"\u003e\"env\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-string\"\u003e\"react\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-string\"\u003e\"es2015\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-string\"\u003e\"stage-1\"\u003c/span\u003e\n  ],\n  \u003cspan class=\"hljs-string\"\u003e\"plugins\"\u003c/span\u003e: [\n    \u003cspan class=\"hljs-string\"\u003e\"transform-decorators-legacy\"\u003c/span\u003e\n  ]\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e代码\u003c/h3\u003e\n\u003ch4 class=\"heading\"\u003estore 创建\u003c/h4\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eimport { observable, autorun, computed, action } from \u003cspan class=\"hljs-string\"\u003e'mobx'\u003c/span\u003e;\n\n\nclass toDo {\n  id = Math.random();\n  @observable title = \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e;\n  @observable completed = \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n}\n\nclass todoStore {\n  @observable todos = [];\n\n  @computed get \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003ecompletedCount\u003c/span\u003e\u003c/span\u003e() {\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e this.todos.filter(todo =\u0026gt; todo.completed).length;\n  }\n  \n  @computed get \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003etotalCount\u003c/span\u003e\u003c/span\u003e() {\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e this.todos.length;\n  }\n\n  @action.bound toggleCompleted(id) {\n    this.todos.forEach(todo =\u0026gt; {\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (todo.id === id) todo.completed = !todo.completed;\n    })\n  }\n\n  @action.bound addToDo(title) {\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!title) \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e alert(\u003cspan class=\"hljs-string\"\u003e'please input something...'\u003c/span\u003e);\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e todo = new toDo();\n    todo.title = title;\n    this.todos.push(todo);\n  }\n};\n\nconst store = new todoStore();\n\n\u003cspan class=\"hljs-built_in\"\u003eexport\u003c/span\u003e { store }\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 class=\"heading\"\u003eToDo组件\u003c/h4\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eimport React, { Component } from \u003cspan class=\"hljs-string\"\u003e'react'\u003c/span\u003e;\nimport { observer } from \u003cspan class=\"hljs-string\"\u003e\"mobx-react\"\u003c/span\u003e;\nimport { store } from \u003cspan class=\"hljs-string\"\u003e'../../store'\u003c/span\u003e\nimport \u003cspan class=\"hljs-string\"\u003e'./style.css'\u003c/span\u003e\n\n@observer \u003cspan class=\"hljs-built_in\"\u003eexport\u003c/span\u003e default class ToDo extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003erender\u003c/span\u003e\u003c/span\u003e() {\n    const { title, id, completed } = this.props;\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e (\u0026lt;div\n      className={`todo \u003cspan class=\"hljs-variable\"\u003e${completed ? 'completed' : ''}\u003c/span\u003e`}\n      onClick={() =\u0026gt; store.toggleCompleted(id)}\n    \u0026gt;\n      {title}\n    \u0026lt;/div\u0026gt;);\n  }\n}\n//style.css\n.todo{\n  background-color: white;\n  text-align: center;\n  font-size: 30px;\n  margin: 3px;\n}\n\n.todo.completed{\n  background-color: brown;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 class=\"heading\"\u003eApp.js\u003c/h4\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eimport React, { Component } from \u003cspan class=\"hljs-string\"\u003e'react'\u003c/span\u003e\nimport { observer } from \u003cspan class=\"hljs-string\"\u003e\"mobx-react\"\u003c/span\u003e;\nimport DevTools from \u003cspan class=\"hljs-string\"\u003e'mobx-react-devtools'\u003c/span\u003e\nimport ToDo from \u003cspan class=\"hljs-string\"\u003e'./components/ToDo'\u003c/span\u003e\nimport { store } from \u003cspan class=\"hljs-string\"\u003e'./store'\u003c/span\u003e\n\n\nconst TEXT = \u003cspan class=\"hljs-string\"\u003e'please input something...'\u003c/span\u003e;\nconst ToDoList = ({ todos }) =\u0026gt; todos.map(t =\u0026gt; \u0026lt;ToDo key={t.id} {...t} /\u0026gt;);\n\n@observer \u003cspan class=\"hljs-built_in\"\u003eexport\u003c/span\u003e default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e\n    }\n  }\n\n  \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003erender\u003c/span\u003e\u003c/span\u003e() {\n    const { title } = this.state;\n    const { todos, totalCount, completedCount } = store;\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e (\u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"APP\"\u003c/span\u003e\u0026gt;\n      \u0026lt;input\n        style={{ width: 300 }}\n        placeholder={TEXT}\n        value={title}\n        onChange={e =\u0026gt; this.setState({ title: e.currentTarget.value })}\n      /\u0026gt;\n      \u0026lt;button onClick={() =\u0026gt; {\n        store.addToDo(title);\n        this.setState({ title: \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e });\n      }}\u0026gt;Add one ToDo\u0026lt;/button\u0026gt;\n      \u0026lt;div\u0026gt;{`total count:\u003cspan class=\"hljs-variable\"\u003e${totalCount}\u003c/span\u003e`}\u0026lt;/div\u0026gt;\n      \u0026lt;div\u0026gt;{`total completed count:\u003cspan class=\"hljs-variable\"\u003e${completedCount}\u003c/span\u003e`}\u0026lt;/div\u0026gt;\n      \u0026lt;ToDoList todos={todos} /\u0026gt;\n      \u0026lt;DevTools /\u0026gt;\n    \u0026lt;/div\u0026gt;);\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e效果图\u003c/h3\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"show\" src=\"https://user-gold-cdn.xitu.io/2017/12/23/16082bd13062cb8e?w=710\u0026amp;h=165\u0026amp;f=jpeg\u0026amp;s=32260\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n","buildTime":"1514456597.2311","__v":0}
{"_id":{"$oid":"5a44e660e8623327d0d60efe"},"id":"5a30fd53f265da431a43303c","author":{"$oid":"5a44e660e8623327d0d60ef0"},"title":"vue 项目如何引入微信sdk，使用微信分享接口","meta":{"likeCount":0},"tag":["微信","API","后端","Vue.js"],"comment":[],"content":"\u003ch2 class=\"heading\"\u003e写在前面：\u003c/h2\u003e\n\u003cp\u003e做微信的网页基本上都要接入微信的sdk，我在做的时候，也颇费了一番功夫，然后就想记录一下，供自己日后翻阅，以及让有需要的朋友可以做一下参考，如果喜欢的可以点波赞，或者关注一下，希望可以帮到大家。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e本文首发于我的个人blog：\u003ca target=\"_blank\" href=\"http://obkoro1.com/\"\u003eobkoro1.com\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 class=\"heading\"\u003e安装sdk\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003e    npm install weixin-js-sdk --save\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e开始之前大家可以先读一读微信公众号的 \u003cstrong\u003e\u003ca target=\"_blank\" href=\"https://mp.weixin.qq.com/wiki?t=resource/res_main\u0026amp;id=mp1421141115\"\u003e接入文档\u003c/a\u003e\u003c/strong\u003e，vue是单页面项目，比如你想要接入微信分享功能，分享功能在每个路由地址都要有，因为每个路由的url是不一样的，搜易就需要在每个路由地址都引入一遍。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e整体步骤：\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003evue引入sdk的话，就是在路由组件里面的，组件生命周期的：creatd()和mounted()里面放代码。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e用伪代码，熟悉一下整体的流程，要做哪些事情：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e //wx是引入的微信sdk\n wx.config('这里有一些参数');//通过config接口注入权限验证配置\n \n wx.ready(function() { //通过ready接口处理成功验证\n // config信息验证成功后会执行ready方法\n     wx.onMenuShareAppMessage({ // 分享给朋友  ,在config里面填写需要使用的JS接口列表，然后这个方法才可以用 \n         title: '这里是标题', // 分享标题\n         desc: 'This is a test!', // 分享描述\n         link: '链接', // 分享链接\n         imgUrl: '图片', // 分享图标\n         type: '', // 分享类型,music、video或link，不填默认为link\n         dataUrl: '', // 如果type是music或video，则要提供数据链接，默认为空\n         success: function() {\n             // 用户确认分享后执行的回调函数\n         },\n         cancel: function() {\n             // 用户取消分享后执行的回调函数\n         }\n          });\n         wx.onMenuShareTimeline({ //分享朋友圈\n         title: '标题', // 分享标题\n         link: '链接',\n         imgUrl: '图片', // 分享图标\n         success: function() {\n             // 用户确认分享后执行的回调函数\n         },\n         cancel: function() {\n             // 用户取消分享后执行的回调函数\n         }\n     });\n });\n  wxx.error(function(res){//通过error接口处理失败验证\n     // config信息验证失败会执行error函数\n });\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e上面的流程多看几遍，对整个流程有个概念，其中最重要的一步就是下面这个借口注入权限。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003econfig接口注入权限\u003c/h3\u003e\n\u003cp\u003e接入微信接口的最主要也是最重要一步步就是填写下面这些信息，填完这些信息之后，基本就好了。下面这些信息通常是通过后端接口来获取的。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ewx.config({\n    debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。\n    appId: '', // 必填，公众号的唯一标识\n    timestamp: , // 必填，生成签名的时间戳\n    nonceStr: '', // 必填，生成签名的随机串\n    signature: '',// 必填，签名，见附录1\n    jsApiList: [] // 必填，需要使用的JS接口列表，所有JS接口列表见附录2\n});\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 class=\"heading\"\u003e获取config配置信息：\u003c/h3\u003e\n\u003cp\u003e前端要获取上面那些信息，不用做太多东西，只要调后端接口就可以了。后端会把那些信息处理好，然后通过一个接口返给你这些参数。你要给后端传一个\u003cstrong\u003e当前路由页面的完整url\u003c/strong\u003e，后端就会返回上述的那些信息给你，后面就可以根据自己的需求调用相应的接口，自定义里面的东西。\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003e坑点：url\u003c/h4\u003e\n\u003cp\u003e这里要注意的就是url的问题，如果url没有正确传递，后端也会返回信息，但是签名信息会是错误的。\u003c/p\u003e\n\u003cp\u003e上面提到的完整url指的是：'http(s)://'部分，以及'？'后面的GET参数部分,但不包括'#'hash后面的部分。可以通过\u003ccode\u003elocation.href\u003c/code\u003e来获取。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e注意\u003c/strong\u003e： 如果你的vue项目，路由没有开启history 模式,也就是你的url上面包含“#”，这个时候要从后端正确获取签名，就需要\u003cstrong\u003e去掉url上#后面的字符\u003c/strong\u003e。（url去掉'#'hash部分，可用\u003ccode\u003elocation.href.split('#')[0]\u003c/code\u003e）\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e封装调用sdk注入：\u003c/h3\u003e\n\u003cp\u003e因为要在每个路由页面都注入sdk，这个肯定要复用的，不然那么多代码，看着就头大。\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003e我是这么做的：\u003c/h4\u003e\n\u003col\u003e\n\u003cli\u003e因为我把axios\u003ca target=\"_blank\" href=\"https://juejin.im/post/59fd982c6fb9a045170490df\"\u003e包了一层\u003c/a\u003e，然后把axios接口，在main.js里面挂载到Vue实例。\n\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/16/1605f3933091e9d2?w=535\u0026amp;h=98\u0026amp;f=png\u0026amp;s=18864\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003c/li\u003e\n\u003cli\u003e然后在\u003ca target=\"_blank\" href=\"https://juejin.im/post/59eddbfe6fb9a0450908abb4\"\u003e全局函数\u003c/a\u003e里面调用这个接口，然后在每个路由页面的相应组件里面调用这个函数，把当前页面的url以及其他标题、图片什么的传进去。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e里面的具体步骤就不说了，最重要的是参考上面的那个流程，函数里面的东西也都是基于那个流程的。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e签名校验：\u003c/h3\u003e\n\u003cp\u003e当你反复确认步骤都没有问题，微信sdk注入还是签名失败的时候，这个时候你就要考虑是不是后端那边的算法有问题，可以把后端返回的签名和微信提供的\u003ca target=\"_blank\" href=\"https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign\"\u003eJS 接口签名校验工具\u003c/a\u003e生成的签名对比一下，或许是后端那边算法的问题也不一定。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e后话\u003c/h2\u003e\n\u003cp\u003e实不相瞒，当时我做的时候就是被url这个坑了，第一次做这个东西，没有经验，折腾了好久。引入sdk并不难，重要的是那个配置信息要填写正确，然后其他的就根据实际需求来做了。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e最后\u003c/strong\u003e：如需转载，请放上原文链接并署名。码字不易，\u003cstrong\u003e感谢\u003c/strong\u003e支持！本人写文章本着交流记录的心态，写的不好之处，不撕逼，但是欢迎指点。然后就是希望看完的朋友点个\u003cstrong\u003e喜欢\u003c/strong\u003e，也可以\u003cstrong\u003e关注\u003c/strong\u003e一下我。\n\u003cstrong\u003e\u003ca target=\"_blank\" href=\"http://obkoro1.com/\"\u003e个人blog\u003c/a\u003e\u003c/strong\u003e and \u003cstrong\u003e\u003ca target=\"_blank\" href=\"https://juejin.im/user/58714f0eb123db4a2eb95372\"\u003e掘金个人主页\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e以上2017.12.16\u003c/p\u003e\n","buildTime":"1514449856.2188","__v":0}
{"_id":{"$oid":"5a44e660e8623327d0d60eff"},"id":"5a3c672451882506e50cd2cc","author":{"$oid":"5a4393bf95a5f32670e69c3e"},"title":"前端开发规范之React应用使用ESLint","meta":{"likeCount":0},"tag":["React.js","前端","ESLint","Airbnb"],"comment":[],"content":"\u003cblockquote\u003e\n\u003cp\u003e现代前端技术飞速发展，最终形成了以效率和质量为核心的两大趋势。就效率而言，在大型前端项目的开发中，规范的制定\n、框架的出现与升级、构建的使用更新、组件化的设计实现等都在于前端能更快、更高效地完成更多的事情。质量方面，前端优的提出、前端用户数据的收集、错误日志的收集上报等，都是为了帮助开发者来提高前端性能，提升用户体验。\u003c/p\u003e\n\u003cp\u003e目前，前端已进入了以效率和质量为核心的工业化时代，各类辅助工具的使用和技术的使用大大减少了前端开发的重复工作量，省去了很多低效的操作。在团队开发中，编码规范至关重要，一份统一的编码规范可以大大降低阅读代码的成本。近几年来，前端业界对编码规范的自动化工具也做了不少实践，从最早的 \u003ccode\u003eJSLint\u003c/code\u003e,到之后的 \u003ccode\u003eJSHint\u003c/code\u003e,再到今天的 \u003ccode\u003eESLint\u003c/code\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 class=\"heading\"\u003eReact使用ESLint\u003c/h2\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://eslint.org/\"\u003eESLint\u003c/a\u003e由 \u003ccode\u003eNicholas C.Zakas\u003c/code\u003e 编写，目标是以可扩展、每条规则独立、不内置编码风格为理念编写一个 \u003ccode\u003eLint\u003c/code\u003e 工具。用户可以定制自己的规则作成公共包。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eESlint\u003c/strong\u003e 主要有一下特点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e默认规则包含所有\u003cstrong\u003eJSLint\u003c/strong\u003e、\u003cstrong\u003eJSHint\u003c/strong\u003e 中存在的规则，易迁移\u003c/li\u003e\n\u003cli\u003e规则可配置性高，可设置 \u003cstrong\u003e\"警告\"\u003c/strong\u003e \u003cstrong\u003e\"错误\"\u003c/strong\u003e 两个 \u003cstrong\u003eerror\u003c/strong\u003e 等级，或者直接禁用\u003c/li\u003e\n\u003cli\u003e包含代码风格检测的规则\u003c/li\u003e\n\u003cli\u003e支持插件扩展、自定义规则\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e针对\u003cstrong\u003eReact\u003c/strong\u003e 开发者，\u003cstrong\u003eESLint\u003c/strong\u003e 已经可以很好地支持\u003cstrong\u003eJSX\u003c/strong\u003e语法。\u003c/p\u003e\n\u003cp\u003e我们从\u003cstrong\u003eReact\u003c/strong\u003e 应用中怎么配置开始说起。首先通过 \u003ca target=\"_blank\" href=\"https://www.npmjs.com/\"\u003enpm\u003c/a\u003e来安装必要的包：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e$ npm install --save-dev babel-eslint eslint eslint-plugin-react\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e注：这里建议推荐大家可以用 \u003cstrong\u003eyarn\u003c/strong\u003e 来安装，详见\u003ca target=\"_blank\" href=\"https://yarn.bootcss.com/\"\u003eYarn中文网\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003ebabel-eslint让 \u003cstrong\u003eESLint\u003c/strong\u003e 用 \u003cstrong\u003eBabel\u003c/strong\u003e 作为解释器，eslint-plugin-react 让 \u003cstrong\u003eESLint\u003c/strong\u003e 支持 \u003cstrong\u003eReact\u003c/strong\u003e 语法。然后，在 \u003ccode\u003epackage.json\u003c/code\u003e 里配置对应的 \u003ccode\u003escripts\u003c/code\u003e,例如我们对 \u003ccode\u003esrc\u003c/code\u003e 和 \u003ccode\u003etest\u003c/code\u003e 目录作检查:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-string\"\u003e\"scripts\"\u003c/span\u003e:{\n    \u003cspan class=\"hljs-string\"\u003e\"lint\"\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e\"eslint src test\"\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eESLint\u003c/strong\u003e的配置写在根目录下，新配置文件 \u003ccode\u003e.eslintrc\u003c/code\u003e,如果子目录也包含 \u003ccode\u003e.eslintrc\u003c/code\u003e，则子目录会忽略根目录的配置文件。这种设置方式便于在不同环境下使用不同的配置。相关代码如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e{\n    \u003cspan class=\"hljs-string\"\u003e\"extends\"\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e\"eslint:recommended\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-string\"\u003e\"ecmaFeatures\"\u003c/span\u003e:{\n        \u003cspan class=\"hljs-string\"\u003e\"jsx\"\u003c/span\u003e:\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n        \u003cspan class=\"hljs-string\"\u003e\"modules\"\u003c/span\u003e:\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\n    },\n    \u003cspan class=\"hljs-string\"\u003e\"env\"\u003c/span\u003e:{\n        \u003cspan class=\"hljs-string\"\u003e\"browser\"\u003c/span\u003e:\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n        \u003cspan class=\"hljs-string\"\u003e\"node\"\u003c/span\u003e:\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n        \u003cspan class=\"hljs-string\"\u003e\"es6\"\u003c/span\u003e:\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\n    },\n    \u003cspan class=\"hljs-string\"\u003e\"parser\"\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e\"babel-eslint\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-string\"\u003e\"rules\"\u003c/span\u003e:{\n        \u003cspan class=\"hljs-string\"\u003e\"strict\"\u003c/span\u003e:0,\n        \u003cspan class=\"hljs-string\"\u003e\"valid-jsdoc\"\u003c/span\u003e:2,\n        \u003cspan class=\"hljs-string\"\u003e\"react/jsx-uses-react\"\u003c/span\u003e:2,\n        \u003cspan class=\"hljs-string\"\u003e\"react/jsx-uses-vars\"\u003c/span\u003e:2,\n        \u003cspan class=\"hljs-string\"\u003e\"react/react-in-jsx-scope\"\u003c/span\u003e:2\n    },\n    \u003cspan class=\"hljs-string\"\u003e\"plugins\"\u003c/span\u003e:[\n        \u003cspan class=\"hljs-string\"\u003e\"react\"\u003c/span\u003e\n    ]\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e其中，\u003ccode\u003eplugins\u003c/code\u003e 处配置了 \u003ccode\u003ereact\u003c/code\u003e,既加入了自定义规则，这也是 \u003cstrong\u003eESLint\u003c/strong\u003e 最核心的功能之一。此外，我们也可以在文件内配置特别的配置。\u003c/p\u003e\n\u003cp\u003e禁用 \u003ccode\u003eESLint\u003c/code\u003e,比如：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e/* eslint-disable */\nconst obj={\n    key:\u003cspan class=\"hljs-string\"\u003e\"value\"\u003c/span\u003e,\n};\n/* eslint-enable */\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e禁用一条 \u003ccode\u003eLint\u003c/code\u003e，比如：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e/* eslint-disable no-console */\nconsole.log(\u003cspan class=\"hljs-string\"\u003e'test'\u003c/span\u003e);\n/* eslint-enable no-console */\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e调整 \u003ccode\u003eEslint\u003c/code\u003e 规则，比如：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e/* eslint no-console:\u003cspan class=\"hljs-string\"\u003e\"error\"\u003c/span\u003e*/\nconsole.log(\u003cspan class=\"hljs-string\"\u003e'test'\u003c/span\u003e);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eESLint\u003c/strong\u003e 还有一个参数 \u003ccode\u003eextends\u003c/code\u003e，相当于我们的配置继承于它。在上述配置中，我们写的是 \u003ccode\u003eeslint:recommended\u003c/code\u003e，这是内置的配置。我们之后的自定义配置就继承于它。这里，推荐开发者使用 \u003cstrong\u003eAirbnb\u003c/strong\u003e 定制的 \u003ca target=\"_blank\" href=\"https://github.com/airbnb/javascript/\"\u003eJavaScript 规范写法\u003c/a\u003e，整套规范推荐了 \u003cstrong\u003eES6\u003c/strong\u003e 的语法，是整个前端业界最火也是比较公认的方案。由它的规范写成的公共配置是 \u003ccode\u003eeslint-config-airbnb\u003c/code\u003e。我们可以通过 \u003ca target=\"_blank\" href=\"https://www.npmjs.com/\"\u003enpm\u003c/a\u003e 安装它，并在自己的 \u003ccode\u003eESLint config\u003c/code\u003e 中将 \u003cstrong\u003eAirbnb\u003c/strong\u003e 的配置设置成基础设置。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e最后\u003c/strong\u003e，\u003ccode\u003e.eslintrc\u003c/code\u003e可以写成如下形式:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e{\n    \u003cspan class=\"hljs-string\"\u003e\"extends\"\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e\"eslint-config-airbnb\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-string\"\u003e\"ecmaFeatures\"\u003c/span\u003e:{\n        \u003cspan class=\"hljs-string\"\u003e\"jsx\"\u003c/span\u003e:\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n        \u003cspan class=\"hljs-string\"\u003e\"modules\"\u003c/span\u003e:\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\n    },\n    \u003cspan class=\"hljs-string\"\u003e\"env\"\u003c/span\u003e:{\n        \u003cspan class=\"hljs-string\"\u003e\"browser\"\u003c/span\u003e:\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n        \u003cspan class=\"hljs-string\"\u003e\"node\"\u003c/span\u003e:\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n        \u003cspan class=\"hljs-string\"\u003e\"es6\"\u003c/span\u003e:\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\n    },\n    \u003cspan class=\"hljs-string\"\u003e\"parser\"\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e\"babel-eslint\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-string\"\u003e\"rules\"\u003c/span\u003e:{\n        \u003cspan class=\"hljs-string\"\u003e\"strict\"\u003c/span\u003e:0,\n        \u003cspan class=\"hljs-string\"\u003e\"valid-jsdoc\"\u003c/span\u003e:2,\n        \u003cspan class=\"hljs-string\"\u003e\"react/jsx-uses-react\"\u003c/span\u003e:2,\n        \u003cspan class=\"hljs-string\"\u003e\"react/jsx-uses-vars\"\u003c/span\u003e:2,\n        \u003cspan class=\"hljs-string\"\u003e\"react/react-in-jsx-scope\"\u003c/span\u003e:2\n    },\n    \u003cspan class=\"hljs-string\"\u003e\"plugins\"\u003c/span\u003e:[\n        \u003cspan class=\"hljs-string\"\u003e\"react\"\u003c/span\u003e\n    ]\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e开发规范可以认为是软件开发工程师之间交流的另一种语言，它在一定程度上决定了团队协作过程中开发的程序代码是否具有一致性和易维护性，统一的开发规范常常可以降低代码的出错概率和团队开发的协作成本。开发规范制定的重要性不言而喻，使用怎样的规范又成为了另一个问题，因为编程规范并不唯一。通俗地讲，规范地差别很多时候只是代码写法的区别，不同的规范都有各自的特点，没有优劣之分，在选择时也没必要纠结使用哪一种规范，不过既然规范是提高一个团队开发效率的虚拟工具，那么一个团队里还是尽可能使用同一种开发规范比较好。欢迎大家加入前端技术交流群 \u003ccode\u003e544587175\u003c/code\u003e。\u003c/p\u003e\n","buildTime":"1514450467.6966","__v":0}
{"_id":{"$oid":"5a44e660e8623327d0d60f00"},"id":"5a3c5e805188257c4d1b5814","author":{"$oid":"5a43940c4d03f52390c25e9c"},"title":" Audio API - 随音频跳动的Cube","meta":{"likeCount":0},"tag":["JavaScript"],"comment":[],"content":"\u003cblockquote\u003e\n\u003cp\u003e关于Audio API简单介绍\u003c/p\u003e\n\u003cp\u003e阅读时间：约2 - 3分钟\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e一切源于一个简单的需求，音乐播放器，一开始就只是写个UI，调用媒体 API，然后加上了通过进度条映射到seek音频进度到功能，再往上加需求的时候，就是音频可视化了。\u003c/p\u003e\n\u003cp\u003e记得十多年前的电脑上，Windows Media Player、千千静听等音频软件都会有音频可视化的界面，都是各种各样随着音频的变化，绘制不同规律的图案。可是在浏览器中，做音频分析，对于我来说真的有点不可思议，直到我看到了AudioContext，它给音频处理打开了一扇门。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e什么是AudioContext\u003c/h3\u003e\n\u003cp\u003eAudioContext 是 Audio API 中的音频上下文，一切对于音频的操作，都发生在 AudioContext。用大家熟悉的东西来说的话 AudioContext 和 Canvas 的上下文是类似的概念。\u003c/p\u003e\n\u003cp\u003eAudio API 在 W3C 标准中还是草案状态（\u003ca target=\"_blank\" href=\"https://webaudio.github.io/web-audio-api/#AudioContext-section\"\u003eWeb Audio API\u003c/a\u003e），但是不少PC现代主流浏览器已经实现了一部分的功能，所以我们还是可以先用Chrome来尝试一番。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e创建AudioContext 并且连接音频\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-comment\"\u003e// 创建音频上下文，这是一种兼容的写法\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e actx = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e (\u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.AudioContext || webkitAudioContext)();\n\u003cspan class=\"hljs-comment\"\u003e// 我们从网页的audio元素来连接音频\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e audio = \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.getElementById(\u003cspan class=\"hljs-string\"\u003e\"didit\"\u003c/span\u003e);\n\u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e source = actx.createMediaElementSource(audio);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAudioContext 提供三种方式来提供音频内容\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eAudioContext.createBufferSource()\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e通过AudioContext.createBuffer创建或AudioContext.decodeAudioData解码音轨来创建内容\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eAudioContext.createMediaElementSource()\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e通过媒体元素来获取\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eAudioContext.createMediaStreamSource()\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e通过流媒体获取（如麦克风）\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 class=\"heading\"\u003e利用Analyzer分析音频内容\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-comment\"\u003e// 创建analyzer\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e analyzer = actx.createAnalyser();\n\u003cspan class=\"hljs-comment\"\u003e// 创建用来获取音频数据的缓冲buffer\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e bufferLength = analyzer.fftSize;\n\u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e dataArray = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eUint8Array\u003c/span\u003e(bufferLength);\n\n\u003cspan class=\"hljs-comment\"\u003e// 连接analyzer和音频元\u003c/span\u003e\nsource.connect(analyzer)\nanalyzer.connect(actx.destination)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在使用Analyser的时候，我遇到了一个问题，analyzer没有办法获取到当前播放的内容。但是我注意到了在其他示例中，音频上下文和他的工具集之间建立了连接。\u003c/p\u003e\n\u003cp\u003e这就引出了Audio API的工作方式，他的工具集和音频上下文的目的地直接，是通过connect耦合的，在使用工具的时候，需要两方互相连接。\u003c/p\u003e\n\u003cp\u003e我们在这里使用\u003ccode\u003eanalyzer.connect(actx.destination)\u003c/code\u003e连接音频上下文目的地的原因是，音频的播放信息在AudioContext连接音频元素的时候，就被AudioContext接管了，是它在传输现在播放音频的数据，所以需要如此连接。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e一个简单的例子\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetNowText\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003esome\u003c/span\u003e) \u003c/span\u003e{\n  analyzer.getByteTimeDomainData(dataArray);\n\n  \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e one = (findMax(dataArray) / \u003cspan class=\"hljs-number\"\u003e128\u003c/span\u003e);\n  \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e delta = some - one;\n\n  one = delta * \u003cspan class=\"hljs-number\"\u003e0.618\u003c/span\u003e + one;\n\n  c.rotate(\u003cspan class=\"hljs-number\"\u003e0.5\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e0.5\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\n  c.scale(one , one , one );\n  c.update();\n\n  requestAnimationFrame(getNowText.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e,one))\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e使用一个我之前写的css3d库(\u003ca target=\"_blank\" href=\"https://github.com/HUSTFE/HakeCSS3D\"\u003eHakeCSS3D\u003c/a\u003e)来进行简单的视觉效果，这里我们取音频最大值来作为控制变量，并实时更新。（请忽略我这个充满副作用的写法）\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eanalyzer.getByteTimeDomainData(dataArray);\u003c/code\u003e是用来获取当前时间的音频分析信息，它返回的信息是128为基准值的整数。\u003c/p\u003e\n\u003cp\u003e实际效果参考：\u003ca target=\"_blank\" href=\"http://mcube.hustfe.com/\"\u003ehttp://mcube.hustfe.com/\u003c/a\u003e\n(请在PC现代浏览器下打开)\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://caniuse.com/#feat=audio-api\"\u003e浏览器支持情况\u003c/a\u003e\u003c/p\u003e\n","buildTime":"1514461665.4406","__v":0}
{"_id":{"$oid":"5a44e660e8623327d0d60f01"},"id":"5a334803518825069054146f","author":{"$oid":"5a44e660e8623327d0d60ef8"},"title":"Vue响应式原理以及简单实现","meta":{"likeCount":0},"tag":["JavaScript"],"comment":[],"content":"\u003cp\u003e在vue原理中，最重要的部分就是如何实现数据的观测，依赖的收集，视图的更新。本文讲的就是Observer, Dep, Watcher这三个的简单实现。\npub(publish)表示发布者，sub(subscribe)表示订阅者, cb(callback)表示回调函数\n如果你觉得这篇讲的对你有所帮助，请帮我点个\u003ca target=\"_blank\" href=\"https://github.com/skychenbo/Blog\"\u003estar\u003c/a\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003eobserver的实现\u003c/h2\u003e\n\u003cp\u003eObserver的作用简单来说就是让object对象的属性都用Object.defineProperty()来进行定义，这样当获取object的属性，或者修改属性的时候，就能够触发get,set达到数据的观测的效果。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eclass Observer {\n    constructor(value) {\n        this.value = value \n        this.walk(this.value)\n    }\n    walk (value) {\n        // 递归遍历value的属性\n        Object.keys(value).forEach((key) = \u0026gt; {\n            defineReactive(value, key, value[key])\n        })\n    }\n}\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e defineReactive(obj, key ,val) {\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e childOb = observe(val)\n    Obeject.defineProperty(obj, key, {\n        enumerable: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n        configurable: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003eget\u003c/span\u003e\u003c/span\u003e() {\n            console.log(\u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e)\n            \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e val\n        },\n        \u003cspan class=\"hljs-built_in\"\u003eset\u003c/span\u003e(newVal) {\n            console.log(\u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e)\n            val = newVal\n            childOb = observe(val)\n        }\n    })\n}\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e observe (value) {\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (typeof value === \u003cspan class=\"hljs-string\"\u003e'object'\u003c/span\u003e \u0026amp;\u0026amp; !Array.isArray(value)) {\n        value = new Observer(value)\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003edefineReactive的作用就是给对象的属性进行简单的数据观测，一旦值获取或者设置就会触发一些行为.因为一个对象的属性可能还是对象，所以在这里我们添加observe函数来遍历值，让一个对象的属性的属性还是可以进行观测的，简单呢来说的意思就是让所有属性都可以进行忽略。当然在实际情况中，我们还需要考虑数组的情况，但都大同小异。\n这样做代码似乎有点丑，我们在设置属性触发set会发生console.log()函数，有没有一种更加智能的方式来实现通知变化呢。这里我们就需要用消息订阅器来进行实现，这样做我们就不需要通过观察console.log()输出的值来看进行的情况，我们只需要在set方法里边加一个通知，一旦值发生变化，就通知外边值发生了改变\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003eDep的实现：\u003c/h2\u003e\n\u003cp\u003eDep的作用就是用来收集属性值的变化，一旦set方法触发的时候，就更新视图。那就准备一个数组来进行收集吧！\n下面是Dep的实现：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dep {\n    constructor() {\n        this.subs = []\n    }\n    addSub (sub) {\n        this.subs.push(sub)\n    }\n    notify () {\n        const subs = this.subs.slice()\n        subs.forEach((sub) =\u0026gt; {\n            sub.update() // 视图更新\n        })\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e上面就是Dep的简单实现，addSub的作用是增加订阅者，因为有很多订阅者，我们需要用一个数组将它进行存储，notify()函数的作用就是当set发生的时候，进行通知，update()这个函数待会在watcher中会讲到。实现了Dep我们是不是该更改了set()函数了呢，下面是defineReactive()修改后的代码\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e defineReactive(obj, key ,val) {\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e dep = new Dep() // 毕竟要使用Dep的方法\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e childOb = observe(val)\n    Obeject.defineProperty(obj, key, {\n        enumerable: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n        configurable: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003eget\u003c/span\u003e\u003c/span\u003e() {\n            \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e val\n        },\n        \u003cspan class=\"hljs-built_in\"\u003eset\u003c/span\u003e(newVal) {\n            val = newVal\n            childOb = observe(val)\n            dep.notify() // 因为数据改变了，我们就通知Dep\n        }\n    })\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e一旦触发set，就调用dep.notify(),notify的作用就是针对订阅者遍历进行更新。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003eWatcher的简单实现：\u003c/h2\u003e\n\u003cp\u003ewatcher的作用，就是当状态发生改变的时候，更新视图，我们可以假设\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eclass Watcher {\n    constructor (vm, cb, expOrFn) {\n        this.vm = vm // 这表示一个Vue的实例\n        this.cb = cb\n        // 这里需要考虑expOrFn是字符串或者函数的情况\n        // 这里做一个简化，只考虑函数的情况\n        this.getter = expOrFn\n        this.value = this.get()\n    }\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003eget\u003c/span\u003e\u003c/span\u003e () {\n        Dep.target = this \n        const vm = this.vm\n        value = this.getter.call(this.vm, vm)\n        Dep.target = null\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e value \n    }\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003eupdate\u003c/span\u003e\u003c/span\u003e () {\n        this.run()\n    }\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003erun\u003c/span\u003e\u003c/span\u003e () {\n        const value = this.get()\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (value !== this.value) {\n            const oldValue = this.value\n            this.value = value\n            this.cb.call(this.vm, value, oldValue) \n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWatcher的简单实现就完成了，在Dep()构造函数中，我们使用了sub.update()这行代码，而update函数是Watcher里边的方法，说明每一个sub都是Wathcer的实例，问题是我们应该如何通过addSub()这个方法，将Watcher加入到subs这个数组中尽心存储呢，答案还是在defineReactive()里边进行修改\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e defineReactive(obj, key ,val) {\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e dep = new Dep() // 毕竟要使用Dep的方法\n    \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e childOb = observe(val)\n    Obeject.defineProperty(obj, key, {\n        enumerable: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n        configurable: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003eget\u003c/span\u003e\u003c/span\u003e() {\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(Dep.target) {\n                dep.addSub(Dep.target)\n            }\n            \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e val\n        },\n        \u003cspan class=\"hljs-built_in\"\u003eset\u003c/span\u003e(newVal) {\n            val = newVal\n            childOb = observe(val)\n            dep.notify() // 因为数据改变了，我们就通知Dep\n        }\n    })\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这样是不是就实现了往Dep里边加Watcher了，vue源码中比这个复杂的多，各种参数，看着头大。本文的宗旨就是通过简化让你了解内部原理，如果需要更深入了解就需要阅读源码了。\u003c/p\u003e\n","buildTime":"1514434031.116","__v":0}
{"_id":{"$oid":"5a44e660e8623327d0d60f02"},"id":"5a39c3446fb9a0450d1136b4","author":{"$oid":"5a439bc574ee951f2c48c00b"},"title":"基于react16 webpack3 搭建前端spa基础框架 react-router的4种异步加载方式","meta":{"likeCount":0},"tag":["React.js","Webpack"],"comment":[],"content":"\u003cp\u003e这两天看了下\u003ccode\u003ereact\u003c/code\u003e的文档，准备搭建一套适用的基本\u003ccode\u003ereact\u003c/code\u003e开发架子。\u003c/p\u003e\u003cp\u003e由于我一直使用的是\u003ccode\u003evue\u003c/code\u003e，很少使用过\u003ccode\u003ereact\u003c/code\u003e进行项目的开发，因此此构建主要参考的是\u003ccode\u003evue\u003c/code\u003e的项目经验。\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003ch3\u003e项目主要会涉及到的知识点 \u003c/h3\u003e\u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003ewebpack\u003c/code\u003e 配置及其优化\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003ereact-router\u003c/code\u003e 升级为4.0之后的使用\u003ccode\u003e react-router-dom \u003c/code\u003e\u003ccode\u003ereact-router-config\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003ereact-router \u003c/code\u003e异步4种异步加载配置\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003ch3\u003e项目github源码:\u003ca href=\"https://github.com/wangweianger/react16-webpack3.8-onepage-base-project\" target=\"_blank\"\u003ehttps://github.com/wangweianger/react16-webpack3.8-onepage-base-project\u003c/a\u003e\u003c/h3\u003e\u003cp\u003ereact和vue的开发模式很像，同样的组件化，模块化，统一状态管理机制，路由 ... 等等，因此我觉得作为一位使用的开发者，我们仅仅需要了解各自的api,各自的大致实现原理就可以开始上手撸代码了。\u003c/p\u003e\u003cp\u003e技术栈的相互切换没有太大的成本，上手开发都比较简单，因为有太多的一致性。\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003ch3\u003e一 ：webpack的优化配置前面一篇文章中我有详细的介绍\u003c/h3\u003e\u003ch4\u003e请参考：\u003ca href=\"http://blog.seosiwei.com/detail/9\" target=\"_blank\"\u003ehttp://blog.seosiwei.com/detail/9\u003c/a\u003e\u003c/h4\u003e\u003cp\u003ewebpack在vue和react里面的配置几乎是一致的，唯一的不同就是loader的配置，这里就不做详细的介绍。\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003ch3\u003e二：react-router4\u003c/h3\u003e\u003cp\u003ereact-router4版本 相对于v2 , v3有非常大的区别，可以说是完全重构的感觉。\u003c/p\u003e\u003cp\u003ereact-router4 中 拆分为\u003c/p\u003e\u003col\u003e\u003cli\u003e\u003ccode\u003ereact-router\u003c/code\u003e  核心功能\u003c/li\u003e\u003cli\u003e\u003ccode\u003ereact-router-dom\u003c/code\u003e 针对于浏览器的路由\u003c/li\u003e\u003cli\u003e\u003ccode\u003ereact-reouter-native\u003c/code\u003e 针对于native端的路由\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e在此基础上我们可能还需要：\u003ccode\u003ereact-router-redux \u003c/code\u003e,\u003ccode\u003e react-router-config\u003c/code\u003e等插件。\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e在router4以前，我们是使用getComponent的的方式来实现按需加载的，router4中，getComponent方法已经被移除。\u003c/p\u003e\u003cp\u003e看了一下网上的文章，基本都介绍的不是很全面，因此在此总结一下，并给出实际的源码供大家参考。\u003c/p\u003e\u003ch3\u003e在这里主要介绍 v4版本按需加载的配置。\u003c/h3\u003e\u003ch3\u003e（1）Code Splitting使用 react-loadable , babel-plugin-syntax-dynamic-import\u003c/h3\u003e\u003cp\u003e        参考地址：\u003ca href=\"https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/docs/guides/code-splitting.md\"\u003ehttps://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/docs/guides/code-splitting.md\u003c/a\u003e\u003c/p\u003e\u003cp\u003e                            \u003ca href=\"https://www.npmjs.com/package/react-loadable\"\u003ehttps://www.npmjs.com/package/react-loadable\u003c/a\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e具体到项目配置如下：\u003c/p\u003e\u003ch4\u003e1.安装依赖\u003c/h4\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e//安装依赖\nnpm install react-loadable --save-dev\nnpm install babel-plugin-syntax-dynamic-import --save-dev\u003c/code\u003e\u003c/pre\u003e\u003ch4\u003e2.webpack 解析import()配置：\u003c/h4\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/19/1606cb36ccdd9c4f?w=798\u0026amp;h=221\u0026amp;f=png\u0026amp;s=22306\"\u003e\u003cbr\u003e\u003c/p\u003e\u003ch4\u003e3.router路由配置\u003c/h4\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/19/1606cb3764a30244?w=1093\u0026amp;h=514\u0026amp;f=png\u0026amp;s=78456\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003ch2\u003e（2）bundle-loader 按需加载方式，官方文档案例\u003c/h2\u003e\u003cp\u003e参考地址：\u003ca href=\"https://www.npmjs.com/package/bundle-loader\"\u003ehttps://www.npmjs.com/package/bundle-loader\u003c/a\u003e\u003c/p\u003e\u003cp\u003e                   \u003ca href=\"https://reacttraining.com/react-router/web/guides/code-splitting\"\u003ehttps://reacttraining.com/react-router/web/guides/code-splitting\u003c/a\u003e                 \u003c/p\u003e\u003ch4\u003e1.安装依赖\u003c/h4\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e//安装依赖\nnpm install bundle-loader --save-dev\u003c/code\u003e\u003c/pre\u003e\u003ch4\u003e2.新增Bundle组件 ./src/components 下新增 Bundle.jsx 组件，内容如下：\u003c/h4\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/19/1606cb37052d97e1?w=789\u0026amp;h=597\u0026amp;f=png\u0026amp;s=47002\"\u003e\u003cbr\u003e\u003c/p\u003e\u003ch4\u003e3.router路由配置\u003c/h4\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/19/1606cb376510e632?w=1008\u0026amp;h=578\u0026amp;f=png\u0026amp;s=81367\"\u003e\u003cbr\u003e\u003c/p\u003e\u003ch3\u003e\n\u003c/h3\u003e\u003ch3\u003e(3) 改变2的方案  import按需加载\u003c/h3\u003e\u003cp\u003e参考链接：\u003ca href=\"http://www.jianshu.com/p/547aa7b92d8c\"\u003ehttp://www.jianshu.com/p/547aa7b92d8c\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://reactjs.org/blog/2017/05/18/whats-new-in-create-react-app.html#code-splitting-with-dynamic-import\"\u003ehttps://reactjs.org/blog/2017/05/18/whats-new-in-create-react-app.html#code-splitting-with-dynamic-import\u003c/a\u003e\u003cbr\u003e\u003c/p\u003e\u003ch4\u003e1.安装依赖\u003c/h4\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003enpm install babel-plugin-syntax-dynamic-import --save-dev\u003c/code\u003e\u003c/pre\u003e\u003ch4\u003e2.webpack 解析import()配置：\u003c/h4\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/19/1606cb36ccdd9c4f?w=798\u0026amp;h=221\u0026amp;f=png\u0026amp;s=22306\"\u003e\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\u003ch4\u003e3.新建BundleImport 组件 ./src/components 下新增 BundleImport.jsx 组件，内容如下：\u003c/h4\u003e\u003cdiv\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/19/1606cb36cfa36252?w=954\u0026amp;h=638\u0026amp;f=png\u0026amp;s=59720\"\u003e\u003cbr\u003e\u003c/div\u003e\u003cp\u003e\u003c/p\u003e\u003ch4\u003e4.router 路由配置\u003c/h4\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/19/1606cb36d074c3df?w=1105\u0026amp;h=492\u0026amp;f=png\u0026amp;s=67821\"\u003e\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\u003ch4\u003e（4）Create an Async Componen 创建一个Async组件方式异步加载\u003c/h4\u003e\u003cp\u003e参考链接：\u003ca href=\"https://serverless-stack.com/chapters/code-splitting-in-create-react-app.html\"\u003ehttps://serverless-stack.com/chapters/code-splitting-in-create-react-app.html\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://reactjs.org/blog/2017/05/18/whats-new-in-create-react-app.html#code-splitting-with-dynamic-import\"\u003ehttps://reactjs.org/blog/2017/05/18/whats-new-in-create-react-app.html#code-splitting-with-dynamic-import\u003c/a\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003ca href=\"http://babeljs.io/docs/usage/polyfill/\"\u003ehttp://babeljs.io/docs/usage/polyfill/\u003c/a\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003ch4\u003e1.由于需要支持 async,await的语法，因此我们安装一下babel-polyfill\u003c/h4\u003e\u003cp\u003e\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003enpm install babel-polyfill --save-dev\nnpm install babel-plugin-syntax-dynamic-import --save-dev\u003c/code\u003e\u003c/pre\u003e\u003ch4\u003e2.webpack入口配置 babel-polyfill , babel-loader 配置 syntax-dynamic-import plugin\u003c/h4\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/19/1606cb3721b359c0?w=783\u0026amp;h=142\u0026amp;f=png\u0026amp;s=15198\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/19/1606cb36ccdd9c4f?w=798\u0026amp;h=221\u0026amp;f=png\u0026amp;s=22306\"\u003e\u003cbr\u003e\u003c/p\u003e\u003ch4\u003e3.新增AsyncComponent组件   ./src/components 下新增AsyncComponent.jsx 组件，内容如下：\u003c/h4\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/19/1606cb370b422fa9?w=751\u0026amp;h=535\u0026amp;f=png\u0026amp;s=36650\"\u003e\u003cbr\u003e\u003c/p\u003e\u003ch4\u003e4.router路由配置\u003c/h4\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/19/1606cb37926b8fce?w=1014\u0026amp;h=522\u0026amp;f=png\u0026amp;s=62369\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e总结：\u003ccode\u003ereact-router\u003c/code\u003e 按需加载的方式有很多种，大家各自选择合适于自己的即可。所有的按需加载源码皆在 ./src/app.jsx 文件中。\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e关于\u003ccode\u003ereact-router-config\u003c/code\u003e 的配置补充请看下面一篇文章\u003c/p\u003e\u003cp\u003e\u003ca href=\"http://blog.seosiwei.com/detail/11\"\u003ereact-router4基于react-router-config的路由拆分与按需加载\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e关注我的博客：\u003ca href=\"https://link.juejin.im/?target=https%3A%2F%2Flink.juejin.im%2F%3Ftarget%3Dhttps%253A%252F%252Fgithub.com%252Fwangweianger%252Fmyblog\"\u003ezane的个人博客\u003c/a\u003e\u003c/p\u003e\u003cp\u003e原文地址：\u003ca href=\"http://blog.seosiwei.com/detail/10\"\u003e基于react16 webpack3 搭建前端spa基础框架 react-router的4种异步加载方式\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e","buildTime":"1514446080.1634","__v":0}
{"_id":{"$oid":"5a44e660e8623327d0d60f03"},"id":"5a393cf9f265da432c23fb3b","author":{"$oid":"5a44e660e8623327d0d60efb"},"title":"图解setState","meta":{"likeCount":0},"tag":["React.js"],"comment":[],"content":"\u003cp\u003e研究 \u003ccode\u003esetState\u003c/code\u003e 这个问题来源于一个疑惑：使用 redux 的时候 \u003ccode\u003edispatch\u003c/code\u003e 一个 \u003ccode\u003eaction\u003c/code\u003e，为什么可以导致视图的更新？\u003c/p\u003e\n\u003cp\u003e首先的猜想是 \u003ccode\u003estore\u003c/code\u003e 改变后，redux 在某处调用了 \u003ccode\u003esetState\u003c/code\u003e，通知了 react。\u003c/p\u003e\n\u003cp\u003e看了下代码发现确实如此，调用 \u003ccode\u003edispatch action\u003c/code\u003e 会触发一个 \u003ccode\u003eonStateChange\u003c/code\u003e 的函数 (这个函数在 \u003ccode\u003econnect\u003c/code\u003e 的时候就被注册到 \u003ccode\u003estore\u003c/code\u003e 了, \u003ccode\u003estore\u003c/code\u003e 被 \u003ccode\u003ereducer\u003c/code\u003e 修改后触发),\u003ccode\u003eonStateChange\u003c/code\u003e 函数判断如果需要 \u003ccode\u003eshouldComponentUpdate\u003c/code\u003e 的话则执行 \u003ccode\u003ethis.setState({})\u003c/code\u003e 来触发 react 更新。\u003c/p\u003e\n\u003cp\u003e那么问题来了：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e为什么 \u003ccode\u003esetState\u003c/code\u003e 可以让视图更新，它是如何一步步到 \u003ccode\u003evirtualDOM\u003c/code\u003e 然后渲染的呢\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esetState\u003c/code\u003e为什么有时表现是异步的有时又是同步的？\u003c/li\u003e\n\u003cli\u003e为什么在生命周期函数中，\u003ccode\u003ewillReceiveProps\u003c/code\u003e里可以\u003ccode\u003esetState\u003c/code\u003e而\u003ccode\u003ewillUpdate\u003c/code\u003e不行？\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e捋了一下流程得出下图，图中每个流程块冒号前即为被执行的函数：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/20/1606fa6063c008c2?w=1301\u0026amp;h=1743\u0026amp;f=png\u0026amp;s=247515\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e简要的说一下流程：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esetState\u003c/code\u003e 后将传入的 \u003ccode\u003estate\u003c/code\u003e 放入队列 \u003ccode\u003equeue\u003c/code\u003e，\u003ccode\u003eenqueueUpdate\u003c/code\u003e 方法会根据 \u003ccode\u003eisBatchingUpdate\u003c/code\u003e 标志位判断，若当前已经在更新组件则将直接当前组件放入 \u003ccode\u003edirtyComponents\u003c/code\u003e 数组，否则将 \u003ccode\u003eisBatchingUpdate\u003c/code\u003e 置为 true 并开启一个 \"批量更新 (\u003ccode\u003ebatchedUpdates\u003c/code\u003e)\" 的事务（\u003ccode\u003etransaction\u003c/code\u003e）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e简单地说，一个所谓的 \u003ccode\u003eTransaction\u003c/code\u003e 就是将需要执行的 \u003ccode\u003emethod\u003c/code\u003e 使用 \u003ccode\u003ewrapper\u003c/code\u003e 封装起来，再通过 \u003ccode\u003eTransaction\u003c/code\u003e 提供的 \u003ccode\u003eperform\u003c/code\u003e 方法执行。而在 \u003ccode\u003eperform\u003c/code\u003e 之前，先执行所有 \u003ccode\u003ewrapper\u003c/code\u003e 中的 \u003ccode\u003einitialize\u003c/code\u003e \u003ccode\u003e方法；perform\u003c/code\u003e 完成之后（即 \u003ccode\u003emethod\u003c/code\u003e 执行后）再执行所有的 \u003ccode\u003eclose\u003c/code\u003e 方法。一组 \u003ccode\u003einitialize\u003c/code\u003e 及 \u003ccode\u003eclose\u003c/code\u003e 方法称为一个 \u003ccode\u003ewrapper，\u003c/code\u003e \u003ccode\u003eTransaction\u003c/code\u003e 支持多个 \u003ccode\u003ewrapper\u003c/code\u003e 叠加。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e事务开启后会依次执行 \u003ccode\u003einitialize、perform、close\u003c/code\u003e 方法。可以看到，\u003ccode\u003ebatchedUpdates\u003c/code\u003e 在 \u003ccode\u003eperform\u003c/code\u003e 阶段会再次执行 \u003ccode\u003eenqueueUpdate\u003c/code\u003e 方法，由于这时的 \u003ccode\u003eisBatchingUpdate\u003c/code\u003e 已经是 true 了所以会将当前组件\u0008放入 \u003ccode\u003edirtyComponents\u003c/code\u003e。关键就在 \u003ccode\u003eclose\u003c/code\u003e 阶段了，如果 \u003ccode\u003edirtyComponents\u003c/code\u003e 为空则表示不需要更新，否则就开始更新，开启 \u003ccode\u003eflushBatchedUpdates\u003c/code\u003e 事务。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eflushBatchedUpdates\u003c/code\u003e 在 \u003ccode\u003eperform\u003c/code\u003e 阶段会将 \u003ccode\u003edirtyComponents\u003c/code\u003e 中的组件按 \u003ccode\u003e父 \u0026gt; 子\u003c/code\u003e 组件的顺序调用更新方法，组件在更新的时候会依次执行：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003ewillReceiveProps -\u0026gt; 将 queue 中缓存的 state 与缓存的 state 合并 -\u0026gt; shouldComponentUpdate。\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e如果判断需要更新，则执行组件的 \u003ccode\u003erender\u003c/code\u003e 方法得到新的 \u003ccode\u003ereactElement\u003c/code\u003e，将其与之前的 \u003ccode\u003ereactElement\u003c/code\u003e 做 diff 即可，将 diff 结果（删除，移动等）通过 \u003ccode\u003esetInnerHTML\u003c/code\u003e 等封装方法更新视图即可，细节可见图。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eflushBatchedUpdates\u003c/code\u003e 在 \u003ccode\u003eclose\u003c/code\u003e 阶段会再次检查 \u003ccode\u003edirtyComponents\u003c/code\u003e 长度有没有变化，如果变化了说明存在有新的 \u003ccode\u003edirtyComponent\u003c/code\u003e，需要再来一次 \u003ccode\u003eflushBatchedUpdates\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e补上 \u003ccode\u003eupdateComponent\u003c/code\u003e 代码：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// 更新组件\nupdateComponent: \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(transaction, prevParentElement, nextParentElement) {\n  var prevContext = this.context;\n  var prevProps = this.props;\n  var nextContext = prevContext;\n  var nextProps = prevProps;\n\n  \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (prevParentElement !== nextParentElement) {\n    nextContext = this._processContext(nextParentElement._context);\n    nextProps = this._processProps(nextParentElement.props);\n    // 当前状态为 RECEIVING_PROPS\n    this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;\n\n    // 如果存在 componentWillReceiveProps，则执行\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (this.componentWillReceiveProps) {\n      this.componentWillReceiveProps(nextProps, nextContext);\n    }\n  }\n\n  // 设置状态为 null，更新 state\n  this._compositeLifeCycleState = null;\n  var nextState = this._pendingState || this.state;\n  this._pendingState = null;\n  var shouldUpdate =\n    this._pendingForceUpdate ||\n    !this.shouldComponentUpdate ||\n    this.shouldComponentUpdate(nextProps, nextState, nextContext);\n  \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!shouldUpdate) {\n    // 如果确定组件不更新，仍然要设置 props 和 state\n    this._currentElement = nextParentElement;\n    this.props = nextProps;\n    this.state = nextState;\n    this.context = nextContext;\n    this._owner = nextParentElement._owner;\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e;\n  }\n  this._pendingForceUpdate = \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n\n  ......\n\n  // 如果存在 componentWillUpdate，则触发\n  \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (this.componentWillUpdate) {\n    this.componentWillUpdate(nextProps, nextState, nextContext);\n  }\n\n  // render 递归渲染\n  var nextMarkup = this._renderedComponent.mountComponent(\n    thisID,\n    transaction,\n    this._mountDepth + 1\n  );\n\n  // 如果存在 componentDidUpdate，则触发\n  \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (this.componentDidUpdate) {\n    transaction.getReactMountReady().enqueue(\n      this.componentDidUpdate.bind(this, prevProps, prevState, prevContext),\n      this\n    );\n  }\n},\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e捋完整个流程可以回答\u0008之前一些疑惑：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cem\u003e为什么 \u003ccode\u003esetState\u003c/code\u003e 后紧接着打 log，有时 \u003ccode\u003estate\u003c/code\u003e 没有立刻变，有时候又变了？\u003c/em\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e生命周期中的 \u003ccode\u003esetState\u003c/code\u003e 处于一个大的 \u003ccode\u003etransaction\u003c/code\u003e 中，此时的 \u003ccode\u003eisBatchingUpdate\u003c/code\u003e 为 \u003ccode\u003etrue\u003c/code\u003e，执行 \u003ccode\u003esetState\u003c/code\u003e 只会让 \u003ccode\u003edirtyComponents\u003c/code\u003e 数组 push 当前组件而不会进一步处理，此时 log 来看的话 \u003ccode\u003estate\u003c/code\u003e 还是没有变的。而如果在 transaction 之外，例如 \u003ccode\u003esetTimeout\u003c/code\u003e 里 \u003ccode\u003esetState\u003c/code\u003e，此时 \u003ccode\u003eisBatchingUpdate\u003c/code\u003e 为 \u003ccode\u003efalse\u003c/code\u003e，会一路直接执行下来更改 \u003ccode\u003estate\u003c/code\u003e，所以此时 log 出来 \u003ccode\u003estate\u003c/code\u003e 是被立刻改变了的。因此 \u003cstrong\u003esetState 不保证是同步，而不是说它一定是异步\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e2. 都在同一个 \u003ccode\u003etranaction\u003c/code\u003e 中，为什么在 \u003ccode\u003ewillReceiveProps\u003c/code\u003e 时还可以 \u003ccode\u003esetState\u003c/code\u003e，而在 \u003ccode\u003eshouldComponentUpdate\u003c/code\u003e 和 \u003ccode\u003ewillUpdate\u003c/code\u003e 的时候 \u003ccode\u003esetState\u003c/code\u003e 会导致浏览器死循环？\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e组件内部有一标志位 \u003ccode\u003e_compositeLifeCycleState\u003c/code\u003e 表示当前生命周期状态，在 \u003ccode\u003ewillReceiveProps\u003c/code\u003e 前被设置为 \u003ccode\u003eRECEIVING_PROPS\u003c/code\u003e，在 \u003ccode\u003ewillReceiveProps\u003c/code\u003e 执行后被设置为 null，而 \u003ccode\u003eperformUpdateIfNecessary\u003c/code\u003e 函数在当前状态为 \u003ccode\u003eMOUNTING\u003c/code\u003e 或 \u003ccode\u003eRECEIVING_PROPS\u003c/code\u003e 时不会继续调用 \u003ccode\u003eupdateComponent\u003c/code\u003e 函数。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eperformUpdateIfNecessary: \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(transaction) {\n  var compositeLifeCycleState = this._compositeLifeCycleState;\n  //  ■\u0008■\u0008■\u0008■\u0008■\u0008■\u0008■\u0008■\u0008重点■\u0008■\u0008■\u0008■\u0008■\u0008■\u0008■\u0008■\u0008■\u0008■\u0008■\u0008■\u0008\n  // 当状态为 MOUNTING 或 RECEIVING_PROPS 时，则不更新\n  \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (compositeLifeCycleState === CompositeLifeCycle.MOUNTING ||\n      compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e;\n  }\n\n  var prevElement = this._currentElement;\n  var nextElement = prevElement;\n  \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (this._pendingElement != null) {\n    nextElement = this._pendingElement;\n    this._pendingElement = null;\n  }\n\n  // 调用 updateComponent\n  this.updateComponent(\n    transaction,\n    prevElement,\n    nextElement\n  );\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e因此在 \u003ccode\u003ewillReceiveProps\u003c/code\u003e 时 \u003ccode\u003esetState\u003c/code\u003e 由于 \u003ccode\u003e_compositeLifeCycleState\u003c/code\u003e 已经是 \u003ccode\u003eRECEIVING_PROPS\u003c/code\u003e 了，不回触发新的 \u003ccode\u003eupdateComponent\u003c/code\u003e，而在 \u003ccode\u003ewillUpdate\u003c/code\u003e 的时候 \u003ccode\u003e_compositeLifeCycleState\u003c/code\u003e 已经被置回 null 了，因此会引发下一次的 \u003ccode\u003eupdateComponent\u003c/code\u003e，然后就再次触发组件的各生命周期，当然也会免不了执行 \u003ccode\u003ewillUpdate\u003c/code\u003e，因此进入了死循环。\u003c/p\u003e\n","buildTime":"1514453212.5354","__v":0}
{"_id":{"$oid":"5a44e660e8623327d0d60f04"},"id":"5a3a59e7518825698e72376b","author":{"$oid":"5a44e660e8623327d0d60ef2"},"title":"JavaScript 数组遍历方法的对比","meta":{"likeCount":0},"tag":["JavaScript","测试","源码"],"comment":[],"content":"\u003cblockquote\u003e\n\u003cp\u003e原文首发至 \u003ca target=\"_blank\" href=\"http://fe2x.cc/2017/12/05/JS-for-performance-compare/\"\u003efe2x.cc\u003c/a\u003e\n转载请标注原作者和附带原文连接\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 class=\"heading\"\u003e前言\u003c/h2\u003e\n\u003cp\u003eJavaScript 发展至今已经发展出多种数组的循环遍历的方法,不同的遍历方法运行起来那个比较快,不同循环方法使用在那些场景,下面将进行比较:\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e各种数组遍历的方法\u003c/h2\u003e\n\u003ch3 class=\"heading\"\u003e\u003cstrong\u003e\u003ccode\u003efor\u003c/code\u003e\u003c/strong\u003e 语句\u003c/h3\u003e\n\u003cp\u003e代码:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e arr = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e]\n\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, len = arr.length; i \u0026lt; len; i++){\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(arr[i])\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这是标准for循环的写法也是最传统的语句，字符串也支持，定义一个变量i作为索引，以跟踪访问的位置，len是数组的长度，条件就是i不能超过len。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e\u003cstrong\u003e\u003ccode\u003eforEach\u003c/code\u003e\u003c/strong\u003e 语句\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eforEach\u003c/code\u003e 方法对数组的每个元素执行一次提供的CALLBACK函数,forEach是一个数组方法，可以用来把一个函数套用在一个数组中的每个元素上，\u003ccode\u003eforEach\u003c/code\u003e为每个数组元素执行callback函数只可用于数组.遍历一个数组让数组每个元素做一件事情.那些已删除（使用delete方法等情况）或者未初始化的项将被跳过（但不包括那些值为 undefined 的项）（例如在稀疏数组上)；不像map() 或者reduce() ，它总是返回 undefined值，并且不可链式调用。典型用例是在一个链的最后执行副作用。\u003c/p\u003e\n\u003cp\u003e代码:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e arr = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e8\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e9\u003c/span\u003e]\narr.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eitem\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(item);\n})\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e\u003cstrong\u003e\u003ccode\u003efor-in\u003c/code\u003e\u003c/strong\u003e 语句\u003c/h3\u003e\n\u003cp\u003e一般会使用\u003ccode\u003efor-in\u003c/code\u003e来遍历对象的属性的,不过属性需要 \u003cstrong\u003e\u003ccode\u003eenumerable\u003c/code\u003e\u003c/strong\u003e,才能被读取到.\n\u003ccode\u003efor-in\u003c/code\u003e 循环只遍历可枚举属性。一般常用来遍历对象，包括非整数类型的名称和继承的那些原型链上面的属性也能被遍历。像 Array和 Object使用内置构造函数所创建的对象都会继承自Object.prototype和String.prototype的不可枚举属性就不能遍历了.\u003c/p\u003e\n\u003cp\u003e代码:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e obj = {\n    \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'test'\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003ecolor\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'red'\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003eday\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'sunday'\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003enumber\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e\n}\n\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e key \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e obj) {\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(obj[key])\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e\u003cstrong\u003e\u003ccode\u003efor-of\u003c/code\u003e\u003c/strong\u003e 语句 (ES 6)\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003efor-of\u003c/code\u003e语句在可迭代对象（包括 Array，Map，Set，String，TypedArray，arguments 对象等等）上创建一个迭代循环，调用自定义迭代钩子，并为每个不同属性的值执行语句。只要是一个iterable的对象,就可以通过\u003ccode\u003efor-of\u003c/code\u003e来迭代.\u003c/p\u003e\n\u003cp\u003e代码:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e arr = [{\u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e'bb'\u003c/span\u003e},\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'test'\u003c/span\u003e]\n\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (item \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e arr) {\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(item)\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e\u003ccode\u003efor-of\u003c/code\u003e 和 \u003ccode\u003efor-in\u003c/code\u003e 的区别\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003efor-in\u003c/code\u003e 语句以原始插入顺序迭代对象的可枚举属性。\u003ccode\u003efor-in\u003c/code\u003e会把继承链的对象属性都会遍历一遍,所以会更花时间.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003efor-of\u003c/code\u003e 语句只遍历可迭代对象的数据。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003eOther 循环方法\u003c/h2\u003e\n\u003ch3 class=\"heading\"\u003e\u003cstrong\u003e\u003ccode\u003emap\u003c/code\u003e\u003c/strong\u003e 方法 (不改变原数组)\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003emap\u003c/code\u003e 方法会给原数组中的每个元素都按顺序调用一次  callback 函数。callback 每次执行后的返回值（包括 undefined）组合起来形成一个新数组。 callback 函数只会在有值的索引上被调用；那些从来没被赋过值或者使用 delete 删除的索引则不会被调用。让数组通过某种计算产生一个新数组,影射成一个新的数组,\u003c/p\u003e\n\u003cp\u003e代码:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e arr = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e]\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e firearr = arr.map(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003ecurrent\u003c/span\u003e =\u0026gt;\u003c/span\u003e current * \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e)\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e\u003cstrong\u003e\u003ccode\u003ereduce\u003c/code\u003e\u003c/strong\u003e 方法\u003c/h3\u003e\n\u003cp\u003e让数组中的前项和后项做某种计算,并累计最终值,\u003c/p\u003e\n\u003cp\u003e代码:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e wallets = [\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e7.8\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e]\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e totalMoney = wallets.reduce( \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003ecountedMoney, wallet\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e countedMoney + wallet.money;\n}, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e)\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e\u003cstrong\u003e\u003ccode\u003efilter\u003c/code\u003e\u003c/strong\u003e 方法 (不改变原数组)\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003efilter\u003c/code\u003e 为数组中的每个元素调用一次 callback 函数，并利用所有使得 callback 返回 true 或 等价于 true 的值 的元素创建一个新数组。callback 只会在已经赋值的索引上被调用，对于那些已经被删除或者从未被赋值的索引不会被调用。那些没有通过 callback 测试的元素会被跳过，不会被包含在新数组中。筛选出过滤出数组中符合条件的项,组成新数组.\u003c/p\u003e\n\u003cp\u003e代码:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e arr = [\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e]\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e morearr = arr.filter(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003enumber\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number \u0026gt; \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e\n})\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e\u003cstrong\u003e\u003ccode\u003eevery\u003c/code\u003e\u003c/strong\u003e 方法\u003c/h3\u003e\n\u003cp\u003eevery 方法为数组中的每个元素执行一次 callback 函数，直到它找到一个使 callback 返回 false（表示可转换为布尔值 false 的值）的元素。如果发现了一个这样的元素，every 方法将会立即返回 false。否则，callback 为每一个元素返回 true，every 就会返回 true。检测数组中的每一项是否符合条件,如果每一项都符合条件,就会返回true,否则返回false,有点像遍历数组且操作callback。只会为那些已经被赋值的索引调用。不会为那些被删除或从来没被赋值的索引调用。\u003c/p\u003e\n\u003cp\u003e代码:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e arr = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e]\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e result = arr.every(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003eitem, index\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e item \u0026gt; \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e\n})\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e\u003cstrong\u003e\u003ccode\u003esome\u003c/code\u003e\u003c/strong\u003e 方法\u003c/h3\u003e\n\u003cp\u003esome 为数组中的每一个元素执行一次 callback 函数，直到找到一个使得 callback 返回一个“真值”（即可转换为布尔值 true 的值）。如果找到了这样一个值，some 将会立即返回 true。否则，some 返回 false。callback 只会在那些”有值“的索引上被调用，不会在那些被删除或从来未被赋值的索引上调用。检查数组中是否有某些项符号条件,如果有一项就返回true,否则返回false,有点像遍历数组或者操作.\u003c/p\u003e\n\u003cp\u003e代码:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e arr = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e]\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e result = arr.some(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003eitem,index\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e item \u0026gt; \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e\n})\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e对比遍历速度\u003c/h2\u003e\n\u003cp\u003e对比这里我使用了\u003ca target=\"_blank\" href=\"https://jsperf.com/\"\u003ejsPerf平台\u003c/a\u003e进行测试.\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003eJavaScritp loop 对比\u003c/h3\u003e\n\u003cp\u003e我创建了两个数组进行对比,为什么要这样区别呢,因为不同类型的数组在javascript内存中保存的地址格式不一样,遍历的时候编辑器会根椐数组元素的类型长度计算,比如说如果数组里面全是Number类的,循环起来会比数组里面包含Number,String,Object混合型的会快,所以创建了两个数组,一个是全undefined数组,一个是混合型数组.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-comment\"\u003e// 一个是空数组\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e nullarr = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eArray\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e10000\u003c/span\u003e) \u003cspan class=\"hljs-comment\"\u003e// [undefined,undefined,...undefined]\u003c/span\u003e\n\n\u003cspan class=\"hljs-comment\"\u003e// 另一个带不同类型的数据的数组\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dataarr = []\n\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan class=\"hljs-number\"\u003e10000\u003c/span\u003e; i++){\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (i % \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e ===\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) {\n        dataarr[i] = i.toString()\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n        dataarr[i = i\n    }\n}\ndataarr \u003cspan class=\"hljs-comment\"\u003e// [1,'2',3...,10000]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e测试后发现有点奇怪直接检索空数组还是会比数据数组慢这是为什么呢奇怪?为了对比循环的一致性我只选其中带数据的数组\u003ccode\u003edataarr\u003c/code\u003e进行测试.\u003c/p\u003e\n\u003cp\u003e那我们对比一下 \u003ccode\u003efor\u003c/code\u003e \u003ccode\u003efor len\u003c/code\u003e \u003ccode\u003eforEach\u003c/code\u003e \u003ccode\u003efor-in\u003c/code\u003e \u003ccode\u003efor-of\u003c/code\u003e \u003ccode\u003emap\u003c/code\u003e \u003ccode\u003efilter\u003c/code\u003e 循环的速度\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"image\" src=\"https://user-gold-cdn.xitu.io/2017/12/20/1607404e2004052f?w=1982\u0026amp;h=1582\u0026amp;f=png\u0026amp;s=277526\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e可以看到 \u003ccode\u003efor\u003c/code\u003e循环的速度是最快的,是最老的循环,也是优化得最好的,其次是\u003ccode\u003efor-of\u003c/code\u003e这个是es6才新增的循环非常好用,最慢是\u003ccode\u003efor-in\u003c/code\u003e我们可以作一下速度排序\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ccode\u003efor\u003c/code\u003e \u0026gt; \u003ccode\u003efor-of\u003c/code\u003e \u0026gt; \u003ccode\u003eforEach\u003c/code\u003e \u0026gt; \u003ccode\u003efilter\u003c/code\u003e \u0026gt; \u003ccode\u003emap\u003c/code\u003e \u0026gt; \u003ccode\u003efor-in\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e这很明显处理大量循环数据的时候还是要使用古老\u003ccode\u003efor\u003c/code\u003e循环效率最好,但也不是不使用\u003ccode\u003efor-in\u003c/code\u003e,其实很多时候都要根据实际应该场景的,\u003ccode\u003efor-in\u003c/code\u003e更多使用在遍历对象属性上面,\u003ccode\u003efor-in\u003c/code\u003e在遍历的过程中还会遍历继承链,所以这就是它效率比较慢的原因,比如\u003ccode\u003emap\u003c/code\u003e 速率不高,不过处理在Es6实现数组功能上面非常好用方便,轻松影射创建新数组.或者例如使用\u003ca target=\"_blank\" href=\"http://es6.ruanyifeng.com/#docs/iterator\"\u003e\u003cstrong\u003eIterator\u003c/strong\u003e\u003c/a\u003e属性也是行的,所以每个循环都有合适使用的地方.\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e\u003ccode\u003eevery\u003c/code\u003e 和 \u003ccode\u003esome\u003c/code\u003e 不完全属于数组操作方法\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eevery\u003c/code\u003e 和 \u003ccode\u003esome\u003c/code\u003e 都是判断条件直接返回整个数组Boolean类型的方法.\u003ccode\u003eevery\u003c/code\u003e速度会比\u003ccode\u003esome\u003c/code\u003e快很多.\n\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"image\" src=\"https://user-gold-cdn.xitu.io/2017/12/20/160740576af8a696?w=2028\u0026amp;h=794\u0026amp;f=png\u0026amp;s=138455\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e干货\u003c/h3\u003e\n\u003cp\u003e一张图展示JavaScript数组方法\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"image\" src=\"https://user-gold-cdn.xitu.io/2017/12/20/1607405dab59a110?w=1728\u0026amp;h=1091\u0026amp;f=jpeg\u0026amp;s=1369402\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e最后\u003c/h3\u003e\n\u003cp\u003e最后不同浏览器内核我相信会有些许差别,有兴趣的朋友可以去测试一下,有任何问题欢迎给博主留言.\u003c/p\u003e\n\u003cp\u003e附上测试的 \u003ca target=\"_blank\" href=\"https://jsperf.com/js-loop-compare/1\"\u003e地址\u003c/a\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e延伸阅读\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e迭代器(iterator) \u003ca target=\"_blank\" href=\"https://github.com/sunyongjian/blog/issues/18\"\u003e地址\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eJS几种数组遍历方式以及性能分析对比 \u003ca target=\"_blank\" href=\"https://dailc.github.io/2016/11/25/baseKnowlenge_javascript_jsarrayGoThrough\"\u003e地址\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e如何形象地解释 JavaScript 中 map、foreach、reduce 间的区别？ \u003ca target=\"_blank\" href=\"https://www.zhihu.com/question/24927450\"\u003e地址\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFor-each over an array in JavaScript? \u003ca target=\"_blank\" href=\"https://stackoverflow.com/questions/9329446/for-each-over-an-array-in-javascript\"\u003e地址\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eJavaScript for循环性能比较 \u003ca target=\"_blank\" href=\"http://blog.mingsixue.com/it/JS-for-performance-compare.html\"\u003e地址\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n","buildTime":"1514464116.8064","__v":0}
{"_id":{"$oid":"5a44e660e8623327d0d60f05"},"id":"5a31dbc951882510b27563b9","author":{"$oid":"5a4393bf95a5f32670e69c41"},"title":"canvas入门实战--邀请卡生成与下载","meta":{"likeCount":0},"tag":["Canvas","前端","JavaScript","API"],"comment":[],"content":"\u003ch2\u003e1.前言\u003c/h2\u003e\u003cp\u003e写了很多的javascript和css3的文章，是时候写一篇canvas的了。canvas是html5提供的一个新的功能！至于作用，就是一个画布。然后画笔就是javascript。canvas的用途非常的广，特别是html5游戏以及数据可视化这两个方面。现在canvas给我的感觉就和css3一样，可以不用太厉害，但是必须要会基础的用法。但是以后对canvas的需求，肯定会越来越大。所以canvas很值得学习，而且学好canvas，就是很好的一个加分项。对于这篇文章，我也是以canvas初学者的角度写的，会有很多改善的地方。如果大家觉得我有什么可以改善的，或者建议，欢迎指点迷津！代码已上传github，需要的欢迎star(\u003ca href=\"https://github.com/chenhuiYj/demos/tree/master/html5-demos/downloadImg\"\u003edownloadImg\u003c/a\u003e)。\u003c/p\u003e\u003cblockquote\u003e大家看这篇文章之前，要了解javascript的一些基础，也要看着了解一些canvas的api（\u003ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial\"\u003ecanvas-MSN教程\u003c/a\u003e，\u003ca href=\"http://www.runoob.com/html/html5-canvas.html\"\u003ecanvas菜鸟教程\u003c/a\u003e）\u003c/blockquote\u003e\u003ch2\u003e2.邀请卡实例\u003c/h2\u003e\u003cp\u003e邀请卡自动生成这个会有的，毕竟有时候，很多邀请卡都是一样的，就是被邀请的人不一样而已，也就是说，整个邀请卡，就是一个名字不一样，那么下面。就写一套代码，根据名字生成邀请卡！\u003c/p\u003e\u003ch3\u003e2-1.运行效果\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/14/16052c2c1460df07?w=800\u0026amp;h=624\u0026amp;f=png\u0026amp;s=120702\"\u003e\u003c/p\u003e\u003cp\u003ehtml代码\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e\u0026lt;html\u0026gt;\n\u0026lt;head\u0026gt;\n    \u0026lt;meta charset=\u003cspan class=\"hljs-string\"\u003e\"utf-8\"\u003c/span\u003e\u0026gt;\n    \u0026lt;title\u0026gt;下载图片\u0026lt;/title\u0026gt;\n    \u0026lt;style\u0026gt;\n        .set-option {\n            \u003cspan class=\"hljs-built_in\"\u003efloat\u003c/span\u003e: left;\n            width: 400px;\n        }\n\n        .set-option .text {\n            width: 200px;\n            height: 40px;\n            padding-left: 10px;\n            border-radius: 4px;\n            border: 1px solid \u003cspan class=\"hljs-comment\"\u003e#ccc;\u003c/span\u003e\n        }\n\n        .set-option td {\n            padding: 10px 0;\n        }\n\n        .set-option td:first-child {\n            text-align: right;\n            padding-right: 10px;\n        }\n\n        .set-option p {\n            margin: 0;\n            line-height: 16px;\n        }\n\n        .check-box {\n            width: 16px;\n            height: 16px;\n            margin: 0;\n            vertical-align: top;\n        }\n\n        button {\n            width: 200px;\n            height: 50px;\n            border: none;\n            color: \u003cspan class=\"hljs-comment\"\u003e#fff;\u003c/span\u003e\n            font-size: 16px;\n            cursor: pointer;\n            display: block;\n            margin: 10px auto;\n        }\n\n        button:hover {\n            opacity: .9;\n        }\n\n        .btn-all {\n            background: \u003cspan class=\"hljs-comment\"\u003e#f90;\u003c/span\u003e\n        }\n\n        .btn-save {\n            background: \u003cspan class=\"hljs-comment\"\u003e#09f;\u003c/span\u003e\n        }\n\n        .btn-download {\n            background: \u003cspan class=\"hljs-comment\"\u003e#4CAF50;\u003c/span\u003e\n        }\n    \u0026lt;/style\u0026gt;\n\u0026lt;/head\u0026gt;\n\u0026lt;body\u0026gt;\n\u0026lt;div\u0026gt;\n    \u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"set-option\"\u003c/span\u003e\u0026gt;\n        \u0026lt;table\u0026gt;\n            \u0026lt;tr\u0026gt;\n                \u0026lt;td\u0026gt;画布尺寸\u0026lt;/td\u0026gt;\n                \u0026lt;td\u0026gt;\u0026lt;input \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"text\"\u003c/span\u003e class=\u003cspan class=\"hljs-string\"\u003e\"text\"\u003c/span\u003e id=\u003cspan class=\"hljs-string\"\u003e\"size\"\u003c/span\u003e/\u0026gt;\u0026lt;/td\u0026gt;\n            \u0026lt;/tr\u0026gt;\n            \u0026lt;tr\u0026gt;\n                \u0026lt;td\u0026gt;背景图片\u0026lt;/td\u0026gt;\n                \u0026lt;td\u0026gt;\u0026lt;input \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"file\"\u003c/span\u003e id=\u003cspan class=\"hljs-string\"\u003e\"file\"\u003c/span\u003e/\u0026gt;\u0026lt;/td\u0026gt;\n            \u0026lt;/tr\u0026gt;\n            \u0026lt;tr\u0026gt;\n                \u0026lt;td\u0026gt;用户名\u0026lt;/td\u0026gt;\n                \u0026lt;td\u0026gt;\n                    \u0026lt;input \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"text\"\u003c/span\u003e class=\u003cspan class=\"hljs-string\"\u003e\"text\"\u003c/span\u003e id=\u003cspan class=\"hljs-string\"\u003e\"user-name\"\u003c/span\u003e/\u0026gt;\n                \u0026lt;/td\u0026gt;\n            \u0026lt;/tr\u0026gt;\n            \u0026lt;tr\u0026gt;\n                \u0026lt;td\u0026gt;用户名x坐标\u0026lt;/td\u0026gt;\n                \u0026lt;td\u0026gt;\n                    \u0026lt;input \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"number\"\u003c/span\u003e class=\u003cspan class=\"hljs-string\"\u003e\"text\"\u003c/span\u003e id=\u003cspan class=\"hljs-string\"\u003e\"text-option-x\"\u003c/span\u003e/\u0026gt;\u0026lt;/br\u0026gt;\n                    \u0026lt;p\u0026gt;\u0026lt;input \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"checkbox\"\u003c/span\u003e class=\u003cspan class=\"hljs-string\"\u003e\"check-box\"\u003c/span\u003e value=\u003cspan class=\"hljs-string\"\u003e\"1\"\u003c/span\u003e id=\u003cspan class=\"hljs-string\"\u003e\"is-center-x\"\u003c/span\u003e\u0026gt;居中显示\u0026lt;/p\u0026gt;\n                \u0026lt;/td\u0026gt;\n            \u0026lt;/tr\u0026gt;\n            \u0026lt;tr\u0026gt;\n                \u0026lt;td\u0026gt;用户名y坐标\u0026lt;/td\u0026gt;\n                \u0026lt;td\u0026gt;\n                    \u0026lt;input \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"number\"\u003c/span\u003e class=\u003cspan class=\"hljs-string\"\u003e\"text\"\u003c/span\u003e id=\u003cspan class=\"hljs-string\"\u003e\"text-option-y\"\u003c/span\u003e/\u0026gt;\u0026lt;/br\u0026gt;\n                    \u0026lt;p\u0026gt;\u0026lt;input \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"checkbox\"\u003c/span\u003e class=\u003cspan class=\"hljs-string\"\u003e\"check-box\"\u003c/span\u003e value=\u003cspan class=\"hljs-string\"\u003e\"1\"\u003c/span\u003e id=\u003cspan class=\"hljs-string\"\u003e\"is-center-y\"\u003c/span\u003e\u0026gt;居中显示\u0026lt;/p\u0026gt;\n                \u0026lt;/td\u0026gt;\n            \u0026lt;/tr\u0026gt;\n            \u0026lt;tr\u0026gt;\n                \u0026lt;td\u0026gt;用户名字体大小\u0026lt;/td\u0026gt;\n                \u0026lt;td\u0026gt;\u0026lt;input \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"number\"\u003c/span\u003e class=\u003cspan class=\"hljs-string\"\u003e\"text\"\u003c/span\u003e id=\u003cspan class=\"hljs-string\"\u003e\"text-size\"\u003c/span\u003e/\u0026gt;\u0026lt;/td\u0026gt;\n            \u0026lt;/tr\u0026gt;\n            \u0026lt;tr\u0026gt;\n                \u0026lt;td\u0026gt;文字颜色\u0026lt;/td\u0026gt;\n                \u0026lt;td\u0026gt;\u0026lt;input \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"text\"\u003c/span\u003e class=\u003cspan class=\"hljs-string\"\u003e\"text\"\u003c/span\u003e id=\u003cspan class=\"hljs-string\"\u003e\"text-color\"\u003c/span\u003e/\u0026gt;\u0026lt;/td\u0026gt;\n            \u0026lt;/tr\u0026gt;\n            \u0026lt;tr\u0026gt;\n                \u0026lt;td\u0026gt;图片类型\u0026lt;/td\u0026gt;\n                \u0026lt;td\u0026gt;\n                    \u0026lt;select \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"text\"\u003c/span\u003e class=\u003cspan class=\"hljs-string\"\u003e\"text\"\u003c/span\u003e id=\u003cspan class=\"hljs-string\"\u003e\"img-type\"\u003c/span\u003e\u0026gt;\n                        \u0026lt;option value=\u003cspan class=\"hljs-string\"\u003e\"jpg\"\u003c/span\u003e\u0026gt;jpg\u0026lt;/option\u0026gt;\n                        \u0026lt;option value=\u003cspan class=\"hljs-string\"\u003e\"png\"\u003c/span\u003e\u0026gt;png\u0026lt;/option\u0026gt;\n                    \u0026lt;/select\u0026gt;\n                \u0026lt;/td\u0026gt;\n            \u0026lt;/tr\u0026gt;\n        \u0026lt;/table\u0026gt;\n        \u0026lt;button id=\u003cspan class=\"hljs-string\"\u003e\"save-image\"\u003c/span\u003e class=\u003cspan class=\"hljs-string\"\u003e\"btn-save\"\u003c/span\u003e\u0026gt;效果预览\u0026lt;/button\u0026gt;\n        \u0026lt;button id=\u003cspan class=\"hljs-string\"\u003e\"download-img\"\u003c/span\u003e class=\u003cspan class=\"hljs-string\"\u003e\"btn-download\"\u003c/span\u003e\u0026gt;下载当前图片\u0026lt;/button\u0026gt;\n        \u0026lt;button id=\u003cspan class=\"hljs-string\"\u003e\"download-all\"\u003c/span\u003e class=\u003cspan class=\"hljs-string\"\u003e\"btn-all\"\u003c/span\u003e\u0026gt;批量导出\u0026lt;/button\u0026gt;\n    \u0026lt;/div\u0026gt;\n    \u0026lt;div class=\u003cspan class=\"hljs-string\"\u003e\"show-canvas\"\u003c/span\u003e\u0026gt;\n        \u0026lt;canvas width=200 height=200 id=\u003cspan class=\"hljs-string\"\u003e\"thecanvas\"\u003c/span\u003e\u0026gt;\u0026lt;/canvas\u0026gt;\n    \u0026lt;/div\u0026gt;\n\u0026lt;/div\u0026gt;\n\u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e效果如图，那么大家细想一下，关于一张邀请卡，有什么东西是需要改变的！看到上图相比不难发现！有如下需要改变的属性：图片的大小，图片，用户名，用户名的坐标（x,y,x轴是否居中，y轴是否居中），用户名字体的大小，用户名字体的颜色，以及下载图片的类型。\u003c/p\u003e\u003cp\u003e这样就得到了如下的参数（大家看到有些参数是有值的，可以想成默认值就行了）\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003evar option = {\n    img: \u003cspan class=\"hljs-string\"\u003e'111.jpg'\u003c/span\u003e,\n    width: 500,\n    height: 350,\n    fontSize: \u003cspan class=\"hljs-string\"\u003e\"20px Microsoft YaHei\"\u003c/span\u003e,\n    color: \u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e,\n    text: \u003cspan class=\"hljs-string\"\u003e'守候'\u003c/span\u003e,\n    imgType: \u003cspan class=\"hljs-string\"\u003e'jpg'\u003c/span\u003e,\n    x: 30,\n    y: 30,\n    xCenter: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,\n    yCenter: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,\n};\u003c/code\u003e\u003c/pre\u003e\u003ch3\u003e2-2.步骤\u003c/h3\u003e\u003ch4\u003e1.初步效果\u003c/h4\u003e\u003cp\u003e根据上面的参数，先初步画一个效果，代码基本都是一个写法，没什么技巧\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e//画图\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e draw(obj) {\n    var canvas = document.getElementById(\u003cspan class=\"hljs-string\"\u003e\"thecanvas\"\u003c/span\u003e);\n    //画布大小\n    canvas.width = obj.width;\n    canvas.height = obj.height;\n    //设置图片\n    var img = new Image();\n    img.src = obj.img;\n    var ctx = canvas.getContext(\u003cspan class=\"hljs-string\"\u003e\"2d\"\u003c/span\u003e);\n    //设置字体的坐标\n    var _x = obj.x, _y = obj.y;\n    //是否居中显示\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (obj.xCenter) {\n        _x = obj.width / 2;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (obj.yCenter) {\n        _y = obj.height / 2;\n    }\n    //图片加载后\n    img.onload = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e () {\n        //先画图片\n        ctx.drawImage(img, 0, 0);\n        //设置文字的大小\n        ctx.font = obj.fontSize;\n        //设置文字的颜色\n        ctx.fillStyle = obj.color;\n        //设置文字坐标\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (obj.xCenter) {\n            ctx.textAlign = \u003cspan class=\"hljs-string\"\u003e\"center\"\u003c/span\u003e;\n        }\n        //画文字\n        ctx.fillText(obj.text, _x, _y);\n    };\n}\n\nwindow.onload = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e () {\n    draw(option);\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/14/16052c2c1460df07?w=800\u0026amp;h=624\u0026amp;f=png\u0026amp;s=120702\"\u003e\u003c/p\u003e\u003ch4\u003e2.动态改变参数\u003c/h4\u003e\u003cp\u003e看到图已经画好了，工作其实已经完成一半了！\u003c/p\u003e\u003cp\u003e下面就是动态改变参数！这一步其实很简单。\u003cbr\u003e首先，改变画布的尺寸\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e//画布尺寸\n//获取按钮\nvar size = document.getElementById(\u003cspan class=\"hljs-string\"\u003e\"size\"\u003c/span\u003e);\nsize.addEventListener(\u003cspan class=\"hljs-string\"\u003e\"blur\"\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e () {\n    //根据空格，区分高宽\n    var _width = parseInt(size.value.replace(/(^\\s*)|(\\s*$)/g, \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e).split(/\\s+/)[0]),\n        _height = parseInt(size.value.replace(/(^\\s*)|(\\s*$)/g, \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e).split(/\\s+/)[1]);\n    //把参数的width和height改掉\n    option.width = _width || 100;\n    option.height = _height || 100;\n    //重新画图\n    draw(option);\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e上面代码设置了，只要输入框失去了焦点，就会改变画布的大小，下面来运行下，看下效果（gif图差强人意，大家看懂就好）\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/14/16052c2c0ccc8530?w=800\u0026amp;h=593\u0026amp;f=gif\u0026amp;s=93082\"\u003e\u003c/p\u003e\u003cblockquote\u003ecanvas没有层级的说法，只要改canvas，都要重绘。哪怕就是一个字移动一个像素。\u003c/blockquote\u003e\u003cp\u003e做好了这个，下面做选择图片的功能！\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e//选择图片\n//获取图片控件\nvar file = document.getElementById(\u003cspan class=\"hljs-string\"\u003e\"file\"\u003c/span\u003e), imagesFile, imageData;\nfile.addEventListener(\u003cspan class=\"hljs-string\"\u003e'change'\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (e) {\n    //获取图片\n    imagesFile = e.target.files[0];\n    //把图片转base64\n    var reader = new FileReader();\n    reader.readAsDataURL(imagesFile);\n    //图片加载后\n    reader.onload = \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (e) {\n        //设置option的img属性，再冲洗年绘制\n        imageData = this.result;\n        option.img = imageData;\n        draw(option);\n    }\n});\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/14/16052c2c18cfa47a?w=800\u0026amp;h=643\u0026amp;f=gif\u0026amp;s=553049\"\u003e\u003c/p\u003e\u003cp\u003e下面开始改文字，用户名这个有点不一样，我以空格分割。如果输入多个用户名，以第一个用户名重绘。下面代码，注释就不写了，还是和上面的逻辑一样！\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e//用户名\nvar userName = document.getElementById(\u003cspan class=\"hljs-string\"\u003e\"user-name\"\u003c/span\u003e);\nuserName.addEventListener(\u003cspan class=\"hljs-string\"\u003e\"blur\"\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e () {\n    var _text = userName.value.replace(/(^\\s*)|(\\s*$)/g, \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e).split(/\\s+/);\n    option.text = _text[0];\n    draw(option);\n});\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/14/16052c2c2a3b8f61?w=800\u0026amp;h=593\u0026amp;f=gif\u0026amp;s=151425\"\u003e\u003c/p\u003e\u003cp\u003e下面开始用户名的坐标，代码方面，也是改option的相关属性\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e    optionXCenter.addEventListener(\u003cspan class=\"hljs-string\"\u003e\"change\"\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e () {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (optionXCenter.checked) {\n            option.xCenter = \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n        }\n        \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n            option.xCenter = \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n            option.x = parseInt(optionX.value);\n        }\n        draw(option);\n    });\n    //纵坐标\n    var optionY = document.getElementById(\u003cspan class=\"hljs-string\"\u003e\"text-option-y\"\u003c/span\u003e);\n    optionY.value = option.y;\n    var optionYCenter = document.getElementById(\u003cspan class=\"hljs-string\"\u003e\"is-center-y\"\u003c/span\u003e);\n    optionY.addEventListener(\u003cspan class=\"hljs-string\"\u003e\"input\"\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e () {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (optionYCenter.checked) {\n            option.yCenter = \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n        }\n        \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n            option.yCenter = \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n            option.y = parseInt(optionY.value);\n        }\n        draw(option);\n    });\n    //是否垂直居中显示\n    optionYCenter.addEventListener(\u003cspan class=\"hljs-string\"\u003e\"change\"\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e () {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (optionYCenter.checked) {\n            option.yCenter = \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n        }\n        \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n            option.yCenter = \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n            option.y = parseInt(optionY.value);\n        }\n        draw(option);\n    });\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/14/16052c2c0cbd5f59?w=800\u0026amp;h=593\u0026amp;f=gif\u0026amp;s=185701\"\u003e\u003c/p\u003e\u003cp\u003e是否水平居中显示\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/14/16052c2c0ed93560?w=800\u0026amp;h=593\u0026amp;f=gif\u0026amp;s=104222\"\u003e\u003c/p\u003e\u003cp\u003e其他的属性，字体大小和颜色，基本是一样的代码，运行的效果图我不放了！\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e//字体颜色\nvar textColor = document.getElementById(\u003cspan class=\"hljs-string\"\u003e\"text-color\"\u003c/span\u003e);\ntextColor.addEventListener(\u003cspan class=\"hljs-string\"\u003e\"blur\"\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e () {\n    textColor.value === \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e ? option.color = \u003cspan class=\"hljs-string\"\u003e\"#fff\"\u003c/span\u003e : option.color = \u003cspan class=\"hljs-string\"\u003e'#'\u003c/span\u003e + textColor.value;\n    draw(option);\n});\n//字体大小\nvar textSize = document.getElementById(\u003cspan class=\"hljs-string\"\u003e\"text-size\"\u003c/span\u003e);\ntextSize.addEventListener(\u003cspan class=\"hljs-string\"\u003e\"input\"\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e () {\n    textSize.value === \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e ? option.fontSize = \u003cspan class=\"hljs-string\"\u003e'20px Microsoft YaHei'\u003c/span\u003e : option.fontSize = textSize.value + \u003cspan class=\"hljs-string\"\u003e'px Microsoft YaHei'\u003c/span\u003e;\n    draw(option);\n});\n\u003c/code\u003e\u003c/pre\u003e\u003ch4\u003e3.按钮操作\u003c/h4\u003e\u003cp\u003e\u003cb\u003e效果预览\u003c/b\u003e\u003c/p\u003e\u003cp\u003e就是预览当前canvas的一个效果，这个就很简单了，就是新开一个窗口，然后把图片写进去而已\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e//预览图片\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003esaveImageInfo\u003c/span\u003e\u003c/span\u003e() {\n    var mycanvas = document.getElementById(\u003cspan class=\"hljs-string\"\u003e\"thecanvas\"\u003c/span\u003e);\n    //生成图片\n    var image = mycanvas.toDataURL(\u003cspan class=\"hljs-string\"\u003e\"image/png\"\u003c/span\u003e);\n    var w = window.open(\u003cspan class=\"hljs-string\"\u003e'about:blank'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'image from canvas'\u003c/span\u003e);\n    //把图片新进新的窗口\n    w.document.write(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;img src='\"\u003c/span\u003e + image + \u003cspan class=\"hljs-string\"\u003e\"' alt='from canvas'/\u0026gt;\"\u003c/span\u003e);\n}\nvar saveButton = document.getElementById(\u003cspan class=\"hljs-string\"\u003e\"save-image\"\u003c/span\u003e);\nsaveButton.addEventListener(\u003cspan class=\"hljs-string\"\u003e'click'\u003c/span\u003e, saveImageInfo);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/14/16052c2ca49d1dfa?w=800\u0026amp;h=643\u0026amp;f=gif\u0026amp;s=76316\"\u003e\u003c/p\u003e\u003cp\u003e\u003cb\u003e下载当前图片\u003c/b\u003e\u003c/p\u003e\u003cp\u003e下载图片这个，基本也是写法的，都是些记忆的东西\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e//图片类型\nvar imgType = document.getElementById(\u003cspan class=\"hljs-string\"\u003e\"img-type\"\u003c/span\u003e);\nimgType.addEventListener(\u003cspan class=\"hljs-string\"\u003e\"change\"\u003c/span\u003e,\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e () {\n    option.imgType=this.value;\n});\n//下载图片\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e downloadImg(fileName) {\n    //获取canvas\n    var myCanvas = document.getElementById(\u003cspan class=\"hljs-string\"\u003e\"thecanvas\"\u003c/span\u003e);\n    //设置图片类型\n    var image = myCanvas.toDataURL(\u003cspan class=\"hljs-string\"\u003e\"image/\"\u003c/span\u003e + option.imgType).replace(\u003cspan class=\"hljs-string\"\u003e\"image/\"\u003c/span\u003e + option.imgType, \u003cspan class=\"hljs-string\"\u003e\"image/octet-stream\"\u003c/span\u003e);\n    var save_link = document.createElementNS(\u003cspan class=\"hljs-string\"\u003e'http://www.w3.org/1999/xhtml'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'a'\u003c/span\u003e);\n    save_link.href = image;\n    //设置下载图片的名称\n    save_link.download = fileName + \u003cspan class=\"hljs-string\"\u003e'.'\u003c/span\u003e + option.imgType;\n    //下载图片\n    var event = document.createEvent(\u003cspan class=\"hljs-string\"\u003e'MouseEvents'\u003c/span\u003e);\n    event.initMouseEvent(\u003cspan class=\"hljs-string\"\u003e'click'\u003c/span\u003e, \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e, window, 0, 0, 0, 0, 0, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e, 0, null);\n    save_link.dispatchEvent(event);\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/14/16052c2ccc92037c?w=800\u0026amp;h=758\u0026amp;f=gif\u0026amp;s=4255233\"\u003e\u003c/p\u003e\u003cp\u003e\u003cb\u003e批量下载图片\u003c/b\u003e\u003c/p\u003e\u003cp\u003e这个复杂一点，但也不难，下面一步一步来！\u003c/p\u003e\u003cp\u003e1.首先批量导出，那么用户名我这里是使用空格分割，那么现在我在option里面，弄一个字段textAll，所有文字的集合。all代表是否是批量下载。fn属性代表回调函数\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e//批量导出\nvar downloadAll = document.getElementById(\u003cspan class=\"hljs-string\"\u003e\"download-all\"\u003c/span\u003e);\ndownloadAll.addEventListener(\u003cspan class=\"hljs-string\"\u003e'click'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e () {\n    var _text = userName.value.replace(/(^\\s*)|(\\s*$)/g, \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e).split(/\\s+/);\n    option.textAll = _text;\n    option.all = \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n    option.fn = downloadImg;\n    draw(option);\n});\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e2.然后修改绘制的函数draw，判断是否是全部绘制的情况！\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e draw(obj) {\n    var canvas = document.getElementById(\u003cspan class=\"hljs-string\"\u003e\"thecanvas\"\u003c/span\u003e);\n    //画布大小\n    canvas.width = obj.width;\n    canvas.height = obj.height;\n    //设置图片\n    var img = new Image();\n    img.src = obj.img;\n    var ctx = canvas.getContext(\u003cspan class=\"hljs-string\"\u003e\"2d\"\u003c/span\u003e);\n    //设置字体的坐标\n    var _x = obj.x, _y = obj.y;\n    //是否居中显示\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (obj.xCenter) {\n        _x = obj.width / 2;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (obj.yCenter) {\n        _y = obj.height / 2;\n    }\n    //图片加载后\n    img.onload = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e () {\n        //是否是全部打印\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(obj.all){\n            //遍历textAll\n            \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(var i=0;i\u0026lt;obj.textAll.length;i++){\n                //绘制图片\n                ctx.drawImage(img,0,0);\n                //设置字体大小\n                ctx.font=obj.fontSize;\n                //设置字体颜色\n                ctx.fillStyle=obj.color;\n                //是否居中显示\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(obj.xCenter){\n                    ctx.textAlign=\u003cspan class=\"hljs-string\"\u003e\"center\"\u003c/span\u003e;\n                }\n                //绘制文字\n                ctx.fillText(obj.textAll[i], _x,_y);\n                //是否回调\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(obj.fn){\n                    obj.fn(obj.textAll[i]);\n                }\n            }\n            //最后取消全部批量下载\n            defult.all=\u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n        }\n        \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e{\n            ctx.drawImage(img,0,0);\n            ctx.font=obj.fontSize;\n            ctx.fillStyle=obj.color;\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(obj.xCenter){\n                ctx.textAlign=\u003cspan class=\"hljs-string\"\u003e\"center\"\u003c/span\u003e;\n            }\n            ctx.fillText(obj.text, _x,_y);\n        }\n    };\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/14/16052c2cb0663d8c?w=800\u0026amp;h=761\u0026amp;f=gif\u0026amp;s=226979\"\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/14/16052c2cc86dc593?w=366\u0026amp;h=184\u0026amp;f=png\u0026amp;s=10467\"\u003e\u003c/p\u003e\u003ch2\u003e3.小结\u003c/h2\u003e\u003cp\u003e关于canvas入门的第一篇文章，就写到这里了。写完之后，也发现自己对canvas的也是有很多的不懂！上文的这例子，知识canvas很简单的一个入门实例。canvas如果深入学习，能做到很多让人惊讶的效果，这个得以后要加强学习，如果发现些值得记录的知识，我也会写文章。canvas是一个非常值得学习的知识，也是很有趣的一个知识。期待与大家有更多的交流和学习！\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e","buildTime":"1514455378.0912","__v":0}
{"_id":{"$oid":"5a44e660e8623327d0d60f07"},"id":"5a0d5df1f265da43062a542f","author":{"$oid":"5a4394d8bbcd9a0a78c8cf38"},"title":"[译] 2017 年比较 Angular、React、Vue 三剑客 ","meta":{"likeCount":0},"tag":["Angular.js","React.js","Vue.js","JavaScript","前端框架","前端","掘金翻译计划"],"comment":[],"content":"\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e原文地址：\u003ca href=\"https://medium.com/unicorn-supplies/angular-vs-react-vs-vue-a-2017-comparison-c5c52d620176\"\u003eAngular vs. React vs. Vue: A 2017 comparison\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e原文作者：\u003ca href=\"https://medium.com/@jensneuhaus?source=post_header_lockup\"\u003eJens Neuhaus\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e译文出自：\u003ca href=\"https://github.com/xitu/gold-miner\"\u003e掘金翻译计划\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e本文永久链接：\u003ca href=\"https://github.com/xitu/gold-miner/blob/master/TODO/angular-vs-react-vs-vue-a-2017-comparison.md\"\u003ehttps://github.com/xitu/gold-miner/blob/master/TODO/angular-vs-react-vs-vue-a-2017-comparison.md\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e译者：\u003ca href=\"https://github.com/raoul1996\"\u003eRaoul1996\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e校对者：\u003ca href=\"https://github.com/caoyi0905\"\u003ecaoyi0905\u003c/a\u003e、\u003ca href=\"https://github.com/PCAaron\"\u003ePCAaron\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch1 class=\"heading\"\u003e2017 年比较 Angular、React、Vue 三剑客\u003c/h1\u003e\u003cp\u003e 为 web 应用选择 JavaScript 开发框架是一件很费脑筋的事。现如今 \u003ca href=\"https://angular.io/\"\u003eAngular\u003c/a\u003e 和 \u003ca href=\"https://facebook.github.io/react/\"\u003eReact\u003c/a\u003e 非常流行，并且最近出现的新贵 \u003ca href=\"https://vuejs.org/\"\u003eVueJS\u003c/a\u003e 同样博得了很多人的关注。更重要的是，这只是一些\u003ca href=\"https://hackernoon.com/top-7-javascript-frameworks-c8db6b85f1d0\"\u003e新起之秀\u003c/a\u003e。\u003cbr\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"Javascripts in 2017 —— things aren’t easy these days!\" src=\"https://user-gold-cdn.xitu.io/2017/11/16/15fc436d1d260ee3?w=500\u0026amp;h=501\u0026amp;f=png\u0026amp;s=297202\"\u003e\u003cfigcaption\u003eJavascripts in 2017 —— things aren’t easy these days!\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e那么我们如何选择使用哪个框架呢？列出他们的优劣是极好的。我们将按照先前文章的方式去做，“\u003ca href=\"https://medium.com/unicorn-supplies/9-steps-how-to-choose-a-technology-stack-for-your-web-application-a6e302398e55\"\u003e共有 9 步：为 Web 应用选择一个技术栈\u003c/a\u003e”。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e在开始之前 —— 是否应用单页 Web 应用开发？\u003c/h2\u003e\u003cp\u003e首先你需要弄明白你需要单页面应用程序（SPA）还是多页面的方式。关于这个问题的详细内容请阅读我的博客文章，“\u003ca href=\"https://medium.com/unicorn-supplies/angular-vs-react-vs-vue-a-2017-comparison-c5c52d620176#\"\u003e单页面应用程序（SPA）与多页 Web 应用程序（MPA）\u003c/a\u003e”（即将推出，请关注我 \u003ca href=\"http://www.twitter.com/jensneuhaus/\"\u003eTwitter\u003c/a\u003e 的更新）。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e今日首发：Angular，React 和 Vue\u003c/h2\u003e\u003cp\u003e首先，我想从\u003cstrong\u003e生命周期和战略考虑\u003c/strong\u003e角度讨论。然后，我们再讨论这三个 JavaScript 框架的\u003cstrong\u003e功能和概念\u003c/strong\u003e。最后，我们再做\u003cstrong\u003e结论\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e以下是我们今天要解决的问题：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e这些框架或库有多成熟\u003c/strong\u003e？\u003c/li\u003e\n\u003cli\u003e这些框架只会\u003cstrong\u003e火热一时\u003c/strong\u003e吗？\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e这些框架相应的社区规模有多大，能得到多少帮助\u003c/strong\u003e？\u003c/li\u003e\n\u003cli\u003e找到每个框架开发者\u003cstrong\u003e容易吗\u003c/strong\u003e？\u003c/li\u003e\n\u003cli\u003e这些框架的\u003cstrong\u003e基本编程概念\u003c/strong\u003e 是什么？\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e对于小型或大型应用程序\u003c/strong\u003e，框架是否易用？\u003c/li\u003e\n\u003cli\u003e每个框架\u003cstrong\u003e学习曲线\u003c/strong\u003e什么样？\u003c/li\u003e\n\u003cli\u003e你期望这些框架的\u003cstrong\u003e性能\u003c/strong\u003e怎么样？\u003c/li\u003e\n\u003cli\u003e在哪能\u003cstrong\u003e仔细了解底层原理\u003c/strong\u003e？\u003c/li\u003e\n\u003cli\u003e你可以用你选择的框架\u003cstrong\u003e开发\u003c/strong\u003e吗？\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e准备好，听我娓娓道来！\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e生命周期与战略考虑\u003c/h2\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"比较 React、Angular 和 Vue\" src=\"https://user-gold-cdn.xitu.io/2017/11/16/15fc436d1c9a7d92?w=800\u0026amp;h=391\u0026amp;f=png\u0026amp;s=55755\"\u003e\u003cfigcaption\u003e比较 React、Angular 和 Vue\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e一些历史\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003eAngular\u003c/strong\u003e 是基于 TypeScript 的 Javascript 框架。由 Google 进行开发和维护，它被描述为“超级厉害的 JavaScript \u003ca href=\"https://plus.google.com/+AngularJS/posts/aZNVhj355G2\"\u003eMVW\u003c/a\u003e 框架”。Angular（也被称为 “Angular 2+”，“Angular 2” 或者 “ng2”）已被重写，是与 AngularJS（也被称为 “Angular.js” 或 “AngularJS 1.x”）不兼容的后续版本。当 AngularJS（旧版本）最初于2010年10月发布时，仍然在\u003ca href=\"https://github.com/angular/angular.js\"\u003e修复 bug\u003c/a\u003e，等等 —— 新的 Angular（sans JS）于 2016 年 9 月推出版本 2。最新的主版本是 4，\u003ca href=\"http://www.infoworld.com/article/3150716/application-development/forget-angular-3-google-skips-straight-to-angular-4.html\"\u003e因为版本 3 被跳过了\u003c/a\u003e。Google，Vine，Wix，Udemy，weather.com，healthcare.gov 和 Forbes 都使用 Angular（根据 \u003ca href=\"https://www.madewithangular.com/\"\u003emadewithangular\u003c/a\u003e，\u003ca href=\"https://stackshare.io/angular-2\"\u003estackshare\u003c/a\u003e 和 \u003ca href=\"http://libscore.com/#angular\"\u003elibscore.com\u003c/a\u003e 提供的数据）。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eReact\u003c/strong\u003e 被描述为 “用于构建用户界面的 JavaScript 库”。React 最初于 2013 年 3 月发布，由 Facebook 进行开发和维护，Facebook 在多个页面上使用 React 组件（但不是作为单页应用程序）。根据 \u003ca href=\"https://medium.com/@chriscordle\"\u003eChris Cordle\u003c/a\u003e \u003ca href=\"https://medium.com/@chriscordle/why-angular-2-4-is-too-little-too-late-ea86d7fa0bae\"\u003e这篇文章\u003c/a\u003e的统计，React 在 Facebook 上的使用远远多于 Angular 在 Google 上的使用。React 还被 Airbnb，Uber，Netflix，Twitter，Pinterest，Reddit，Udemy，Wix，Paypal，Imgur，Feedly，Stripe，Tumblr，Walmart 等使用（根据 \u003ca href=\"https://github.com/facebook/react/wiki/Sites-Using-React\"\u003eFacebook\u003c/a\u003e, \u003ca href=\"https://stackshare.io/react\"\u003estackshare\u003c/a\u003e 和 \u003ca href=\"http://libscore.com/#React\"\u003elibscore.com\u003c/a\u003e 提供的数据）。\u003c/p\u003e\n\u003cp\u003eFacebook 正在开发 \u003cstrong\u003eReact Fiber\u003c/strong\u003e。它会改变 React 的底层 - 渲染速度应该会更快 - 但是在变化之后，版本会向后兼容。Facebook 将会在 2017 年 4 月的开发者大会上\u003ca href=\"https://developers.facebook.com/videos/f8-2017/the-evolution-of-react-and-graphql-at-facebook-and-beyond/\"\u003e讨论\u003c/a\u003e新变化，并发布一篇非官方的\u003ca href=\"https://github.com/acdlite/react-fiber-architecture\"\u003e关于新架构的文章\u003c/a\u003e。React Fiber 可能与 React 16 一起发布。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eVue\u003c/strong\u003e 是 2016 年发展最为迅速的 JS 框架之一。Vue 将自己描述为一款“用于构建直观，快速和组件化交互式界面的 \u003ca href=\"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel\"\u003eMVVM\u003c/a\u003e 框架”。它于 2014 年 2 月首次由 Google 前员工 \u003ca href=\"https://github.com/yyx990803\"\u003eEvan You\u003c/a\u003e 发布（顺便说一句：尤雨溪那时候发表了一篇 \u003ca href=\"http://blog.evanyou.me/2014/02/11/first-week-of-launching-an-oss-project/\"\u003evue 发布首周的营销活动和数据\u003c/a\u003e的博客文章）。尤其是考虑到 Vue 在没有大公司的支持的情况下，作为一个人开发的框架还能获得这么多的吸引力，这无疑是非常成功的。尤雨溪目前有一个包含数十名核心开发者的团队。2016 年，版本 2 发布。Vue 被阿里巴巴，百度，Expedia，任天堂，GitLab 使用 — 可以在 \u003ca href=\"https://madewithvuejs.com/\"\u003emadewithvuejs.com\u003c/a\u003e 找到一些小型项目的列表。\u003c/p\u003e\n\u003cp\u003eAngular 和 Vue 都遵守 \u003cstrong\u003eMIT license\u003c/strong\u003e 许可，而 React 遵守 \u003cstrong\u003e\u003ca href=\"https://en.wikipedia.org/wiki/BSD_licenses#3-clause_license_.28.22BSD_License_2.0.22.2C_.22Revised_BSD_License.22.2C_.22New_BSD_License.22.2C_or_.22Modified_BSD_License.22.29\"\u003eBSD3-license\u003c/a\u003e 许可证\u003c/strong\u003e。在专利文件上有很多讨论。\u003ca href=\"https://medium.com/@ji\"\u003eJames Ide\u003c/a\u003e（前 Facebook 工程师）解释专利文件背后的\u003ca href=\"https://medium.com/@ji/the-react-license-for-founders-and-ctos-b38d2538f3e5\"\u003e原因和历史\u003c/a\u003e：Facebook 的专利授权是在保护自己免受专利诉讼的能力的同时分享其代码。专利文件被更新了一次，有些人声称，如果你的公司不打算起诉 Facebook，那么使用 React 是可以的。你可以\u003ca href=\"https://github.com/facebook/react/issues/7293\"\u003e在 Github 的这个 issue 上\u003c/a\u003e 查看讨论。我不是律师，所以如果 React 许可证对你或你的公司有问题，你应该自己决定。关于这个话题还有很多文章：\u003ca href=\"https://medium.com/@dwalsh.sdlr\"\u003eDennis Walsh\u003c/a\u003e 写到，\u003ca href=\"https://medium.com/@dwalsh.sdlr/react-facebook-and-the-revokable-patent-license-why-its-a-paper-25c40c50b562\"\u003e你为什么不该害怕\u003c/a\u003e。\u003ca href=\"https://medium.com/@raulk\"\u003eRaúl Kripalani\u003c/a\u003e 警告：\u003ca href=\"https://medium.com/@raulk/if-youre-a-startup-you-should-not-use-react-reflecting-on-the-bsd-patents-license-b049d4a67dd2\"\u003e反对创业公司使用 React\u003c/a\u003e，他还写了一篇\u003ca href=\"https://medium.com/@raulk/further-notes-and-questions-arising-from-facebooks-bsd-3-strong-patent-retaliation-license-c6386e8e1d60\"\u003e备忘录概览\u003c/a\u003e。此外，Facebook 上还有一个最新的声明：\u003ca href=\"https://code.facebook.com/posts/112130496157735/explaining-react-s-license/\"\u003e解释 React 的许可证\u003c/a\u003e。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e核心开发\u003c/h3\u003e\u003cp\u003e如前所述，Angular 和 React 得到大公司的支持和使用。Facebook，Instagram 和 WhatsApp 正在它们的页面使用 React。Google 在很多项目中使用 Angular，例如，新的 Adwords 用户界面是使用 \u003ca href=\"http://news.dartlang.org/2016/03/the-new-adwords-ui-uses-dart-we-asked.html?m=1\"\u003eAngular 和 Dart\u003c/a\u003e。然而，Vue 是由一群通过 Patreon 和其他赞助方式支持的个人实现的，是好坏你自己确定。\u003ca href=\"https://medium.com/@mgoetzke\"\u003eMatthias Götzke\u003c/a\u003e 认为 Vue 小团队的好处是\u003ca href=\"https://medium.com/@mgoetzke/some-people-have-been-asking-about-the-dependability-of-vue-jss-9dc2842b3709\"\u003e用了更简洁和更少的过度设计的代码或 API\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e我们来看看一些统计数据：Angular 在团队介绍页\u003ca href=\"https://angular.io/about?group=Angular\"\u003e列出 36 人\u003c/a\u003e，Vue \u003ca href=\"https://vuejs.org/v2/guide/team.html\"\u003e列出 16 人\u003c/a\u003e，而 React 没有团队介绍页。\u003cstrong\u003e在 Github 上\u003c/strong\u003e，Angular 有 25,000+ 的 star 和 463 位代码贡献者，React 有 70,000+ 的 star 和 1,000+ 位代码贡献者，而 Vue 有近 60,000 的 star 和只有 120 位代码贡献者。你也可以查看 \u003ca href=\"http://www.timqian.com/star-history/#facebook/react\u0026amp;angular/angular\u0026amp;vuejs/vue\"\u003eAngular，React 和 Vue 的 Github Star 历史\u003c/a\u003e。又一次说明 Vue 的趋势似乎很好。根据 \u003ca href=\"https://bestof.js.org/tags/framework/trending/last-3-months\"\u003ebestof.js\u003c/a\u003e 提供的数据显示，在过去三个月 Angular 2 平均每天获得 31 个 star，React 74 个，Vue.JS 107 个。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"Angular，React 与 Due 的 Github Star 历史 (数据来源)\" src=\"https://user-gold-cdn.xitu.io/2017/11/16/15fc436d1d7105c8?w=800\u0026amp;h=872\u0026amp;f=png\u0026amp;s=73263\"\u003e\u003cfigcaption\u003eAngular，React 与 Due 的 Github Star 历史 (数据来源)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://www.timqian.com/star-history/#facebook/react\u0026amp;angular/angular\u0026amp;vuejs/vue\"\u003e数据来源\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e更新\u003c/strong\u003e: 感谢 \u003ca href=\"https://medium.com/@drcmda\"\u003ePaul Henschel\u003c/a\u003e 提出的 \u003ca href=\"http://www.npmtrends.com/angular-vs-react-vs-vue-vs-@angular/core\"\u003enpm 趋势\u003c/a\u003e。npm 趋势显示了 npm 包的下载次数，相对比单独地看 Github star 更有用：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"在过去 2 年，npm 包的下载次数\" src=\"https://user-gold-cdn.xitu.io/2017/11/16/15fc436d1e44c6c6?w=800\u0026amp;h=489\u0026amp;f=png\u0026amp;s=106897\"\u003e\u003cfigcaption\u003e在过去 2 年，npm 包的下载次数\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e市场生命周期\u003c/h3\u003e\u003cp\u003e由于各种名称和版本，很难在 Google 趋势中比较 Angular，React 和 Vue。一种近似的方法可以是“互联网与技术”类别中的搜索。结果如下：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://user-gold-cdn.xitu.io/2017/11/16/15fc436d1f10f410?w=600\u0026amp;h=326\u0026amp;f=png\u0026amp;s=43585\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eVue 没有在 2014 年之前创建 - 所以这里有什么不对劲。La Vue是法语的 “view” ，“sight” 或 “opinion”。也许就是这样。“VueJS” 和 “Angular” 或 “React” 的比较也是不公平的，因为 VueJS 几乎没有搜索到任何结果。\u003c/p\u003e\n\u003cp\u003e那我们试试别的吧。ThoughtWorks 的 \u003ca href=\"https://www.thoughtworks.com/de/radar#\"\u003eTechnology Radar\u003c/a\u003e 技术随时间推移的变化。ThoughtWorks 的 \u003ca href=\"https://www.thoughtworks.com/de/radar#\"\u003eTechnology Radar\u003c/a\u003e 随着时间推移，技术的演进过程给人深刻的印象。Redux 是\u003ca href=\"https://www.thoughtworks.com/de/radar/languages-and-frameworks/redux\"\u003e在采用阶段\u003c/a\u003e（被 ThoughtWorks 项目采用的！），它在许多 ThoughtWorks 项目中的价值是不可估量的。Vue.js 是\u003ca href=\"https://www.thoughtworks.com/de/radar/languages-and-frameworks/vue-js\"\u003e在试用阶段\u003c/a\u003e（被试着用的）。Vue被描述为具有平滑学习曲线的，轻量级并具灵活性的Angular的替代品。Angular 2 是\u003ca href=\"https://www.thoughtworks.com/de/radar/languages-and-frameworks/angular-2\"\u003e正在处于评估阶段\u003c/a\u003e 使用 —— 已被 ThoughtWork 团队成功实践，但是还没有被强烈推荐。\u003c/p\u003e\n\u003cp\u003e根据 \u003ca href=\"https://insights.stackoverflow.com/survey/2017#most-loved-dreaded-and-wanted\"\u003e2017 年 Stackoverflow 的最新调查\u003c/a\u003e，被调查的开发者中，喜爱 React 有 67%，喜欢 AngularJS 的有 52%。“没有兴趣在开发中继续使用”的开发者占了更高的数量，AngularJS（48%）和 React（33%）。在这两种情况下，Vue 都不在前十。然后是 statejs.com 关于比较 “\u003ca href=\"http://stateofjs.com/2016/frontend/\"\u003e前端框架\u003c/a\u003e” 的调查。最有意思的事实是：React 和 Angular 有 100% 的认知度，23% 的受访者不了解 Vue。关于满意度，92% 的受访者愿意“再次使用” React ，Vue 有 89% ,而 Angular 2 只有 65%。\u003c/p\u003e\n\u003cp\u003e客户满意度调查呢？\u003ca href=\"https://medium.com/@_ericelliott\"\u003eEric Elliott\u003c/a\u003e 于 2016 年 10 月开始评估 Angular 2 和 React。只有 38% 的受访者会再次使用 Angular 2，而 84% 的人会再次使用 React。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e长期支持和迁移\u003c/h3\u003e\u003cp\u003eFacebook \u003ca href=\"https://facebook.github.io/react/contributing/design-principles.html#stability\"\u003e在其设计原则中指出\u003c/a\u003e，React API 非常稳定。还有一些脚本可以帮助你从当前的API移到更新的版本：请查阅 \u003ca href=\"https://github.com/reactjs/react-codemod\"\u003ereact-codemod\u003c/a\u003e。迁移是非常容易的，没有这样的东西（需要）作为长期支持的版本。在 Reddit 这篇文章中指出，人们看到到升级\u003ca href=\"https://www.reddit.com/r/reactjs/comments/5a45ai/is_react_a_good_choice_for_a_stable_longterm_app/\"\u003e从来不是问题\u003c/a\u003e。React 团队写了一篇关于他们\u003ca href=\"https://facebook.github.io/react/blog/2016/02/19/new-versioning-scheme.html\"\u003e版本控制方案\u003c/a\u003e的博客文章。当他们添加弃用警告时，在下一个主要版本中的行为发生更改之前，他们会保留当前版本的其余部分。没有计划更改为新的主要版本 - v14 于 2015 年 10 月发布，v15 于 2016 年 4 月发布，而 v16 还没有发布日期。（译者注：\u003ca href=\"https://reactjs.org/blog/2017/09/26/react-v16.0.html\"\u003ev16 于 2017 年 9 月底发布\u003c/a\u003e）最近 \u003ca href=\"https://github.com/facebook/react/issues/8854#issuecomment-312527769\"\u003eReact核心开发人员指出\u003c/a\u003e，升级不应该是一个问题。\u003c/p\u003e\n\u003cp\u003e关于 Angular，从 v2 发布开始，有一篇\u003ca href=\"http://angularjs.blogspot.de/2016/10/versioning-and-releasing-angular.html\"\u003e关于版本管理和发布 Angular\u003c/a\u003e 的博客文章。每六个月会有一次重大更新，至少有六个月的时间（两个主要版本）。在文档中有一些实验性的 API 被标记为较短的弃用期。目前还没有官方公告，但\u003ca href=\"https://www.infoq.com/news/2017/04/ng-conf-2017-keynote\"\u003e根据这篇文章\u003c/a\u003e，Angular 团队已经宣布了以 Angular 4 开始的长期支持版本。这些将在下一个主要版本发布之后至少一年得到支持。这意味着至少在 \u003cstrong\u003e2018 年 9 月\u003c/strong\u003e之前，将支持 Angular 4，并提供 bug 修复和重要补丁。在大多数情况下，将 Angular 从 v2 更新到 v4 与更新 Angular 依赖关系一样简单。Angular 还提供了有关是否需要进一步更改的\u003ca href=\"https://angular-update-guide.firebaseapp.com/\"\u003e信息指南\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003eVue 1.x 到 2.0 的更新过程对于一个小应用程序来说应该很容易 - 开发者团队已经声称 90% 的 API 保持不变。在控制台上有一个很好的升级 - 诊断迁移 - 辅助工具。一位开发人员\u003ca href=\"https://news.ycombinator.com/item?id=13151966\"\u003e指出\u003c/a\u003e，从 v1 到 v2 的更新在大型应用程序中仍然没有挑战。不幸的是，关于 LTS 版本的下一个主要版本或计划信息没有清晰的（公共）路径。\u003c/p\u003e\n\u003cp\u003e还有一件事：Angular 是一个完整的框架，提供了很多捆绑在一起的东西。React 比 Angular 更灵活，你可能会使用更多独立的，不稳定的，快速更新的库 - 这意味着你需要自己维护相应的更新和迁移。如果某些包不再被维护，或者其他一些包在某些时候成为事实上的标准，这也可能是不利的。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e人力资源与招聘\u003c/h3\u003e\u003cp\u003e如果你的团队有不需要了解更多 Javascript 技术的 HTML 开发人员，则最好选择 Angular 或 Vue。React 需要了解更多的 JavaScript 技术（我们稍后再谈）。\u003c/p\u003e\n\u003cp\u003e你的团队有工作时可以敲代码的设计师吗？Reddit 上的用户 “pier25” 指出，如果你在 Facebook 工作，\u003ca href=\"https://www.reddit.com/r/webdev/comments/5ho71i/why_we_chose_vuejs_over_react/deuynwc/\"\u003e每个人都是一个资深开发者，React 是有意义的\u003c/a\u003e。然而事实上，你不会总是找到一个可以修改 JSX 的设计师，因此使用 HTML 模板将会更容易。\u003c/p\u003e\n\u003cp\u003eAngular 框架的好处是来自另一家公司的新的 Angular 2 开发人员将很快熟悉所有必要的约定。React 项目在架构决策方面各不相同，开发人员需要熟悉特定的项目设置。\u003c/p\u003e\n\u003cp\u003e如果你的开发人员具有面向对象的背景或者不喜欢 Javascript，Angular 也是很好的选择。为了推动这一点，这里是 \u003ca href=\"http://www.c-sharpcorner.com/article/angular-2-or-react-for-decision-makers/\"\u003eMahesh Chand 引述\u003c/a\u003e：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e我不是一个 JavaScript 开发人员。我的背景是使用 “真正的” 软件平台构建大型企业系统。我从 1997 年开始使用 C，C ++，Pascal，Ada 和 Fortran 构建应用程序。（...）我可以清楚地说，JavaScript 对我来说简直是胡言乱语。作为 Microsoft MVP 和专家，我对 TypeScript 有很好的理解。我也不认为 Facebook 是一家软件开发公司。但是，Google 和微软已经是最大的软件创新者。我觉得使用 Google 和微软强大支持的产品会更舒服。另外（...）与我的背景，我知道微软对 TypeScript 有更宏伟的蓝图。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eemmmmmmmm...... 我应该提到的，Mahesh 是微软的区域总监。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003eReact，Angular 和 Vue 的比较\u003c/h2\u003e\u003ch3 class=\"heading\"\u003e组件\u003c/h3\u003e\u003cp\u003e我们所讨论的框架都是基于组件的。一个组件得到一个输入，并且在一些内部的行为/计算之后，它返回一个渲染的 UI 模板（一个登录/注销区或一个待办事项列表项）作为输出。定义的组件应该易于在网页或其他组件中重用。例如，你可以使用具有各种属性（列，标题信息，数据行等）的网格组件（由一个标题组件和多个行组件组成），并且能够在另一个页面上使用具有不同数据集的组件。这里有一篇\u003ca href=\"https://derickbailey.com/2015/08/26/building-a-component-based-web-ui-with-modern-javascript-frameworks/\"\u003e关于组件的综合性文章\u003c/a\u003e，如果你想了解更多这方面的信息。\u003c/p\u003e\n\u003cp\u003eReact 和 Vue 都擅长处理组件：小型的无状态的函数接收输入和返回元素作为输出。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003eTypescript，ES6 与 ES5\u003c/h3\u003e\u003cp\u003eReact 专注于使用 Javascript ES6。Vue 使用 Javascript ES5 或 ES6。\u003c/p\u003e\n\u003cp\u003eAngular 依赖于 TypeScript。这在相关示例和开源项目中提供了更多的一致性（React 示例可以在 ES5 或 ES6 中找到）。这也引入了像装饰器和静态类型的概念。静态类型对于代码智能工具非常有用，比如自动重构，跳转到定义等等 - 它们也可以减少应用程序中的错误数量，尽管这个话题当然没有共识。\u003ca href=\"https://medium.com/@_ericelliott\"\u003eEric Elliott\u003c/a\u003e 在他的文章 “\u003ca href=\"https://medium.com/javascript-scene/the-shocking-secret-about-static-types-514d39bf30a3\"\u003e静态类型的令人震惊的秘密\u003c/a\u003e” 中不同意上面的观点。Daniel C Wang 表示，\u003ca href=\"https://medium.com/@danwang74/the-economics-between-testing-and-types-4a3f8c8a86eb\"\u003e使用静态类型并没有什么坏处\u003c/a\u003e，同时有测试驱动开发（TDD）和静态类型挺好的。\u003c/p\u003e\n\u003cp\u003e你也应该知道你\u003ca href=\"https://www.sitepoint.com/writing-better-javascript-with-flow/\"\u003e可以使用 Flow 在 React 中启用类型检查\u003c/a\u003e。这是 Facebook 为 JavaScript 开发的静态类型检查器。Flow \u003ca href=\"https://alligator.io/vuejs/components-flow/\"\u003e也可以集成到 VueJS 中\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e如果你在用 TypeScript 编写代码，那么你不需要再编写标准的 JavaScript 了。尽管它在不断发展，但与整个 JavaScript 语言相比，TypeScript 的用户群仍然很小。一个风险可能是你正在向错误的方向发展，因为 TypeScript 可能 - 也许不太可能 - 随着时间的推移也会消失。此外，TypeScript 为项目增加了很多（学习）开销 - 你可以在 \u003ca href=\"https://medium.com/@_ericelliott\"\u003eEric Elliott\u003c/a\u003e 的 \u003ca href=\"https://medium.com/javascript-scene/angular-2-vs-react-the-ultimate-dance-off-60e7dfbc379c\"\u003eAngular 2 vs. React 比较\u003c/a\u003e 中阅读更多关于这方面的内容。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e更新\u003c/strong\u003e: \u003ca href=\"https://medium.com/@jrwebdev\"\u003eJames Ravenscroft\u003c/a\u003e 在对这篇文章的评论中写道，\u003ca href=\"https://medium.com/@jrwebdev/id-argue-that-if-you-love-typescript-then-react-may-be-a-better-choice-ceec950ee543\"\u003eTypeScript 对 JSX 有一流的支持\u003c/a\u003e - 可以无缝地对组件进行类型检查。所以，如果你喜欢 TypeScript 并且你想使用 React，这应该不成问题。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e模板 —— JSX 还是 HTML\u003c/h3\u003e\u003cp\u003eReact 打破了长期以来的最佳实践。几十年来，开发人员试图分离 UI 模板和内联的 Javascript 逻辑，但是使用 JSX，这些又被混合了。这听起来很糟糕，但是你应该听彼得·亨特（Peter Hunt）的演讲 “\u003ca href=\"https://www.youtube.com/watch?v=x7cQ3mrcKaY\"\u003eReact：反思最佳实践\u003c/a\u003e”（2013 年 10 月）。他指出，分离模板和逻辑仅仅是技术的分离，而不是关注的分离。你应该构建组件而不是模板。组件是可重用的、可组合的、可单元测试的。\u003c/p\u003e\n\u003cp\u003eJSX 是一个类似 HTML 语法的可选预处理器，并随后在 JavaScript 中进行编译。JSX 有一些怪癖 —— 例如，你需要使用 className 而不是 class，因为后者是 Javascript 的保留字。JSX 对于开发来说是一个很大的优势，因为代码写在同一个地方，可以在代码完成和编译时更好地检查工作成果。当你在 JSX 中输入错误时，React 将不会编译，并打印输出错误的行号。Angular 2 在运行时静默失败（如果使用 Angular 中的预编译，这个参数可能是无效的）。\u003c/p\u003e\n\u003cp\u003eJSX 意味着 React 中的所有内容都是 Javascript -- 用于JSX模板和逻辑。\u003ca href=\"https://medium.com/@housecor\"\u003eCory House\u003c/a\u003e 在 \u003ca href=\"https://medium.freecodecamp.org/angular-2-versus-react-there-will-be-blood-66595faafd51\"\u003e2016 年 1 月的文章\u003c/a\u003e 中指出：“Angular 2 继续把 'JS' 放到 HTML 中。React 把 'HTML' 放到 JS 中。“这是一件好事，因为 Javascript 比 HTML 更强大。\u003c/p\u003e\n\u003cp\u003eAngular 模板使用特殊的 Angular 语法（比如 ngIf 或 ngFor）来增强 HTML。虽然 React 需要 JavaScript 的知识，但 Angular 会迫使你学习 \u003ca href=\"https://angular.io/guide/cheatsheet\"\u003eAngular 特有的语法\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003eVue 具有“\u003ca href=\"https://vuejs.org/v2/guide/single-file-components.html\"\u003e单个文件组件\u003c/a\u003e”。这似乎是对于关注分离的权衡 - 模板，脚本和样式在一个文件中，但在三个不同的有序部分中。这意味着你可以获得语法高亮，CSS 支持以及更容易使用预处理器（如 Jade 或 SCSS）。我已经阅读过其他文章，JSX 更容易调试，因为 Vue 不会显示不规范 HTML 的语法错误。这是不正确的，因为 Vue \u003ca href=\"https://vuejs.org/v2/guide/render-function.html\"\u003e转换 HTML 来渲染函数\u003c/a\u003e - 所以错误显示没有问题（感谢 \u003ca href=\"https://medium.com/@luizvinicius73\"\u003eVinicius Reis\u003c/a\u003e 的评论和更正！）。\u003c/p\u003e\n\u003cp\u003e旁注：如果你喜欢 JSX 的思路，并想在 Vue 中使用它，可以使用 \u003ca href=\"https://github.com/vuejs/babel-plugin-transform-vue-jsx\"\u003ebabel-plugin-transform-vue-jsx\u003c/a\u003e。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e框架和库\u003c/h3\u003e\u003cp\u003eAngular 是一个框架而不是一个库，因为它提供了关于如何构建应用程序的强有力的约束，并且还提供了更多开箱即用的功能。Angular 是一个 “完整的解决方案” - 功能齐全，你可以愉快的开始开发。你不需要研究库，路由解决方案或类似的东西 - 你只要开始工作就好了。\u003c/p\u003e\n\u003cp\u003e另一方面，React 和 Vue 是很灵活的。他们的库可以和各种包搭配。（在 \u003ca href=\"https://www.npmjs.com/search?q=react\u0026amp;page=1\u0026amp;ranking=popularity\"\u003enpm\u003c/a\u003e 上有很多 React 的包，但 Vue 的包比较少，因为毕竟这个框架还比较新）。有了 React，你甚至可以交换库本身的 API 兼容替代品，如 \u003ca href=\"https://infernojs.org/\"\u003eInferno\u003c/a\u003e。然而，灵活性越大，责任就越大 - React 没有规则和有限的指导。每个项目都需要决定架构，而且事情可能更容易出错。\u003c/p\u003e\n\u003cp\u003e另一方面，Angular 还有一个令人困惑的构建工具，样板，检查器（linter）和时间片来处理。如果使用项目初始套件或样板，React 也是如此。他们自然是非常有帮助的，但是 React 可以开箱即用，这也许是你应该学习的方式。有时，在 JavaScript 环境中工作要使用各种工具被称为 “Javascript 疲劳症”。\u003ca href=\"https://medium.com/@ericclemmons\"\u003eEric Clemmons\u003c/a\u003e 在他的\u003ca href=\"https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4\"\u003e文章\u003c/a\u003e 中说：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e当开始使用框架，还有一堆安装的工具，你可能会不习惯。这些都是框架生成的。很多开发人员不明白，框架内部发生了什么 —— 或者需要花费很多时间才能搞明白。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eVue 似乎是三个框架中最轻量的。GitLab 有一篇\u003ca href=\"https://about.gitlab.com/2016/10/20/why-we-chose-vue/\"\u003e关于 Vue.js（2016 年 10 月）的决定的博客文章\u003c/a\u003e：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eVue.js 完美的兼顾了它将为你做什么和你需要做什么。（...）Vue.js 始终是可及的，一个坚固，但灵活的安全网，保证编程效率和把操作 DOM 造成的痛苦降到最低。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e他们喜欢简单易用 —— 源代码非常易读，不需要任何文档或外部库。一切都非常简单。Vue.js “对任何东西都不做大的假设”。还有一个\u003ca href=\"https://www.youtube.com/watch?v=ioogrvs2Ejc#action=share\"\u003e关于 GitLab 决定的播客节目\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e另一个来自 Pixeljets 的\u003ca href=\"http://pixeljets.com/blog/why-we-chose-vuejs-over-react/\"\u003e关于向 Vue 转变\u003c/a\u003e的博文。React “是 JS 界在\u003ca href=\"https://en.wikipedia.org/wiki/Single_source_of_truth\"\u003e意识层面\u003c/a\u003e向前迈出的一大步，它以一种实用简洁的方式向人们展示了真正的函数式编程。和 Vue 相比，React 的一大缺点是由于 JSX 的限制，组件的粒度会更小。这里是文章的引述：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e对于我和我的团队来说，代码的可读性是很重要的，但编写代码很有趣也是非常重要的。在实现真正简单的计算器小部件时创建 6 个组件并不奇怪。在许多情况下，在维护，修改或对某个小部件进行可视化检查方面也是不好的，因为你需要绕过多个文件/函数并分别检查每个小块的 HTML。再次，我不是建议写巨石 - 我建议在日常开发中使用组件而不是微组件。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e关于 \u003ca href=\"https://news.ycombinator.com/item?id=13151317\"\u003eHacker news\u003c/a\u003e 和 \u003ca href=\"https://www.reddit.com/r/webdev/comments/5ho71i/why_we_chose_vuejs_over_react/\"\u003eReddit\u003c/a\u003e 上的博客文章有趣的讨论 - 有来自 Vue 的持异议者和进一步支持者的争论。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e状态管理和数据绑定\u003c/h3\u003e\u003cp\u003e构建用户界面很困难，因为处处都有状态 - 随着时间的推移而变化的数据带来了复杂性。定义的状态工作流程对于应用程序的增长和复杂性有很大的帮助。对于复杂度不大的应用程序，就不必定义的状态流了，像原生 JS 就足够了。\u003c/p\u003e\n\u003cp\u003e它是如何工作的？组件在任何时间点描述 UI。当数据改变时，框架重新渲染整个 UI 组件 - 显示的数据始终是最新的。我们可以把这个概念称为“ UI 即功能”。\u003c/p\u003e\n\u003cp\u003eReact 经常与 Redux 在一起使用。\u003cstrong\u003eRedux\u003c/strong\u003e 以三个\u003ca href=\"http://redux.js.org/docs/introduction/ThreePrinciples.html\"\u003e基本原则\u003c/a\u003e来自述：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e单一数据源（Single source of truth）\u003c/li\u003e\n\u003cli\u003eState 是只读的（State is read-only）\u003c/li\u003e\n\u003cli\u003e使用纯函数执行修改（Changes are made with pure functions）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e换句话说：整个应用程序的状态存储在单个 store 的状态树中。这有助于调试应用程序，一些功能更容易实现。状态是只读的，只能通过 action 来改变，以避免竞争条件（这也有助于调试）。编写 Reducer 来指定如何通过 action 来转换 state。\u003c/p\u003e\n\u003cp\u003e大多数教程和样板文件都已经集成了 Redux，但是如果没有它，你可以使用 React（你可能不需要在你的项目中使用 Redux）。Redux 在代码中引入了复杂性和相当强的约束。如果你正在学习React，那么在你要使用 Redux 之前，你应该考虑学习纯粹的 React。你绝对应该阅读 \u003ca href=\"https://medium.com/@dan_abramov\"\u003eDan Abramov\u003c/a\u003e 的“\u003ca href=\"https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367\"\u003e你可能不需要 Redux\u003c/a\u003e”。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://news.ycombinator.com/item?id=13151577\"\u003e有些开发人员\u003c/a\u003e 建议使用 \u003cstrong\u003e\u003ca href=\"https://github.com/mobxjs/mobx\"\u003eMobx\u003c/a\u003e 代替 Redux\u003c/strong\u003e。你可以把它看作是一个 “自动的 Redux”，这使得事情一开始就更容易使用和理解。如果你想了解，你应该从\u003ca href=\"https://mobxjs.github.io/mobx/getting-started.html\"\u003e介绍\u003c/a\u003e开始。你也可以阅读 Robin 的 \u003ca href=\"https://www.robinwieruch.de/redux-mobx-confusion/\"\u003eRedux 和 MobX 的比较\u003c/a\u003e。他还提供了有关\u003ca href=\"https://www.robinwieruch.de/mobx-react/\"\u003e从 Redux 迁移到 MobX\u003c/a\u003e 的信息。如果你想查找其他 Flux 库，\u003ca href=\"https://github.com/voronianski/flux-comparison\"\u003e这个列表\u003c/a\u003e非常有用。如果你是来自 MVC 的世界，那么你应该阅读 \u003ca href=\"https://medium.com/@mlovekovsky\"\u003eMikhail Levkovsky\u003c/a\u003e 的文章“\u003ca href=\"https://medium.com/p/thinking-in-redux-when-all-youve-known-is-mvc-c78a74d35133?source=user_popover\"\u003eRedux 中的思考（当你所知道的是 MVC）\u003c/a\u003e”。\u003c/p\u003e\n\u003cp\u003eVue 可以使用 Redux，但它提供了 \u003ca href=\"https://github.com/vuejs/vuex\"\u003eVuex\u003c/a\u003e 作为自己的解决方案。\u003c/p\u003e\n\u003cp\u003eReact 和 Angular 之间的巨大差异是 \u003cstrong\u003e单向与双向绑定\u003c/strong\u003e。当 UI 元素（例如，用户输入）被更新时，Angular 的双向绑定改变 model 状态。React 只有一种方法：先更新 model，然后渲染 UI 元素。Angular 的方式实现起来代码更干净，开发人员更容易实现。React 的方式会有更好的数据总览，因为数据只能在一个方向上流动（这使得调试更容易）。\u003c/p\u003e\n\u003cp\u003e这两个概念各有优劣。你需要了解这些概念，并确定这是否会影响你选择框架。文章“\u003ca href=\"https://www.accelebrate.com/blog/two-way-data-binding-angular-2-and-react/\"\u003e双向数据绑定：Angular 2 和 React\u003c/a\u003e”和\u003ca href=\"https://stackoverflow.com/questions/34519889/can-anyone-explain-the-difference-between-reacts-one-way-data-binding-and-angula\"\u003e这个 Stackoverflow 上的问题\u003c/a\u003e都提供了一个很好的解释。\u003ca href=\"http://n12v.com/2-way-data-binding/\"\u003e在这里\u003c/a\u003e你可以找到一些交互式的代码示例（3 年前的示例（，只适用于 Angular 1 和 React）。最后，Vue 支持\u003ca href=\"https://medium.com/js-dojo/exploring-vue-js-reactive-two-way-data-binding-da533d0c4554\"\u003e单向绑定和双向绑定\u003c/a\u003e（默认为单向绑定）。\u003c/p\u003e\n\u003cp\u003e如果你想进一步阅读，这有一篇长文，是有关状态的不同类型和 \u003ca href=\"https://blog.nrwl.io/managing-state-in-angular-applications-22b75ef5625f\"\u003eAngular 应用程序中的状态管理\u003c/a\u003e（\u003ca href=\"https://medium.com/@vsavkin\"\u003eVictor Savkin\u003c/a\u003e）。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e其他的编程概念\u003c/h3\u003e\u003cp\u003eAngular 包含依赖注入（dependency injection），即一个对象将依赖项（服务）提供给另一个对象（客户端）的模式。这导致更多的灵活性和更干净的代码。文章 “\u003ca href=\"https://github.com/angular/angular.js/wiki/Understanding-Dependency-Injection\"\u003e理解依赖注入\u003c/a\u003e” 更详细地解释了这个概念。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\"\u003e模型 - 视图 - 控制器模式\u003c/a\u003e（MVC）将项目分为三个部分：模型，视图和控制器。Angular（MVC 模式的框架）有开箱即用的 MVC 特性。React 只有 V —— 你需要自己解决 M 和 C。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e灵活性与精简到微服务\u003c/h3\u003e\u003cp\u003e你可以通过仅仅添加 React 或 Vue 的 JavaScript 库到你的源码中的方式去使用它们。但是由于 Angular 使用了 TypeScript，所以不能这样使用 Angular。\u003c/p\u003e\n\u003cp\u003e现在我们正在更多地转向微服务和微应用。React 和 Vue 通过只选择真正需要的东西，你可以更好地控制应用程序的大小。它们提供了更灵活的方式去把一个老应用的一部分从单页应用（SPA）转移到微服务。Angular 最适合单页应用（SPA），因为它可能太臃肿而不能用于微服务。\u003c/p\u003e\n\u003cp\u003e正如 \u003ca href=\"https://medium.com/@housecor\"\u003eCory House\u003c/a\u003e 所说:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eJavaScript 发展速度很快，而且 React 可以让你将应用程序的一小部分替换成更好用的 JS 库，而不是期待你的框架能够创新。\u003cstrong\u003e小巧，可组合的单一用途工具的理念永远不会过时\u003c/strong\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e有些人对非单页的网站也使用 React（例如复杂的表单或向导）。甚至 Facebook 都没有把 React 用在 Facebook 的主页，而是用在特定的页面，实现特定的功能。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e体积和性能\u003c/h3\u003e\u003cp\u003e任何框架都不会十全十美：Angular 框架非常臃肿。gzip 文件大小为 143k，而 Vue 为 23K，React 为 43k。\u003c/p\u003e\n\u003cp\u003e为了提高性能，React 和 Vue 都使用了虚拟 DOM（Virtual DOM）。如果你对此感兴趣，可以阅读\u003ca href=\"http://reactkungfu.com/2015/10/the-difference-between-virtual-dom-and-dom/\"\u003e虚拟 DOM 和 DOM 之间的差异\u003c/a\u003e以及 \u003ca href=\"https://www.accelebrate.com/blog/the-real-benefits-of-the-virtual-dom-in-react-js/\"\u003ereact.js 中虚拟 DOM 的实际优势\u003c/a\u003e。此外，虚拟 DOM 的作者之一在 Stackoverflow 上回答了\u003ca href=\"https://stackoverflow.com/questions/21109361/why-is-reacts-concept-of-virtual-dom-said-to-be-more-performant-than-dirty-mode\"\u003e性能的相关问题\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e为了检查性能，我看了一下最佳的 \u003ca href=\"https://github.com/krausest/js-framework-benchmark\"\u003ejs 框架基准\u003c/a\u003e。你可以自己下载并运行它，或者查看\u003ca href=\"http://www.stefankrause.net/js-frameworks-benchmark6/webdriver-ts-results/table.html\"\u003e交互式结果表\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://user-gold-cdn.xitu.io/2017/11/16/15fc436d20796233?w=300\u0026amp;h=678\u0026amp;f=png\u0026amp;s=73985\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eAngular，React 和 Vue 性能比较（\u003ca href=\"http://www.stefankrause.net/js-frameworks-benchmark6/webdriver-ts-results/table.html\"\u003e源文件\u003c/a\u003e）\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://user-gold-cdn.xitu.io/2017/11/16/15fc436e2c06ae4b?w=294\u0026amp;h=160\u0026amp;f=png\u0026amp;s=16145\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e内存分配（\u003ca href=\"http://www.stefankrause.net/js-frameworks-benchmark6/webdriver-ts-results/table.html\"\u003e源文件\u003c/a\u003e）\u003c/p\u003e\n\u003cp\u003e总结一下：Vue 有着很好的性能和高深的内存分配技巧。如果比较快慢的话，这些框架都非常接近（比如 \u003ca href=\"http://www.stefankrause.net/js-frameworks-benchmark6/webdriver-ts-results/table.html\"\u003eInferno\u003c/a\u003e）。请记住，性能基准只能作为考虑的附注，而不是作为判断标准。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e测试\u003c/h3\u003e\u003cp\u003eFacebook \u003ca href=\"http://facebook.github.io/jest/\"\u003e使用 Jest \u003c/a\u003e来测试其 React 代码。这里有篇 \u003ca href=\"https://spin.atomicobject.com/2017/05/02/react-testing-jest-vs-mocha/\"\u003eJest 和 Mocha 之间的比较\u003c/a\u003e的文章 —— 还有一篇关于 \u003ca href=\"https://semaphoreci.com/community/tutorials/testing-react-components-with-enzyme-and-mocha\"\u003eEnzyme 和 Mocha 如何一起使用\u003c/a\u003e 的文章。Enzyme 是 Airbnb 使用的 JavaScript 测试工具（与 Jest，Karma 和其他测试框架一起使用）。如果你想了解更多，有一些关于在 React（\u003ca href=\"https://medium.com/@bruderstein/the-missing-piece-to-the-react-testing-puzzle-c51cd30df7a0\"\u003e这里\u003c/a\u003e和\u003ca href=\"http://reactkungfu.com/2015/07/approaches-to-testing-react-components-an-overview/\"\u003e这里\u003c/a\u003e）测试的旧文章。\u003c/p\u003e\n\u003cp\u003eAngular 2 中使用 \u003cstrong\u003eJasmine\u003c/strong\u003e 作为测试框架。\u003ca href=\"https://medium.com/@_ericelliott\"\u003eEric Elliott\u003c/a\u003e 在一篇文章中抱怨说 Jasmine “有数百种测试和断言的方式，需要仔细阅读每一个，来了解它在做什么”。输出也是非常臃肿和难以阅读。有关 Angular 2 \u003ca href=\"https://medium.com/@laco0416/setting-up-angular-2-testing-environment-with-karma-and-webpack-e9b833befd99\"\u003e与 Karma\u003c/a\u003e 和 \u003ca href=\"https://medium.com/@PeterNagyJob/angular2-configuration-and-unit-testing-with-mocha-and-chai-4ada9484e569\"\u003eMocha\u003c/a\u003e 的整合的一些有用的文章。这里有一个关于 \u003ca href=\"https://www.youtube.com/watch?v=C0F2E-PRm44\"\u003eAngular 2 测试策略\u003c/a\u003e的旧视频（从2015年起）。\u003c/p\u003e\n\u003cp\u003eVue 缺乏测试指导，但是 Evan 在 2017 年的展望中写道，\u003ca href=\"https://medium.com/the-vue-point/vue-in-2016-8df71d98bfb3\"\u003e团队计划在这方面开展工作\u003c/a\u003e。他们推荐使用 \u003ca href=\"http://karma-runner.github.io/1.0/index.html\"\u003eKarma\u003c/a\u003e。\u003ca href=\"https://github.com/locoslab/vue-jest-utils\"\u003eVue 和 Jest 结合使用\u003c/a\u003e，还有 \u003ca href=\"https://github.com/eddyerburgh/avoriaz\"\u003eavoriaz 作为测试工具\u003c/a\u003e。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e通用与原生 app\u003c/h3\u003e\u003cp\u003e通用 app 正在将应用程序引入 web、搬上桌面，同样将深入原生 app 的世界。\u003c/p\u003e\n\u003cp\u003eReact 和 Angular 都支持原生开发。Angular 拥有用于原生应用的 \u003ca href=\"https://docs.nativescript.org/tutorial/ng-chapter-0\"\u003eNativeScript\u003c/a\u003e（由 Telerik 支持）和用于混合开发的 Ionic 框架。借助 React，你可以试试 \u003ca href=\"http://angularjs.blogspot.de/2016/04/angular-2-react-native.html\"\u003ereact-native-renderer\u003c/a\u003e 来构建跨平台的 iOS 和 Android 应用程序，或者用 \u003ca href=\"https://facebook.github.io/react-native/\"\u003ereact-native\u003c/a\u003e 开发原生 app。许多 app（包括 Facebook；查看更多的\u003ca href=\"https://facebook.github.io/react-native/showcase.html\"\u003e展示\u003c/a\u003e）都是用 react-native 构建的。\u003c/p\u003e\n\u003cp\u003eJavascript 框架在客户端上渲染页面。这对于性能，整体用户体验和 SEO 是不利的。服务器端预渲染是一个好办法。所有这三个框架都有相应的库来实现服务端渲染。React 有 next.js，Vue 有 nuxt.js，而 Angular 有...... \u003ca href=\"https://universal.angular.io/\"\u003eAngular Universal\u003c/a\u003e。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e学习曲线\u003c/h3\u003e\u003cp\u003eAngular 的学习曲线确实很陡。它有全面的文档，但你仍然可能被吓哭，因为\u003ca href=\"https://www.reddit.com/r/webdev/comments/5ho71i/why_we_chose_vuejs_over_react/db1vppj/\"\u003e说起来容易做起来难\u003c/a\u003e。即使你对 Javascript 有深入的了解，也需要了解框架的底层原理。去初始化项目是很神奇的，它会引入很多的包和代码。因为有一个大的，预先存在的生态系统，你需要随着时间的推移学习，这很不利。另一方面，由于已经做出了很多决定，所以在特定情况下可能会很好。对于 React，你可能需要针对第三方库进行大量重大决策。仅仅 React 中就有 16 种\u003ca href=\"https://github.com/voronianski/flux-comparison\"\u003e不同的 flux 软件包来用于状态管理\u003c/a\u003e可供选择。\u003c/p\u003e\n\u003cp\u003eVue 学习起来很容易。公司转向 Vue 是因为它对初级开发者来说似乎更容易一些。这里有一片说他们团队为什么\u003ca href=\"https://medium.com/@Hemantisme/moving-from-angular-to-vue-a-vuetiful-journey-c29842ab2039\"\u003e从 Angular 转到 Vue\u003c/a\u003e的文章。\u003ca href=\"https://news.ycombinator.com/item?id=13151716\"\u003e另一位用户\u003c/a\u003e表示，他公司的 React 应用程序非常复杂，以至于新开发人员无法跟上代码。有了 Vue，初级和高级开发人员之间的差距缩小了，他们可以更轻松地协作，减少 bug，减少解决问题的时间。\u003c/p\u003e\n\u003cp\u003e有些人说他们用 React 做的东西比用 Vue 做的更好。如果你是一个没有经验的 Javascript 开发人员 - 或者如果你在过去十年中主要使用 jQuery，那么你应该考虑使用 Vue。转向 React 时，思维方式的转换更为明显。Vue 看起来更像是简单的 Javascript，同时也引入了一些新的概念：组件，事件驱动模型和单向数据流。这同样是很小的部分。\u003c/p\u003e\n\u003cp\u003e同时，Angular 和 React 也有自己的实现方式。它们可能会限制你，因为你需要调整自己的做法，才能顺畅的开发。这可能是一个缺点，因为你不能随心所欲，而且学习曲线陡峭。这也可能是一个好处，因为你在学习技术时必须学习正确的概念。用 Vue，你可以用老方法来做。这一开始可能会比较容易上手，但长此以往会出现问题。\u003c/p\u003e\n\u003cp\u003e在调试方面，React 和 Vue 的黑魔法更少是一个加分项。找出 bug 更容易，因为需要看的地方少了，堆栈跟踪的时候，自己的代码和那些库之间有更明显的区别。使用 React 的人员报告说，他们永远不必阅读库的源代码。但是，在调试 Angular 应用程序时，通常需要调试 Angular 的内部来理解底层模型。从好的一面来看，从 Angular 4 开始，错误信息应该更清晰，更具信息性。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003eAngular, React 和 Vue 底层原理\u003c/h3\u003e\u003cp\u003e你想自己阅读源代码吗？你想看看事情到底是怎么样的吗？\u003c/p\u003e\n\u003cp\u003e可能首先要查看 Github 仓库: React（\u003ca href=\"https://github.com/facebook/react\"\u003egithub.com/facebook/react\u003c/a\u003e）、Angular（\u003ca href=\"https://github.com/angular/angular\"\u003egithub.com/angular/angular\u003c/a\u003e）和 Vue（\u003ca href=\"https://github.com/vuejs/vue\"\u003egithub.com/vuejs/vue\u003c/a\u003e）。\u003c/p\u003e\n\u003cp\u003e语法看起来怎么样？ValueCoders \u003ca href=\"http://www.valuecoders.com/blog/technology-and-apps/vue-js-comparison-angular-react/\"\u003e比较 Angular，React 和 Vue 的语法\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e在生产环境中查看也很容易 —— 连同底层的源代码。\u003ca href=\"http://todomvc.com/\"\u003eTodoMVC\u003c/a\u003e 列出了几十个相同的 Todo 应用程序，用不同的 Javascript 框架编写 —— 你可以比较 \u003ca href=\"http://todomvc.com/examples/angularjs\"\u003eAngular\u003c/a\u003e，\u003ca href=\"http://todomvc.com/examples/react/#/\"\u003eReact\u003c/a\u003e 和 \u003ca href=\"http://todomvc.com/examples/vue/\"\u003eVue\u003c/a\u003e 的解决方案。\u003ca href=\"https://realworld.io/#\"\u003eRealWorld\u003c/a\u003e 创建了一个真实世界的应用程序（中仿），他们已经准备好了 \u003ca href=\"https://github.com/gothinkster/angular-realworld-example-app\"\u003eAngular\u003c/a\u003e（4+）和 \u003ca href=\"https://github.com/gothinkster/react-redux-realworld-example-app\"\u003eReact\u003c/a\u003e（带 Redux ）的解决方案。\u003ca href=\"https://github.com/mchandleraz/realworld-vue\"\u003eVue\u003c/a\u003e 的开发正在进行中。\u003c/p\u003e\n\u003cp\u003e你可以看到许多真实的 app，以下是 React 的方案：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/1ven/do\"\u003eDo\u003c/a\u003e（一款很好用的笔记管理 app，用 \u003cstrong\u003eReact 和 Redux\u003c/strong\u003e 实现）\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/andrewngu/sound-redux\"\u003esound-redux\u003c/a\u003e（用 React 和 Redux 实现的 Soundcloud 客户端）\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Brainfock/Brainfock\"\u003eBrainfock\u003c/a\u003e（用 React 实现的项目和团队管理解决方案）\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/insin/react-hn\"\u003ereact-hn\u003c/a\u003e 和 \u003ca href=\"https://github.com/echenley/react-news\"\u003ereact-news\u003c/a\u003e（仿 Hacker news）\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/himanshuchauhan/react-native-whatsapp-ui\"\u003ereact-native-whatsapp-ui\u003c/a\u003e 和 \u003ca href=\"https://www.codementor.io/codementorteam/build-a-whatsapp-messenger-clone-in-react-part-1-4l2o0waav\"\u003e教程\u003c/a\u003e（仿 Whatsapp 的 react-native 版）\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/bigardone/phoenix-trello/blob/master/README.md\"\u003ephoenix-trello\u003c/a\u003e（仿 Trello）\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/avrj/slack-clone\"\u003eslack-clone\u003c/a\u003e 和\u003ca href=\"https://medium.com/@benhansen/lets-build-a-slack-clone-with-elixir-phoenix-and-react-part-1-project-setup-3252ae780a1\"\u003e其他教程\u003c/a\u003e (仿Slack)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e以下是 Angular 版的 app：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/housseindjirdeh/angular2-hn\"\u003eangular2-hn\u003c/a\u003e 和 \u003ca href=\"https://github.com/hswolff/hn-ng2\"\u003ehn-ng2\u003c/a\u003e（仿 Hacker News，\u003ca href=\"https://medium.com/@Sureshkumar_Ash/angular-2-hackernews-clone-dynamic-components-routing-params-and-refactor-340773d82e6f\"\u003e另一个由 Ashwin Sureshkumar 创建的很好的教程\u003c/a\u003e）\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/@Sureshkumar_Ash/angular-2-hackernews-clone-dynamic-components-routing-params-and-refactor-340773d82e6f\"\u003eRedux-and-angular-2\u003c/a\u003e（仿 Twitter）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e以下是 Vue 版的 app：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/vuejs/vue-hackernews-2.0\"\u003evue-hackernews-2.0\u003c/a\u003e 和 \u003ca href=\"https://github.com/Angarsk8/loopa-news\"\u003eLoopa news\u003c/a\u003e（仿Hacker News）\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/mul14/vue-soundcloud\"\u003evue-soundcloud\u003c/a\u003e（Soundcloud 演示）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 class=\"heading\"\u003e总结\u003c/h2\u003e\u003ch3 class=\"heading\"\u003e现在决定使用哪个框架\u003c/h3\u003e\u003cp\u003eReact，Angular 和 Vue 都很酷，而且没有一个能明显的超过对方。相信你的直觉。\u003ca href=\"https://wildermuth.com/2017/02/12/Why-I-Moved-to-Vue-js-from-Angular-2#comment-3153455874\"\u003e最后一点有趣的玩世不恭的言辞\u003c/a\u003e可能会有助于你的决定：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e这个肮脏的小秘密就是大多数 “现代 JavaScript 开发” 与实际构建网站无关 —— 它正在构建可供构建可供人们使用的库或者包，这些人可以为编写教程和教授课程的人构建框架。我不确定任何人实际上正在为实际用户建立任何交互。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e当然，这是夸张的，但是可能有一点点道理。是的，Javascript生态系统中有很多杂音。在你搜索的过程中，你可能会发现很多其他有吸引力的选项 —— 尽量不要被最新，最闪亮的框架蒙蔽。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e我应该选什么？\u003c/h3\u003e\u003cp\u003e如果你在Google工作：\u003cstrong\u003eAngular\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果你喜欢 TypeScript：\u003cstrong\u003eAngular（\u003ca href=\"https://medium.com/@jrwebdev/id-argue-that-if-you-love-typescript-then-react-may-be-a-better-choice-ceec950ee543\"\u003e或 React\u003c/a\u003e）\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果你喜欢面向对象编程（OOP）: \u003cstrong\u003eAngular\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果你需要指导手册，架构和帮助：\u003cstrong\u003eAngular\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果你在Facebook工作：\u003cstrong\u003eReact\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果你喜欢灵活性：\u003cstrong\u003eReact\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果你喜欢大型的技术生态系统：\u003cstrong\u003eReact\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果你喜欢在几十个软件包中进行选择：\u003cstrong\u003eReact\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果你喜欢JS和“一切都是 Javascript 的方法”：\u003cstrong\u003eReact\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果你喜欢真正干净的代码：\u003cstrong\u003eVue\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果你想要最平缓的学习曲线：\u003cstrong\u003eVue\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果你想要最轻量级的框架：\u003cstrong\u003eVue\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果你想在一个文件中分离关注点：\u003cstrong\u003eVue\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果你一个人工作，或者有一个小团队：\u003cstrong\u003eVue（或 React）\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果你的应用程序往往变得非常大：\u003cstrong\u003eAngular（或 React）\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果你想用 react-native 构建一个应用程序：\u003cstrong\u003eReact\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果你想在圈子中有很多的开发者：\u003cstrong\u003eAngular 或 React\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果你与设计师合作，并需要干净的 HTML 文件：\u003cstrong\u003eAngular or Vue\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果你喜欢 Vue 但是害怕有限的技术生态系统：\u003cstrong\u003eReact\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果你不能决定，先学习 \u003cstrong\u003eReact\u003c/strong\u003e，然后 \u003cstrong\u003eVue\u003c/strong\u003e，然后 \u003cstrong\u003eAngular\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e所以，你做出选择了吗？\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"Yeeesss，你做到了！\" src=\"https://user-gold-cdn.xitu.io/2017/11/16/15fc436e2c180643?w=500\u0026amp;h=500\u0026amp;f=png\u0026amp;s=127605\"\u003e\u003cfigcaption\u003eYeeesss，你做到了！\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e很好！阅读关于如何\u003cstrong\u003e开始 Angular，React 或 Vue\u003c/strong\u003e 开发（即将推出，在 \u003ca href=\"http://www.twitter.com/jensneuhaus/\"\u003eTwitter\u003c/a\u003e 上关注我的更新）。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e更多资源\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.udemy.com/angular-reactjs-vuejs-quickstart-comparison/\"\u003eReact JS，Angular 和 Vue JS —— 快速开始和比较\u003c/a\u003e（对这三个框架进行了 8 小时的介绍和比较)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://hackernoon.com/angular-vs-react-the-deal-breaker-7d76c04496bc\"\u003eAngular React（和 Vue）- DEAL破坏者\u003c/a\u003e（一个简短但很好的比较 \u003ca href=\"https://medium.com/@dominik.t\"\u003eDominik T\u003c/a\u003e）\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/javascript-scene/angular-2-vs-react-the-ultimate-dance-off-60e7dfbc379c\"\u003eAngular 2 和 React —— 终极之舞\u003c/a\u003e（\u003ca href=\"https://medium.com/@_ericelliott\"\u003eEric Elliott\u003c/a\u003e 一个很好的比较）\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/@gsari/react-vs-angular-vs-ember-vs-vue-js-e186c0afc1be\"\u003eReact Angular Ember 和 Vue.js\u003c/a\u003e（\u003ca href=\"https://medium.com/@gsari\"\u003eGökhan Sari\u003c/a\u003e 的三种框架的比较）\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.sitepoint.com/react-vs-angular/\"\u003eReact 和 Angular\u003c/a\u003e（两个框架的明确比较）\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://rubygarage.org/blog/vuejs-vs-react-battle\"\u003eVue 可以战胜 React 吗？\u003c/a\u003e（很多代码示例的一个很好的比较）\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.robinwieruch.de/reasons-why-i-moved-from-angular-to-react/\"\u003e10 个理由，为什么我从 Angular 转到 React\u003c/a\u003e（Robin Wieruch 另一个很好的对比）\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/@mattburgess/all-javascript-frameworks-are-terrible-e68d8865183e\"\u003e所有的JavaScript框架都很糟糕\u003c/a\u003e（\u003ca href=\"https://medium.com/@mattburgess\"\u003eMatt Burgess\u003c/a\u003e 对所有主要框架的大肆抨击）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e感谢您的关注。我忘了重要的事吗？你有不同的意见吗？我总是很高兴得到反馈。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e在 Twitter 上关注我的更新和获取更多内容：\u003c/strong\u003e \u003ca href=\"http://www.twitter.com/jensneuhaus/\"\u003e@jensneuhaus\u003c/a\u003e —— 🙌\u003c/p\u003e\n\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/xitu/gold-miner\"\u003e掘金翻译计划\u003c/a\u003e 是一个翻译优质互联网技术文章的社区，文章来源为 \u003ca href=\"https://juejin.im\"\u003e掘金\u003c/a\u003e 上的英文分享文章。内容覆盖 \u003ca href=\"https://github.com/xitu/gold-miner#android\"\u003eAndroid\u003c/a\u003e、\u003ca href=\"https://github.com/xitu/gold-miner#ios\"\u003eiOS\u003c/a\u003e、\u003ca href=\"https://github.com/xitu/gold-miner#react\"\u003eReact\u003c/a\u003e、\u003ca href=\"https://github.com/xitu/gold-miner#前端\"\u003e前端\u003c/a\u003e、\u003ca href=\"https://github.com/xitu/gold-miner#后端\"\u003e后端\u003c/a\u003e、\u003ca href=\"https://github.com/xitu/gold-miner#产品\"\u003e产品\u003c/a\u003e、\u003ca href=\"https://github.com/xitu/gold-miner#设计\"\u003e设计\u003c/a\u003e 等领域，想要查看更多优质译文请持续关注 \u003ca href=\"https://github.com/xitu/gold-miner\"\u003e掘金翻译计划\u003c/a\u003e、\u003ca href=\"http://weibo.com/juejinfanyi\"\u003e官方微博\u003c/a\u003e、\u003ca href=\"https://zhuanlan.zhihu.com/juejinfanyi\"\u003e知乎专栏\u003c/a\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n","buildTime":"1514462558.7407","__v":0}
{"_id":{"$oid":"5a44e661e8623327d0d60f09"},"id":"5a26b9baf265da431e169fe9","author":{"$oid":"5a44e660e8623327d0d60ef9"},"title":"看完离编写高性能的JavaScript又近了一步","meta":{"likeCount":0},"tag":["HTML","CSS","DOM","JavaScript","前端"],"comment":[],"content":"\u003cp\u003e副标题：\u003ca target=\"_blank\" href=\"https://github.com/zhansingsong/js-leakage-patterns\"\u003e常见的JavaScript内存泄露\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e这是关于JavaScript内存泄露相关的序列文章中一篇。由于时间有限更新进度会有点慢，但会持续更新的。自己也在学习中，难免对某些知识点的理解不是很正确，所以才将文章放置\u003ca target=\"_blank\" href=\"https://github.com/zhansingsong/js-leakage-patterns/blob/master/README.md\"\u003egithub\u003c/a\u003e上，一是想与大家分享，二是方便持续更新，三是便于实时修正错误点。也希望看本文的各位同学能多提issues，我会根据提的意见不断完善文章。最后希望各位能从文章中有所收获-----\u0026gt;🎉 enjoy reading, enjoy life 🐳\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 class=\"heading\"\u003e\u003ca target=\"_blank\" href=\"https://github.com/zhansingsong/js-leakage-patterns\"\u003e✏️最新内容请以github上的为准❗️\u003c/a\u003e\u003c/h3\u003e\n\u003ch3 class=\"heading\"\u003e序列文章链接\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://github.com/zhansingsong/js-leakage-patterns/blob/master/JavaScript%E5%86%85%E5%AD%98%E9%82%A3%E7%82%B9%E4%BA%8B/JavaScript%E5%86%85%E5%AD%98%E9%82%A3%E7%82%B9%E4%BA%8B.md\"\u003eJavaScript内存那点事\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://github.com/zhansingsong/js-leakage-patterns/blob/master/%E5%B8%B8%E8%A7%81%E7%9A%84JavaScript%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/%E5%B8%B8%E8%A7%81%E7%9A%84JavaScript%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2.md\"\u003e常见的JavaScript内存泄露\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://github.com/zhansingsong/js-leakage-patterns/blob/master/IE%3C8%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E5%AF%BC%E8%87%B4%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/IE%3C8%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E5%AF%BC%E8%87%B4%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2.md\"\u003eIE\u0026lt;8循环引用导致的内存泄露\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://github.com/zhansingsong/js-leakage-patterns/blob/master/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%B9%8BjQuery.cache/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%B9%8BjQuery.cache.md\"\u003e内存泄露之jQuery.cache\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://github.com/zhansingsong/js-leakage-patterns/blob/master/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%B9%8BListeners/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%B9%8BListeners.md\"\u003e内存泄露之Listeners\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://github.com/zhansingsong/js-leakage-patterns/blob/master/requestAnimationFrame/requestAnimationFrame.md\"\u003erequestAnimationFrame\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/5/16024b6ed1da665b?w=1080\u0026amp;h=810\u0026amp;f=jpeg\u0026amp;s=238458\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e什么是内存泄露\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e内存泄漏\u003c/strong\u003e指由于疏忽或错误造成程序未能释放已经不再使用的内存。内存泄漏并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费。\n内存泄漏通常情况下只能由获得程序源代码的程序员才能分析出来。然而，有不少人习惯于把任何不需要的内存使用的增加描述为内存泄漏，即使严格意义上来说这是不准确的。\n————\u003ca target=\"_blank\" href=\"https://zh.wikipedia.org/wiki/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F\"\u003ewikipedia\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003e⚠️注：下文中标注的CG是Chrome浏览器中Devtools的【Collect garbage】按钮缩写，表示回收垃圾操作\u003c/strong\u003e\n\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"cg\" src=\"https://user-gold-cdn.xitu.io/2017/12/8/16031b743adea1cc?w=793\u0026amp;h=106\u0026amp;f=png\u0026amp;s=31705\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e意外的全局变量\u003c/h2\u003e\n\u003cp\u003eJavaScript对未声明变量的处理方式：在全局对象上创建该变量的引用(即全局对象上的属性，不是变量，因为它能通过\u003ccode\u003edelete\u003c/code\u003e删除)。如果在浏览器中，全局对象就是\u003cstrong\u003ewindow\u003c/strong\u003e对象。\u003c/p\u003e\n\u003cp\u003e如果未声明的变量缓存大量的数据，会导致这些数据只有在窗口关闭或重新刷新页面时才能被释放。这样会造成意外的内存泄漏。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003efoo\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003earg\u003c/span\u003e) \u003c/span\u003e{\n    bar = \u003cspan class=\"hljs-string\"\u003e\"this is a hidden global variable with a large of data\"\u003c/span\u003e;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e等同于：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003efoo\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003earg\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.bar = \u003cspan class=\"hljs-string\"\u003e\"this is an explicit global variable with a large of data\"\u003c/span\u003e;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e另外，通过\u003cstrong\u003ethis\u003c/strong\u003e创建意外的全局变量：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003efoo\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.variable = \u003cspan class=\"hljs-string\"\u003e\"potential accidental global\"\u003c/span\u003e;\n}\n\n\u003cspan class=\"hljs-comment\"\u003e// 当在全局作用域中调用foo函数，此时this指向的是全局对象(window)，而不是'undefined'\u003c/span\u003e\nfoo();\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e解决方法：\u003c/h3\u003e\n\u003cp\u003e在JavaScript文件中添加\u003ccode\u003e'use strict'\u003c/code\u003e，开启严格模式，可以有效地避免上述问题。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003efoo\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003earg\u003c/span\u003e) \u003c/span\u003e{\n\u003cspan class=\"hljs-meta\"\u003e    \"use strict\"\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003e// 在foo函数作用域内开启严格模式\u003c/span\u003e\n    bar = \u003cspan class=\"hljs-string\"\u003e\"this is an explicit global variable with a large of data\"\u003c/span\u003e;\u003cspan class=\"hljs-comment\"\u003e// 报错：因为bar还没有被声明\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e如果需要在一个函数中使用全局变量，可以像如下代码所示，在\u003cstrong\u003ewindow\u003c/strong\u003e上明确声明：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003efoo\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003earg\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.bar = \u003cspan class=\"hljs-string\"\u003e\"this is a explicit global variable with a large of data\"\u003c/span\u003e;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这样不仅可读性高，而且后期维护也方便\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e谈到全局变量，需要注意那些用来临时存储大量数据的全局变量，确保在处理完这些数据后将其设置为null或重新赋值。全局变量也常用来做cache，一般cache都是为了性能优化才用到的，为了性能，最好对cache的大小做个上限限制。因为cache是不能被回收的，越高cache会导致越高的内存消耗。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 class=\"heading\"\u003econsole.log\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003econsole.log\u003c/code\u003e：向web开发控制台打印一条消息，常用来在开发时调试分析。有时在开发时，需要打印一些对象信息，但发布时却忘记去掉\u003ccode\u003econsole.log\u003c/code\u003e语句，这可能造成内存泄露。\u003c/p\u003e\n\u003cp\u003e在传递给\u003ccode\u003econsole.log\u003c/code\u003e的对象是不能被垃圾回收 ♻️，因为在代码运行之后需要在开发工具能查看对象信息。所以最好不要在生产环境中\u003ccode\u003econsole.log\u003c/code\u003e任何对象。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e实例------\u0026gt;\u003ca target=\"_blank\" href=\"https://github.com/zhansingsong/js-leakage-patterns/blob/master/demos/log.html\"\u003edemos/log.html\u003c/a\u003e\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-meta\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ehtml\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003elang\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"en\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003echarset\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"UTF-8\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"viewport\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003econtent\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"width=device-width, initial-scale=1.0\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ehttp-equiv\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"X-UA-Compatible\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003econtent\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"ie=edge\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eLeaker\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"button\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"click\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n    !\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eLeaker\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.init();\n      };\n      Leaker.prototype = {\n        \u003cspan class=\"hljs-attr\"\u003einit\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n          \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.name = (\u003cspan class=\"hljs-built_in\"\u003eArray\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e100000\u003c/span\u003e)).join(\u003cspan class=\"hljs-string\"\u003e'*'\u003c/span\u003e);\n          \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e\"Leaking an object %o: %o\"\u003c/span\u003e, (\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e()), \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\u003cspan class=\"hljs-comment\"\u003e// this对象不能被回收\u003c/span\u003e\n        },\n\n        \u003cspan class=\"hljs-attr\"\u003edestroy\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n          \u003cspan class=\"hljs-comment\"\u003e// do something....\u003c/span\u003e\n        }\n      };\n      \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.querySelector(\u003cspan class=\"hljs-string\"\u003e'input'\u003c/span\u003e).addEventListener(\u003cspan class=\"hljs-string\"\u003e'click'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Leaker();\n      }, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n    }()\n  \u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这里结合Chrome的Devtools–\u0026gt;Performance做一些分析，操作步骤如下：\u003c/p\u003e\n\u003cp\u003e\u003cu\u003e\u003cstrong\u003e⚠️注：最好在隐藏窗口中进行分析工作，避免浏览器插件影响分析结果\u003c/strong\u003e\u003c/u\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e开启【Performance】项的记录\u003c/li\u003e\n\u003cli\u003e执行一次CG，创建基准参考线\u003c/li\u003e\n\u003cli\u003e连续单击【click】按钮三次，新建三个Leaker对象\u003c/li\u003e\n\u003cli\u003e执行一次CG\u003c/li\u003e\n\u003cli\u003e停止记录\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/5/16024b6ed35058e0?w=1732\u0026amp;h=1284\u0026amp;f=png\u0026amp;s=625180\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e可以看出【JS Heap】线最后没有降回到基准参考线的位置，显然存在没有被回收的内存。如果将代码修改为：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e    !\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eLeaker\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.init();\n      };\n      Leaker.prototype = {\n        \u003cspan class=\"hljs-attr\"\u003einit\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n          \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.name = (\u003cspan class=\"hljs-built_in\"\u003eArray\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e100000\u003c/span\u003e)).join(\u003cspan class=\"hljs-string\"\u003e'*'\u003c/span\u003e);\n        },\n\n        \u003cspan class=\"hljs-attr\"\u003edestroy\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n          \u003cspan class=\"hljs-comment\"\u003e// do something....\u003c/span\u003e\n        }\n      };\n      \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.querySelector(\u003cspan class=\"hljs-string\"\u003e'input'\u003c/span\u003e).addEventListener(\u003cspan class=\"hljs-string\"\u003e'click'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Leaker();\n      }, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n    }()\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e去掉\u003ccode\u003econsole.log(\"Leaking an object %o: %o\", (new Date()), this);\u003c/code\u003e语句。重复上述的操作步骤，分析结果如下：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/5/16024b6ed14272c2?w=1738\u0026amp;h=1224\u0026amp;f=png\u0026amp;s=485557\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e从对比分析结果可知，\u003ccode\u003econsole.log\u003c/code\u003e打印的对象是不会被垃圾回收器回收的。因此最好不要在页面中\u003ccode\u003econsole.log\u003c/code\u003e任何大对象，这样可能会影响页面的整体性能，特别在生产环境中。除了\u003ccode\u003econsole.log\u003c/code\u003e外，另外还有\u003ccode\u003econsole.dir\u003c/code\u003e、\u003ccode\u003econsole.error\u003c/code\u003e、\u003ccode\u003econsole.warn\u003c/code\u003e等都存在类似的问题，这些细节需要特别的关注。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003eclosures(闭包)\u003c/h2\u003e\n\u003cp\u003e当一个函数A返回一个内联函数B，即使函数A执行完，函数B也能访问函数A作用域内的变量，这就是一个闭包——————本质上闭包是将函数内部和外部连接起来的一座桥梁。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003efoo\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003emessage\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eclosure\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(message)\n    };\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e closure;\n}\n\n\u003cspan class=\"hljs-comment\"\u003e// 使用\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e bar = foo(\u003cspan class=\"hljs-string\"\u003e\"hello closure!\"\u003c/span\u003e);\nbar()\u003cspan class=\"hljs-comment\"\u003e// 返回 'hello closure!'\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在函数foo内创建的函数closure对象是不能被回收掉的，因为它被全局变量bar引用，处于一直可访问状态。通过执行\u003ccode\u003ebar()\u003c/code\u003e可以打印出\u003ccode\u003ehello closure!\u003c/code\u003e。如果想释放掉可以将\u003ccode\u003ebar = null\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e\u003cu\u003e\u003cstrong\u003e由于闭包会携带包含它的函数的作用域，因此会比其他函数占用更多的内存。过度使用闭包可能会导致内存占用过多。\u003c/strong\u003e\u003c/u\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e实例------\u0026gt;\u003ca target=\"_blank\" href=\"https://github.com/zhansingsong/js-leakage-patterns/blob/master/demos/closures.html\"\u003edemos/closures.html\u003c/a\u003e\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-meta\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ehtml\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003elang\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"en\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003echarset\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"UTF-8\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"viewport\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003econtent\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"width=device-width, initial-scale=1.0\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ehttp-equiv\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"X-UA-Compatible\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003econtent\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"ie=edge\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eClosure\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e不断单击【click】按钮\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"click_button\"\u003c/span\u003e\u0026gt;\u003c/span\u003eClick\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ef\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e str = \u003cspan class=\"hljs-built_in\"\u003eArray\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e10000\u003c/span\u003e).join(\u003cspan class=\"hljs-string\"\u003e'#'\u003c/span\u003e);\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e foo = {\n        \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'foo'\u003c/span\u003e\n      }\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eunused\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e message = \u003cspan class=\"hljs-string\"\u003e'it is only a test message'\u003c/span\u003e;\n        str = \u003cspan class=\"hljs-string\"\u003e'unused: '\u003c/span\u003e + str;\n      }\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetData\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'data'\u003c/span\u003e;\n      }\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e getData;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e list = [];\n    \n    \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.querySelector(\u003cspan class=\"hljs-string\"\u003e'#click_button'\u003c/span\u003e).addEventListener(\u003cspan class=\"hljs-string\"\u003e'click'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n      list.push(f());\n    }, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n  \u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这里结合Chrome的Devtools-\u0026gt;Memory工具进行分析，操作步骤如下：\u003c/p\u003e\n\u003cp\u003e\u003cu\u003e\u003cstrong\u003e⚠️注：最好在隐藏窗口中进行分析工作，避免浏览器插件影响分析结果\u003c/strong\u003e\u003c/u\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e选中【Record allocation timeline】选项\u003c/li\u003e\n\u003cli\u003e执行一次CG\u003c/li\u003e\n\u003cli\u003e单击【start】按钮开始记录堆分析\u003c/li\u003e\n\u003cli\u003e连续单击【click】按钮十多次\u003c/li\u003e\n\u003cli\u003e停止记录堆分析\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"closure\" src=\"https://user-gold-cdn.xitu.io/2017/12/5/16024b6ed1213e76?f=png\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e上图中蓝色柱形条表示随着时间新分配的内存。选中其中某条蓝色柱形条，过滤出对应新分配的对象：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"closure\" src=\"https://user-gold-cdn.xitu.io/2017/12/5/16024b6ed3362643?w=1232\u0026amp;h=764\u0026amp;f=png\u0026amp;s=182460\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e查看对象的详细信息：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"closure\" src=\"https://user-gold-cdn.xitu.io/2017/12/5/16024b6ed1bf21f0?w=1016\u0026amp;h=752\u0026amp;f=png\u0026amp;s=186411\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e从图可知，在返回的闭包作用链(Scopes)中携带有它所在函数的作用域，作用域中还包含一个str字段。而str字段并没有在返回getData()中使用过。为什么会存在在作用域中，按理应该被GC回收掉， why:question:\u003c/p\u003e\n\u003cp\u003e原因是在相同作用域内创建的多个内部函数对象是共享同一个\u003ca target=\"_blank\" href=\"http://dmitrysoshnikov.com/ecmascript/chapter-2-variable-object/\"\u003e变量对象（variable object）\u003c/a\u003e。如果创建的内部函数没有被其他对象引用，不管内部函数是否引用外部函数的变量和函数，在外部函数执行完，对应变量对象便会被销毁。反之，如果内部函数中存在有对外部函数变量或函数的访问（可以不是被引用的内部函数），并且存在某个或多个内部函数被其他对象引用，那么就会形成闭包，外部函数的变量对象就会存在于闭包函数的作用域链中。这样确保了闭包函数有权访问外部函数的所有变量和函数。了解了问题产生的原因，便可以对症下药了。对代码做如下修改：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ef\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e str = \u003cspan class=\"hljs-built_in\"\u003eArray\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e10000\u003c/span\u003e).join(\u003cspan class=\"hljs-string\"\u003e'#'\u003c/span\u003e);\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e foo = {\n        \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'foo'\u003c/span\u003e\n      }\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eunused\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e message = \u003cspan class=\"hljs-string\"\u003e'it is only a test message'\u003c/span\u003e;\n        \u003cspan class=\"hljs-comment\"\u003e// str = 'unused: ' + str; //删除该条语句\u003c/span\u003e\n      }\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetData\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'data'\u003c/span\u003e;\n      }\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e getData;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e list = [];\n    \n    \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.querySelector(\u003cspan class=\"hljs-string\"\u003e'#click_button'\u003c/span\u003e).addEventListener(\u003cspan class=\"hljs-string\"\u003e'click'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n      list.push(f());\n    }, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003egetData()和unused()内部函数共享f函数对应的变量对象，因为unused()内部函数访问了f作用域内str变量，所以str字段存在于f变量对象中。加上getData()内部函数被返回，被其他对象引用，形成了闭包，因此对应的f变量对象存在于闭包函数的作用域链中。这里只要将函数unused中\u003ccode\u003estr = 'unused: ' + str;\u003c/code\u003e语句删除便可解决问题。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"closure\" src=\"https://user-gold-cdn.xitu.io/2017/12/5/16024b6f0cdefa08?w=1780\u0026amp;h=938\u0026amp;f=png\u0026amp;s=242266\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e查看一下闭包信息：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"closure\" src=\"https://user-gold-cdn.xitu.io/2017/12/5/16024b6f39d6d784?w=1230\u0026amp;h=904\u0026amp;f=png\u0026amp;s=235680\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003eDOM泄露\u003c/h2\u003e\n\u003cp\u003e在JavaScript中，DOM操作是非常耗时的。因为JavaScript/ECMAScript引擎独立于渲染引擎，而DOM是位于渲染引擎，相互访问需要消耗一定的资源。如Chrome浏览器中DOM位于WebCore，而JavaScript/ECMAScript位于V8中。假如将JavaScript/ECMAScript、DOM分别想象成两座孤岛，两岛之间通过一座收费桥连接，过桥需要交纳一定“过桥费”。JavaScript/ECMAScript每次访问DOM时，都需要交纳“过桥费”。因此访问DOM次数越多，费用越高，页面性能就会受到很大影响。\u003ca target=\"_blank\" href=\"http://www.phpied.com/dom-access-optimization/\"\u003e了解更多ℹ️\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/5/16024b6fa7539f16?w=630\u0026amp;h=69\u0026amp;f=png\u0026amp;s=10051\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e为了减少DOM访问次数，一般情况下，当需要多次访问同一个DOM方法或属性时，会将DOM引用缓存到一个局部变量中。\u003cu\u003e但如果在执行某些删除、更新操作后，可能会忘记释放掉代码中对应的DOM引用，这样会造成DOM内存泄露。\u003c/u\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e实例------\u0026gt;\u003ca target=\"_blank\" href=\"https://github.com/zhansingsong/js-leakage-patterns/blob/master/demos/dom.html\"\u003edemos/dom.html\u003c/a\u003e\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-meta\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ehtml\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003elang\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"en\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003echarset\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"UTF-8\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"viewport\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003econtent\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"width=device-width, initial-scale=1.0\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ehttp-equiv\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"X-UA-Compatible\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003econtent\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"ie=edge\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eDom-Leakage\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"button\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"remove\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"remove\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003estyle\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"display:none;\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"button\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"add\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"add\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003epre\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"wrapper\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003epre\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n    \u003cspan class=\"hljs-comment\"\u003e// 因为要多次用到pre.wrapper、div.container、input.remove、input.add节点，将其缓存到本地变量中，\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e wrapper = \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.querySelector(\u003cspan class=\"hljs-string\"\u003e'.wrapper'\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e container = \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.querySelector(\u003cspan class=\"hljs-string\"\u003e'.container'\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e removeBtn = \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.querySelector(\u003cspan class=\"hljs-string\"\u003e'.remove'\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e addBtn = \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.querySelector(\u003cspan class=\"hljs-string\"\u003e'.add'\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e counter = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e once = \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n    \u003cspan class=\"hljs-comment\"\u003e// 方法\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e hide = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003etarget\u003c/span\u003e)\u003c/span\u003e{\n      target.style.display = \u003cspan class=\"hljs-string\"\u003e'none'\u003c/span\u003e;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e show = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003etarget\u003c/span\u003e)\u003c/span\u003e{\n      target.style.display = \u003cspan class=\"hljs-string\"\u003e'inline-block'\u003c/span\u003e;\n    }\n    \u003cspan class=\"hljs-comment\"\u003e// 回调函数\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e removeCallback = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\n      removeBtn.removeEventListener(\u003cspan class=\"hljs-string\"\u003e'click'\u003c/span\u003e, removeCallback, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n      addBtn.removeEventListener(\u003cspan class=\"hljs-string\"\u003e'click'\u003c/span\u003e, addCallback, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n      hide(addBtn);\n      hide(removeBtn);\n      container.removeChild(wrapper);\n    }\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e addCallback = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\n      wrapper.appendChild(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.createTextNode(\u003cspan class=\"hljs-string\"\u003e'\\t'\u003c/span\u003e + ++counter + \u003cspan class=\"hljs-string\"\u003e'：a new line text\\n'\u003c/span\u003e));\n      \u003cspan class=\"hljs-comment\"\u003e// 显示删除操作按钮\u003c/span\u003e\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(once){\n        show(removeBtn);\n        once = \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n      }\n    }\n    \u003cspan class=\"hljs-comment\"\u003e// 绑定事件\u003c/span\u003e\n    removeBtn.addEventListener(\u003cspan class=\"hljs-string\"\u003e'click'\u003c/span\u003e, removeCallback, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n    addBtn.addEventListener(\u003cspan class=\"hljs-string\"\u003e'click'\u003c/span\u003e, addCallback, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n  \u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这里结合Chrome浏览器的Devtools–\u0026gt;Performance做一些分析，操作步骤如下：\u003c/p\u003e\n\u003cp\u003e\u003cu\u003e\u003cstrong\u003e⚠️注：最好在隐藏窗口中进行分析工作，避免浏览器插件影响分析结果\u003c/strong\u003e\u003c/u\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e开启【Performance】项的记录\u003c/li\u003e\n\u003cli\u003e执行一次CG，创建基准参考线\u003c/li\u003e\n\u003cli\u003e连续单击【add】按钮6次，增加6个文本节点到pre元素中\u003c/li\u003e\n\u003cli\u003e单击【remove】按钮，删除刚增加6个文本节点和pre元元素\u003c/li\u003e\n\u003cli\u003e执行一次CG\u003c/li\u003e\n\u003cli\u003e停止记录堆分析\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"dom\" src=\"https://user-gold-cdn.xitu.io/2017/12/5/16024b6f4451a7f0?w=889\u0026amp;h=641\u0026amp;f=png\u0026amp;s=100773\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e从分析结果图可知，虽然6次add操作增加6个Node，但是remove操作并没有让Nodes节点数下降，即remove操作失败。尽管还主动执行了一次CG操作，Nodes曲线也没有下降。因此可以断定内存泄露了！那问题来了，如何去查找问题的原因呢？这里可以通过Chrome浏览器的Devtools–\u0026gt;Memory进行诊断分析，执行如下操作步骤：\u003c/p\u003e\n\u003cp\u003e\u003cu\u003e\u003cstrong\u003e⚠️注：最好在隐藏窗口中进行分析工作，避免浏览器插件影响分析结果\u003c/strong\u003e\u003c/u\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e选中【Take heap snapshot】选项\u003c/li\u003e\n\u003cli\u003e连续单击【add】按钮6次，增加6个文本节点到pre元素中\u003c/li\u003e\n\u003cli\u003e单击【Take snapshot】按钮，执行一次堆快照\u003c/li\u003e\n\u003cli\u003e单击【remove】按钮，删除刚增加6个文本节点和pre元元素\u003c/li\u003e\n\u003cli\u003e单击【Take snapshot】按钮，执行一次堆快照\u003c/li\u003e\n\u003cli\u003e选中生成的第二个快照报告，并将视图由\"Summary\"切换到\"Comparison\"对比模式，在[class filter]过滤输入框中输入关键字：\u003cstrong\u003eDetached\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"dom\" src=\"https://user-gold-cdn.xitu.io/2017/12/5/16024b6fbeb2e3a2?w=907\u0026amp;h=518\u0026amp;f=png\u0026amp;s=183100\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e从分析结果图可知，导致整个pre元素和6个文本节点无法别回收的原因是：代码中存在全局变量\u003ccode\u003ewrapper\u003c/code\u003e对pre元素的引用。知道了产生的问题原因，便可对症下药了。对代码做如下就修改：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e    \u003cspan class=\"hljs-comment\"\u003e// 因为要多次用到pre.wrapper、div.container、input.remove、input.add节点，将其缓存到本地变量中，\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e wrapper = \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.querySelector(\u003cspan class=\"hljs-string\"\u003e'.wrapper'\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e container = \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.querySelector(\u003cspan class=\"hljs-string\"\u003e'.container'\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e removeBtn = \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.querySelector(\u003cspan class=\"hljs-string\"\u003e'.remove'\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e addBtn = \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.querySelector(\u003cspan class=\"hljs-string\"\u003e'.add'\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e counter = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e once = \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n    \u003cspan class=\"hljs-comment\"\u003e// 方法\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e hide = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003etarget\u003c/span\u003e)\u003c/span\u003e{\n      target.style.display = \u003cspan class=\"hljs-string\"\u003e'none'\u003c/span\u003e;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e show = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003etarget\u003c/span\u003e)\u003c/span\u003e{\n      target.style.display = \u003cspan class=\"hljs-string\"\u003e'inline-block'\u003c/span\u003e;\n    }\n    \u003cspan class=\"hljs-comment\"\u003e// 回调函数\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e removeCallback = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\n      removeBtn.removeEventListener(\u003cspan class=\"hljs-string\"\u003e'click'\u003c/span\u003e, removeCallback, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n      addBtn.removeEventListener(\u003cspan class=\"hljs-string\"\u003e'click'\u003c/span\u003e, addCallback, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n      hide(addBtn);\n      hide(removeBtn);\n      container.removeChild(wrapper);\n     \n      wrapper = \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e;\u003cspan class=\"hljs-comment\"\u003e//在执行删除操作时，将wrapper对pre节点的引用释放掉\u003c/span\u003e\n    }\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e addCallback = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\n      wrapper.appendChild(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.createTextNode(\u003cspan class=\"hljs-string\"\u003e'\\t'\u003c/span\u003e + ++counter + \u003cspan class=\"hljs-string\"\u003e'：a new line text\\n'\u003c/span\u003e));\n      \u003cspan class=\"hljs-comment\"\u003e// 显示删除操作按钮\u003c/span\u003e\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(once){\n        show(removeBtn);\n        once = \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n      }\n    }\n    \u003cspan class=\"hljs-comment\"\u003e// 绑定事件\u003c/span\u003e\n    removeBtn.addEventListener(\u003cspan class=\"hljs-string\"\u003e'click'\u003c/span\u003e, removeCallback, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n    addBtn.addEventListener(\u003cspan class=\"hljs-string\"\u003e'click'\u003c/span\u003e, addCallback, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在执行删除操作时，将wrapper对pre节点的引用释放掉，即在删除逻辑中增加\u003ccode\u003ewrapper = null;\u003c/code\u003e语句。再次在Devtools–\u0026gt;Performance中重复上述操作：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"dom\" src=\"https://user-gold-cdn.xitu.io/2017/12/5/16024b6fcdf79727?w=899\u0026amp;h=358\u0026amp;f=png\u0026amp;s=58932\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e小试牛刀------\u0026gt;\u003ca target=\"_blank\" href=\"https://github.com/zhansingsong/js-leakage-patterns/blob/master/demos/dom_practice.html\"\u003edemos/dom_practice.html\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e再来看看网上的一个实例，代码如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-meta\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ehtml\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003elang\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"en\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003echarset\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"UTF-8\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"viewport\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003econtent\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"width=device-width, initial-scale=1.0\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ehttp-equiv\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"X-UA-Compatible\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003econtent\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"ie=edge\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003ePractice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"refA\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"#\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"refB\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e refA = \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.getElementById(\u003cspan class=\"hljs-string\"\u003e'refA'\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e refB = \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.getElementById(\u003cspan class=\"hljs-string\"\u003e'refB'\u003c/span\u003e);\n    \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.body.removeChild(refA);\n\n    \u003cspan class=\"hljs-comment\"\u003e// #refA不能GC回收，因为存在变量refA对它的引用。将其对#refA引用释放，但还是无法回收#refA。\u003c/span\u003e\n    refA = \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e;\n\n    \u003cspan class=\"hljs-comment\"\u003e// 还存在变量refB对#refA的间接引用(refB引用了#refB，而#refB属于#refA)。将变量refB对#refB的引用释放，#refA就可以被GC回收。\u003c/span\u003e\n    refB = \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e;\n  \u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e整个过程如下图所演示：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/5/16024b70621cd867?w=480\u0026amp;h=286\u0026amp;f=gif\u0026amp;s=85739\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e有兴趣的同学可以使用Chrome的Devtools工具，验证一下分析结果，实践很重要~~~:high_brightness:\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003etimers\u003c/h2\u003e\n\u003cp\u003e在JavaScript常用\u003ccode\u003esetInterval()\u003c/code\u003e来实现一些动画效果。当然也可以使用链式\u003ccode\u003esetTimeout()\u003c/code\u003e调用模式来实现：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003esetTimeout(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n  \u003cspan class=\"hljs-comment\"\u003e// do something. . . .\u003c/span\u003e\n  setTimeout(\u003cspan class=\"hljs-built_in\"\u003earguments\u003c/span\u003e.callee, interval);\n}, interval);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e如果在不需要\u003ccode\u003esetInterval()\u003c/code\u003e时，没有通过\u003ccode\u003eclearInterval()\u003c/code\u003e方法移除，那么\u003ccode\u003esetInterval()\u003c/code\u003e会不停地调用函数，直到调用\u003ccode\u003eclearInterval()\u003c/code\u003e或窗口关闭。如果链式\u003ccode\u003esetTimeout()\u003c/code\u003e调用模式没有给出终止逻辑，也会一直运行下去。因此再不需要重复定时器时，确保对定时器进行清除，避免占用系统资源。另外，在使用\u003ccode\u003esetInterval()\u003c/code\u003e和\u003ccode\u003esetTimeout()\u003c/code\u003e来实现动画时，无法确保定时器按照指定的时间间隔来执行动画。为了能在JavaScript中创建出平滑流畅的动画，浏览器为JavaScript动画添加了一个新API-requestAnimationFrame()。\u003ca target=\"_blank\" href=\"https://github.com/zhansingsong/js-leakage-patterns/blob/master/requestAnimationFrame/requestAnimationFrame.md\"\u003e关于setInterval、setTimeout与requestAnimationFrame实现动画上的区别➹猛击😊\u003c/a\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e实例------\u0026gt;\u003ca target=\"_blank\" href=\"https://github.com/zhansingsong/js-leakage-patterns/blob/master/demos/timers.html\"\u003edemos/timers.html\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e如下通过\u003ccode\u003esetInterval()\u003c/code\u003e实现一个clock的小实例，不过代码存在问题的，有兴趣的同学可以先尝试找一下问题的所在~~~~~😎\n操作：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e单击【start】按钮开始clock，同时web开发控制台会打印实时信息\u003c/li\u003e\n\u003cli\u003e单击【stop】按钮停止clock，同时web开发控制台会输出停止信息\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-meta\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ehtml\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003elang\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"en\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003echarset\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"UTF-8\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"viewport\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003econtent\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"width=device-width, initial-scale=1.0\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ehttp-equiv\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"X-UA-Compatible\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003econtent\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"ie=edge\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003esetInterval\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"button\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"start\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"start\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"button\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"stop\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"stop\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e counter = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e clock = {\n      \u003cspan class=\"hljs-attr\"\u003estart\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        setInterval(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.step.bind(\u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e, ++counter), \u003cspan class=\"hljs-number\"\u003e1000\u003c/span\u003e);\n      },\n      \u003cspan class=\"hljs-attr\"\u003estep\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003eflag\u003c/span\u003e) \u003c/span\u003e{\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e date = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e();\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e h = date.getHours();\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e m = date.getMinutes();\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e s = date.getSeconds();\n        \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e\"%d-----\u0026gt; %d:%d:%d\"\u003c/span\u003e, flag, h, m, s);\n      }\n    }\n    \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.querySelector(\u003cspan class=\"hljs-string\"\u003e'.start'\u003c/span\u003e).addEventListener(\u003cspan class=\"hljs-string\"\u003e'click'\u003c/span\u003e, clock.start.bind(clock), \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n    \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.querySelector(\u003cspan class=\"hljs-string\"\u003e'.stop'\u003c/span\u003e).addEventListener(\u003cspan class=\"hljs-string\"\u003e'click'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n      \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e'----\u0026gt; stop \u0026lt;----'\u003c/span\u003e);\n      clock = \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e;\n    }, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n  \u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e上述代码存在两个问题：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e如果不断的单击【start】按钮，会断生成新的clock。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e单击【stop】按钮不能停止clock。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e输出结果:\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/5/16024b70000b3b08?w=650\u0026amp;h=300\u0026amp;f=png\u0026amp;s=76795\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e针对暴露出的问题，对代码做如下修改：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e counter = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e clock = {\n      \u003cspan class=\"hljs-attr\"\u003etimer\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e,\n      \u003cspan class=\"hljs-attr\"\u003estart\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        \u003cspan class=\"hljs-comment\"\u003e// 解决第一个问题\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.timer) {\n          clearInterval(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.timer);\n        }\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.timer = setInterval(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.step.bind(\u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e, ++counter), \u003cspan class=\"hljs-number\"\u003e1000\u003c/span\u003e);\n      },\n      \u003cspan class=\"hljs-attr\"\u003estep\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003eflag\u003c/span\u003e) \u003c/span\u003e{\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e date = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e();\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e h = date.getHours();\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e m = date.getMinutes();\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e s = date.getSeconds();\n        \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e\"%d-----\u0026gt; %d:%d:%d\"\u003c/span\u003e, flag, h, m, s);\n      },\n      \u003cspan class=\"hljs-comment\"\u003e// 解决第二个问题\u003c/span\u003e\n      destroy: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e'----\u0026gt; stop \u0026lt;----'\u003c/span\u003e);\n        clearInterval(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.timer);\n        node = \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e;\n        counter = \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\n      }\n    }\n    \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.querySelector(\u003cspan class=\"hljs-string\"\u003e'.start'\u003c/span\u003e).addEventListener(\u003cspan class=\"hljs-string\"\u003e'click'\u003c/span\u003e, clock.start.bind(clock), \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n    \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.querySelector(\u003cspan class=\"hljs-string\"\u003e'.stop'\u003c/span\u003e).addEventListener(\u003cspan class=\"hljs-string\"\u003e'click'\u003c/span\u003e, clock.destroy.bind(clock), \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003eEventListener\u003c/h2\u003e\n\u003cp\u003e做移动开发时，需要对不同设备尺寸做适配。如在开发组件时，有时需要考虑处理横竖屏适配问题。一般做法，在横竖屏发生变化时，需要将组件销毁后再重新生成。而在组件中会对其进行相关事件绑定，如果在销毁组件时，没有将组件的事件解绑，在横竖屏发生变化时，就会不断地对组件进行事件绑定。这样会导致一些异常，甚至可能会导致页面崩掉。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e实例------\u0026gt;\u003ca target=\"_blank\" href=\"https://github.com/zhansingsong/js-leakage-patterns/blob/master/demos/callbacks.html\"\u003edemos/callbacks.html\u003c/a\u003e\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-meta\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ehtml\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003elang\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"en\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003echarset\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"UTF-8\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"viewport\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003econtent\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"width=device-width, initial-scale=1.0\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ehttp-equiv\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"X-UA-Compatible\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003econtent\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"ie=edge\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003ecallbacks\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e container = \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.querySelector(\u003cspan class=\"hljs-string\"\u003e'.container'\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e counter = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e createHtml = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003en, counter\u003c/span\u003e) \u003c/span\u003e{\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e template = \u003cspan class=\"hljs-string\"\u003e`\u003cspan class=\"hljs-subst\"\u003e${(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eArray\u003c/span\u003e(n)).join(\u003cspan class=\"hljs-string\"\u003e`\u0026lt;div\u0026gt;\u003cspan class=\"hljs-subst\"\u003e${counter}\u003c/span\u003e: this is a new data \u0026lt;input type=\"button\" value=\"remove\"\u0026gt;\u0026lt;/div\u0026gt;`\u003c/span\u003e)}\u003c/span\u003e`\u003c/span\u003e\n      container.innerHTML = template;\n    }\n   \n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e resizeCallback = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003einit\u003c/span\u003e) \u003c/span\u003e{\n      createHtml(\u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e, ++counter);\n      \u003cspan class=\"hljs-comment\"\u003e// 事件委托\u003c/span\u003e\n      container.addEventListener(\u003cspan class=\"hljs-string\"\u003e'click'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e)\u003c/span\u003e{\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e target = event.target;\n          \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(target.tagName === \u003cspan class=\"hljs-string\"\u003e'INPUT'\u003c/span\u003e){\n              container.removeChild(target.parentElement)\n          }\n      }, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);   \n    }\n    \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.addEventListener(\u003cspan class=\"hljs-string\"\u003e'resize'\u003c/span\u003e, resizeCallback, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n    resizeCallback(\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e);\n  \u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e页面是存在问题的，这里结合Devtools–\u0026gt;Performance分析一下问题所在，操作步骤如下：\u003c/p\u003e\n\u003cp\u003e\u003cu\u003e\u003cstrong\u003e⚠️注：最好在隐藏窗口中进行分析工作，避免浏览器插件影响分析结果\u003c/strong\u003e\u003c/u\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e开启Performance项的记录\u003c/li\u003e\n\u003cli\u003e执行一次CG，创建基准参考线\u003c/li\u003e\n\u003cli\u003e对窗口大小进行调整\u003c/li\u003e\n\u003cli\u003e执行一次CG\u003c/li\u003e\n\u003cli\u003e停止记录\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"callbacks\" src=\"https://user-gold-cdn.xitu.io/2017/12/5/16024b70aa5ccf98?w=902\u0026amp;h=620\u0026amp;f=png\u0026amp;s=121424\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e如分析结果所示，在窗口大小变化时，会不断地对\u003ccode\u003econtainer\u003c/code\u003e添加代理事件。\u003c/p\u003e\n\u003cp\u003e同一个元素节点注册了多个相同的EventListener，那么重复的实例会被抛弃。这么做不会让得EventListener被重复调用，也不需要用removeEventListener手动清除多余的EventListener，因为重复的都被自动抛弃了。而这条规则只是针对于命名函数。\u003ca target=\"_blank\" href=\"https://triangle717.wordpress.com/2015/12/14/js-avoid-duplicate-listeners/\"\u003e对于匿名函数，浏览器会将其看做不同的EventListener\u003c/a\u003e，所以只要将匿名的EventListener，命名一下就可以解决问题：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e container = \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.querySelector(\u003cspan class=\"hljs-string\"\u003e'.container'\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e counter = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e createHtml = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003en, counter\u003c/span\u003e) \u003c/span\u003e{\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e template = \u003cspan class=\"hljs-string\"\u003e`\u003cspan class=\"hljs-subst\"\u003e${(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eArray\u003c/span\u003e(n)).join(\u003cspan class=\"hljs-string\"\u003e`\u0026lt;div\u0026gt;\u003cspan class=\"hljs-subst\"\u003e${counter}\u003c/span\u003e: this is a new data \u0026lt;input type=\"button\" value=\"remove\"\u0026gt;\u0026lt;/div\u0026gt;`\u003c/span\u003e)}\u003c/span\u003e`\u003c/span\u003e\n      container.innerHTML = template;\n    }\n    \u003cspan class=\"hljs-comment\"\u003e// \u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e clickCallback = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e target = event.target;\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (target.tagName === \u003cspan class=\"hljs-string\"\u003e'INPUT'\u003c/span\u003e) {\n        container.removeChild(target.parentElement)\n      }\n    }\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e resizeCallback = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003einit\u003c/span\u003e) \u003c/span\u003e{\n      createHtml(\u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e, ++counter);\n      \u003cspan class=\"hljs-comment\"\u003e// 事件委托\u003c/span\u003e\n      container.addEventListener(\u003cspan class=\"hljs-string\"\u003e'click'\u003c/span\u003e, clickCallback, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n    }\n    \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.addEventListener(\u003cspan class=\"hljs-string\"\u003e'resize'\u003c/span\u003e, resizeCallback, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n    resizeCallback(\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在Devtools–\u0026gt;Performance中再重复上述操作，分析结果如下：\n\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"callback\" src=\"https://user-gold-cdn.xitu.io/2017/12/5/16024b70a4fec7fc?w=653\u0026amp;h=615\u0026amp;f=png\u0026amp;s=105300\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e在开发中，开发者很少关注事件解绑，因为浏览器已经为我们处理得很好了。不过在使用第三方库时，需要特别注意，因为一般第三方库都实现了自己的事件绑定，如果在使用过程中，在需要销毁事件绑定时，没有调用所解绑方法，就可能造成事件绑定数量的不断增加。如下链接是我在项目中使用jquery，遇见到类似问题：\u003ca target=\"_blank\" href=\"https://github.com/zhansingsong/js-leakage-patterns/blob/master/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%B9%8BListeners/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%B9%8BListeners.md\"\u003ejQuery中忘记解绑注册的事件，造成内存泄露➹猛击😊\u003c/a\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e总结\u003c/h2\u003e\n\u003cp\u003e本文主要介绍了几种常见的内存泄露。在开发过程，需要我们特别留意一下本文所涉及到的几种内存泄露问题。因为这些随时可能发生在我们日常开发中，如果我们对它们不了解是很难发现它们的存在。可能在它们将问题影响程度放大时，才会引起我们的关注。不过那时可能就晚了，因为产品可能已经上线，接着就会严重影响产品的质量和用户体验，甚至可能让我们承受大量用户流失的损失。作为开发的我们必须把好这个关，让我们开发的产品带给用户最好的体验。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e参考文章：\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://blog.meteor.com/an-interesting-kind-of-javascript-memory-leak-8b47d2e7f156\"\u003eAn interesting kind of JavaScript memory leak\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"http://isaacschlueter.com/2006/10/msie-memory-leaks/trackback/index.html\"\u003eMemory Leaks in Microsoft Internet Explorer\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://stackoverflow.com/questions/12996129/memory-leak-when-logging-complex-objects\"\u003eMemory leak when logging complex objects\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","buildTime":"1514446032.6755","__v":0}
{"_id":{"$oid":"5a44e661e8623327d0d60f0a"},"id":"5a3738876fb9a0450e763541","author":{"$oid":"5a43938e51fb4902b066150f"},"title":"React全家桶构建一款Web音乐App实战（二）：字体图标制作及页面路由搭建","meta":{"likeCount":0},"tag":["React.js","前端"],"comment":[],"content":"\u003cp\u003e上一节使用\u003cstrong\u003ecreate-react-app\u003c/strong\u003e脚手架搭建了基本项目骨架，这一节继续制作项目需要的字体图标和页面主路由的搭建\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e字体图标制作\u003c/h3\u003e\n\u003cp\u003e为什么要使用字体图标？\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e图标放大或缩小不会被拉伸，会保持足够的清晰度\u003c/li\u003e\n\u003cli\u003e颜色可以随意设置。如果使用普通图片，图片颜色已经是设计好的，如果要换颜色需要借助工具来对图片进行修改\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e制作字体图片首先我们需要svg图片。svg图片可以从\u003ca target=\"_blank\" href=\"http://www.iconfont.cn/\"\u003eiconfont\u003c/a\u003e阿里矢量图标库自行选择。笔者已经下载了项目需要的svg图片\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/18/16067c817644d910?w=179\u0026amp;h=312\u0026amp;f=png\u0026amp;s=7706\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e借助一个叫iconmoon的网站。浏览器地址上输入：\u003ca target=\"_blank\" href=\"https://icomoon.io/app\"\u003ehttps://icomoon.io/app\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/18/16067c36c50b2d1a?w=1902\u0026amp;h=974\u0026amp;f=png\u0026amp;s=132607\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e点击上方的Import Icons按钮弹出选择对话框，选择刚刚下载的svg图片\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/18/16067d61e14d3773?w=941\u0026amp;h=540\u0026amp;f=png\u0026amp;s=99144\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e点击打开\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/18/16067d8b84aabc0b?w=1253\u0026amp;h=279\u0026amp;f=png\u0026amp;s=22371\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e然后选中所有的图标，点击Generate Font\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/18/16067dab85b6c946?w=1572\u0026amp;h=923\u0026amp;f=png\u0026amp;s=276032\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e跳转到如下界面，点击download\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/18/16067dcca9ec59f2?w=1649\u0026amp;h=914\u0026amp;f=png\u0026amp;s=86895\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n下载后面的压缩包如下\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/18/16067de5be21144c?w=142\u0026amp;h=110\u0026amp;f=png\u0026amp;s=4631\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e该压缩包包含了字体图片使用的demo，和生成的字体图标文件及相关样式。在项目\u003cstrong\u003esrc\u003c/strong\u003e目录下面新建一个\u003cstrong\u003eassets\u003c/strong\u003e目录然后再新建一个\u003cstrong\u003estylus\u003c/strong\u003e目录用来放置styl文件，解压压缩包把里面的\u003cstrong\u003estyle.css\u003c/strong\u003e和\u003cstrong\u003efonts\u003c/strong\u003e文件夹复制出来放置到stylus目录下。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/18/16067e39df057eea?w=295\u0026amp;h=192\u0026amp;f=png\u0026amp;s=6121\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e对fonts目录下的文件和style.css稍做修改\u003c/p\u003e\n\u003cp\u003e将fonts下面的文件名都重命名为\u003cstrong\u003eicomusic\u003c/strong\u003e，将style.css重命名为\u003cstrong\u003efont.styl\u003c/strong\u003e。然后打开icomusic将里面的花括号和分号去掉变成标准的styl语法格式，把里面的\u003cstrong\u003eiconmoon\u003c/strong\u003e全部替换为\u003cstrong\u003eicomusic\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003efont.styl\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e@font-face\n  font-family: \u003cspan class=\"hljs-string\"\u003e'icomusic'\u003c/span\u003e\n  src:  url(\u003cspan class=\"hljs-string\"\u003e'fonts/icomusic.eot?nnepb1'\u003c/span\u003e)\n  src:  url(\u003cspan class=\"hljs-string\"\u003e'fonts/icomusic.eot?nnepb1#iefix'\u003c/span\u003e) format(\u003cspan class=\"hljs-string\"\u003e'embedded-opentype'\u003c/span\u003e),\n    url(\u003cspan class=\"hljs-string\"\u003e'fonts/icomusic.ttf?nnepb1'\u003c/span\u003e) format(\u003cspan class=\"hljs-string\"\u003e'truetype'\u003c/span\u003e),\n    url(\u003cspan class=\"hljs-string\"\u003e'fonts/icomusic.woff?nnepb1'\u003c/span\u003e) format(\u003cspan class=\"hljs-string\"\u003e'woff'\u003c/span\u003e),\n    url(\u003cspan class=\"hljs-string\"\u003e'fonts/icomusic.svg?nnepb1#icomusic'\u003c/span\u003e) format(\u003cspan class=\"hljs-string\"\u003e'svg'\u003c/span\u003e)\n  font-weight: normal\n  font-style: normal\n\n\n[class^=\u003cspan class=\"hljs-string\"\u003e\"icon-\"\u003c/span\u003e], [class*=\u003cspan class=\"hljs-string\"\u003e\" icon-\"\u003c/span\u003e]\n  /* use !important to prevent issues with browser extensions that change fonts */\n  font-family: \u003cspan class=\"hljs-string\"\u003e'icomusic'\u003c/span\u003e !important\n  speak: none\n  font-style: normal\n  font-weight: normal\n  font-variant: normal\n  text-transform: none\n  line-height: 1\n\n  /* Better Font Rendering =========== */\n  -webkit-font-smoothing: antialiased\n  -moz-osx-font-smoothing: grayscale\n\n\n.icon-back:before\n  content: \u003cspan class=\"hljs-string\"\u003e\"\\e900\"\u003c/span\u003e\n\n.icon-delete:before\n  content: \u003cspan class=\"hljs-string\"\u003e\"\\e901\"\u003c/span\u003e\n\n.icon-fe-music:before\n  content: \u003cspan class=\"hljs-string\"\u003e\"\\e902\"\u003c/span\u003e\n\n.icon-list-play:before\n  content: \u003cspan class=\"hljs-string\"\u003e\"\\e903\"\u003c/span\u003e\n\n.icon-music:before\n  content: \u003cspan class=\"hljs-string\"\u003e\"\\e904\"\u003c/span\u003e\n\n.icon-next:before\n  content: \u003cspan class=\"hljs-string\"\u003e\"\\e905\"\u003c/span\u003e\n\n.icon-pause:before\n  content: \u003cspan class=\"hljs-string\"\u003e\"\\e906\"\u003c/span\u003e\n\n.icon-play:before\n  content: \u003cspan class=\"hljs-string\"\u003e\"\\e907\"\u003c/span\u003e\n\n.icon-play-list:before\n  content: \u003cspan class=\"hljs-string\"\u003e\"\\e908\"\u003c/span\u003e\n\n.icon-previous:before\n  content: \u003cspan class=\"hljs-string\"\u003e\"\\e909\"\u003c/span\u003e\n\n.icon-search:before\n  content: \u003cspan class=\"hljs-string\"\u003e\"\\e90a\"\u003c/span\u003e\n\n.icon-shuffle-play:before\n  content: \u003cspan class=\"hljs-string\"\u003e\"\\e90b\"\u003c/span\u003e\n\n.icon-single-play:before\n  content: \u003cspan class=\"hljs-string\"\u003e\"\\e90c\"\u003c/span\u003e\n\n.icon-user:before\n  content: \u003cspan class=\"hljs-string\"\u003e\"\\e90d\"\u003c/span\u003e\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e修改后的文件结构如下\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/18/16067ed94ee3e7cc?w=309\u0026amp;h=193\u0026amp;f=png\u0026amp;s=6351\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e页面路由搭建\u003c/h3\u003e\n\u003ch4 class=\"heading\"\u003e准备\u003c/h4\u003e\n\u003cp\u003e先对项目结构做一些修改\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/18/1606813e17f5ea7a?w=355\u0026amp;h=485\u0026amp;f=png\u0026amp;s=21009\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e删除\u003cstrong\u003eApp.test.js\u003c/strong\u003e、\u003cstrong\u003elogo.svg\u003c/strong\u003e。在src目录下面新建一个\u003cstrong\u003ecomponents\u003c/strong\u003e目录，将\u003cstrong\u003eApp.js\u003c/strong\u003e和\u003cstrong\u003eApp.styl\u003c/strong\u003e放置在\u003cstrong\u003ecomponents\u003c/strong\u003e目录下面，将\u003cstrong\u003eApp.styl\u003c/strong\u003e中的内容全部删除，然后删除App.js中\u003cstrong\u003erender\u003c/strong\u003e函数中的div标签下面的内容\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eApp.js\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e//import React, { Component } from \u003cspan class=\"hljs-string\"\u003e'react'\u003c/span\u003e;\nimport React from \u003cspan class=\"hljs-string\"\u003e'react'\u003c/span\u003e;\n//import logo from \u003cspan class=\"hljs-string\"\u003e'./logo.svg'\u003c/span\u003e; 删除此行\nimport \u003cspan class=\"hljs-string\"\u003e'./App.styl'\u003c/span\u003e;\n\nclass App extends React.Component {\n  \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003erender\u003c/span\u003e\u003c/span\u003e() {\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e (\n      //\u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"App\"\u003c/span\u003e\u0026gt;\n      \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"app\"\u003c/span\u003e\u0026gt;\n        //\u0026lt;header className=\u003cspan class=\"hljs-string\"\u003e\"App-header\"\u003c/span\u003e\u0026gt;\n        //  \u0026lt;img src={logo} className=\u003cspan class=\"hljs-string\"\u003e\"App-logo\"\u003c/span\u003e alt=\u003cspan class=\"hljs-string\"\u003e\"logo\"\u003c/span\u003e /\u0026gt;\n        //  \u0026lt;h1 className=\u003cspan class=\"hljs-string\"\u003e\"App-title\"\u003c/span\u003e\u0026gt;Welcome to React\u0026lt;/h1\u0026gt;\n        //\u0026lt;/header\u0026gt;\n        //\u0026lt;p className=\u003cspan class=\"hljs-string\"\u003e\"App-intro\"\u003c/span\u003e\u0026gt;\n        //  To get started, edit \u0026lt;code\u0026gt;src/App.js\u0026lt;/code\u0026gt; and save to reload.\n        //\u0026lt;/p\u0026gt;\n      \u0026lt;/div\u0026gt;\n    );\n  }\n}\n\n\u003cspan class=\"hljs-built_in\"\u003eexport\u003c/span\u003e default App;\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003eIndex.js\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eimport React from \u003cspan class=\"hljs-string\"\u003e'react'\u003c/span\u003e;\nimport ReactDOM from \u003cspan class=\"hljs-string\"\u003e'react-dom'\u003c/span\u003e;\nimport \u003cspan class=\"hljs-string\"\u003e'./index.css'\u003c/span\u003e;\n//import App from \u003cspan class=\"hljs-string\"\u003e'./App'\u003c/span\u003e;\nimport App from \u003cspan class=\"hljs-string\"\u003e'./components/App'\u003c/span\u003e;\nimport registerServiceWorker from \u003cspan class=\"hljs-string\"\u003e'./registerServiceWorker'\u003c/span\u003e;\n\nReactDOM.render(\u0026lt;App /\u0026gt;, document.getElementById(\u003cspan class=\"hljs-string\"\u003e'root'\u003c/span\u003e));\nregisterServiceWorker();\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e修改index.css文件，将\u003cstrong\u003ehtml\u003c/strong\u003e、\u003cstrong\u003ebody\u003c/strong\u003e、\u003cstrong\u003ediv#root\u003c/strong\u003e宽高都设置为100%，在\u003cstrong\u003ebody\u003c/strong\u003e上设置根字体和字体大小\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eindex.css\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003ehtml, body, \u003cspan class=\"hljs-comment\"\u003e#root {\u003c/span\u003e\n  width: 100%;\n  height: 100%;\n}\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 16px;\n}\n::-webkit-scrollbar {\n  width: 0;\n  height: 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e最后在\u003cstrong\u003estylus\u003c/strong\u003e目录下新增\u003cstrong\u003ereset.styl\u003c/strong\u003e文件\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ereset.styl\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video\n\u0009margin: 0\n\u0009padding: 0\n\u0009border: 0\n\u0009vertical-align: baseline\n\n/* HTML5 display-role reset \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section\n\u0009display: block\n\nbody\n\u0009line-height: 1\n\nol, ul\n\u0009list-style: none\n\nblockquote, q\n\u0009quotes: none\n\nblockquote:before, blockquote:after,\nq:before, q:after\n\u0009content: \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e\n\u0009content: none\n\ntable\n\u0009border-collapse: collapse\n\u0009border-spacing: 0\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e修改后的目录结构如下\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/18/160682a3a6f5dea8?w=345\u0026amp;h=485\u0026amp;f=png\u0026amp;s=20870\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003e搭建路由\u003c/h4\u003e\n\u003cp\u003e我们先来看一下页面结构\u003c/p\u003e\n\u003cp\u003e推荐页\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/18/1606861be41fc5d0?w=362\u0026amp;h=567\u0026amp;f=png\u0026amp;s=187199\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e排行榜\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/18/1606863c9365d4e8?w=361\u0026amp;h=568\u0026amp;f=png\u0026amp;s=123974\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e搜索\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/18/16068655bed1ab05?w=363\u0026amp;h=568\u0026amp;f=png\u0026amp;s=38795\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e这三个页面是一个Tab选项卡模式顶部是Logo，三个Tab按钮中间是Tab对应的视图，Logo和Tab按钮是不变的，所以这里中间就设计成一个路由的视图界面，三个Tab对应三个路由\u003c/p\u003e\n\u003cp\u003e编写Logo及Tab样式\n在\u003cstrong\u003eassets\u003c/strong\u003e目录下面新建一个\u003cstrong\u003eimgs\u003c/strong\u003e文件夹用来存放图片，这里放了三张图片，其中一张就是头部Logo图片，其它两张后面会用到\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/18/160687c308ca7615?w=319\u0026amp;h=106\u0026amp;f=png\u0026amp;s=3747\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eApp.js\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eimport React from \u003cspan class=\"hljs-string\"\u003e'react'\u003c/span\u003e;\nimport logo from \u003cspan class=\"hljs-string\"\u003e\"../assets/imgs/logo.png\"\u003c/span\u003e\nimport \u003cspan class=\"hljs-string\"\u003e'../assets/stylus/reset.styl'\u003c/span\u003e\nimport \u003cspan class=\"hljs-string\"\u003e'./App.styl'\u003c/span\u003e;\n\nclass App extends React.Component {\n  \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003erender\u003c/span\u003e\u003c/span\u003e() {\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e (\n      \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"app\"\u003c/span\u003e\u0026gt;\n        \u0026lt;header className=\u003cspan class=\"hljs-string\"\u003e\"app-header\"\u003c/span\u003e\u0026gt;\n          \u0026lt;img src={logo} className=\u003cspan class=\"hljs-string\"\u003e\"app-logo\"\u003c/span\u003e alt=\u003cspan class=\"hljs-string\"\u003e\"logo\"\u003c/span\u003e /\u0026gt;\n          \u0026lt;h1 className=\u003cspan class=\"hljs-string\"\u003e\"app-title\"\u003c/span\u003e\u0026gt;Mango Music\u0026lt;/h1\u0026gt;\n        \u0026lt;/header\u0026gt;\n        \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"music-tab\"\u003c/span\u003e\u0026gt;\n          \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"tab-item selected\"\u003c/span\u003e\u0026gt;\n              \u0026lt;span\u0026gt;推荐\u0026lt;/span\u0026gt;\n          \u0026lt;/div\u0026gt;\n          \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"tab-item\"\u003c/span\u003e\u0026gt;\n              \u0026lt;span\u0026gt;排行榜\u0026lt;/span\u0026gt;\n          \u0026lt;/div\u0026gt;\n          \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"tab-item\"\u003c/span\u003e\u0026gt;\n              \u0026lt;span\u0026gt;搜索\u0026lt;/span\u0026gt;\n          \u0026lt;/div\u0026gt;\n        \u0026lt;/div\u0026gt;\n      \u0026lt;/div\u0026gt;\n    );\n  }\n}\n\n\u003cspan class=\"hljs-built_in\"\u003eexport\u003c/span\u003e default App;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003eApp.styl\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e.app\n  width: 100%\n  height: 100%\n  color: \u003cspan class=\"hljs-comment\"\u003e#DDDDDD\u003c/span\u003e\n  background-color: \u003cspan class=\"hljs-comment\"\u003e#212121\u003c/span\u003e\n  .app-header\n    height: 55px\n    line-height: 55px\n    color: \u003cspan class=\"hljs-comment\"\u003e#FFD700\u003c/span\u003e\n    text-align: center\n    .app-logo\n      width: 30px\n      height: 25px\n      margin-top: -5px\n      vertical-align: middle\n    .app-title\n      display: inline-block\n      height: 55px\n      margin-left: 10px\n      font-size: 18px\n      font-weight: 300\n  .music-tab\n    display: flex\n    height: 30px\n    line-height: 30px\n    color: \u003cspan class=\"hljs-comment\"\u003e#DDDDDD\u003c/span\u003e\n    text-align: center\n    .tab-item\n      flex: 1\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e三个Tab采用flex布局，自适应屏幕宽度\u003c/p\u003e\n\u003cp\u003e编写推荐页、排行旁页、搜索页三个组件。在\u003cstrong\u003ecomponents\u003c/strong\u003e目录下面新建\u003cstrong\u003erecommend\u003c/strong\u003e、\u003cstrong\u003eranking\u003c/strong\u003e和\u003cstrong\u003esearch\u003c/strong\u003e三个目录用来存放推荐、排行、搜索页面相关组件\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/18/1606893b083fba7c?w=274\u0026amp;h=127\u0026amp;f=png\u0026amp;s=4282\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e在recommend目录下创建Recommend.js和recommend.styl。\u003cstrong\u003eReact约定组件的名字首字母大写\u003c/strong\u003e。对应的js文件名和组件一样大写（不强制），组件对应一个样式文件，命名和组件名一样方便寻找\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRecommend.js\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eimport React from \u003cspan class=\"hljs-string\"\u003e\"react\"\u003c/span\u003e\nimport \u003cspan class=\"hljs-string\"\u003e\"./recommend.styl\"\u003c/span\u003e\n\n\nclass Recommend extends React.Component {\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003erender\u003c/span\u003e\u003c/span\u003e() {\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e (\n            \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"music-recommend\"\u003c/span\u003e\u0026gt;\n                Recommend\n            \u0026lt;/div\u0026gt;\n        );\n    }\n}\n\n\u003cspan class=\"hljs-built_in\"\u003eexport\u003c/span\u003e default Recommend\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003erecommend.styl内容暂时为空\u003c/p\u003e\n\u003cp\u003e同样在ranking目录和search目录下新建Ranking.js、ranking.styl和Search.js、search.styl\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRanking.js\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eimport React from \u003cspan class=\"hljs-string\"\u003e\"react\"\u003c/span\u003e\nimport \u003cspan class=\"hljs-string\"\u003e\"./ranking.styl\"\u003c/span\u003e\n\n\nclass Ranking extends React.Component {\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003erender\u003c/span\u003e\u003c/span\u003e() {\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e (\n            \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"music-ranking\"\u003c/span\u003e\u0026gt;\n                Ranking\n            \u0026lt;/div\u0026gt;\n        );\n    }\n}\n\n\u003cspan class=\"hljs-built_in\"\u003eexport\u003c/span\u003e default Ranking\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003eSearch.js\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eimport React from \u003cspan class=\"hljs-string\"\u003e\"react\"\u003c/span\u003e\nimport \u003cspan class=\"hljs-string\"\u003e\"./search.styl\"\u003c/span\u003e\n\n\nclass Search extends React.Component {\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003erender\u003c/span\u003e\u003c/span\u003e() {\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e (\n            \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"music-search\"\u003c/span\u003e\u0026gt;\n                Search\n            \u0026lt;/div\u0026gt;\n        );\n    }\n}\n\n\u003cspan class=\"hljs-built_in\"\u003eexport\u003c/span\u003e default Search\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e编写路由\u003c/p\u003e\n\u003cp\u003e回到\u003cstrong\u003eApp.js\u003c/strong\u003e中，import路由相关组件\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eimport {BrowserRouter as Router, Route, Switch, Redirect, NavLink} from \u003cspan class=\"hljs-string\"\u003e\"react-router-dom\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在App组件中导入Recommend、Ranking和Search组件，App的根使用Router包裹，加入一个div包裹Route组件\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eimport Recommend from \u003cspan class=\"hljs-string\"\u003e\"./recommend/Recommend\"\u003c/span\u003e\nimport Ranking from \u003cspan class=\"hljs-string\"\u003e\"./ranking/Ranking\"\u003c/span\u003e\nimport Search from \u003cspan class=\"hljs-string\"\u003e\"./search/Search\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"music-view\"\u003c/span\u003e\u0026gt;\n     {/*\n       Switch组件用来选择最近的一个路由，否则最后一个没有指定path的路由也会显示\n       Redirect重定向到列表页\n     */}\n     \u0026lt;Switch\u0026gt;\n         \u0026lt;Route path=\u003cspan class=\"hljs-string\"\u003e\"/recommend\"\u003c/span\u003e component={Recommend} /\u0026gt;\n         \u0026lt;Route path=\u003cspan class=\"hljs-string\"\u003e\"/ranking\"\u003c/span\u003e component={Ranking} /\u0026gt;\n         \u0026lt;Route path=\u003cspan class=\"hljs-string\"\u003e\"/search\"\u003c/span\u003e component={Search} /\u0026gt;\n         \u0026lt;Redirect from=\u003cspan class=\"hljs-string\"\u003e\"/\"\u003c/span\u003e to=\u003cspan class=\"hljs-string\"\u003e\"/recommend\"\u003c/span\u003e /\u0026gt;\n         \u0026lt;Route component={Recommend} /\u0026gt;\n     \u0026lt;/Switch\u0026gt;\n\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在app.styl中增加以下样式填充屏幕剩余高度\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e.music-view\n    position: fixed\n    top: 88px\n    left: 0\n    bottom: 52px\n    width: 100%\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e使用NavLink组件包裹Tab，使其具有路由跳转功能\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"tab-item\"\u003c/span\u003e\u0026gt;\n    \u0026lt;NavLink to=\u003cspan class=\"hljs-string\"\u003e\"/recommend\"\u003c/span\u003e className=\u003cspan class=\"hljs-string\"\u003e\"nav-link\"\u003c/span\u003e\u0026gt;\n        \u0026lt;span\u0026gt;推荐\u0026lt;/span\u0026gt;\n    \u0026lt;/NavLink\u0026gt;\n\u0026lt;/div\u0026gt;\n\u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"tab-item\"\u003c/span\u003e\u0026gt;\n    \u0026lt;NavLink to=\u003cspan class=\"hljs-string\"\u003e\"/ranking\"\u003c/span\u003e className=\u003cspan class=\"hljs-string\"\u003e\"nav-link\"\u003c/span\u003e\u0026gt;\n        \u0026lt;span\u0026gt;排行榜\u0026lt;/span\u0026gt;\n    \u0026lt;/NavLink\u0026gt;\n\u0026lt;/div\u0026gt;\n\u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"tab-item\"\u003c/span\u003e\u0026gt;\n    \u0026lt;NavLink to=\u003cspan class=\"hljs-string\"\u003e\"/search\"\u003c/span\u003e className=\u003cspan class=\"hljs-string\"\u003e\"nav-link\"\u003c/span\u003e\u0026gt;\n        \u0026lt;span\u0026gt;搜索\u0026lt;/span\u0026gt;\n    \u0026lt;/NavLink\u0026gt;\n\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e设置NavLink组件样式\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e.nav-link, .link\n  display: block\n  color: inherit\n  text-decoration: none\n  \u0026amp;.active\n    color: \u003cspan class=\"hljs-comment\"\u003e#FFD700\u003c/span\u003e\n    border-bottom: 2px solid \u003cspan class=\"hljs-comment\"\u003e#FFD700\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNavList组件最后渲染的是一个a标签，使用以上样式对其进行美化，在当前NavLink组件被激活的时候会自动添加上\u003cstrong\u003eactive\u003c/strong\u003e样式\u003c/p\u003e\n\u003cp\u003eApp.js和app.styl完整代码如下\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eApp.js\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eimport React from \u003cspan class=\"hljs-string\"\u003e'react'\u003c/span\u003e;\nimport {BrowserRouter as Router, Route, Switch, Redirect, NavLink} from \u003cspan class=\"hljs-string\"\u003e\"react-router-dom\"\u003c/span\u003e\nimport Recommend from \u003cspan class=\"hljs-string\"\u003e\"./recommend/Recommend\"\u003c/span\u003e\nimport Ranking from \u003cspan class=\"hljs-string\"\u003e\"./ranking/Ranking\"\u003c/span\u003e\nimport Search from \u003cspan class=\"hljs-string\"\u003e\"./search/Search\"\u003c/span\u003e\n\nimport logo from \u003cspan class=\"hljs-string\"\u003e\"../assets/imgs/logo.png\"\u003c/span\u003e\nimport \u003cspan class=\"hljs-string\"\u003e'../assets/stylus/reset.styl'\u003c/span\u003e\nimport \u003cspan class=\"hljs-string\"\u003e'./App.styl'\u003c/span\u003e;\n\nclass App extends React.Component {\n  \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003erender\u003c/span\u003e\u003c/span\u003e() {\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e (\n        \u0026lt;Router\u0026gt;\n          \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"app\"\u003c/span\u003e\u0026gt;\n            \u0026lt;header className=\u003cspan class=\"hljs-string\"\u003e\"app-header\"\u003c/span\u003e\u0026gt;\n              \u0026lt;img src={logo} className=\u003cspan class=\"hljs-string\"\u003e\"app-logo\"\u003c/span\u003e alt=\u003cspan class=\"hljs-string\"\u003e\"logo\"\u003c/span\u003e /\u0026gt;\n              \u0026lt;h1 className=\u003cspan class=\"hljs-string\"\u003e\"app-title\"\u003c/span\u003e\u0026gt;Mango Music\u0026lt;/h1\u0026gt;\n            \u0026lt;/header\u0026gt;\n            \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"music-tab\"\u003c/span\u003e\u0026gt;\n                \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"tab-item\"\u003c/span\u003e\u0026gt;\n                    \u0026lt;NavLink to=\u003cspan class=\"hljs-string\"\u003e\"/recommend\"\u003c/span\u003e className=\u003cspan class=\"hljs-string\"\u003e\"nav-link\"\u003c/span\u003e\u0026gt;\n                        \u0026lt;span\u0026gt;推荐\u0026lt;/span\u0026gt;\n                    \u0026lt;/NavLink\u0026gt;\n                \u0026lt;/div\u0026gt;\n                \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"tab-item\"\u003c/span\u003e\u0026gt;\n                    \u0026lt;NavLink to=\u003cspan class=\"hljs-string\"\u003e\"/ranking\"\u003c/span\u003e className=\u003cspan class=\"hljs-string\"\u003e\"nav-link\"\u003c/span\u003e\u0026gt;\n                        \u0026lt;span\u0026gt;排行榜\u0026lt;/span\u0026gt;\n                    \u0026lt;/NavLink\u0026gt;\n                \u0026lt;/div\u0026gt;\n                \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"tab-item\"\u003c/span\u003e\u0026gt;\n                    \u0026lt;NavLink to=\u003cspan class=\"hljs-string\"\u003e\"/search\"\u003c/span\u003e className=\u003cspan class=\"hljs-string\"\u003e\"nav-link\"\u003c/span\u003e\u0026gt;\n                        \u0026lt;span\u0026gt;搜索\u0026lt;/span\u0026gt;\n                    \u0026lt;/NavLink\u0026gt;\n                \u0026lt;/div\u0026gt;\n            \u0026lt;/div\u0026gt;\n             \u0026lt;div className=\u003cspan class=\"hljs-string\"\u003e\"music-view\"\u003c/span\u003e\u0026gt;\n                 {/*\n                   Switch组件用来选择最近的一个路由，否则最后一个没有指定path的路由也会显示\n                   Redirect重定向到列表页\n                 */}\n                 \u0026lt;Switch\u0026gt;\n                     \u0026lt;Route path=\u003cspan class=\"hljs-string\"\u003e\"/recommend\"\u003c/span\u003e component={Recommend} /\u0026gt;\n                     \u0026lt;Route path=\u003cspan class=\"hljs-string\"\u003e\"/ranking\"\u003c/span\u003e component={Ranking} /\u0026gt;\n                     \u0026lt;Route path=\u003cspan class=\"hljs-string\"\u003e\"/search\"\u003c/span\u003e component={Search} /\u0026gt;\n                     \u0026lt;Redirect from=\u003cspan class=\"hljs-string\"\u003e\"/\"\u003c/span\u003e to=\u003cspan class=\"hljs-string\"\u003e\"/recommend\"\u003c/span\u003e /\u0026gt;\n                     \u0026lt;Route component={Recommend} /\u0026gt;\n                 \u0026lt;/Switch\u0026gt;\n            \u0026lt;/div\u0026gt;\n          \u0026lt;/div\u0026gt;\n        \u0026lt;/Router\u0026gt;\n    );\n  }\n}\n\n\u003cspan class=\"hljs-built_in\"\u003eexport\u003c/span\u003e default App;\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003eapp.styl\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e.app\n  width: 100%\n  height: 100%\n  color: \u003cspan class=\"hljs-comment\"\u003e#DDDDDD\u003c/span\u003e\n  background-color: \u003cspan class=\"hljs-comment\"\u003e#212121\u003c/span\u003e\n  .app-header\n    height: 55px\n    line-height: 55px\n    color: \u003cspan class=\"hljs-comment\"\u003e#FFD700\u003c/span\u003e\n    text-align: center\n    .app-logo\n      width: 30px\n      height: 25px\n      margin-top: -5px\n      vertical-align: middle\n    .app-title\n      display: inline-block\n      height: 55px\n      margin-left: 10px\n      font-size: 18px\n      font-weight: 300\n  .music-tab\n    display: flex\n    height: 30px\n    line-height: 30px\n    color: \u003cspan class=\"hljs-comment\"\u003e#DDDDDD\u003c/span\u003e\n    text-align: center\n    .tab-item\n      flex: 1\n  .music-view\n    position: fixed\n    top: 88px\n    left: 0\n    bottom: 52px\n    width: 100%\n\n.nav-link, .link\n  display: block\n  color: inherit\n  text-decoration: none\n  \u0026amp;.active\n    color: \u003cspan class=\"hljs-comment\"\u003e#FFD700\u003c/span\u003e\n    border-bottom: 2px solid \u003cspan class=\"hljs-comment\"\u003e#FFD700\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e总结\u003c/h3\u003e\n\u003cp\u003e在本章节讲解了如何制作字体图标，根据页面设计基本路由结构\u003c/p\u003e\n\u003cp\u003e后续更新中...\u003c/p\u003e\n\u003cp\u003e完整项目地址：\u003ca target=\"_blank\" href=\"https://github.com/code-mcx/mango-music\"\u003ehttps://github.com/code-mcx/mango-music\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e本章节代码在\u003cstrong\u003echapter2\u003c/strong\u003e分支\u003c/p\u003e\n","buildTime":"1514464194.4302","__v":0}
{"_id":{"$oid":"5a44e6c4decf092514b3b40a"},"id":"5a4353766fb9a044fb080927","author":{"$oid":"5a44e6c4decf092514b3b401"},"title":"Vue 组件通信之 Bus","meta":{"likeCount":0},"tag":["Vue.js","Vuex"],"comment":[],"content":"\u003cp\u003e关于组件通信我相信小伙伴们肯定也都很熟悉，就不多说了，对组件通信还不熟悉的小伙伴移步\u003ca target=\"_blank\" href=\"https://cn.vuejs.org/v2/guide/components.html\"\u003e这里\u003c/a\u003e。\u003cbr\u003e\n在vue2.0中 $dispatch 和 $broadcast 已经被弃用。官方文档中给出的解释是：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e因为基于组件树结构的事件流方式实在是让人难以理解，并且在组件结构扩展的过程中会变得越来越脆弱。这种事件方式确实不太好，我们也不希望在以后让开发者们太痛苦。并且$dispatch 和 $broadcast 也没有解决兄弟组件间的通信问题。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e官方推荐的状态管理方案是 \u003ca target=\"_blank\" href=\"https://github.com/vuejs/vuex\"\u003eVuex\u003c/a\u003e。不过如果项目不是很大，状态管理也没有很复杂的话，使用 \u003cstrong\u003eVuex\u003c/strong\u003e 有种杀鸡用牛刀的感觉，当然，这也是要根据自己的需求来的，只是建议。\u003c/p\u003e\n\u003cp\u003evue官方文档中有这样一个定义：\u003ca target=\"_blank\" href=\"https://cn.vuejs.org/v2/guide/components.html#%E9%9D%9E%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84%E9%80%9A%E4%BF%A1\"\u003e非父子组件的通信\u003c/a\u003e，内容很少，如下：\u003cbr\u003e\n\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"image\" src=\"https://user-gold-cdn.xitu.io/2017/12/27/16096fe025e1371b?w=700\u0026amp;h=363\u0026amp;f=png\u0026amp;s=47717\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e其实关于这个\u003cstrong\u003e非父子组件通信\u003c/strong\u003e的demo还是有的，它藏在了\u003ca target=\"_blank\" href=\"https://cn.vuejs.org/v2/guide/migration.html#dispatch-%E5%92%8C-broadcast-%E6%9B%BF%E6%8D%A2\"\u003e$dispatch 和 $broadcast的迁移文档中\u003c/a\u003e，有兴趣的小伙伴可以点击进去查看。文档中的建议就是：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e对于$dispatch 和 $broadcast最简单的升级方式就是：通过使用事件中心，允许组件自由交流，无论组件处于组件树的哪一层。由于 Vue 实例实现了一个事件分发接口，你可以通过实例化一个空的 Vue 实例来实现这个目的。\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e这个\u003cstrong\u003e集中式的事件中间件\u003c/strong\u003e就是 \u003cstrong\u003eBus\u003c/strong\u003e。我习惯将bus定义到全局：\u003c/p\u003e\n\u003cp\u003eapp.js\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003evar eventBus = {\n    install(Vue,options) {\n        Vue.prototype.\u003cspan class=\"hljs-variable\"\u003e$bus\u003c/span\u003e = vue\n    }\n};\nVue.use(eventBus);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e然后在组件中，可以使用$emit， $on， $off 分别来分发、监听、取消监听事件：\u003c/p\u003e\n\u003cp\u003e分发事件的组件\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// ...\nmethods: {\n  todo: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e () {\n    this.\u003cspan class=\"hljs-variable\"\u003e$bus\u003c/span\u003e.\u003cspan class=\"hljs-variable\"\u003e$emit\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'todoSth'\u003c/span\u003e, params);  //params是传递的参数\n    //...\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e监听的组件\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// ...\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003ecreated\u003c/span\u003e\u003c/span\u003e() {\n  this.\u003cspan class=\"hljs-variable\"\u003e$bus\u003c/span\u003e.\u003cspan class=\"hljs-variable\"\u003e$on\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'todoSth'\u003c/span\u003e, (params) =\u0026gt; {  //获取传递的参数并进行操作\n      //todo something\n  })\n},\n// 最好在组件销毁前\n// 清除事件监听\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003ebeforeDestroy\u003c/span\u003e\u003c/span\u003e () {\n  this.\u003cspan class=\"hljs-variable\"\u003e$bus\u003c/span\u003e.\u003cspan class=\"hljs-variable\"\u003e$off\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'todoSth'\u003c/span\u003e);\n},\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e如果需要监听多个组件，只需要更改 \u003cstrong\u003ebus\u003c/strong\u003e 的 \u003cstrong\u003eeventName\u003c/strong\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// ...\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003ecreated\u003c/span\u003e\u003c/span\u003e() {\n  this.\u003cspan class=\"hljs-variable\"\u003e$bus\u003c/span\u003e.\u003cspan class=\"hljs-variable\"\u003e$on\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'firstTodo'\u003c/span\u003e, this.firstTodo);\n  this.\u003cspan class=\"hljs-variable\"\u003e$bus\u003c/span\u003e.\u003cspan class=\"hljs-variable\"\u003e$on\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'secondTodo'\u003c/span\u003e, this.secondTodo);\n},\n// 清除事件监听\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003ebeforeDestroy\u003c/span\u003e\u003c/span\u003e () {\n  this.\u003cspan class=\"hljs-variable\"\u003e$bus\u003c/span\u003e.\u003cspan class=\"hljs-variable\"\u003e$off\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'firstTodo'\u003c/span\u003e, this.firstTodo);\n  this.\u003cspan class=\"hljs-variable\"\u003e$bus\u003c/span\u003e.\u003cspan class=\"hljs-variable\"\u003e$off\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'secondTodo'\u003c/span\u003e, this.secondTodo);\n},\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e如果文章有错误或是有什么疑问，欢迎在评论中交流。\u003c/p\u003e\n","buildTime":"1514464785.6966","__v":0}
{"_id":{"$oid":"5a44e6c4decf092514b3b40b"},"id":"5a448171f265da433227de2e","author":{"$oid":"5a44e6c4decf092514b3b403"},"title":"javascript异步编程(一)-现状","meta":{"likeCount":0},"tag":["JavaScript"],"comment":[],"content":"\u003cp\u003e写在前面, 这个话题其实还挺大的, 我自己恐怕力有不逮, 所以只能算是笔记总结, 写的肯定会有点简略. 有错误实在太正常了. 希望能多多指教.\u003c/p\u003e\n\u003cp\u003e这篇文章仅仅是解释一下现有的异步编程方案不涉及具体原理, 但是我的想法是试试看能不能每个方案都自己实现一遍, 所以可能是\u003cstrong\u003e系列文章\u003c/strong\u003e也可能就此太监了.\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e回调函数\u003c/h2\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"image\" src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609b999bcfaf753?w=720\u0026amp;h=511\u0026amp;f=png\u0026amp;s=383865\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e想必大家都看过上面的图片, 虽然不是js代码, 甚至不是回调, 但是各位同学估计对callback hell感同身受.  但是事实上回调函数跟异步编程并没有必然的联系. 回调只是一种设计模式. 同步代码同样可以使用回调只是大部分时候会让人觉得多此一举而已.\u003c/p\u003e\n\u003cp\u003e大家都知道回调并不是那么优雅, 很多时候代码可能写成这样:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003easyncJob1(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n  asyncJob2(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n    asyncJob3(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n      \u003cspan class=\"hljs-comment\"\u003e// your code\u003c/span\u003e\n    })\n  })\n})\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e虽然问题算是解决了吧, 但是代码看着真是令人头痛. 玩意逻辑稍微复杂一点说不定真会出现下面的情况:\n\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"image\" src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609b999bc6c4ada?w=687\u0026amp;h=983\u0026amp;f=png\u0026amp;s=104806\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e大概美军也是回调写多了吧2333.\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e事件驱动\u003c/h2\u003e\n\u003cp\u003e大部分gui程序都是采用事件驱动, web当然也不例外, 最典型的就是dom事件:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003ediv.on(\u003cspan class=\"hljs-string\"\u003e'click'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n  \u003cspan class=\"hljs-comment\"\u003e// balabala\u003c/span\u003e\n})\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这个几乎都是跟回调和事件循环相关的, 后面会详细讲到的.\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003ePromise\u003c/h2\u003e\n\u003cp\u003e根据promise/A+的规范:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e一个Promise必须处在其中之一的状态：pending, fulfilled 或 rejected.\n如果是pending状态,则promise可以转换到fulfilled或rejected状态。\n如果是fulfilled状态,则promise不能转换成任何其它状态。\n如果是rejected状态,则promise不能转换成任何其它状态。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003ePromise都会有个then方法, 制定了fulfilled和rejected两种请况的回调, 同时then会返回一个Promise对象, 这就允许我们链式调用了:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003eajax(\u003cspan class=\"hljs-string\"\u003e'xxx'\u003c/span\u003e).then(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003eres\u003c/span\u003e =\u0026gt;\u003c/span\u003e res).then(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003eres\u003c/span\u003e =\u0026gt;\u003c/span\u003e res)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e虽然Promise的方案比回调已经好太多了. 但是不难发现多个then其实未必比回调好看太多, 只能说把回调铺平了. 可能Promise并不是最优雅的解决方案.\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003egenerator\u003c/h2\u003e\n\u003cp\u003egenerator在各个语言里都有出现, python,c#等, 这里不说概念, 只说在js里该怎么使用就行, 基本理解就是generator是拥有多个返回值的函数, 每次调用next就会调用一次返回. 这就是所谓 \u003cstrong\u003e控制权移交\u003c/strong\u003e, 当然这样不足以体现其优越性, generator最重要的特性就是\u003cstrong\u003e分步数据传递\u003c/strong\u003e: next的参数可以作为上次yield的返回值, 其实直觉上不是很能理解, 不过我们这里只要知道有这么个东西就成, 下面是代码示例:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e f = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e* (\u003cspan class=\"hljs-params\"\u003ex\u003c/span\u003e) \u003c/span\u003e{\n\u0009\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e y = \u003cspan class=\"hljs-keyword\"\u003eyield\u003c/span\u003e x + \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e\n\u0009\u003cspan class=\"hljs-keyword\"\u003eyield\u003c/span\u003e y + \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e\n\u0009\u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e y\n}\n\n\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e t = f(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e)\n\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e s = t.next()\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(s) \u003cspan class=\"hljs-comment\"\u003e// 2\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e p = t.next(\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e) \u003cspan class=\"hljs-comment\"\u003e// 这里的4作为上次yield的返回值\u003c/span\u003e\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(p) \u003cspan class=\"hljs-comment\"\u003e// 5\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e有这么一个特性, 那么下面的操作性就很强了, 比如tj的著名的co:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003eco(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e* (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e result = \u003cspan class=\"hljs-keyword\"\u003eyield\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003ePromise\u003c/span\u003e.resolve(\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e);\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e result;\n}).then(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003evalue\u003c/span\u003e) \u003c/span\u003e{\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(value);\n}, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003eerr\u003c/span\u003e) \u003c/span\u003e{\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.error(err.stack);\n});\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e可以说写法已经很同步了. 当然这个也不是最终的解决方案, 不然为什么koa2要用async/await呢hhh\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003easync/await\u003c/h2\u003e\n\u003cp\u003e同样对于async/await 我们先不纠结其原理, 我们只需要知道它是generator和promise二者结合起来的语法糖(不过也真够甜的)\u003c/p\u003e\n\u003cp\u003e每个async必然返回一个Promise对象, 所以async会像瘟疫一个把你的每个函数都变成async函数, 所谓可以async的终将async, 下面是例子:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-comment\"\u003e// Promise的解决方案\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003efoo\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e ajax(\u003cspan class=\"hljs-string\"\u003e'xxx'\u003c/span\u003e).then(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003eres\u003c/span\u003e =\u0026gt;\u003c/span\u003e res).then(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003eres\u003c/span\u003e =\u0026gt;\u003c/span\u003e res)\n}\n\n\n\u003cspan class=\"hljs-keyword\"\u003easync\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ebar\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n  \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e {\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e response = \u003cspan class=\"hljs-keyword\"\u003eawait\u003c/span\u003e ajax(\u003cspan class=\"hljs-string\"\u003e'xxx'\u003c/span\u003e)\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(response)\n  } \u003cspan class=\"hljs-keyword\"\u003ecatch\u003c/span\u003e (e) {\n    \u003cspan class=\"hljs-keyword\"\u003ethrow\u003c/span\u003e e\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e是不是优雅了太多, 除了一大片async/await, 不过也算小小的代价.\u003c/p\u003e\n\u003cp\u003e利用午休时间码了出来, 不知道有多少\u003cstrong\u003e错误\u003c/strong\u003e呢hhh\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"image\" src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609b999bcae4325?w=897\u0026amp;h=626\u0026amp;f=png\u0026amp;s=179677\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n","buildTime":"1514464965.6665","__v":0}
{"_id":{"$oid":"5a44e6c4decf092514b3b40c"},"id":"5a44793e6fb9a044fc4509a5","author":{"$oid":"5a44e6c4decf092514b3b402"},"title":"node简单实现一个更改头像功能","meta":{"likeCount":0},"tag":["Node.js"],"comment":[],"content":"\u003ch2 class=\"heading\"\u003e前言\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e一直想写这篇文章，无奈由于要考试的原因，一直在复习，拖延到现在才写🤣，之前用 node 的 express 框架写了个小项目，里面有个上传图片的功能，这里记录一下如何实现（我使用的是 \u003cstrong\u003eejs\u003c/strong\u003e）📝\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 class=\"heading\"\u003e思路\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e首先\u003c/strong\u003e，当用户点击上传头像，更新头像的时候，将头像上传到项目的一个文件夹里面（\u003cem\u003e我是存放在项目的\u003ccode\u003epublic/images/img\u003c/code\u003e里面\u003c/em\u003e），并且将图像名重命名（\u003cem\u003e可以以时间戳来命名\u003c/em\u003e）。\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609b79c49b93a0f?w=404\u0026amp;h=542\u0026amp;f=png\u0026amp;s=31384\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e同时\u003c/strong\u003e图片在项目的路径插入到用户表的当前用户的 \u003ccode\u003euserpicturepath\u003c/code\u003e 里面\u003c/li\u003e\n\u003cli\u003e然后更新用户的 session，将图片里面的路径赋值给 session 的里面的\u003ccode\u003epicture\u003c/code\u003e属性里面\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e 的 \u003ccode\u003esrc\u003c/code\u003e 获取到当前用户的session里面的 \u003ccode\u003epicture\u003c/code\u003e 的值，最后动态刷新页面头像就换成了用户上传的头像了\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 class=\"heading\"\u003e实现效果\u003c/h2\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609b79c44800c6d?w=877\u0026amp;h=525\u0026amp;f=gif\u0026amp;s=398300\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e代码\u003c/h2\u003e\n\u003cp\u003eejs部分\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;img class=\u003cspan class=\"hljs-string\"\u003e\"nav-user-photo\"\u003c/span\u003e src=\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;%= user.picture.replace(/public(\\/.*)/, \"\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$1\u003c/span\u003e\u003cspan class=\"hljs-string\"\u003e\") %\u0026gt;\"\u003c/span\u003e alt=\u003cspan class=\"hljs-string\"\u003e\"Photo\"\u003c/span\u003e style=\u003cspan class=\"hljs-string\"\u003e\"height: 40px;\"\u003c/span\u003e/\u0026gt;\n\n\u0026lt;form enctype=\u003cspan class=\"hljs-string\"\u003e\"multipart/form-data\"\u003c/span\u003e method=\u003cspan class=\"hljs-string\"\u003e\"post\"\u003c/span\u003e name=\u003cspan class=\"hljs-string\"\u003e\"fileInfo\"\u003c/span\u003e\u0026gt;\n    \u0026lt;input \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"file\"\u003c/span\u003e accept=\u003cspan class=\"hljs-string\"\u003e\"image/png,image/jpg\"\u003c/span\u003e id=\u003cspan class=\"hljs-string\"\u003e\"picUpload\"\u003c/span\u003e name=\u003cspan class=\"hljs-string\"\u003e\"file\"\u003c/span\u003e\u0026gt;\n\u0026lt;/form\u0026gt;\n\n\u0026lt;button \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"button\"\u003c/span\u003e class=\u003cspan class=\"hljs-string\"\u003e\"btn btn-primary\"\u003c/span\u003e id=\u003cspan class=\"hljs-string\"\u003e\"modifyPicV\"\u003c/span\u003e\u0026gt;确定\u0026lt;/button\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ejs部分\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.querySelector(\u003cspan class=\"hljs-string\"\u003e'#modifyPicV'\u003c/span\u003e).addEventListener(\u003cspan class=\"hljs-string\"\u003e'click'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e formData = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e FormData();\n    formData.append(\u003cspan class=\"hljs-string\"\u003e\"file\"\u003c/span\u003e,$(\u003cspan class=\"hljs-string\"\u003e\"input[name='file']\"\u003c/span\u003e)[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e].files[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e]);\u003cspan class=\"hljs-comment\"\u003e//把文件对象插到formData对象上\u003c/span\u003e\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(formData.get(\u003cspan class=\"hljs-string\"\u003e'file'\u003c/span\u003e));\n    $.ajax({\n        \u003cspan class=\"hljs-attr\"\u003eurl\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e'/modifyPic'\u003c/span\u003e,\n        \u003cspan class=\"hljs-attr\"\u003etype\u003c/span\u003e:\u003cspan class=\"hljs-string\"\u003e'post'\u003c/span\u003e,\n        \u003cspan class=\"hljs-attr\"\u003edata\u003c/span\u003e: formData,\n        \u003cspan class=\"hljs-attr\"\u003eprocessData\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,  \u003cspan class=\"hljs-comment\"\u003e// 不处理数据\u003c/span\u003e\n        contentType: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,   \u003cspan class=\"hljs-comment\"\u003e// 不设置内容类型\u003c/span\u003e\n        success:\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n            alert(\u003cspan class=\"hljs-string\"\u003e'success'\u003c/span\u003e);\n            location.reload();\n        },\n    })\n});\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e路由部分，使用\u003ccode\u003eformidable\u003c/code\u003e，这是一个Node.js模块，用于解析表单数据，尤其是文件上传\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e express = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'express'\u003c/span\u003e);\n\u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e router = express.Router();\n\u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e fs = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'fs'\u003c/span\u003e);\n\u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e {User} = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'../data/db'\u003c/span\u003e);\n\u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e formidable = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'formidable'\u003c/span\u003e);\n\u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e cacheFolder = \u003cspan class=\"hljs-string\"\u003e'public/images/'\u003c/span\u003e;\u003cspan class=\"hljs-comment\"\u003e//放置路径\u003c/span\u003e\nrouter.post(\u003cspan class=\"hljs-string\"\u003e'/modifyPic'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003ereq, res, next\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e userDirPath = cacheFolder + \u003cspan class=\"hljs-string\"\u003e\"Img\"\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!fs.existsSync(userDirPath)) {\n        fs.mkdirSync(userDirPath);\u003cspan class=\"hljs-comment\"\u003e//创建目录\u003c/span\u003e\n    }\n    \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e form = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e formidable.IncomingForm(); \u003cspan class=\"hljs-comment\"\u003e//创建上传表单\u003c/span\u003e\n    form.encoding = \u003cspan class=\"hljs-string\"\u003e'utf-8'\u003c/span\u003e; \u003cspan class=\"hljs-comment\"\u003e//设置编码\u003c/span\u003e\n    form.uploadDir = userDirPath; \u003cspan class=\"hljs-comment\"\u003e//设置上传目录\u003c/span\u003e\n    form.keepExtensions = \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e; \u003cspan class=\"hljs-comment\"\u003e//保留后缀\u003c/span\u003e\n    form.maxFieldsSize = \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e * \u003cspan class=\"hljs-number\"\u003e1024\u003c/span\u003e * \u003cspan class=\"hljs-number\"\u003e1024\u003c/span\u003e; \u003cspan class=\"hljs-comment\"\u003e//文件大小\u003c/span\u003e\n    form.type = \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n    form.parse(req, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003eerr, fields, files\u003c/span\u003e) \u003c/span\u003e{\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (err) {\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e res.json(err);\n        }\n        \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e extName = \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e; \u003cspan class=\"hljs-comment\"\u003e//后缀名\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eswitch\u003c/span\u003e (files.file.type) {\n            \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'image/pjpeg'\u003c/span\u003e:\n                extName = \u003cspan class=\"hljs-string\"\u003e'jpg'\u003c/span\u003e;\n                \u003cspan class=\"hljs-keyword\"\u003ebreak\u003c/span\u003e;\n            \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'image/jpeg'\u003c/span\u003e:\n                extName = \u003cspan class=\"hljs-string\"\u003e'jpg'\u003c/span\u003e;\n                \u003cspan class=\"hljs-keyword\"\u003ebreak\u003c/span\u003e;\n            \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'image/png'\u003c/span\u003e:\n                extName = \u003cspan class=\"hljs-string\"\u003e'png'\u003c/span\u003e;\n                \u003cspan class=\"hljs-keyword\"\u003ebreak\u003c/span\u003e;\n            \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'image/x-png'\u003c/span\u003e:\n                extName = \u003cspan class=\"hljs-string\"\u003e'png'\u003c/span\u003e;\n                \u003cspan class=\"hljs-keyword\"\u003ebreak\u003c/span\u003e;\n        }\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (extName.length === \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) {\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e res.json({\n                \u003cspan class=\"hljs-attr\"\u003emsg\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'只支持png和jpg格式图片'\u003c/span\u003e\n            });\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n            \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e avatarName = \u003cspan class=\"hljs-string\"\u003e'/'\u003c/span\u003e + \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e.now() + \u003cspan class=\"hljs-string\"\u003e'.'\u003c/span\u003e + extName;\n            \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e newPath = form.uploadDir + avatarName;\n            fs.renameSync(files.file.path, newPath); \u003cspan class=\"hljs-comment\"\u003e//重命名\u003c/span\u003e\n            \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(newPath)\n            \u003cspan class=\"hljs-comment\"\u003e//更新表\u003c/span\u003e\n            User.update({\n                \u003cspan class=\"hljs-attr\"\u003epicture\u003c/span\u003e: newPath\n            }, {\n                \u003cspan class=\"hljs-attr\"\u003ewhere\u003c/span\u003e: {\n                    \u003cspan class=\"hljs-attr\"\u003eusername\u003c/span\u003e: req.session.user.username\n                }\n            }).then(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003edata\u003c/span\u003e) \u003c/span\u003e{\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (data[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e] !== \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e) {\n                    User.findAll({\n                        \u003cspan class=\"hljs-attr\"\u003ewhere\u003c/span\u003e: {\n                            \u003cspan class=\"hljs-attr\"\u003eusername\u003c/span\u003e: req.session.user.username\n                        }\n                    }).then(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003edata\u003c/span\u003e) \u003c/span\u003e{\n                        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (data[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e] !== \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e) {\n                            req.session.user.picture = data[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e].dataValues.picture;\n                            res.send(\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e);\n                        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n                            res.send(\u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n                        }\n                    })\n                }\n            }).catch(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003eerr\u003c/span\u003e) \u003c/span\u003e{\n                \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(err);\n            });\n        }\n    });\n});\n\u003c/code\u003e\u003c/pre\u003e","buildTime":"1514464889.3287","__v":0}
{"_id":{"$oid":"5a44e6c4decf092514b3b40d"},"id":"5a44638a6fb9a044fc450927","author":{"$oid":"5a43940c4d03f52390c25e9c"},"title":"走向核心的探索 — V8引擎初探","meta":{"likeCount":0},"tag":["编译器","V8","前端","JavaScript"],"comment":[],"content":"\u003ch3 class=\"heading\"\u003e前言\u003c/h3\u003e\n\u003cp\u003e这段时间在写编译原理的课设，对于编译器的实现算是入了个门，着就激起了我心中的一个本源问题，JavaScript的引擎到底是什么样子的，V8直接导致了Node.js时代，JavaScript能做的事情越来越多。作为一个出色的JavaScript引擎，他的模式值得我们思考和学习。\u003c/p\u003e\n\u003cp\u003e那么V8引擎到底是怎么工作的呢？\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e两个编译器的故事\u003c/h3\u003e\n\u003cp\u003eV8会编译所有JavaScript到原生代码，而在V8中，有两个编译器在运行着：一个运行比较快，输出着一般的代码，另一个运行的没有那么快，但是尽力的输出着优化过的代码。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e第一个编译器 — full-codegen 编译器\u003c/h3\u003e\n\u003cp\u003e输出一般代码的那个编译器在内部被称为：full-codegen(全代码生成) 编译器。它接受一个函数的抽象语法树，遍历语法树，直接生产汇编代码。通过获取被解析过的函数源代码(抽象语法树)，带有类型记录缓存的原生代码。它是一个很一般的编译器，运行了一般编译器从语法分析后直到代码生成的过程。\u003c/p\u003e\n\u003cp\u003e所有本地的变量没有被存放在寄存器中，而是都放在了栈或者堆里面。所有被嵌套函数引用的变量全部被存在了堆里面，这个堆决定了在函数上下文中，哪些函数被定义了。编译器会根据情况把这些值放进寄存器里面，并执行具体工作。而对于存在栈里面的变量，栈顶的几个变量会暂时的在寄存器内缓存。而更复杂的情况，则有实时处理程序来管理。这个编译器会记录语句执行的上下文，这样就能直接跳到需要执行的块，而不是把变量放进寄存器，测试这个量是不是0，然后产生分支(大概就是汇编里面的TEST，JNZ的步骤吧)。类似于简单的算数求值也会在这里被优化进行。\u003c/p\u003e\n\u003cp\u003e这个编译器使用了一个非常重要的技术来优化代码—— \u003ca target=\"_blank\" href=\"http://wingolog.org/archives/2008/10/19/dynamic-dispatch-a-followup\"\u003einline caching\u003c/a\u003e。编译的时候有这样的缓存，直接可以用于赋值、一元运算、二元运算、函数调用、属性获取还有比较值。inline caching 还向另一个优化编译器提供了类型源数据。而inline caching 在编译的时候，缓存了键和值的储存，而一般的操作并不会触发inline caching。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e类型反馈\u003c/h3\u003e\n\u003cp\u003e当V8引擎第一次看到一个函数的时候，他只直接建立语法树，不做其他事情。直到第一次调用函数的时候，V8才第一次跑full-codegen 编译。但这种有点偷懒的做法，在代码开始运行后有了变化。运行开始后，会触发分析线程，这个线程负责看看代码跑的怎么样，那些函数是热点函数。\u003c/p\u003e\n\u003cp\u003e这种偷懒，静观其变的做法，让V8引擎可以跟踪类型变化，记录相应数据。当V8发现了热点函数，觉得这个函数可以帮一把的时候，他就把类型反馈数据给编译器。运行时的类型反馈数据会被记录。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e         Unknown\n           |   \\____________\n           |                |\n      Primitive       Non-primitive\n           |   \\_______     |\n           |           |    |\n        Number       String |\n         /   \\         |    |\n    Double  Integer32  |   /\n        |      |      /   /\n        |     Smi    /   /\n        |      |    / __/\n        Uninitialized.\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e每次看到新的值，就计算这个值的类型，然后和旧的值类型进行运算。最初的变量类型是Uninitialized(未初始化)。所以当看到一个整型的时候，如果他的大小在Smi (small integer) 范围内的时候，会直接在类型反馈里面推断，它是一个Smi。但是当看到这个值变成了Double了，那么做运算后，这个值的推断直接变为Number。推断每次的结果就是寻找了两个值的最近共同parent。在内部做了类型预估，让编译器可以有目的的优化。\u003c/p\u003e\n\u003cp\u003e类型反馈数据和抽象语法树是相互联系的，函数的热度是由一个整型记录的，相应的从full-codegen获取热点节点标记信息，并把这些信息送给编译器做进一步优化。\u003c/p\u003e\n\u003cp\u003e到了这里，这个过程开始变得有一些复杂了。这个过程里面需要实现对于编译器栈的向上向下兼容。编译器需要获得操作数和结果的类型反馈，并且还要能准确的找到这个数据。然后你还要能够把这些东西重新和抽象语法树关联起来，编译器才能从语法树有目的优化代码。\u003c/p\u003e\n\u003cp\u003eV8在这个过程上，通过把数据分析成TypeFeedbackOracle对象，并且把这个对象和特定的语法树节点联系。最终，V8通过访问语法树的节点就会通过这个对象进行，这个对象也能够优化编译过程。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e第二个编译器 — crankshaft 编译器\u003c/h3\u003e\n\u003cp\u003e一旦V8确定了热点函数，得到了类型反馈的信息，他就会尝试带着这些信息来运行优化编译器。优化编译器在市面上称为crankshaft(轴心) 编译器，虽然在源代码上面并没有这样命名。实际上，crankshaft 编译器在源代码里面是由四个过程组成的：带有类型反馈的抽象语法树-\u0026gt;高级别中间代码-\u0026gt;低级别中间代码-\u0026gt;优化过的原生代码。\u003c/p\u003e\n\u003cp\u003e高级别中间代码是编译器前端形成的代码，而低级别中间代码是后端使用的中间代码，通过前端后端双重的优化，让V8引擎对热点函数有更好的处理。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e总结\u003c/h3\u003e\n\u003cp\u003eV8引擎采用惰性优化的方式来提高性能，通过针对运行时的热点函数优化，快编译和慢优化的结合，而且通过合理的类型推断解决的JavaScript的类型问题。这只是对V8早期版本的一个概念分析，但是我已经开始接触到了V8优化的魔法。\u003c/p\u003e\n\u003cp\u003e参考资料：\u003c/p\u003e\n\u003cp\u003ehttp://wingolog.org/archives/2011/07/05/v8-a-tale-of-two-compilers#ffc2b5d74c27fa60d75658244fee88e6fa783afb\u003c/p\u003e\n\u003cp\u003ehttps://github.com/v8/v8/tree/master/src\u003c/p\u003e\n","buildTime":"1514464717.5833","__v":0}
{"_id":{"$oid":"5a44e6c4decf092514b3b40e"},"id":"5a448f316fb9a04504082e2a","author":{"$oid":"5a44e6c4decf092514b3b3ff"},"title":"iKcamp｜基于Koa2搭建Node.js实战（含视频）☞ HTTP请求","meta":{"likeCount":0},"tag":["Node.js","前端","koa","API"],"comment":[],"content":"\u003ch2 class=\"heading\"\u003ePOST/GET请求——常见请求方式处理\u003c/h2\u003e\n\u003ch2 class=\"heading\"\u003e🇨🇳  iKcamp 制作团队\u003c/h2\u003e\n\u003cp\u003e原创作者：\u003ca target=\"_blank\" href=\"https://github.com/pplgin\"\u003e大哼\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xiaoyaojun\"\u003e阿干\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/l3ve\"\u003e三三\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/tinyuen\"\u003e小虎\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/pangz1\"\u003e胖子\u003c/a\u003e、\u003ca target=\"_blank\" href=\"http://zoei.me/\"\u003e小哈\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/DDU1222\"\u003eDDU\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/cfancc\"\u003e可木\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/walterxu0704\"\u003e晃晃\u003c/a\u003e\u003cbr\u003e\n文案校对：\u003ca target=\"_blank\" href=\"https://github.com/yliiii\"\u003e李益\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/yanyixin\"\u003e大力萌\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/MatildaJin\"\u003eAu\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/DDU1222\"\u003eDDU\u003c/a\u003e、\u003ca target=\"_blank\" href=\"http://www.xiaoxili.com/\"\u003e小溪里\u003c/a\u003e、\u003ca target=\"_blank\" href=\"http://zoei.me/\"\u003e小哈\u003c/a\u003e\u003cbr\u003e\n风采主播：\u003ca target=\"_blank\" href=\"https://github.com/cfancc\"\u003e可木\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xiaoyaojun\"\u003e阿干\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/MatildaJin\"\u003eAu\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/DDU1222\"\u003eDDU\u003c/a\u003e、\u003ca target=\"_blank\" href=\"http://zoei.me/\"\u003e小哈\u003c/a\u003e\u003cbr\u003e\n视频剪辑：\u003ca target=\"_blank\" href=\"http://www.xiaoxili.com/\"\u003e小溪里\u003c/a\u003e\u003cbr\u003e\n主站运营：\u003ca target=\"_blank\" href=\"https://github.com/jackson13145\"\u003e给力xi\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xiatianyu\"\u003exty\u003c/a\u003e\u003cbr\u003e\n教程主编：\u003ca target=\"_blank\" href=\"https://github.com/brucecham\"\u003e张利涛\u003c/a\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e视频地址：\u003ca target=\"_blank\" href=\"https://www.cctalk.com/v/15114357765870\"\u003ehttps://www.cctalk.com/v/15114357765870\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609bd4c8536c670?w=1602\u0026amp;h=964\u0026amp;f=png\u0026amp;s=836881\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch1 class=\"heading\"\u003e文章\u003c/h1\u003e\n\u003ch1 class=\"heading\"\u003eHttp 请求\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e在学习了 \u003ccode\u003ekoa-router\u003c/code\u003e 之后，我们就可以用它来处理一些常见的请求了，比如 \u003ccode\u003ePOST/GET\u003c/code\u003e 。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cbr\u003e \n\u003cp\u003e\u003ccode\u003ekoa-router\u003c/code\u003e 提供了 \u003ccode\u003e.get\u003c/code\u003e、\u003ccode\u003e.post\u003c/code\u003e、\u003ccode\u003e.put\u003c/code\u003e 和 \u003ccode\u003e.del\u003c/code\u003e 接口来处理各种请求，但实际业务上，我们大部分只会接触到 \u003ccode\u003ePOST\u003c/code\u003e 和 \u003ccode\u003eGET\u003c/code\u003e，所以接下来只针对这两种请求类型来说明。\u003c/p\u003e\n\u003cbr\u003e\n\u003cp\u003e当我们捕获到请求后，一般都需要把请求带过来的数据解析出来。数据传递过来的方式一般有三种：\u003c/p\u003e\n\u003cbr\u003e \n\u003ch2 class=\"heading\"\u003e请求参数放在 \u003ccode\u003eURL\u003c/code\u003e 后面\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"hljs txt\" lang=\"txt\"\u003ehttp://localhost:3000/home?id=12\u0026amp;name=ikcamp\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\u003cbr\u003e\n\u003cp\u003e\u003ccode\u003ekoa-router\u003c/code\u003e 封装的 \u003ccode\u003erequest\u003c/code\u003e 对象，里面的 \u003ccode\u003equery\u003c/code\u003e 方法或 \u003ccode\u003equerystring\u003c/code\u003e 方法可以直接获取到 \u003ccode\u003eGet\u003c/code\u003e 请求的数据，唯一不同的是 \u003ccode\u003equery\u003c/code\u003e 返回的是对象，而 \u003ccode\u003equerystring\u003c/code\u003e 返回的是字符串。\u003c/p\u003e\n\u003cp\u003e修改 \u003ccode\u003eapp.js\u003c/code\u003e，我们加入解析方式：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e  \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e Koa = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'koa'\u003c/span\u003e)\n  \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e router = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'koa-router'\u003c/span\u003e)()\n  \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e app = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Koa()\n\n  router.get(\u003cspan class=\"hljs-string\"\u003e'/'\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003easync\u003c/span\u003e(ctx, next) =\u0026gt; {\n    ctx.response.body = \u003cspan class=\"hljs-string\"\u003e`\u0026lt;h1\u0026gt;index page\u0026lt;/h1\u0026gt;`\u003c/span\u003e\n  })\n\n  router.get(\u003cspan class=\"hljs-string\"\u003e'/home'\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003easync\u003c/span\u003e(ctx, next) =\u0026gt; {\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(ctx.request.query)\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(ctx.request.querystring)\n    ctx.response.body = \u003cspan class=\"hljs-string\"\u003e'\u0026lt;h1\u0026gt;HOME page\u0026lt;/h1\u0026gt;'\u003c/span\u003e\n  })\n\n  router.get(\u003cspan class=\"hljs-string\"\u003e'/404'\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003easync\u003c/span\u003e(ctx, next) =\u0026gt; {\n    ctx.response.body = \u003cspan class=\"hljs-string\"\u003e'\u0026lt;h1\u0026gt;404 Not Found\u0026lt;/h1\u0026gt;'\u003c/span\u003e\n  })\n\n  \u003cspan class=\"hljs-comment\"\u003e// add router middleware:\u003c/span\u003e\n  app.use(router.routes())\n\n  app.listen(\u003cspan class=\"hljs-number\"\u003e3000\u003c/span\u003e, () =\u0026gt; {\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e'server is running at http://localhost:3000'\u003c/span\u003e)\n  })\n\u003c/code\u003e\u003c/pre\u003e\u003cbr\u003e\n\u003cp\u003e运行代码，并通过浏览器访问 \u003ccode\u003ehttp://localhost:3000/home?id=12\u0026amp;name=ikcamp\u003c/code\u003e，然后打开控制台会看到下面的输出内容：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs txt\" lang=\"txt\"\u003e{\u0026nbsp;id:\u0026nbsp;'12',\u0026nbsp;name:\u0026nbsp;'ikcamp'\u0026nbsp;}\u003cbr\u003eid=12\u0026amp;name=ikcamp\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\u003cbr\u003e \n\u003ch2 class=\"heading\"\u003e请求参数放在 \u003ccode\u003eURL\u003c/code\u003e 中间\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"hljs txt\" lang=\"txt\"\u003ehttp://localhost:3000/home/12/ikcamp\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\u003cbr\u003e\n\u003cp\u003e这种情况下，解析方式肯定与上面的不一样了，\u003ccode\u003ekoa-router\u003c/code\u003e 会把请求参数解析在 \u003ccode\u003eparams\u003c/code\u003e 对象上，我们修改 \u003ccode\u003eapp.js\u003c/code\u003e 文件，增加新的路由来测试下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e  \u003cspan class=\"hljs-comment\"\u003e// 增加如下代码\u003c/span\u003e\n  router.get(\u003cspan class=\"hljs-string\"\u003e'/home/:id/:name'\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003easync\u003c/span\u003e(ctx, next)=\u0026gt;{\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(ctx.params)\n    ctx.response.body = \u003cspan class=\"hljs-string\"\u003e'\u0026lt;h1\u0026gt;HOME page /:id/:name\u0026lt;/h1\u0026gt;'\u003c/span\u003e\n  })\n\u003c/code\u003e\u003c/pre\u003e\u003cbr\u003e \n\u003cp\u003e运行代码，并通过浏览器访问 \u003ccode\u003ehttp://localhost:3000/home/12/ikcamp\u003c/code\u003e，然后查看下控制台显示的日志信息：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs txt\" lang=\"txt\"\u003e{\u0026nbsp;id:\u0026nbsp;'12',\u0026nbsp;name:\u0026nbsp;'ikcamp'\u0026nbsp;}\u0026nbsp;\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\u003cbr\u003e\n\u003ch2 class=\"heading\"\u003e请求参数放在 \u003ccode\u003ebody\u003c/code\u003e 中\u003c/h2\u003e\n\u003cbr\u003e\n\u003cp\u003e当用 \u003ccode\u003epost\u003c/code\u003e 方式请求时，我们会遇到一个问题：\u003ccode\u003epost\u003c/code\u003e 请求通常都会通过表单或 \u003ccode\u003eJSON\u003c/code\u003e 形式发送，而无论是 \u003ccode\u003eNode\u003c/code\u003e 还是 \u003ccode\u003eKoa\u003c/code\u003e，都 \u003cstrong\u003e没有提供\u003c/strong\u003e 解析 \u003ccode\u003epost\u003c/code\u003e 请求参数的功能。\u003c/p\u003e\n\u003cbr\u003e \n\u003ch3 class=\"heading\"\u003ekoa-bodyparser 说：『是时候登场了！』\u003c/h3\u003e\n\u003cbr\u003e \n\u003cp\u003e首先，安装 \u003ccode\u003ekoa-bodyparser\u003c/code\u003e 包：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003enpm i koa-bodyparser -S\n\u003c/code\u003e\u003c/pre\u003e\u003cbr\u003e \n\u003cp\u003e安装完成之后，我们需要在 \u003ccode\u003eapp.js\u003c/code\u003e 中引入中间件并应用：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e  \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e Koa = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'koa'\u003c/span\u003e)\n  \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e router = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'koa-router'\u003c/span\u003e)()\n  \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e bodyParser = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'koa-bodyparser'\u003c/span\u003e)\n  \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e app = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Koa()\n\n  app.use(bodyParser())\n\n  router.get(\u003cspan class=\"hljs-string\"\u003e'/'\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003easync\u003c/span\u003e(ctx, next) =\u0026gt; {\n    ctx.response.body = \u003cspan class=\"hljs-string\"\u003e`\u0026lt;h1\u0026gt;index page\u0026lt;/h1\u0026gt;`\u003c/span\u003e\n  })\n\n  router.get(\u003cspan class=\"hljs-string\"\u003e'/home'\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003easync\u003c/span\u003e(ctx, next) =\u0026gt; {\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(ctx.request.query)\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(ctx.request.querystring)\n    ctx.response.body = \u003cspan class=\"hljs-string\"\u003e'\u0026lt;h1\u0026gt;HOME page\u0026lt;/h1\u0026gt;'\u003c/span\u003e\n  })\n\n  router.get(\u003cspan class=\"hljs-string\"\u003e'/home/:id/:name'\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003easync\u003c/span\u003e(ctx, next)=\u0026gt;{\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(ctx.params)\n    ctx.response.body = \u003cspan class=\"hljs-string\"\u003e'\u0026lt;h1\u0026gt;HOME page /:id/:name\u0026lt;/h1\u0026gt;'\u003c/span\u003e\n  })\n\n  router.get(\u003cspan class=\"hljs-string\"\u003e'/404'\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003easync\u003c/span\u003e(ctx, next) =\u0026gt; {\n    ctx.response.body = \u003cspan class=\"hljs-string\"\u003e'\u0026lt;h1\u0026gt;404 Not Found\u0026lt;/h1\u0026gt;'\u003c/span\u003e\n  })\n\n  app.use(router.routes())\n\n  app.listen(\u003cspan class=\"hljs-number\"\u003e3000\u003c/span\u003e, () =\u0026gt; {\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e'server is running at http://localhost:3000'\u003c/span\u003e)\n  })\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e然后我们来试着写一个简单的表单提交实例。修改 \u003ccode\u003eapp.js\u003c/code\u003e 增加如下代码，实现增加表单页面的路由：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e  \u003cspan class=\"hljs-comment\"\u003e// 增加返回表单页面的路由\u003c/span\u003e\n  router.get(\u003cspan class=\"hljs-string\"\u003e'/user'\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003easync\u003c/span\u003e(ctx, next)=\u0026gt;{\n    ctx.response.body = \n    \u003cspan class=\"hljs-string\"\u003e`\n      \u0026lt;form action=\"/user/register\" method=\"post\"\u0026gt;\n        \u0026lt;input name=\"name\" type=\"text\" placeholder=\"请输入用户名：ikcamp\"/\u0026gt; \n        \u0026lt;br/\u0026gt;\n        \u0026lt;input name=\"password\" type=\"text\" placeholder=\"请输入密码：123456\"/\u0026gt;\n        \u0026lt;br/\u0026gt; \n        \u0026lt;button\u0026gt;GoGoGo\u0026lt;/button\u0026gt;\n      \u0026lt;/form\u0026gt;\n    `\u003c/span\u003e\n  })\n\u003c/code\u003e\u003c/pre\u003e\u003cbr\u003e\n\u003cp\u003e继续修改 \u003ccode\u003eapp.js\u003c/code\u003e 增加如下代码，实现 \u003ccode\u003epost\u003c/code\u003e 表单提交对应的路由：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e  \u003cspan class=\"hljs-comment\"\u003e// 增加响应表单请求的路由\u003c/span\u003e\n  router.post(\u003cspan class=\"hljs-string\"\u003e'/user/register'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003easync\u003c/span\u003e(ctx, next)=\u0026gt;{\n    \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e {name, password} = ctx.request.body\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e( name === \u003cspan class=\"hljs-string\"\u003e'ikcamp'\u003c/span\u003e \u0026amp;\u0026amp; password === \u003cspan class=\"hljs-string\"\u003e'123456'\u003c/span\u003e ){\n      ctx.response.body = \u003cspan class=\"hljs-string\"\u003e`Hello， \u003cspan class=\"hljs-subst\"\u003e${name}\u003c/span\u003e！`\u003c/span\u003e\n    }\u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e{\n      ctx.response.body = \u003cspan class=\"hljs-string\"\u003e'账号信息错误'\u003c/span\u003e\n    }\n  })\n\u003c/code\u003e\u003c/pre\u003e\u003cbr\u003e \n\u003cp\u003e常见的几种请求，以及相应的参数传递解析，我们已经学习过了。下一节中，我们会把项目整理重构下，做个分层，并引入视图层。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e下一篇：代码分层——梳理代码，渐近于 MVC 分层模式\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/14/1605309af5a7dfa2?w=1426\u0026amp;h=778\u0026amp;f=png\u0026amp;s=414615\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://dn-mhke0kuv.qbox.me/3326ff01e1f06fd6dc3c.png\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e上一篇：iKcamp新课程推出啦～～～～～\u003ca target=\"_blank\" href=\"https://juejin.im/post/5a4063876fb9a04515441be7\"\u003eiKcamp｜基于Koa2搭建Node.js实战（含视频）☞ 路由koa-router\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 class=\"heading\"\u003e推荐： 翻译项目Master的自述：\u003c/h2\u003e\n\u003ch3 class=\"heading\"\u003e1. \u003ca target=\"_blank\" href=\"https://juejin.im/post/59e87bef5188255ea95b1077\"\u003e干货｜人人都是翻译项目的Master\u003c/a\u003e\u003c/h3\u003e\n\u003ch3 class=\"heading\"\u003e2. \u003ca target=\"_blank\"\u003eiKcamp出品微信小程序教学共5章16小节汇总(含视频)\u003c/a\u003e\u003c/h3\u003e\n","buildTime":"1514464905.7134","__v":0}
{"_id":{"$oid":"5a44e6c4decf092514b3b40f"},"id":"5a44aa4d518825146b10d69d","author":{"$oid":"5a44e6c4decf092514b3b400"},"title":"标准模式与怪异模式对于渲染页面的影响","meta":{"likeCount":0},"tag":["HTML","CSS"],"comment":[],"content":"\u003ch2 class=\"heading\"\u003e什么是标准模式和怪异模式?\u003c/h2\u003e\n\u003cp\u003e在很久很久以前,那时候HTML和CSS还没有一个统一的标准,出现的现象就是,我用我的标准,你用你的标准,这导致了各家浏览器对于解析HTML和CSS的方式有很大的差别,而当标准制定出来之后,浏览器不仅要按照新的标准去支持HTML和CSS,还要对老旧的网页进行兼容,而这一前一后的两种支持方式,就是我们所称的\u003ccode\u003e标准模式(StandardMode,)\u003c/code\u003e和\u003ccode\u003e怪异模式(QuirksMode)\u003c/code\u003e,对于现代规范的网页,浏览器一般用标准模式去解析和渲染,而对于古老的网页,浏览器就会使用怪异模式去渲染.而在ie的开发者工具中,你可以自定义改变文档模式,这在其他浏览器中是不行的.\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e浏览器怎么确定要使用哪种模式?\u003c/h2\u003e\n\u003cp\u003e这里就会涉及到一段非常容易被人忽略的代码,那就是HTML文档第一行就会出现的文档类型声明:\u003ccode\u003eDOCTYPE\u003c/code\u003e.你一定见过这两种声明方式:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-meta\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\n\u003cspan class=\"hljs-meta\"\u003e\u0026lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\"\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e第一种声明方式说明这个页面遵守了HTML5规范的,浏览器会自动选择标准模式.\u003c/li\u003e\n\u003cli\u003e在浏览器遇到第二种声明方式时也会自动选择标准模式,说明这个页面遵守了HTML4规范,和第一种声明方式会有一点区别,但是几乎可以认为是一样的.\u003c/li\u003e\n\u003cli\u003e而当你没有或者忘记对文档类型进行声明的时候,浏览器就会选择怪异模式,我们应该避免选择这种模式,因为这种模式下浏览器对文档的解析和渲染和现代标准都有着很大的不同,这是一种非常危险的方式.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e开发者还可以在\u0026lt; head \u0026gt;标签中加入\u003ccode\u003ex-ua-compatible\u003c/code\u003e信息来影响文档类型的判定,这里就不做过多的介绍了,有兴趣的同学可以自行搜索.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 class=\"heading\"\u003e标准模式和怪异模式下页面渲染的区别\u003c/h2\u003e\n\u003ch3 class=\"heading\"\u003e块级元素(盒子模型)\u003c/h3\u003e\n\u003cp\u003e标准模式和怪异模式下对于盒子模型的渲染效果差别是很大的.\n在怪异模式下,给盒子模型设置的宽度\u003ccode\u003ewidth\u003c/code\u003e和高度\u003ccode\u003eheight\u003c/code\u003e会将元素的content,padding,border都包含进去,如下图所示:\n\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"Alt text\" src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c3a01280584f?w=690\u0026amp;h=459\u0026amp;f=jpeg\u0026amp;s=70470\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e即:\u003c/p\u003e\n\u003cp\u003ewidth = border left + padding left + content width + padding right + border right\u003c/p\u003e\n\u003cp\u003eheight = border top + padding top + content height + padding bottom + border bottom\u003c/p\u003e\n\u003cp\u003e而在标准模式下,给盒子模型设置的宽度和高度就是content的高度和宽度,如下图:\n\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"Alt text\" src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c3a386916d48?w=690\u0026amp;h=423\u0026amp;f=jpeg\u0026amp;s=74727\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n即:\u003cp\u003e\u003c/p\u003e\n\u003cp\u003ewidth=content width\u003c/p\u003e\n\u003cp\u003eheight=content height\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e这一个区别会导致渲染块级元素的时候会出现很大的差别,所以两种模式下渲染出来的页面差别也会很大.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e示例:\n我们定义一个div元素,分别设定宽高均为200px,padding为50px,border为20px红色.\n代码如下:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"hljs css\" lang=\"css\"\u003e\u003cspan class=\"hljs-selector-tag\"\u003ediv\u003c/span\u003e\u003cspan class=\"hljs-selector-class\"\u003e.a\u003c/span\u003e{\n  \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e200px\u003c/span\u003e;\n  \u003cspan class=\"hljs-attribute\"\u003eheight\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e200px\u003c/span\u003e;\n  \u003cspan class=\"hljs-attribute\"\u003epadding\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e50px\u003c/span\u003e;\n  \u003cspan class=\"hljs-attribute\"\u003eborder\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e20px\u003c/span\u003e solid red;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e在标准模式下如下图:\n\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"Alt text\" src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c3a86285580c?w=400\u0026amp;h=399\u0026amp;f=jpeg\u0026amp;s=10278\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n在这里其实盒子的总宽度为200 + 50 * 2 + 20 * 2= 340px\u003cp\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e在怪异模式下如下图:\n\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"Alt text\" src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c3b1af2a158b?w=400\u0026amp;h=400\u0026amp;f=jpeg\u0026amp;s=5214\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n而在怪异模式下,整个盒子只有200px宽,而内容区域被压缩到了200 - 50 * 2 - 20 * 2 = 60px\u003cp\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e而我们也可以通过box-sizing属性手动的选择width和height包含的范围,具体的参数及含义如下\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003ebox-sizing:border-box //像怪异模式那样,元素的border和padding被包含在给元素设置的width和height中\nbox-sizing:content-box //默认值.给元素设置的width和height属性只表示content区域,而在width和height之外绘制padding和border\nbox-sizing:inherit //继承父元素的box-sizing设置\n\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\n\u003cp\u003e现在你一定明白了为什么有的时候元素的大小超出我们的预期,只要加一个\u003ccode\u003ebox-sizing:border-box\u003c/code\u003e,就能够正常显示了吧.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 class=\"heading\"\u003e图片的对其方式\u003c/h3\u003e\n\u003cp\u003eCSS中的vertical-aligh属性用于设置对象的初值对其方式,定义了行内元素的baseline要和所在行的baseline初值对齐,而在表格元素中,可以设置单元格里面的内容的对其方式,取值有baseline,bottom,top,middle等.用一幅图来解释:\n\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"Alt text\" src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c3b844a0e9e9?w=690\u0026amp;h=239\u0026amp;f=jpeg\u0026amp;s=41107\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n在标准模式下,inline元素和tablecell元素的verticle-aligh属性默认取值是baseline,这也是我们有时会看到图片底部会有几像素留白的原因.\n但是当inline元素内只有图,并且处于怪异模式的时候,inline元素里的元素的vertical-aligh属性默认值是bottom,此时就不会有白条的效果.\u003cp\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e示例:\n定义一个表格,表格中只有一行,一列,进行演示,代码如下:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"hljs css\" lang=\"css\"\u003e\u003cspan class=\"hljs-selector-tag\"\u003etd\u003c/span\u003e\u003cspan class=\"hljs-selector-class\"\u003e.a\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003eborder\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e2px\u003c/span\u003e solid blue;\n}\n\n\u003cspan class=\"hljs-selector-tag\"\u003eimg\u003c/span\u003e\u003cspan class=\"hljs-selector-class\"\u003e.b\u003c/span\u003e {\n  \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e200px\u003c/span\u003e;\n  \u003cspan class=\"hljs-attribute\"\u003eheight\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e200px\u003c/span\u003e;\n  \u003cspan class=\"hljs-attribute\"\u003eborder\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e2px\u003c/span\u003e solid orange;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在标准模式下,图片底部可以看到有几像素的白条:\n\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"Alt text\" src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c3bdd6d406b5?w=266\u0026amp;h=249\u0026amp;f=jpeg\u0026amp;s=22789\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e而在怪异模式下,图片底部没有留白:\n\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"Alt text\" src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c3c0f36d234e?w=247\u0026amp;h=244\u0026amp;f=jpeg\u0026amp;s=26111\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e现在你知道为什么有时候图片处理总是很难看了吧?因为浏览器工作在标准模式,只要把图片的\u003ccode\u003evertical-align\u003c/code\u003e属性修改为\u003ccode\u003ebottom\u003c/code\u003e就解决啦!\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 class=\"heading\"\u003e行内元素的尺寸\u003c/h3\u003e\n\u003cp\u003e行内元素分为replaced和non-replaced两类,而像input,textarea,img等可以设置宽高的行内元素,成为replaced元素,而那些不能设置宽高的元素被称为non-replaced元素,例如span.\n而这些都是在标准模式的前提下,在怪异模式下,即使是non-replaced元素也可以被设置元素的宽高.\n示例:\n定义一个div,宽高均为200px,背景颜色为红色,div内部有一个span标签,给span标签设置宽高均为100px,背景颜色为蓝色.代码如下:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs css\" lang=\"css\"\u003e\u003cspan class=\"hljs-selector-tag\"\u003ediv\u003c/span\u003e\u003cspan class=\"hljs-selector-class\"\u003e.a\u003c/span\u003e{\n  \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e200px\u003c/span\u003e;\n  \u003cspan class=\"hljs-attribute\"\u003eheight\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e200px\u003c/span\u003e;\n  \u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: red;\n}\n\u003cspan class=\"hljs-selector-tag\"\u003espan\u003c/span\u003e\u003cspan class=\"hljs-selector-class\"\u003e.b\u003c/span\u003e{\n  \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e100px\u003c/span\u003e;\n  \u003cspan class=\"hljs-attribute\"\u003eheight\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e100px\u003c/span\u003e;\n  \u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: blue;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在标准模式下,可以看到span元素是看不到的,这是因为non-replaced元素的宽高由它的内容决定.\n\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"Alt text\" src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c3c75bec26d8?w=254\u0026amp;h=239\u0026amp;f=jpeg\u0026amp;s=1201\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e而在ie的开发者工具中把模式调到ie5,可以看到span标签是有宽高的:\n\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"Alt text\" src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c3c9904107db?w=247\u0026amp;h=236\u0026amp;f=jpeg\u0026amp;s=5439\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e虽然ie5现在已经几乎不存在了,但是了解这些可以帮助我们更深入的研究浏览器的渲染规则.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 class=\"heading\"\u003e内部元素溢出处理\u003c/h3\u003e\n\u003cp\u003e在实际的开发中,我们经常会遇到元素内部的内容溢出,而CSS的overflow属性可以处理溢出的情况,默认是visible,即显示溢出.\n如果一个元素内部的内容出现了溢出,并且我们没有设置overflow属性,即默认vislble时:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在标准模式下,溢出的部分会超出盒子本身,在盒子外部继续显示.\u003c/li\u003e\n\u003cli\u003e而在怪异模式下,溢出的部分会扩展盒子本身,即外部盒子的大小不一定由css样式决定,会根据内部内容的大小自动调整.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e示例:\n定义一个div,类名为a,宽高均为200px,背景颜色为红色,div内部还有一个div标签,类名为b,给内部的div标签设置宽为100px,高为300px,背景颜色为蓝色.代码如下:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs css\" lang=\"css\"\u003e\u003cspan class=\"hljs-selector-tag\"\u003ediv\u003c/span\u003e\u003cspan class=\"hljs-selector-class\"\u003e.a\u003c/span\u003e{\n  \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e200px\u003c/span\u003e;\n  \u003cspan class=\"hljs-attribute\"\u003eheight\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e200px\u003c/span\u003e;\n  \u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: red;\n}\n\u003cspan class=\"hljs-selector-tag\"\u003ediv\u003c/span\u003e\u003cspan class=\"hljs-selector-class\"\u003e.b\u003c/span\u003e{\n  \u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e100px\u003c/span\u003e;\n  \u003cspan class=\"hljs-attribute\"\u003eheight\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e300px\u003c/span\u003e;\n  \u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: blue;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e可以看到在标准模式和怪异模式下渲染的差别:\u003c/p\u003e\n\u003cp\u003e标准模式:\n\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"Alt text\" src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c3d2c220f58e?w=287\u0026amp;h=328\u0026amp;f=jpeg\u0026amp;s=7949\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n怪异模式:\n\u003cfigure\u003e\u003cimg alt=\"Alt text\" src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c3d79ac3e686?w=295\u0026amp;h=337\u0026amp;f=jpeg\u0026amp;s=7107\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e总结\u003c/h2\u003e\n\u003cp\u003e对于标准模式和怪异模式渲染的差别,主要是浏览器发展的历史以及各家标准的差异决定的,而现如今Web前端开发越来越趋向于标准化,工程化,所以我们应该尽量避免在实际开发中使用怪异模式来渲染页面.这样不仅有利于项目的维护,也会在渲染时减少很多不必要的冲突和怪异现象.\n知道这些差异对一个专业的web前端工程师来说是必须的,在遇到上述问题的时候,需要能够辨识出浏览器是工作在标准模式下还是怪异模式下,这对我们解决bug是很有帮助的.\u003c/p\u003e\n\u003cp\u003e前端小白,热爱前端.\u003c/p\u003e\n\u003cp\u003e发展前端,从我做起.\u003c/p\u003e\n\u003cp\u003e正在找工作,如果觉得我符合您的标准,欢迎联系.\n\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"WX\" src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c3eac2b45cc2?w=430\u0026amp;h=430\u0026amp;f=jpeg\u0026amp;s=34483\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n","buildTime":"1514464719.4134","__v":0}
{"_id":{"$oid":"5a44e6c4decf092514b3b410"},"id":"5a2f432a5188252ae93ae807","author":{"$oid":"5a44e6c4decf092514b3b404"},"title":"当微信小程序遇上filter~","meta":{"likeCount":0},"tag":["前端","微信"],"comment":[],"content":"\u003cp\u003e在微信小程序的开发过程中，当你想要实现不同页面间的数据绑定，却为此抓耳饶腮时，不妨让微信小程序与filter 来一场完美的邂逅，相信会给你带来别样的惊喜~\u003c/p\u003e\n\u003cp\u003e前段时间被安利了一个很实用的公众号—前端早读课，它简洁、大方的页面和方便、实用的功能深深地吸引着我~(＾Ｕ＾)ノ  恰好这段时间学了小程序，就自己仿着写了个前端早读课的小程序。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e实现的功能\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e不同页面间的数据绑定\u003c/li\u003e\n\u003cli\u003e随机显示数组里的元素\u003c/li\u003e\n\u003cli\u003e实时显示系统的日期\u003c/li\u003e\n\u003cli\u003e鼠标点击和页面跳转等基本功能\u003c/li\u003e\n\u003cli\u003eswiper组件和template样式模板的使用\u003c/li\u003e\n\u003cli\u003e使用easy mock模拟后台数据并进行动态传参\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 class=\"heading\"\u003e项目展示\u003c/h2\u003e\n\u003cp\u003e整个项目包括“每日一看”、“看看世界”、“情报局”和“介绍”四个主页面。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/15/1605a91692559e91?w=316\u0026amp;h=517\u0026amp;f=gif\u0026amp;s=1392930\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e完美邂逅~\u003c/h2\u003e\n\u003cp\u003e在开发“每日一看”页面的过程中，我遇到了一个难题，如何将“每日一看”页面中获取的数据与阅读详情页的数据绑定起来，也就是从这时起，\u003cstrong\u003e微信小程序开始邂逅filter~\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/15/1605a93a7081e2d0?w=316\u0026amp;h=517\u0026amp;f=gif\u0026amp;s=412360\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e下面简单介绍一下filter~\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003efilter华丽登场~\u003c/h2\u003e\n\u003cp\u003efilter 是一个基于数组的方法，通过一个回调函数对数组进行筛选，并返回数组中满足条件的元素，相当于过滤器的效果。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003efilter的三要素\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e数组对象(arry)\u003c/p\u003e\n\u003cp\u003e每个filter 方法都有一个数组对象，通过该方法对数组里的元素进行筛选。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e 具体用法： arry.filter();\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e回调函数(callbackfn)\u003c/p\u003e\n\u003cp\u003e对于数组中的每个元素，filter 方法都会调用callbackfn 函数一次。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e 具体用法： function callbackfn(value, index, array);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e其中 value 表示数组元素的值，index 表示数组元素的下标， array 表示包含该元素的数组。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e返回值\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003efilter 方法的返回值是一个数组，包含所有满足回调函数条件的值。\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e更多详情： \u003ca target=\"_blank\" href=\"https://msdn.microsoft.com/zh-cn/library/ff679973(v=vs.94).aspx\"\u003efilter文档\u003c/a\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e别样的惊喜~\u003c/h2\u003e\n\u003ch3 class=\"heading\"\u003efilter的骚操作—实现数据的动态绑定\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e敲黑板的重点来啦！！！\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e在 \u003cstrong\u003edairy.wxml\u003c/strong\u003e 页面中用 navigator 组件实现 ‘每日一看’ 页面和 ‘阅读详情’ 页的跳转，并传递一个 id 参数，每篇文章都有唯一的一个 id，这样就可以通过 js  使用 filter 过滤器筛选出两个 id 相等的文章数据，也就实现了数据的动态绑定。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;navigator url=\u003cspan class=\"hljs-string\"\u003e\"./detail/detail?id={{id}}\"\u003c/span\u003e\u0026gt;\n    \u0026lt;button class=\u003cspan class=\"hljs-string\"\u003e\"page_bd_motto_read\"\u003c/span\u003e\u0026gt;阅读\u0026lt;/button\u0026gt;\n\u0026lt;/navigator\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e在 \u003cstrong\u003edairy.js\u003c/strong\u003e 中，因为页面每次都是随机显示一篇文章，这时就需要获取该文章的id，并作为参数，当页面跳转时作为一个钩子把两个页面联系起来。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003ethat.setData({\n            headline: arr[index].headline,\n            from: arr[index].from,\n            // 设置id作为阅读详情页的一个钩子\n            id: arr[index].acticle_id\n          })\n        }\n      })\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e当页面跳转到详情页时，在 \u003cstrong\u003edetail.js\u003c/strong\u003e 中使用 filter 把 acticle_id 等于上一页面文章 id 的数据赋值给 datas，再对其进行操作，就实现了数据的动态绑定。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003ePage({\n  data: {\n    // 表示该篇文章\n    item: []\n  },\n  onLoad: \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(params) {\n    // 检验id是否传递成功\n    console.log(params.id);\n    var that = this;\n    wx.request({\n      url: \u003cspan class=\"hljs-string\"\u003e'https://www.easy-mock.com/mock/5a2b5f76158e7b70032804d0/getActicleInfo/getActicleInfo'\u003c/span\u003e,\n      success: \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(res) {\n        // 使用过滤器把id等于上一页面id的数组赋值给datas\n        var datas = res.data.data.acticle_List.filter(item =\u0026gt; {\n          \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e item.acticle_id == params.id;\n        });\n        that.setData({\n          item: datas\n        });\n        console.log(datas);\n      }\n    })\n\n  }\n})\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"4\"\u003e\n\u003cli\u003e在 \u003cstrong\u003edetail.wxml\u003c/strong\u003e 中对传入的 item 数据进行调用，于是别样的惊喜就出现啦~\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;!--pages/dairy/detail/detail.wxml--\u0026gt;\n    \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"page__hd\"\u003c/span\u003e\u0026gt;\n        \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"page__hd_title center\"\u003c/span\u003e\u0026gt;{{item[0].headline}}\u0026lt;/view\u0026gt;\n        \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"page__hd_author\"\u003c/span\u003e\u0026gt;作者：@{{item[0].author}}\u0026lt;/view\u0026gt;\n    \u0026lt;/view\u0026gt;\n    \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"page__bd\"\u003c/span\u003e\u0026gt;\n        \u0026lt;text class=\u003cspan class=\"hljs-string\"\u003e\"page__bd_content center\"\u003c/span\u003e\u0026gt;{{item[0].content}}\u0026lt;/text\u0026gt;\n    \u0026lt;/view\u0026gt;\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e特别注意：\u003c/strong\u003e 可能有细心的人儿已经发现为什么这里用的是 \u003cstrong\u003eitem[0].\u003c/strong\u003e 来调用，而不是 **item.**来调用，这是数据索引的问题。如下图所示，我的数据是个三级结构，\u003cstrong\u003eitem\u003c/strong\u003e 表示的是最外层的文章数组元素，要获取文章的作者或标题等信息，必须使用 \u003cstrong\u003eitem[0].\u003c/strong\u003e 才能进行调用。\u003cstrong\u003e只有理解数据索引的本质，才能准确地调用数据。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/16/1605affa2dd0a358?w=496\u0026amp;h=223\u0026amp;f=png\u0026amp;s=4932\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e于是，小程序在遇上filter后，就创造出了别样的惊喜 O(∩_∩)O~\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e一起排坑~\u003c/h2\u003e\n\u003cp\u003e在开发过程中，遇到了一些坑，在此总结一下~\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e1. 随机显示数组里的元素\u003c/h3\u003e\n\u003cp\u003e这个公众号一大亮点就是可以随机显示文章，每次点进去的文章都不一样，感受度极佳。这里采用\u003cstrong\u003e随机函数\u003c/strong\u003e来获取数组的下标，Math.random()函数是获取[0,1)之间的数，Math.floor()函数是向下取整，这样就可以随机获取相应的下标数。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e onLoad: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e () {\n    var that = this;\n      wx.request({\n        url: \u003cspan class=\"hljs-string\"\u003e'https://www.easy-mock.com/mock/5a2b5f76158e7b70032804d0/getActicleInfo/getActicleInfo'\u003c/span\u003e,\n        method: \u003cspan class=\"hljs-string\"\u003e'GET'\u003c/span\u003e,\n        data: {},\n        success: \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(res) {\n          //获取文章数据的列表\n          var arr = res.data.data.acticle_List;\n          //用随机函数随机获取数组的下标\n          var index = Math.floor(Math.random()*arr.length);\n          // console.log(arr[index].acticle_id);\n          that.setData({\n            headline: arr[index].headline,\n            from: arr[index].from,\n            // 设置id作为阅读详情页的一个钩子\n            id: arr[index].acticle_id\n          })\n        }\n      })\n  },\n})\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e2. 实时显示系统的日期\u003c/h3\u003e\n\u003cp\u003e之前开发的时候觉得这个方法如果自己写还蛮难的，后面百度了一下，发现js里面提供了相应的API，直接使用就好，特别方便。\u003ca target=\"_blank\" href=\"https://msdn.microsoft.com/zh-cn/library/ff679973(v=vs.94).aspx\"\u003e有关系统时间的API\u003c/a\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e  //监听页面显示\n  // day：星期几\n  // date：某日\n  // month：月份\n  onShow: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e () {\n      var myDate = new Date();\n      // \u003cspan class=\"hljs-built_in\"\u003eset\u003c/span\u003eData设置或更新数据\n      this.setData({\n        date: myDate.getDate(),\n        month: myDate.getMonth() + 1,\n        day: week(),\n      });\n      \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e week(day) {\n          switch(myDate.getDay()) {\n            \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e 1: day=\u003cspan class=\"hljs-string\"\u003e\"星期一\"\u003c/span\u003e; \u003cspan class=\"hljs-built_in\"\u003ebreak\u003c/span\u003e;\n            \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e 2: day=\u003cspan class=\"hljs-string\"\u003e\"星期二\"\u003c/span\u003e; \u003cspan class=\"hljs-built_in\"\u003ebreak\u003c/span\u003e;\n            \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e 3: day=\u003cspan class=\"hljs-string\"\u003e\"星期三\"\u003c/span\u003e; \u003cspan class=\"hljs-built_in\"\u003ebreak\u003c/span\u003e;\n            \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e 4: day=\u003cspan class=\"hljs-string\"\u003e\"星期四\"\u003c/span\u003e; \u003cspan class=\"hljs-built_in\"\u003ebreak\u003c/span\u003e;\n            \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e 5: day=\u003cspan class=\"hljs-string\"\u003e\"星期五\"\u003c/span\u003e; \u003cspan class=\"hljs-built_in\"\u003ebreak\u003c/span\u003e;\n            \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e 6: day=\u003cspan class=\"hljs-string\"\u003e\"星期六\"\u003c/span\u003e; \u003cspan class=\"hljs-built_in\"\u003ebreak\u003c/span\u003e;\n            default: day=\u003cspan class=\"hljs-string\"\u003e\"星期天\"\u003c/span\u003e;\n          }\n          \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e day;\n        }\n  },\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e3. 用hover实现鼠标点击效果\u003c/h3\u003e\n\u003cp\u003e在对首页进行鼠标点击效果的开发过程中，一开始想到的就是使用伪元素来添加点击按钮的样式效果，后面出现了一个bug，当我点击按钮跳转到另一个页面，再回退到原页面时，还是处于点击态的样式，这时百度就起了很大的作用，我上网百度了很久，才发现有hover属性中的hover-stay-time为动画持续的时间，hover-class 为定义点击按钮时的样式，于是这个bug就解决啦~\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"page__bd\"\u003c/span\u003e\u0026gt;\n    \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"page__bd_tab\"\u003c/span\u003e hover-class=\u003cspan class=\"hljs-string\"\u003e\"active\"\u003c/span\u003e hover-stay-time=\u003cspan class=\"hljs-string\"\u003e\"2000\"\u003c/span\u003e\u0026gt;\n      \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"page__bd_tab_item\"\u003c/span\u003e hover-class=\u003cspan class=\"hljs-string\"\u003e\"active1\"\u003c/span\u003e hover-stay-time=\u003cspan class=\"hljs-string\"\u003e\"2000\"\u003c/span\u003e bindtap=\u003cspan class=\"hljs-string\"\u003e\"dairyRead\"\u003c/span\u003e\u0026gt;每日一看\u0026lt;/view\u0026gt;\n      \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"page__bd_tab_item\"\u003c/span\u003e hover-class=\u003cspan class=\"hljs-string\"\u003e\"active1\"\u003c/span\u003e hover-stay-time=\u003cspan class=\"hljs-string\"\u003e\"2000\"\u003c/span\u003e bindtap=\u003cspan class=\"hljs-string\"\u003e\"lookWorld\"\u003c/span\u003e\u0026gt;看看世界\u0026lt;/view\u0026gt;\n      \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"page__bd_tab_item\"\u003c/span\u003e hover-class=\u003cspan class=\"hljs-string\"\u003e\"active1\"\u003c/span\u003e hover-stay-time=\u003cspan class=\"hljs-string\"\u003e\"2000\"\u003c/span\u003e bindtap=\u003cspan class=\"hljs-string\"\u003e\"intelligence\"\u003c/span\u003e\u0026gt;情报局\u0026lt;/view\u0026gt;\n      \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"page__bd_tab_item\"\u003c/span\u003e hover-class=\u003cspan class=\"hljs-string\"\u003e\"active1\"\u003c/span\u003e hover-stay-time=\u003cspan class=\"hljs-string\"\u003e\"2000\"\u003c/span\u003e bindtap=\u003cspan class=\"hljs-string\"\u003e\"introduction\"\u003c/span\u003e\u0026gt;简介\u0026lt;/view\u0026gt;\n    \u0026lt;/view\u0026gt;\n  \u0026lt;/view\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e4. 页面左右滑动的效果\u003c/h3\u003e\n\u003cp\u003e使用swiper组件实现对页面的左右滑动的效果。\n\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/16/1605b3c54dba9f66?w=316\u0026amp;h=546\u0026amp;f=gif\u0026amp;s=396290\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e5. template 模板样式的使用\u003c/h3\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/16/1605b3daf6ed0cd7?w=199\u0026amp;h=119\u0026amp;f=png\u0026amp;s=1954\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n当一串代码面临复制粘贴时，这时就应该考虑对其进行封装，这样直接在不同的地方调用就好了，也完成了代码的优化。小程序中的 template 模板就很好地帮我们解决了这个问题，并通过 is 属性来实现调用。\u003cp\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003etemplate 模板的定义：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;!--pages/common/list_intelligence/list_intelligence.wxml--\u0026gt;\n\u0026lt;template name = \u003cspan class=\"hljs-string\"\u003e\"intelligence_list\"\u003c/span\u003e\u0026gt;\n \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"page__cell\"\u003c/span\u003e\u0026gt;\n    \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"page__cell_headline center\"\u003c/span\u003e\u0026gt;\n        \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"page__cell_headline_img\"\u003c/span\u003e\u0026gt;\n            \u0026lt;image src=\u003cspan class=\"hljs-string\"\u003e\"{{avatar}}\"\u003c/span\u003e/\u0026gt;\n        \u0026lt;/view\u0026gt;\n\n        \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"page__cell_headline_author\"\u003c/span\u003e\u0026gt;{{author}}分享于\u0026lt;/view\u0026gt;\n        \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"page__cell_headline_time\"\u003c/span\u003e\u0026gt;{{share_time}}\u0026lt;/view\u0026gt;\n    \u0026lt;/view\u0026gt;\n    \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"page__cell_detail center\"\u003c/span\u003e\u0026gt;{{content}}\u0026lt;/view\u0026gt;\n \u0026lt;/view\u0026gt;\n\u0026lt;/template\u0026gt;\n\n\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003etemplate 模板的调用：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e  \u0026lt;view class=\u003cspan class=\"hljs-string\"\u003e\"page__bd\"\u003c/span\u003e\u0026gt;\n    \u0026lt;block wx:\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"{{intelligence_list}}\"\u003c/span\u003e wx:key=\u003cspan class=\"hljs-string\"\u003e\"{{index}}\"\u003c/span\u003e center \u0026gt;\n        \u0026lt;template is=\u003cspan class=\"hljs-string\"\u003e\"intelligence_list\"\u003c/span\u003e data=\u003cspan class=\"hljs-string\"\u003e\"{{...item}}\"\u003c/span\u003e\u0026gt;\u0026lt;/template\u0026gt;\n    \u0026lt;/block\u0026gt;\n  \u0026lt;/view\u0026gt;\n  \n\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e我有话要说~\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e开发的过程中难免会出现各种各样的bug，记得一定要百度，百度，百度呀！！！这是个独立思考的过程，对能力的提高也非常有帮助~做这个项目最大的心得便是看太多不如干一场，肯定会干货满满，收获满满哟~\u003c/li\u003e\n\u003cli\u003e这个小程序后续还会完善，感兴趣的可以持续关注哟(＾Ｕ＾)ノ~\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 class=\"heading\"\u003e一波安利~\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ch3 class=\"heading\"\u003e\u003ca target=\"_blank\" href=\"https://www.w3cschool.cn/weixinapp/9wou1q8j.html\"\u003e微信小程序开发教程手册\u003c/a\u003e\u003c/h3\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 class=\"heading\"\u003e\u003ca target=\"_blank\" href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/component/view.html\"\u003e微信小程序官方开发文档\u003c/a\u003e\u003c/h3\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 class=\"heading\"\u003e使用 \u003ca target=\"_blank\" href=\"https://www.easy-mock.com/\"\u003eeasy-mock\u003c/a\u003e 构造后台虚拟数据\u003c/h3\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 class=\"heading\"\u003e使用微信开发者工具进行开发\u003c/h3\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 class=\"heading\"\u003e最后献上 \u003ca target=\"_blank\" href=\"https://github.com/XbaiAmy/wxapp_font_reading_class\"\u003egithub地址\u003c/a\u003e 里面有源代码，若是喜欢，希望大家给个star 鼓励一下啦~ღ( ´･ᴗ･` )比心\u003c/h4\u003e\n","buildTime":"1514464866.5577","__v":0}
{"_id":{"$oid":"5a44e6c4decf092514b3b411"},"id":"5a44c5eef265da432d2868f6","author":{"$oid":"5a44e6c4decf092514b3b406"},"title":"一个数字键盘引发的血案——移动端H5输入框、光标、数字键盘全假套件实现","meta":{"likeCount":0},"tag":["JavaScript","Vue.js","前端","jQuery"],"comment":[],"content":"\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609cc26a47774c1?w=1080\u0026amp;h=1920\u0026amp;f=jpeg\u0026amp;s=97883\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e为啥要写假键盘？\u003c/p\u003e\n\u003cp\u003e还是输入框、光标全假的假键盘？\u003c/p\u003e\n\u003cp\u003e手机自带的不用非得写个假的，吃饱没事干吧？\u003c/p\u003e\n\u003cp\u003e装逼？炫技？\u003c/p\u003e\n\u003cp\u003e宝宝也是被逼的，宝宝也很委屈~.~\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609ca5f7a8f5767?w=230\u0026amp;h=212\u0026amp;f=jpeg\u0026amp;s=6253\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e问题产生背景\u003c/h2\u003e\n\u003cp\u003e移动端H5项目需求点：\u003c/p\u003e\n\u003cp\u003e进入某页面自动弹出带小数点的数字键盘，并且自带输入验证，比如金额——只能输入数字和小数点，并且只能输入一位小数点、小数位不超过2位，且输入前验证不合法就不让输入、(UE特加功能——定制光标颜色\u0026gt;.\u0026lt;简直是反人类的需求)。细分如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e进入相关页面，输入框自动获取焦点\u003c/li\u003e\n\u003cli\u003e键盘自动弹出\u003c/li\u003e\n\u003cli\u003e弹出带小数点的数字键盘\u003c/li\u003e\n\u003cli\u003e数字输入前自动验证，只能输入一个小数点，小数位数不超过2位，超过就不能继续输入\u003c/li\u003e\n\u003cli\u003e如果光标在第一位，此时键入的是'.'，则自动放入'0'再插入'.'\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 class=\"heading\"\u003e实现方案拟定\u003c/h2\u003e\n\u003ch3 class=\"heading\"\u003e1. 基于input + 手机自带键盘实现方案\u003c/h3\u003e\n\u003cp\u003e（1）针对功能点1，可以给 input 设置属性 autofocus , 输入框就能自动聚焦。 轻松搞定\u003c/p\u003e\n\u003cp\u003e（2）针对功能点2 ，给input设置属性 autofocus 会自动聚焦但是键盘并不会自动弹出;\u003c/p\u003e\n\u003cp\u003e必须手动点击输入框键盘才会弹出; 于是在进入页面的时候用js触发click或者foucus，发现键盘也不会自动弹出，延时click、focus也没能弹出;那么只有最后一种方案——就是让NA端提供让键盘弹出的方法。 \u003cstrong\u003e纯前端无法搞定，需要NA端协助/，或者找PM砍掉自动弹键盘的需求\u0026gt;.\u0026lt;（勉强能够接受）\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e（3）针对功能点3，弹数字键盘的方法可以设置 type = \"number\" 或者type = \"tel\"; 前者在Andriod可以弹出数字键盘在ios端只能弹全键盘，后者在Android和ios弹出的都是数字键盘，但是！！坑爹的，弹出的数字键盘没有小数点！（我的华为荣耀9倒是很给力的给我弹了个带小数点的数字键盘，不容易啊啊） \u003cstrong\u003e只能选择type = \"number\",勉强能接受ios弹全键盘吧\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e（4）针对功能点4， 设置type = \"number\"，发现可以不停的输入小数点啊啊啊啊看着真的要疯了，第一次输入小数点也不能自动变成'0.'\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609ca9e85a369e9?w=459\u0026amp;h=195\u0026amp;f=gif\u0026amp;s=59649\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n图1 原生input type=number 效果\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e这时候聪明的你一定想到要使用事件监听键入的字符，在输入之前进行判断，然后决定是否放入输入框。\u003c/p\u003e\n\u003cp\u003e你肯定又会开心的想到一堆可能有用的事件：onkeydown，onkeyup，onchange，oninput，onpropertychange，textInput。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609cc4217c080c6?w=204\u0026amp;h=233\u0026amp;f=jpeg\u0026amp;s=5135\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e路漫漫其修远兮啊~经过不断尝试之后仍然发现很多问题。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eonkeyup——虽然每增加删除字符都会触发，但增加字符的时候是值输入之后才触发，无法做到输入前验证;\u003c/li\u003e\n\u003cli\u003eonchange——是在内容改变（两次内容有可能相等）且失去焦点时触发，也无法做到输入前验证。\u003c/li\u003e\n\u003cli\u003eonpropertychange——onchange事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发；即每增加或删除一个字符就会触发，通过js改变也会触发该事件，但是该事件IE专有。\u003c/li\u003e\n\u003cli\u003eoninput——移动端很多手机不支持。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e（只剩下onkeyup/textInput，还有一线希望刚芭蕾\u0026gt;.\u0026lt;。）\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eonkeyup——其事件有两个相关属性event.key和event.keyCode。event.key在我的华为荣耀9手机上都不生效（其他低版本手机可想而知）。但其还有一个属性event.keyCode其在PC端的值是键入字符的ascii码。但在手机端输入任何数字或者小数点其值均为229（华为荣耀9测试），所以onkeyup也不能用。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eontextInput——在pc和移动端都支持！！！（功夫不负有心人）其event.data可以获取到输入的值。欢天喜地，举国欢庆，啊哈哈~~\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e终于松了一口气，只要能在输入前获取值就能验证了呀。\u003c/p\u003e\n\u003cp\u003e自信满满的一口气写完验证过程：\u003c/p\u003e\n\u003cp\u003ehtml\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;input\n    id=\u003cspan class=\"hljs-string\"\u003e\"amount-input\"\u003c/span\u003e\n    autofocus\n    \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"number\"\u003c/span\u003e\n    @textInput=\u003cspan class=\"hljs-string\"\u003e\"checkNumber\"\u003c/span\u003e\n    v-model=\u003cspan class=\"hljs-string\"\u003e\"amount\"\u003c/span\u003e\n    require/\u0026gt; \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ejs\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003echeckNumber(event) {\n  var key = event.data || \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e;\n  \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (key.search(/[0-9\\.]/) \u0026gt; -1) {\n     var value = document.getElementById(\u003cspan class=\"hljs-string\"\u003e'amount-input'\u003c/span\u003e).value;\n     \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (key === \u003cspan class=\"hljs-string\"\u003e'.'\u003c/span\u003e \u0026amp;\u0026amp; value.search(/\\./) \u0026gt; -1) {\n        event.preventDefault();\n     }\n     \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (value.search(/\\.\\d{2}/) \u0026gt; -1) {\n       event.preventDefault();\n     }\n  } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n     event.preventDefault();\n  }\n},\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e杯具再次发生了~~~~~我所期望的效果仍然没有达到。\u003c/p\u003e\n\u003cp\u003e通过value获取输入框内所有字符失败\u003c/p\u003e\n\u003cp\u003e发现\u003ccode\u003einput type = number\u003c/code\u003e 取到的value只能是数值，无法获取输入框里的所有字符。\u003c/p\u003e\n\u003cp\u003e也就是说如果输入'12.'，通过value获取到是'12'，只输入'.'，value获取到的是' '空字符串，获取不到小数点。这样就无法判断是否输入小数点，因而不能判断是否还能输入小数点，那就还是能输入无数个小数点，问题依然得不到解决。\u003c/p\u003e\n\u003cp\u003e尝试：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e使用VUE中双向绑定的this.amount来获取输入的所有字符，发现this.amount获取到的和value获取值的情况相同。尝试失败。\u003c/li\u003e\n\u003cli\u003e通过textInput获取到的输入值，自己维护一个字符数组。但是textInput在删除时不会触发，因而不能实时获取input输入框里面的所有准确字符；而且由于无法获取光标在input输入框的具体位置而无法确定删除的是哪个字符，因而字符数组无法准确维护。尝试失败。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e（5）针对功能点5，功能4解决了，功能5是小case。。。\u003c/p\u003e\n\u003cp\u003e所以基于input + 手机自带键盘实现方案要满足以上需求难以实现\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e2. 基于input + 假数字键盘实现方案\u003c/h3\u003e\n\u003cp\u003e若是用假键盘加原生input输入框，需要做到：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e禁用手机自带键盘\u003c/li\u003e\n\u003cli\u003e获取Input输入框中的内容\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e禁用手机自带键盘，在没有NA暴露的方法支持的情况下，可以设置Input的readonly属性。这样的话输入框也不能添加删除字符了。若在可以要NA端提供禁用手机自带键盘的方法的前提下，要实现点击假键盘输入框能添加删除字符。\u003c/p\u003e\n\u003cp\u003e若是只从后面添加删除，很容易实现，只需要将点击键盘对应的字符拼接到\u003ccode\u003eInput type=text\u003c/code\u003e获取到的value的后面，删除同理。但是要是光标不在最后一位，而是在中间\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609cc75e7d8709c?w=261\u0026amp;h=51\u0026amp;f=jpeg\u0026amp;s=1496\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e 图2 光标在数字中间示例图\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e那么当我们点击假键盘添加或删除字符的时候，如何能知道添加或删除字符的位置呢。也许需要获取光标位置。目前只有IE和火狐支持的document.selection，selectionStart可以获取光标位置。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// 获取光标位置\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e getCursortPosition (textDom) {\n var cursorPos = 0;\n \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (document.selection) {\n  // IE Support\n  textDom.focus ();\n  var selectRange = document.selection.createRange();\n  selectRange.moveStart (\u003cspan class=\"hljs-string\"\u003e'character'\u003c/span\u003e, -textDom.value.length);\n  cursorPos = selectRange.text.length;\n }\u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (textDom.selectionStart || textDom.selectionStart == \u003cspan class=\"hljs-string\"\u003e'0'\u003c/span\u003e) {\n  // Firefox support\n  cursorPos = textDom.selectionStart;\n }\n \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e cursorPos;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e由于我们的是移动端H5开发项目，考虑兼容性，显然以上方法不能兼容大部分的机型。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e3. 输入框、光标、数字键盘全假实现方案\u003c/h3\u003e\n\u003cp\u003e以上两种方案均难以实现，因此我只能大胆想象，要实现满足以上需求的假键盘就得实现假输入框、假光标、假keyboard的一套装备。这样所有的元素我都能控制，上面的那些问题全部可以解决。\u003c/p\u003e\n\u003cp\u003e雏形若是实现只能从最后面增加删除没有光标的假键盘非常容易，只需要给每个键绑定一个click事件，维护一个数组，每次从后面push或者pop就能维护输入框中的内容。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609cfd5895f4abe?w=291\u0026amp;h=522\u0026amp;f=jpeg\u0026amp;s=8679\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e 图3 只能从最后添加、删除且没有光标的效果图\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e但是这样跟正真的输入框效果比体验太差了。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e难点\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e要实现体验跟原生键盘一样并且自带输入验证的假键盘，难点主要在于：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e有光标，且光标闪动\u003c/li\u003e\n\u003cli\u003e光标定位，点击数字中间光标自动移过去\u003c/li\u003e\n\u003cli\u003e根据光标的位置实现插入删除\u003c/li\u003e\n\u003cli\u003e失去焦点光标隐藏，点击输入框光标显示并且弹出键盘\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 class=\"heading\"\u003e原生js实现\u003c/h2\u003e\n\u003cp\u003e对于光标实现，创造一个元素设置背景色，可以控制它隐藏和出现。\u003c/p\u003e\n\u003cp\u003e对于“点击数字中间光标自动移过去 ”，可以每添加一个数字或者小数点就先加一个带点击事件的空元素space，再添加要输入的字符。space是为了绑定一个点击事件，告诉光标要移动到的位置。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e//字符插入，在光标前插入字符\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e insert(value) {\n\u0009var span = document.createElement(\u003cspan class=\"hljs-string\"\u003e\"span\"\u003c/span\u003e); //创建包含值的元素\n\u0009span.className = \u003cspan class=\"hljs-string\"\u003e'val'\u003c/span\u003e;\n\u0009span.innerText = value;\n\n\u0009var space = document.createElement(\u003cspan class=\"hljs-string\"\u003e\"span\"\u003c/span\u003e);\n\u0009space.className = \u003cspan class=\"hljs-string\"\u003e'space'\u003c/span\u003e;\n\u0009space.addEventListener(\u003cspan class=\"hljs-string\"\u003e'click'\u003c/span\u003e, moveCursor);\n\n\u0009var cursor = document.getElementsByClassName(\u003cspan class=\"hljs-string\"\u003e'cursor'\u003c/span\u003e)[0];\n\n\u0009inputArea.insertBefore(space, cursor);//插入空列\n\u0009inputArea.insertBefore(span, cursor);//插入值\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e删除时也是先删除光标之前的数字字符，再删除space元素。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e//删除元素\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003edeleteElement\u003c/span\u003e\u003c/span\u003e() {\n\u0009\u003cspan class=\"hljs-built_in\"\u003eset\u003c/span\u003eCursorFlash();\n\u0009var cursor = document.getElementsByClassName(\u003cspan class=\"hljs-string\"\u003e'cursor'\u003c/span\u003e)[0];\n\u0009var n = 2; //两个删除动作\n \u0009\u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e(cursor.previousSibling \u0026amp;\u0026amp; n \u0026gt; 0) {\n    inputArea.removeChild(cursor.previousSibling );\n    n--;\n \u0009}\n\u0009\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(getInputStr().search(/^\\.\\d*/) \u0026gt; -1) {\n\u0009\u0009insert(0);\n\u0009}\n\u0009\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(getInputStr() === \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e){ //元素为空placeholder显示\n\u0009\u0009var placeHolder = document.getElementsByClassName(\u003cspan class=\"hljs-string\"\u003e'holder'\u003c/span\u003e)[0];\n\u0009\u0009placeHolder.className = \u003cspan class=\"hljs-string\"\u003e'holder'\u003c/span\u003e;\n\u0009}\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e通过chrome里面元素审查可以看到添加删除的过程。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609cb490ca50f8d?w=511\u0026amp;h=389\u0026amp;f=gif\u0026amp;s=502766\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e图4 添加、删除、光标移动元素变化图\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e每一个space元素都绑定一个click事件，用来移动光标，最右边有个right-space可以用来放placeholder,也可以添加click事件，点击时光标总是移到最后一位。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e//移动光标位置\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e moveCursor(event) {\n\u0009var cursor = document.getElementsByClassName(\u003cspan class=\"hljs-string\"\u003e'cursor'\u003c/span\u003e)[0];//获取光标\n\u0009\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(event.currentTarget.className == \u003cspan class=\"hljs-string\"\u003e'right-space'\u003c/span\u003e){\n\u0009\u0009\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(!cursor.nextSibling || cursor.nextSibling.nodeName == \u003cspan class=\"hljs-string\"\u003e'#text'\u003c/span\u003e){\n\u0009\u0009\u0009\u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e;\n\u0009\u0009} \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n\u0009\u0009\u0009var ele = cursor.nextSibling;\n\u0009\u0009\u0009inputArea.insertBefore(inputArea.lastElementChild, ele);\n\u0009\u0009\u0009inputArea.appendChild(cursor);\n\u0009\u0009}\n\u0009}\u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n\u0009\u0009var tempEle = event.currentTarget.nextSibling;\n\u0009\u0009// var nodeName = event.currentTarget.nextSibling.nodeName;\n\u0009\u0009// var cursor = document.getElementsByClassName(\u003cspan class=\"hljs-string\"\u003e'cursor'\u003c/span\u003e)[0];\n\u0009\u0009\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(!tempEle || tempEle.nodeName == \u003cspan class=\"hljs-string\"\u003e'#text'\u003c/span\u003e) {\n\u0009\u0009\u0009var temp = event.currentTarget.previousSibling;\n\u0009\u0009\u0009var ele = inputArea.replaceChild( event.currentTarget, cursor);//把光标替换成当前元素\n\u0009\u0009\u0009inputArea.appendChild(ele);\n\u0009\u0009} \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n\u0009\u0009\u0009var temp = event.currentTarget.nextSibling;\n\u0009\u0009\u0009var ele = inputArea.replaceChild( event.currentTarget, cursor);//把光标替换成当前元素\n\u0009\u0009\u0009inputArea.insertBefore(ele, temp);\n\u0009\u0009}\n\u0009}\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e从上面的GIF图可以看出，光标始终只有一个而且有个定时任务。光标的闪动设置如下，使用原生的setInterval实现。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e//设置光标定时任务\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003esetCursorFlash\u003c/span\u003e\u003c/span\u003e() {\n\u0009//placeholder 隐藏\n\u0009var placeHolder = document.getElementsByClassName(\u003cspan class=\"hljs-string\"\u003e'holder'\u003c/span\u003e)[0];\n\u0009placeHolder.className = \u003cspan class=\"hljs-string\"\u003e'holder hidden'\u003c/span\u003e;\n\n\u0009var cursor = document.getElementsByClassName(\u003cspan class=\"hljs-string\"\u003e'cursor'\u003c/span\u003e)[0];\n\u0009var inputContainer = document.getElementsByClassName(\u003cspan class=\"hljs-string\"\u003e'input-container'\u003c/span\u003e)[0];\n\u0009cursor.className = \u003cspan class=\"hljs-string\"\u003e\"cursor\"\u003c/span\u003e;\n\u0009var isShowCursor = \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n\u0009inputContainer.focus();\n\u0009showKeyBoard();\n\u0009\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (intervalId) {\n\u0009\u0009clearInterval(intervalId);\n\u0009}\n\u0009intervalId = \u003cspan class=\"hljs-built_in\"\u003eset\u003c/span\u003eInterval(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e() {\n\u0009\u0009isShowCursor = !isShowCursor;\n\u0009\u0009\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (isShowCursor) {\n\u0009\u0009\u0009cursor.className = \u003cspan class=\"hljs-string\"\u003e'cursor'\u003c/span\u003e;\n\u0009\u0009} \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n\u0009\u0009\u0009cursor.className = \u003cspan class=\"hljs-string\"\u003e'cursor hidden'\u003c/span\u003e;\n\u0009\u0009}\n\u0009}, 1000);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e最终使用原生js实现的带输入框、光标，keyboard的假数字键盘。\u003c/p\u003e\n\u003cp\u003e除了完成以上功能，还实现了输入前验证功能，为了跟接近真实输入框表现，同时实现了点击\u003c/p\u003e\n\u003cp\u003e输入框获取焦点、光标闪动、弹出键盘；失去焦点光标消失。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e为什么不使用jQuery？\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e一是因为，当前的H5项目没有使用jQuery。\u003c/p\u003e\n\u003cp\u003e二是因为使用VUE之后很少需要直接操作DOM，少数方法自己实现更轻量，若是只为了使用\u003c/p\u003e\n\u003cp\u003e其一两个方法而引入jQuery，会使得项目更重。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e原生js实现效果\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e图5 原生js实现输入框、光标、键盘全假套件效果图\n源码\u003ca target=\"_blank\"\u003ehttps://github.com/DaisyWang88/js-keyboard\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e手机扫码验证：\n\u003ca target=\"_blank\" href=\"http://sandbox.runjs.cn/show/mvjrcagy\"\u003ehttp://sandbox.runjs.cn/show/mvjrcagy\u003c/a\u003e(chrome插件url二维码生成器GetCrx.cn)\u003c/p\u003e\n\u003cp\u003e由于移动端click事件有300毫秒延时，因此原生js实现的效果，有点不是很流畅。若使用原生JS实现版的需要使fastclick或zepto的tap事件解决延时问题。\u003c/p\u003e\n\u003cp\u003ePS：之前说‘VUE本身解决300毫秒延时问题’，考证之后发现不对，给大家带来困扰实在抱歉。\u003c/p\u003e\n\u003cp\u003e考证之后发现VUE的click事件都是原生的click并没有处理这个延时。为了不让大家困扰，github上的demo已经使用fastClick解决了延时问题，（之前太懒了\u0026gt;.\u0026lt;）。现在原生的js实现效果也很顺畅了。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003eVUE组件化\u003c/h2\u003e\n\u003cp\u003e考虑到项目里有的应用场景有多个输入框，当然输入的时候只需要一个键盘，因此组件化的时候将输入框作为一个组件v-input，键盘作为一个组件v-keyboard。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e输入框和键盘的交互\u003c/h3\u003e\n\u003cp\u003e交互图如下：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609cbd97c7d670f?w=597\u0026amp;h=425\u0026amp;f=jpeg\u0026amp;s=19264\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e 图6 VUE组件交互图\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e考虑到本项目里面存在一个页面多个输入框的场景，因此需要控制键盘与哪个输入框配合使用。\u003c/p\u003e\n\u003cp\u003e为了达到这样的目的，采用“当点击输入框获取焦点的时候，将当前v-input输入框组件的实例传给v-keyboard键盘组件”的方式。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ethis.$refs.virtualKeyBoard.$emit('getInputVm', this.$refs.virtualInput);\u003c/code\u003e\n如图6 ，v-keyboard组件会监听'getInputVm'事件，获取v-input的实例。\u003c/p\u003e\n\u003cp\u003e键盘组件v-keyboard获取到输入框组件v-input的实例之后就可以根据键盘的点击事件——添加或删除，操作输入框组件v-input来放入或者删除字符了。\u003c/p\u003e\n\u003cp\u003e这样即使有多个输入框，也方便控制键盘和输入框之间的操作。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e输入框自动获取焦点，键盘自动弹出\u003c/h3\u003e\n\u003cp\u003e需求里要求进入某个页面输入框自动获取焦点，键盘自动弹出。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e输入框自动获取焦点可以通过设置is-auto-focus来控制是否自动获取焦点。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;v-input\n    ref=\u003cspan class=\"hljs-string\"\u003e\"virtualInput\"\u003c/span\u003e\n    v-model=\u003cspan class=\"hljs-string\"\u003e\"amount\"\u003c/span\u003e\n    :placeholder=\u003cspan class=\"hljs-string\"\u003e\"placeText\"\u003c/span\u003e\n    :is-auto-focus=\u003cspan class=\"hljs-string\"\u003e\"true\"\u003c/span\u003e\n    @show-key-board=\u003cspan class=\"hljs-string\"\u003e\"showKeyBoard\"\u003c/span\u003e\u0026gt;\n\u0026lt;/v-input\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e要自动弹出键盘如图6，需要在页面实例化完成之后将相应的输入框组件v-input的实例传给键盘组件v-keyboard。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003ethis.\u003cspan class=\"hljs-variable\"\u003e$refs\u003c/span\u003e.virtualKeyBoard.\u003cspan class=\"hljs-variable\"\u003e$emit\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'getInputVm'\u003c/span\u003e, this.\u003cspan class=\"hljs-variable\"\u003e$refs\u003c/span\u003e.virtualInput);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e键盘组间捕获'getInputVm'事件之后获取了相应输入框的实例，同时自动弹出。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003ethis.\u003cspan class=\"hljs-variable\"\u003e$on\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'getInputVm'\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(obj) {\n     this.refObject = obj;\n     this.isShow = \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n});\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003ev-model支持\u003c/h3\u003e\n\u003cp\u003evue支持自定义v-model，子组件设置一个value 的 props。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eprops: {\n    value: {\n      \u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e: String,\n      default: \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e,\n    },\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在value改变的时候$emit一个'input'事件并把相应的值传出去就可以实现v-model的双向绑定了。this.getInputStr()是用来获取输入框中字符串的函数。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003ethis.\u003cspan class=\"hljs-variable\"\u003e$emit\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'input'\u003c/span\u003e, this.getInputStr());\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e效果如下：\u003c/p\u003e\n\u003cp\u003e源码参见\u003ca target=\"_blank\" href=\"https://github.com/DaisyWang88/VUE-keyboard\"\u003ehttps://github.com/DaisyWang88/VUE-keyboard\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e总结\u003c/h2\u003e\n\u003cp\u003e原生的input 设置type =number，想要做输入前验证控制小数点个数和小数位数等功能基本很难实现，要在输入前取到值也是存在各种兼容性问题，目前只有ontextInput在移动端能在输入前准确取到值，还有个关键的问题type =number的时候取到的value不包含小数点，导致输入前使用正则验证几乎无法实现；若是设置type= text 虽然能取到输入框中所有字符，但是就无法弹出数字键盘。要想使用原生input输入小数，就必须有所取舍。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e要么不做输入前验证，使用type = number ，可以输入多个小数点，只在数值数值不合法的时候提示输入不合法，但是只有android可以弹出数字键盘，IOS仍然弹出全键盘。用户体验可能差些。\u003c/li\u003e\n\u003cli\u003e要么使用type = text，虽然可以做到输入前验证（因为可以取到全部字符），但是所有机型都只会弹全键盘了，用户体验也一般。\u003c/li\u003e\n\u003cli\u003e以上两种都无法实现进入页面键盘自动弹出，只能借助NA提供的方法实现。\u003c/li\u003e\n\u003cli\u003e如果你是强迫症癌晚期患者，用户体验之上者，那么你就可以跟我一样做个假键盘，这样以上问题都不是问题。还可以添加附加功能，比如输入的时候若在第一位输入小数点的时候，前面自动补'0'；删除的时候，若小数点在第一位前面自动补'0'；还可以定制光标颜色、键盘样式等等。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e很不幸，我就是一个强迫症癌晚期患者，目前实现的键盘套件改造成VUE组件已经成功在项目中使用，有单输入框的页面，也有多输入框的页面，支持placeholder 和v-model。\u003c/p\u003e\n","buildTime":"1514464946.9817","__v":0}
{"_id":{"$oid":"5a44e6c4decf092514b3b413"},"id":"5a44b15e51882538fe631406","author":{"$oid":"5a44e6c4decf092514b3b406"},"title":"Dive into Vue.js","meta":{"likeCount":0},"tag":["Vue.js","前端","设计","React.js"],"comment":[],"content":"\u003ch2 class=\"heading\"\u003e摘要\u003c/h2\u003e\n\u003cp\u003eVue.js作为先进的前端MVVM框架，在外卖已经广泛应用在各业务线中。本文阐述了Vue.js作为前端MVVM框架的主要优势，并从Vue.js的三个核心点：Observer, Watcher, Compiler出发，深入阐述Vue.js的设计与实现原理。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e背景\u003c/h2\u003e\n\u003cp\u003eVue.js 是一个轻量级的前端 MVVM 框架，专注于web视图(View)层的开发 。\n自2013年以来，Vue.js 通过其可扩展的数据绑定机制、极低的上手成本、简洁明了的API、高效完善的组件化设计等特性，吸引了越来越多的开发者。在github上已经有30,000+ star，且不断在增长；在国内外都有广泛的应用，社区和配套工具也在不断完善，影响力日益扩大，与React 、AngularJS 这种「世界级框架」几乎平起平坐。\n外卖B端的FE同学比较早（0.10.x版本）就引入了 Vue.js 进行业务开发，经过一年多的实践，积累了一定的理解。在此基础上，我们希望去更深入地了解 Vue.js , 而不是一直停留在表面。所以「阅读源码」成为了一项课外任务。\n我个人从9月份开始阅读Vue的源码，陆陆续续看了2个月，这里是我的源码学习笔记。本篇文章希望从 Vue.js 1.0版本的设计和实现为主线，阐述自己阅读源码的一些心得体会。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e前端为什么需要有MVVM框架？\u003c/h2\u003e\n\u003cp\u003e前端刀耕火种的历史在这里就不赘述，在jquery 等DOM操作库大行其道的年代，主要的开发痛点集中于：\u003c/p\u003e\n\u003cp\u003e当数据更新时，需要开发者主动地使用 DOM API 操作DOM；当DOM发生变化时，需要开发者去主动获取DOM的数据，把数据同步或提交；\n同样的数据映射到不同的视图时，需要新的一套DOM操作，复用性低；\n大量的DOM操作使得业务逻辑繁琐冗长，代码的可维护性差。\n于是，问题的聚焦点就在于：\u003c/p\u003e\n\u003cp\u003e业务逻辑应该专注在操作数据（Model），更新DOM不希望有大量的显式操作。\n在数据和视图间做到同步（数据绑定和更新监听），不需要人为干预。\n同样的数据可以方便地对应多个视图。\n此外，还应该做到的一些特性：\u003c/p\u003e\n\u003cp\u003e方便地实现视图逻辑（声明式或命令式）;\n方便地创建和连接、复用组件;\n管理状态和路由。\nMVVM框架可以很好地解决以上问题。通过 ViewModel 对 View 和 Model 进行桥接，而Model 和 ViewModel 之间的交互是双向的，View 数据的变化会同步到 Model 中，Model 中的数据变化也会立即反应到 View 上，即我们通常所说的「双向绑定」。这是不需要人为干涉的，所以开发者只需要关注业务逻辑，其他的DOM操作、状态维护等都由MVVM框架来实现。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003eWhy Vue?\u003c/h2\u003e\n\u003cp\u003eVue.js的优点主要体现在：\u003c/p\u003e\n\u003cp\u003e开发者的上手成本很低，开发体验好。\n如果使用过 angular 的同学就知道，里面的API多如牛毛，而且还会要求开发者去熟悉类似 controller , directive ，dependency injection , digest cycle 这些概念;\nangular2 更是需要提前去了解 Typescript 、RxJS 等基础知识；\n要让一个前端小白去搞定 React 的全家桶，ES6 + Babel , 函数式编程 ，JSX ， 工程化构建 这些也是必需要过的槛。\nVue.js 就没有这些开发负担，对开发者屏蔽了一系列复杂的概念，API从数量、设计上都十分精简，很接地气地支持js的各种方言，让前端小白可以快速上手 — 当然，对于有一定经验的同学，也可以使用流行的语言、框架、库、工程化工具来做自由合理搭配。\u003c/p\u003e\n\u003cp\u003e博采众长，集成各种优秀特性 — Vue.js 里面有像 angular 这样的双向数据绑定，2.0版本也提供了像 React 这样的 JSX,Virtual-DOM ，服务端同构 的特性；同时 vuex ，vue-router ，vue-cli 等配套工具也组成了一个完整的框架生态。\u003c/p\u003e\n\u003cp\u003e性能优秀。 Vue.js 在1.x版本的时候性能已经明显优于同期基于 dirty check (条件性全量脏检查) 的 angular 1.x ；总体上来说，Vue.js 1.x版本 的性能与React 的性能相近，而且 Vue.js 不需要像React 那样去手动声明shouldComponentUpdate 来优化状态变更时的重新渲染的性能。Vue2.0版本使用了Virtual DOM + Dependency Tracking 方案，性能得到进一步优化。当然，不分场景的性能比较属于耍流氓。 这个benchmark 对比了主流前端框架的性能，可以看出 Vue.js 的性能在大部分场景下都属于业界顶尖。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003eVue.js的绑定设计思路\u003c/h2\u003e\n\u003cp\u003e根据上面篇幅的描述，MVVM框架工作的重中之重是建立 View 和 Model 之间的关系。也就是「绑定」。官方文档的附图说明了这一点：\u003c/p\u003e\n\u003cp\u003e从上图，只能得到一些基(cu)础(qian)的认识：\u003c/p\u003e\n\u003cp\u003eModel是一个 POJO 对象，即简单javascript对象。\nView 通过 DOM Listener 和 Model 建立绑定关系。\nModel 通过 Directives(指令)，如 {{a}} , v-text=\"a\" 与 View 建立绑定关系。\n而实际上要做的工作还是很多的：\u003c/p\u003e\n\u003cp\u003e让 Model 中的数据做到 Reactive ，即在状态变更（数据变化）时，系统能做出响应。\nDirectives(指令) 混杂在一个html片段(fragment，或者你可以理解就是Vue实例中的 template )中，需要正确解析指令和表达式(expression)，不同的指令需要对应不同的DOM更新方式，最易理解的例子就是 v-if 和 v-show ；\nModel 的更新触发指令的视图更新需要有一定的机制来保证；\n在 DOM Listener 这块，需要抹平不同浏览器的差异。\nVue.js 在实现「绑定」方面，为所有的指令(directives)都约定了 bind 和 update 方法，即：\u003c/p\u003e\n\u003cp\u003e解析完指令后，应该如何绑定数据\n数据更新时，怎样更新DOM\nVue.js 的解决方案中，提出了几个核心的概念：\u003c/p\u003e\n\u003cp\u003eObserver : 数据观察者，对所有 Model 数据进行 defineReactive，即使所有 Model 数据在数据变更时，可以通知数据订阅者。\nWatcher : 订阅者，订阅并收到所有 Model 变化的通知，执行对应的指令（表达式）绑定函数\nDep : 消息订阅器，用于收集 Watcher , 数据变化时，通知订阅者进行更新。\nCompiler : 模板解析器，可对模板中的指令、表达式、属性(props)进行解析，为视图绑定相应的更新函数。\n可见这里面的核心思想是大家（特别FE同学）都很熟悉的「观察者模式」。总体的设计思路如下：\u003c/p\u003e\n\u003cp\u003e回到刚才说的 bind 与 update，我们看看上述概念是如何工作的：\u003c/p\u003e\n\u003cp\u003e在初始化视图，即绑定阶段，Observer 获取 new Vue() 中的data数据，通过Object.defineProperty 赋予 getter 和 setter; 对于数组 形式的数据，通过劫持某些方法让数组在变动时也能得到通知。另外，Compiler 对DOM节点指令进行扫描和解析，并订阅Watcher 来更新视图。Watcher 在 消息订阅器 Dep 中进行管理。\n在更新阶段，当数据变更时，会触发 setter 函数，立即会触发相应的通知, 开始遍历所有订阅者，调用其指令的update方法，进行视图更新。\nOK，下面我们继续深入看三个「核心点」，即 Observer, Compiler, Watcher 的实现原理。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e数据观察者 Observer 的实现原理\u003c/h2\u003e\n\u003cp\u003e前面提到，Observer 的核心是对 Model(data) 中的数据进行 defineReactive。\n这里的实现如下：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c594e0357584?w=720\u0026amp;h=455\u0026amp;f=jpeg\u0026amp;s=16398\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eVue.js 在初始化data时，会先将data中的所有属性代理到Vue实例下（方便使用 this 关键字来访问），然后即调用 Observer 来进行数据观察。\nObserver会先将所有 data 中的属性进行整体观察，定义一个属性__ob__ ，进行Object.defineProperty，即为 data 本身添加观察器。\n同样，对于data中的每个属性也会使用 \u003cstrong\u003eob\u003c/strong\u003e 为每个属性本身添加观察器。\n同理，当定义了类似如下的属性值为POJO对象时，会去递归地 Object.defineProperty ;\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e{\n    data: {\n        a: {\n            b: \u003cspan class=\"hljs-string\"\u003e\"c\"\u003c/span\u003e\n        }\n    },\n    d: [1, 2, 3]\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e那么，当定义的属性值为数组时，在数组本身通过方法变化时，也需要监听数组的改变。\n通过javascript操作数组的变化无外乎以下几种方式：\u003c/p\u003e\n\u003cp\u003e通过 push , pop 等数组原生方法进行改变；\n通过length属性进行改变，如 arr.length = 0；\n通过角标赋值, 如 arr[0] = 1 。\n对于数组原生的方法，我们需要在使用这些方法时同时触发事件，让系统知道这个数组改变了。那么，我们通常会想到去「劫持」数组本身的方法。但是显然，我们不能直接去覆写 Array.prototype , 这样的全局覆写显然会对其他不需要响应式数据的数组操作产生影响。\nVue.js 的思路在于，当监测到一个data属性值是Array时，去覆写这个属性值数组的 \u003cstrong\u003eproto\u003c/strong\u003e 属性，即只覆写响应式数据的原型变量。核心实现如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e Observer(value) {\n    this.value = value\n    this.dep = new Dep()\n    _.define(value, \u003cspan class=\"hljs-string\"\u003e'__ob__'\u003c/span\u003e, this)\n    // 如果判断当前值是Array, 进行劫持操作\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (_.isArray(value)) {\n        var augment = _.hasProto\n            ? protoAugment\n            : copyAugment\n        // 在这里，arrayMethods是进行了劫持操作后的数组原型\n        // augment的作用即是覆写原型方法\n        augment(value, arrayMethods, arrayKeys)\n        this.observeArray(value)\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n        // 递归地defineProperty\n        this.walk(value)\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e对于直接改变数组length来修改数组、角标赋值，显然不能直接劫持。这时一种实现方式是把原生的 Array 做上层包装，变成一个Array like Object, 再在这里面进行defineProperty， 这样可以搞定length和角标赋值。但是这样做的弊端是，每次在使用数组时都需要显式去调用这个对象，如：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003evar a = new ObservableArray([1, 2, 3, 4]);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这样显然增加了开发者上手成本，而且改变length可以通过splice来实现；所以 Vue.js 并没有实现此功能，是一种正确的取舍。\n对于角标赋值，还是有一定的使用场景，所以 Vue.js 扩展了 $set 和 $remove 方法来实现。\n这两种方法实质还是在使用可被劫持的 splice，而被劫持的方法可以触发视图更新。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eexample1.items[0] = { childMsg: \u003cspan class=\"hljs-string\"\u003e'Changed!'\u003c/span\u003e} // 不能触发视图更新\nexample1.items.\u003cspan class=\"hljs-variable\"\u003e$set\u003c/span\u003e(0, { childMsg: \u003cspan class=\"hljs-string\"\u003e'Changed!'\u003c/span\u003e}) // 可以触发视图更新\n\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e监测Object对象的改变，有一个提案期的 Object.observe() 方法，但现在已经被浏览器标准废弃，各浏览器均不再支持。同样有一个非标准的监视方法Object.watch() 被Firefox 支持，但不具备通用性。\u003c/li\u003e\n\u003cli\u003e监测数组对象的改变，同样有一个提案性的Array.observe()。它不仅能监视数组方法，还可以监视角标赋值等变化。但是这个提案也已经被废弃。\u003c/li\u003e\n\u003cli\u003e理论上，使用 ES6 的 Proxy 对象也可以进行 get 和 set 的拦截, 但浏览器支持情况并不好，实用性不高。\u003c/li\u003e\n\u003cli\u003e所以，当前的条件下 Object.defineProperty 仍是最好的选择 — 当然，在IE8及更低版本浏览器盛行的年代，基于此特性的MVVM框架就很难大规模被普及。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch2 class=\"heading\"\u003e解析器Compiler的实现\u003c/h2\u003e\n\u003cp\u003eCompiler 的作用主要是解析传入的元素 el 或模板 template ，创建对应的DOMFragment，提取指令(directive)并执行指令相关方法，并对每个指令生成Watcher。\n主要的入口点是挂载在Vue.prototype下的 _compile 方法（实际内容在instance/lifecycle.js, Vue1.x的不同版本位置略有不同）。\n整个 _compile 方法的流程如下：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c5c8b161b222?w=720\u0026amp;h=514\u0026amp;f=jpeg\u0026amp;s=16338\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e首先执行 transclude() , 实际是在处理template标签或 options.template 字符串，将其解析为DOMFragment, 拿到 el 对象。\n其次执行_initElement(el), 将拿到的el对象进行实例挂载。\n接着是CompileRoot(el, options) ，解析当前根实例DOM上的属性(attrs);\n然后执行Compile(el, options)，解析template，返回一个link Funtion(compositeLinkFn)。\n最后执行这个compositeLinkFn，创建\nCompile(el, options) 的具体流程如下：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c5cfe0c2286a?w=720\u0026amp;h=680\u0026amp;f=jpeg\u0026amp;s=28871\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e首先，compile过程的基础函数是compileNode, 在检测到当前节点有子节点的时候，递归地调用compileNode即对DOM树进行了遍历解析。\n接着对节点进行判断，使用comileElement 或 compileTextNode 进行解析。\n我们看到最终compile的结果return了一个compositeLinkFn, 这个函数的作用是把指令实例化，将指令与新建元素建立连接，并将元素替换到DOM树中。\ncompositeLinkFn会先执行通过comileElement 或 compileTextNode 产出的Linkfn 来创建指令对象。\n在指令对象初始化时，不但调用了指令的bind, 还定义了 this._update 方法，并创建了 Watcher，把 this._update 方法(实际对应指令的更新方法)作为 Watcher 的回调函数。\n这里把 Directive 和 Watcher 做了关联，当 Watcher 观察到指令表达式值变化时，会调用 Directive 实例的 _update 方法，最终去更新 DOM 节点。\n以compileTextNode为例，写一段伪代码表示这个过程：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// compile结束后返回此函数\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e compositeLinkFn(arguments) {\n    linkAndCapture()\n    // 返回解绑指令函数，这里不深究。\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e makeUnlinkFn(arguments)\n}\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e linkAndCapture(arguments) {\n    // 创建指令对象\n    linkFn()\n    // 遍历 directives 调用 \u003cspan class=\"hljs-built_in\"\u003edirs\u003c/span\u003e[i]._bind 方法对单个directive做一些绑定操作\n    // 这里会去实例化单个指令，执行指令的\u003cspan class=\"hljs-built_in\"\u003ebind\u003c/span\u003e()函数，并创建Watcher\n    \u003cspan class=\"hljs-built_in\"\u003edirs\u003c/span\u003e[i]._bind()\n}\n// 解析TextNode节点，返回了linkFn\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e compileTextNode(node) {\n    // 对节点数据进行解析，生成tokens\n    var tokens = textParser.parse(node.data)\n    createFragment()\n    // 创建token的描述，作为后续生成指令的依据\n    \u003cspan class=\"hljs-built_in\"\u003eset\u003c/span\u003eTokenDescriptor()\n    /**\n   \u003cspan class=\"hljs-keyword\"\u003edo\u003c/span\u003e other things\n   **/\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e linkFn(tokens, ...);\n}\n// linkFn遍历token,遍历执行_bindDir, 传入token描述\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003elinkFn\u003c/span\u003e\u003c/span\u003e() {\n    tokens.forEach(\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (token) {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (token.html) replaceHtml();\n        vm._bindDir(token.discriptor)\n    })\n}\n// 根据token描述创建指令新实例\nVue.prototype._bindDir = \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (descriptor) {\n    this._directives.push(new Directive(descriptor))\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e至此，compiler 的工作就结束了。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003eWatcher订阅监听的实现\u003c/h2\u003e\n\u003cp\u003eWatcher的职责\u003c/p\u003e\n\u003cp\u003e在上述compiler的实现中，最后一步用于创建Watcher：\u003c/p\u003e\n\u003cp\u003e// 为每个directive指令创建一个watcher\ndirs[i]._bind()\nDirective.prototype._bind = function () {\n...\n// 创建Watcher部分\nvar watcher = this._watcher = new Watcher(\nthis.vm,\nthis.expression,\nthis._update, // callback\n{\nfilters: this.filters,\ntwoWay: this.twoWay,\ndeep: this.deep,\npreProcess: preProcess,\npostProcess: postProcess,\nscope: this._scope\n}\n)\n}\n接收的参数是vm实例、expression表达式、 callback回调函数和相应的Watcher配置, 其中包含了上下文信息： this._scope。\n每个指令都会有一个watcher, 实时去监控表达式的值，如果发生变化，则通知指令执行 _update 函数去更新对应的DOM。那么我们可以想到，watcher主要做的工作是：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e解析表达式，如 v-show=\"a.b.c \u0026gt; 1\" ; 表达式需要转换成函数来求值；\u003c/li\u003e\n\u003cli\u003e自动收集依赖。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 class=\"heading\"\u003ewatcher的实现\u003c/h3\u003e\n\u003cp\u003e这部分工作的实现如下：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c605b7a48d33?w=720\u0026amp;h=724\u0026amp;f=jpeg\u0026amp;s=24420\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e使用状态机进行路径解析\u003c/h3\u003e\n\u003cp\u003e这里的parse Expression使用了路径状态机（state machine）进行路径的高效解析。\n详细代码见 parsers/path.js 部分。\n这里所谓的「路径」就是指一个对象的属性访问路径：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003ea = {\n    b: {\n        c: \u003cspan class=\"hljs-string\"\u003e'd'\u003c/span\u003e\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在这里, ‘d’的访问路径即是 a.b.c, 解析后为['a', 'b', 'c']。\n如一个表达式 a[0].b.c, 解析后为 ['a', '0', 'b', 'c']。\n表达式a[b][c]则解析为 ['a', '*b', '*c']。\n解析的目的是进行compileGetter, 即 getter 函数；\n解析为数组原因是，可以方便地还原new Function()构造中正确的字符串。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eexports.compileGetter = \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (path) {\n    var body = \u003cspan class=\"hljs-string\"\u003e'return o'\u003c/span\u003e + path.map(formatAccessor).join(\u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e)\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e new Function(\u003cspan class=\"hljs-string\"\u003e'o'\u003c/span\u003e, body)\n}\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e formatAccessor(key) {\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (identRE.test(key)) { // identifier\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'.'\u003c/span\u003e + key\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (+key === key \u0026gt;\u0026gt;\u0026gt; 0) { // bracket index\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'['\u003c/span\u003e + key + \u003cspan class=\"hljs-string\"\u003e']'\u003c/span\u003e\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (key.charAt(0) === \u003cspan class=\"hljs-string\"\u003e'*'\u003c/span\u003e) {\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'[o'\u003c/span\u003e + formatAccessor(key.slice(1)) + \u003cspan class=\"hljs-string\"\u003e']'\u003c/span\u003e\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e { // bracket string\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'[\"'\u003c/span\u003e + key.replace(/\u003cspan class=\"hljs-string\"\u003e\"/g, '\\\\\"\u003c/span\u003e\u003cspan class=\"hljs-string\"\u003e') + '\u003c/span\u003e\u003cspan class=\"hljs-string\"\u003e\"]'\n    }\n}\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e如一段表达式：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u0026lt;p\u0026gt;{{list[0].text}}\u0026lt;/p\u0026gt;\n解析后path为[\u003cspan class=\"hljs-string\"\u003e\"list\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"0\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"text\"\u003c/span\u003e], getter函数的生成结果为：\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e(\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (o/**/) {\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e o.list[0].text\n})\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e把正确的上下文传入此函数即可正确取值。\nVue.js 仅在路径字符串中带有 [ 符号时才会使用状态机进行匹配；其他情况下认为它是一个simplePath, 如a.b.c，直接使用上述的formatAccessor转换即可。\n状态机的工作原理如下：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c7cb790fc8a8?w=720\u0026amp;h=715\u0026amp;f=jpeg\u0026amp;s=26333\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e里面的逻辑比较复杂，可以简单地描述为：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eVue.js 里面维护了一套状态机机制，每解析一个字符，均匹配对应的状态;\u003c/li\u003e\n\u003cli\u003e如当前的字符索引是0，那么就会有一个「当前状态」的模式(mode)，这个模式只允许下一个字符属于特定的状态模式。举例，如 ][ 这样的表达式显然不合理， \"]\"字符所在的状态，决定了下个字符不能为 \"[\" 这样的\u003c/li\u003e\n\u003cli\u003e字符，否则就会退出解析;\u003c/li\u003e\n\u003cli\u003e接下来的索引去根据「当前状态」的模式看自己是否属于一个合理的状态；\u003c/li\u003e\n\u003cli\u003e如果属于一个合理的状态，先设置当前状态的模式为当前字符匹配的状态模式；\u003c/li\u003e\n\u003cli\u003e再调用相关的方法(action)来处理。例如，list[0]这个表达式，在处理\"l\", \"i\", \"s\", \"t\" 时，只是在执行 append action , 生成\"list\" ; 直到遇到 \"[\" , 执行 push action , 把\"list\"字符串推入结果中。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003eVue.js 的状态机设计可以看勾三股四总结的这张图。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 class=\"heading\"\u003e缓存系统\u003c/h2\u003e\n\u003cp\u003e想象一个场景：当存在着大量的路径(path)需要解析时，很可能会有大量重复的情况。如上面所述，状态机解析是一个比较繁琐的过程。那么就需要一个缓存系统，一旦路径表达式命中缓存，即可直接获取，而不用再次解析。\n缓存系统的设计应该考虑以下几点：\u003c/p\u003e\n\u003cp\u003e缓存的数据应是有限的。否则容易数据过多内存溢出。\n设定数据存储条数应结合实际情况，通过测试给出。\n缓存数据达到上限时，如果继续有数据存入，应该有相应的策略去清除现有缓存。\nVue.js 在缓存系统上直接使用了js-lru项目。这是一个LRU（Least Recently Used)算法的实现。核心思路如下：\u003c/p\u003e\n\u003cp\u003e基础数据结构为js实现的一个双向链表。\ncache对象有头尾，即一个head(最少被使用的项)和tail(最近被使用的项)。\n缓存中的每一项均有newer和older的指针。\n缓存中找数据使用object key进行查找。\n具体实现如下图：\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c82e78f3d87b?w=720\u0026amp;h=435\u0026amp;f=jpeg\u0026amp;s=23364\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e由图理解非常简单：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e获取缓存项B，把B插入变为tail, D和B建立 newer,older 关系，A和C建立newer, older关系；\u003c/li\u003e\n\u003cli\u003e设置缓存项E，把E插入变为tail, D和E建立 newer,older 关系；\u003c/li\u003e\n\u003cli\u003e达到缓存上限时，删除缓存项A(head)，把B变成head。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e缓存系统的其他实现，可以参考wikipedia上的Cache replacement policies。\n依赖收集 (Dependency Collection)\n让我们回到Watcher的构造函数：\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e Watcher(vm, expOrFn, cb, options) {\n    //...\n    // 解析表达式，得到getter和setter函数\n    var res = parseExpression(arguments)\n    this.getter = res.get\n    this.setter = res.get\n    // 设定Dep.target为当前Watcher实例\n    Dep.target = this\n    // 调用getter函数\n    try {\n        value = this.getter.call(scope, scope)\n    } catch (e) {\n        //...\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这里面又有什么玄机呢？回顾一下 Observer 的 defineReactive :\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e defineReactive(obj, key, val) {\n    var dep = new Dep()\n    var childOb = Observer.create(val)\n    Object.defineProperty(obj, key, {\n        enumerable: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n        configurable: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n        get: \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003emetaGetter\u003c/span\u003e\u003c/span\u003e() {\n            // 如果Dep.target存在，则进行依赖收集\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (Dep.target) {\n                dep.depend()\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (childOb) {\n                    childOb.dep.depend()\n                }\n            }\n            \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e val\n        },\n        \u003cspan class=\"hljs-built_in\"\u003eset\u003c/span\u003e: \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e metaSetter(newVal) {\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (newVal === val) \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e\n            val = newVal\n            childOb = Observer.create(newVal)\n            dep.notify()\n        }\n    })\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e可见, Watcher 把 Dep.target 设置成当前Watcher实例， 并主动调用了 getter，那么此时必然会进入 dep.depend() 函数。\ndep.depend() 实际执行了 Watcher.addDep() ：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003eWatcher.prototype.addDep = \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (dep) {\n    var id = dep.id\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!this.newDeps[id]) {\n        this.newDeps[id] = dep\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!this.deps[id]) {\n            this.deps[id] = dep\n            dep.addSub(this)\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e可以看出，Watcher 把 dep 设置为当前实例的依赖，同时 dep 设置（添加）当前 Watcher为一个订阅者。至此完成了依赖收集。\n从上面 defineReactive 中的 setter 函数也可知道，当数据改变时，Dep 进行通知 (dep.notify()), 遍历所有的订阅者（Watcher）, 将其推入异步队列，使用订阅者的update方法，批量地更新DOM。\n至此 Watcher 的工作就完成了。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e实际上，Watcher的依赖收集机制也是实现 computed properties （ 计算属性）的基础；核心都是劫持 getter , 触发通知，收集依赖。\u003c/li\u003e\n\u003cli\u003eVue.js 初期对于计算属性，强制要求开发者设定 getter 方法，后期直接在 computed 属性中搞定，对开发者很友好。\u003c/li\u003e\n\u003cli\u003e推荐看一下这篇文章：数据的关联计算。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch2 class=\"heading\"\u003eVue.js的其他黑魔法\u003c/h2\u003e\n\u003cp\u003e由于篇幅所限，本文讨论的内容主要在Observer, Compiler, Watcher 这些核心模块上；但实际上，Vue.js 源码（或历史源码）中还有大量的其他优秀实现，如：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ebatcher 异步队列\u003c/li\u003e\n\u003cli\u003ev-for 中的DOM diff算法\u003c/li\u003e\n\u003cli\u003eexp parser 曾经借鉴了 artTemplate 模板引擎\u003c/li\u003e\n\u003cli\u003etemplate parser 借鉴了 jquery\u003c/li\u003e\n\u003cli\u003etransition过渡系统设计\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e等等。其他的代码解耦、工程化、测试用例等也是非常好的学习例子。\n此外，如果是对 Vue.js 的源码演进过程比较熟悉的同学，就会发现 Vue.js 的核心思想是（借用尤大自己的表述）：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e“把高大上的思想变得平易近人”\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e从框架概念、开发体验、api设计、全家桶设计等多个方面，Vue.js 都不断地往友好和简洁方向努力，这也是现在这么火爆的原因吧。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e如何阅读开源项目的源码？\u003c/h2\u003e\n\u003cp\u003e最后，想把一些读源码的体验和各位同学分享：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e不要一上来就看最新版本的实现，因为很难看懂。反而去看最初的实现，容易了解作者的核心理念。\u003c/li\u003e\n\u003cli\u003e带着问题和测试用例去看源码。\u003c/li\u003e\n\u003cli\u003e多使用调试工具，跑各种测试流程，光看就能看懂…除非你是人肉编译机。\u003c/li\u003e\n\u003cli\u003e找一个（或多个）小伙伴和你一起看源码，多交流，效果比一个人好很多。\u003c/li\u003e\n\u003cli\u003e持之以恒，如果不保持阅读持续性，很容易遗忘和失去学习兴趣。\u003c/li\u003e\n\u003cli\u003e持续性地总结，好记性不如烂笔头，真正从你自己总结出来的，才是被你吸收的知识。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e以上，共勉。\u003c/p\u003e\n","buildTime":"1514464915.5152","__v":0}
{"_id":{"$oid":"5a44e6c5decf092514b3b414"},"id":"5a439fd7518825455f2f91a7","author":{"$oid":"5a43938e51fb4902b0661511"},"title":"Parcel Vs Webpack","meta":{"likeCount":0},"tag":["Webpack"],"comment":[],"content":"\u003cblockquote\u003e\n\u003cp\u003eAD：\u003cstrong\u003e美团成都研发中心正在招聘大量\u003c/strong\u003e Web 前端、iOS、Android、Java 后端、QA，技术牛、待遇好、发展前景大、生活舒适，有意者请邮件 gwuhaolin@icloud.com\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e爱折腾的前端圈时常会有新轮子诞生，只要是好东西就能快速获得大量关注，资历再好的大哥只要不如新人也很快会被替代。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e横空出世的\u003ca target=\"_blank\" href=\"https://parceljs.org/\"\u003eParcel\u003c/a\u003e近日成为了前端圈的又一大热点，在短短几周内就获得了13K的Star。\n作为前端构建工具新人的Parcel为什么能在短期内获得这么多赞同？他和老大哥Webpack比起来到底有什么优势呢？\u003c/p\u003e\n\u003cp\u003e我花了6个月的时间写了一本全面介绍Webpack的图书\u003ca target=\"_blank\" href=\"http://webpack.wuhaolin.cn/\"\u003e《深入浅出 Webpack》\u003c/a\u003e近日刚出版，感觉被新出的Parcel给腰斩了。\n但本文将本着公平公正的心态来详细对比一下他两，让你能明白他们直接的异同和优缺点对比，好决定是选Parcel还是Webpack。\u003c/p\u003e\n\u003cp\u003e为了对比他两，我们从实际出发举一个实战项目为例子，分别用Parcel和Webpack去实现，实战项目要求如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e项目采用TypeScript+React+SCSS；\u003c/li\u003e\n\u003cli\u003e项目采用了\u003ca target=\"_blank\" href=\"https://ant.design\"\u003eAntd\u003c/a\u003e UI组件库，但要做到按需加载只用到了的组件，而不是所有组件都打包进去；\u003c/li\u003e\n\u003cli\u003e项目使用了\u003ca target=\"_blank\" href=\"https://lodash.com\"\u003eLodash\u003c/a\u003e库，用于检查构建是否有剔除无用代码的能力(TreeShaking)；\u003c/li\u003e\n\u003cli\u003e构建需要支持模块热替换功能，以提高开发效率；\u003c/li\u003e\n\u003cli\u003e支持SourceMap，以方便调试；\u003c/li\u003e\n\u003cli\u003e对比他们的首次启动速度和监听变化时的构建速度；\u003c/li\u003e\n\u003cli\u003e在生成环境下需要压缩JS、CSS，CSS需要提取到单独到文件，并对比他们在生产环境下构建出文件大小；\u003c/li\u003e\n\u003cli\u003e需要生成自动会加载对应资源的HTML文件；\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 class=\"heading\"\u003eParcel让人眼前一亮\u003c/h3\u003e\n\u003cp\u003e在用了很久Webpack后用Parcel的感觉就像用了很久Android机后用iPhone，不用再去操心细节和配置，大多数时候Parcel刚刚够用而且用的很舒服。\u003c/p\u003e\n\u003cp\u003e用Parcel去完成以上项目的要求，我只是专心去写项目页面所必须的代码，Parcel智能快速的帮我构建出了能正常运行的结果。\u003c/p\u003e\n\u003cp\u003e以下是Parcel让我心动的点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eParcel能做到无配置完成以上项目构建要求；\u003c/li\u003e\n\u003cli\u003eParcel内置了常见场景的构建方案及其依赖，无需再安装各种依赖；\u003c/li\u003e\n\u003cli\u003eParcel能以HTML为入口，自动检测和打包依赖资源；\u003c/li\u003e\n\u003cli\u003eParcel默认支持模块热替换，真正的开箱即用；\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e而反观Webpack，比Parcel要麻烦很多：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e需要写\u003ca target=\"_blank\" href=\"https://github.com/gwuhaolin/parcel-vs-webpack/blob/master/webpack.config.js\"\u003e一堆配置\u003c/a\u003e；\u003c/li\u003e\n\u003cli\u003e需要再安装\u003ca target=\"_blank\" href=\"https://github.com/gwuhaolin/parcel-vs-webpack/blob/master/package.json\"\u003e一堆依赖\u003c/a\u003e；\u003c/li\u003e\n\u003cli\u003e不能简单的自动生成HTML；\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这个项目我用Parcel时花在构建配置上的时间不到一分钟，而用Webpack构建时花了5分钟去配置。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003eParcel还需要时间去打磨\u003c/h3\u003e\n\u003cp\u003e通过以上项目实践，发现Parcel目前有如下明显的缺点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e不支持SourceMap\u003c/strong\u003e：在开发模式下，Parcel也不会输出SourceMap，目前只能去调试可读性极低的代码；\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e不支持剔除无效代码(TreeShaking)\u003c/strong\u003e：很多时候我们只用到了库中的一个函数，结果Parcel把整个库都打包了进来；\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e一些依赖会让Parcel出错\u003c/strong\u003e：当你的项目依赖了一些Npm上的模块时，有些Npm模块会让Parcel运行错误；\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 class=\"heading\"\u003eParcel需要为零配置付出代价\u003c/h3\u003e\n\u003cp\u003e零配置其实是把各种常见的场景做为默认值来实现的，这虽然能节省很多工作量，快速上手，但这同时会带来一些问题：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e不守规矩的node_module\u003c/strong\u003e：有些依赖的库在发布到Npm上时可能不小心把\u003ccode\u003e.babelrc\u003c/code\u003e \u003ccode\u003epostcss.config.js\u003c/code\u003e \u003ccode\u003etsconfig.json\u003c/code\u003e这些配置文件也一起发布上去了，\n由于目前Parcel只要在目录中发现这些配置文件就会认为该项目中的代码需要被处理。例如mini-store这个库中就把\u003ccode\u003e.babelrc\u003c/code\u003e文件发布到了Npm上，项目依赖的本来是lib中已经编译成了ES5的JS代码了，但Parcel还会去用Babel处理一遍。\nNpm官方并没有规定发布到Npm上的包需要符合哪些规范，这会让Parcel很为难。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e不灵活的配置\u003c/strong\u003e：零配置的Parcel关闭了很多配置项，在一些需要的配置的场景下无法改变。例如：\n\u003cul\u003e\n\u003cli\u003e无法控制对部分文件的特殊处理，以实现诸如按需加载这样的需求；\u003c/li\u003e\n\u003cli\u003e无法控制\u003ca target=\"_blank\" href=\"http://webpack.wuhaolin.cn/2%E9%85%8D%E7%BD%AE/2-2Output.html\"\u003e输出文件名的Hash值和名称\u003c/a\u003e；\u003c/li\u003e\n\u003cli\u003e无法控制构建输出目录结构；\u003c/li\u003e\n\u003cli\u003e无法\u003ca target=\"_blank\" href=\"http://webpack.wuhaolin.cn/2%E9%85%8D%E7%BD%AE/2-4Resolve.html\"\u003e映射路径以缩短导入语句\u003c/a\u003e；\u003c/li\u003e\n\u003cli\u003eHTTP开发服务器不支持\u003ca target=\"_blank\" href=\"http://webpack.wuhaolin.cn/2%E9%85%8D%E7%BD%AE/2-6DevServer.html\"\u003eHistoryApi\u003c/a\u003e；\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 class=\"heading\"\u003eParcel使用场景受限\u003c/h3\u003e\n\u003cp\u003e目前Parcel\u003cstrong\u003e只能用来构建用于运行在浏览器中的网页\u003c/strong\u003e，这也是他的出发点和专注点。\n在软件行业不可能存在即使用简单又可以适应各种场景的方案，就算所谓的人工智能也许能解决这个问题，但人工智能不能保证100%的正确性。\u003c/p\u003e\n\u003cp\u003e反观Webpack除了用于构建网页，还可以做：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"http://webpack.wuhaolin.cn/3%E5%AE%9E%E6%88%98/3-13%E6%9E%84%E5%BB%BANpm%E6%A8%A1%E5%9D%97.html\"\u003e打包发布到Npm上的库\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"http://webpack.wuhaolin.cn/3%E5%AE%9E%E6%88%98/3-11%E6%9E%84%E5%BB%BA%E5%90%8C%E6%9E%84%E5%BA%94%E7%94%A8.html\"\u003e构建Node.js应用(同构应用)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"http://webpack.wuhaolin.cn/3%E5%AE%9E%E6%88%98/3-12%E6%9E%84%E5%BB%BAElectron%E5%BA%94%E7%94%A8.html\"\u003e构建Electron应用\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"http://webpack.wuhaolin.cn/3%E5%AE%9E%E6%88%98/3-14%E6%9E%84%E5%BB%BA%E7%A6%BB%E7%BA%BF%E5%BA%94%E7%94%A8.html\"\u003e构建离线应用(ServiceWorkers)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 class=\"heading\"\u003e构建速度和输出文件大小对比\u003c/h3\u003e\n\u003cp\u003e分别去用Parcel和Webpack构建以上项目，收集的数据如下：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e数据项\u003c/th\u003e\n\u003cth\u003eParcel\u003c/th\u003e\n\u003cth\u003eWebpack\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e生成环境构建时间\u003c/td\u003e\n\u003ctd\u003e8.310s\u003c/td\u003e\n\u003ctd\u003e9.58s\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e开发环境启动时间\u003c/td\u003e\n\u003ctd\u003e5.42s\u003c/td\u003e\n\u003ctd\u003e8.06s\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e监听变化构建时间\u003c/td\u003e\n\u003ctd\u003e3.17s\u003c/td\u003e\n\u003ctd\u003e2.87s\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e生成环境输出JS文件大小\u003c/td\u003e\n\u003ctd\u003e544K\u003c/td\u003e\n\u003ctd\u003e274K\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e生成环境输出CSS文件大小\u003c/td\u003e\n\u003ctd\u003e23K\u003c/td\u003e\n\u003ctd\u003e23K\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e从以上数据可以看出：\u003cstrong\u003eParcel构建速度快，但Parcel输出文件大\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e导致Parcel构建速度快的原因和iOS比Android用起来更流畅的原因类似：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eParcel因为一体化内置，所以集成和优化的更好，而Webpack通过插件和Loader机制去让第三方扩展这会拉低性能；\u003c/li\u003e\n\u003cli\u003eParcel内置多进程并行构建，而Webpack默认是单进程构建（\u003ca target=\"_blank\" href=\"http://webpack.wuhaolin.cn/4%E4%BC%98%E5%8C%96/4-3%E4%BD%BF%E7%94%A8HappyPack.html\"\u003eWebpack也支持多进程\u003c/a\u003e）；\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e导致Parcel输出JS文件大的原因在于：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e不支持TreeShaking\u003c/li\u003e\n\u003cli\u003e构建出的JS中出现了所有文件的名称，如图：\n\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/1609828804675828?w=2206\u0026amp;h=546\u0026amp;f=png\u0026amp;s=307152\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e以上\u003ca target=\"_blank\" href=\"https://github.com/gwuhaolin/parcel-vs-webpack\"\u003e项目完整源码可下载\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 class=\"heading\"\u003e总结\u003c/h3\u003e\n\u003cp\u003e现阶段的Parcel就像beta版的iPhone，看上去很美好但还不能用于生成环境，如果你现在就把Parcel用于生成环境，相信我你一定会踩很多坑。\n踩坑不要紧，要命的是无法在网上找到解决方法以快速解决问题。\u003c/p\u003e\n\u003cp\u003e我不是不鼓励大家使用Parcel，历史总需要先驱去推动，就像乔布斯义无反顾的引领了一个时代，我们也需要去实践Parcel，坑都是一个个填平的，所以我鼓励大家在一些个人小项目中使用Parcel。\u003c/p\u003e\n\u003cp\u003e如果Parcel能解决上面提到的这些问题，我会毫不犹豫的在我的下一个项目中使用他。\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://wuhaolin.cn/2017/12/27/Parcel%20Vs%20Webpack/\"\u003e阅读原文\u003c/a\u003e\u003c/p\u003e\n","buildTime":"1514464854.0356","__v":0}
{"_id":{"$oid":"5a44e82194b6eb2020cc0867"},"id":"5a44880a6fb9a0451d41c70e","author":{"$oid":"5a44e82194b6eb2020cc0863"},"title":"论响应式 HTTP Client 在前端的应用","meta":{"likeCount":0},"tag":["前端","HTTP"],"comment":[],"content":"\u003cp\u003e喵, 突然想发一话题, 正如标题所言, 我想讨论一下前端发展到现在, 在 ajax 异步请求的一些设计.\u003c/p\u003e\u003cp\u003e一枚 javaer 在谈论 javascript 的东西, 希望不会被打. = =\u003c/p\u003e\u003cp\u003e \u003cbr\u003e\u003c/p\u003e\u003cp\u003e在编写前端网页时, 会经常用到用异步请求来满足各种需求。那么我们是怎么做的？\u003c/p\u003e\u003cp\u003e其实先想想我们在获取数据时, 真正想做的是什么？\u003c/p\u003e\u003cp\u003e可能仅仅是 调用api -\u0026gt; 传参数 -\u0026gt; 获取返回值,  然后继续我本地的流程.\u003c/p\u003e\u003cp\u003e这就是我们仅仅关心的事.\u003c/p\u003e\u003cp\u003e \u003cbr\u003e\u003c/p\u003e\u003cp\u003e但是在十几年前的恐龙时代, 所有的浏览器只提供一个 XMLHttpRequest 对象, 里面含括了所有关于 Http 请求的设置.\u003c/p\u003e\u003cp\u003e很丰富, 但是也很痛苦, 因为发起一个请求需要设置大量的参数, 写一大坨无关痛痒的代码, 仅仅是为了发起请求并且获取结果.\u003c/p\u003e\u003cp\u003e后来 JQuery 出现了( 原谅我没玩过其他比如 prototype 这种前端框架, 我是个职业后台 ), $.ajax 简化了好多参数,\u003c/p\u003e\u003cp\u003e但是时代也在进步, 这时候又出来问题, 简单列几个痛点:\u003c/p\u003e\u003col\u003e\u003cli\u003e怎么处理回调地狱( callback hell )?\u003c/li\u003e\u003cli\u003e一个网页可能存在多个异步请求, 怎么管理请求, 避免散落一地?\u003c/li\u003e\u003cli\u003e我想在数据返回的时候做个拦截处理怎么办? \u003c/li\u003e\u003cli\u003e同理, 请求前想做拦截处理怎么办?\u003c/li\u003e\u003cli\u003e怎么管理以上的逻辑?\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e后来近几年 es6 遍地开花, 出现了 Promise / fetch 这种专治老司机各种不服的 API, 再有后者 es7 推出的 async/await 直接把回调地狱打进了历史教科书, 但是后面四个问题依然存在.\u003c/p\u003e\u003cp\u003e \u003cbr\u003e\u003c/p\u003e\u003cp\u003e然后我看到了 axios 框架, 我看了一下 github 里面的教程, 好好好, 不错, 该有的都有, 但是对于我这种用惯响应式客户端的挑剔鬼而言, 是不是可以再做得更彻底一些?\u003c/p\u003e\u003cp\u003e比如 java 的 retrofit, 以及 feign , 都是响应式客户端的教科书, 而我依然只想做一件事,  带着参数调用 api -\u0026gt; 获取参数, 完事.\u003c/p\u003e\u003cp\u003e最后还能有统一的异常处理派发, 不至于散落一地, 简而言之, 集中式管理.\u003c/p\u003e\u003cp\u003e \u003cbr\u003e\u003c/p\u003e\u003cp\u003e最后参考了 retrofit 项目, 写了一个 retrofitjs 工具, 来看看这又是怎么玩的( 不要脸的我照搬了 springMVC 的注解 (^○^) ):\u003cbr\u003e\u003c/p\u003e\u003cp\u003e首先是定义, 写出你需要的接口. ( 这是 TypeScript demo, 谢谢 )\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e@ResponseBody()\n@RequestMapping( \u003cspan class=\"hljs-string\"\u003e\"/user\"\u003c/span\u003e )\nclass UserDetailClient {\n    @Args(\n        \u003cspan class=\"hljs-string\"\u003e\"createStartTime\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"createEndingTime\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"updateStartTime\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"updateEndingTime\"\u003c/span\u003e,\n        \u003cspan class=\"hljs-string\"\u003e\"status\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"nickname\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"account\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"page\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"row\"\u003c/span\u003e\n    )\n    @PostMapping( \u003cspan class=\"hljs-string\"\u003e\"/query_by_multi_condition\"\u003c/span\u003e )\n    public queryByMultiCondition( createStartTime: number, createEndingTime: number,\n                                  updateStartTime: number, updateEndingTime: number,\n                                  status: number, nickname: string, account: string,\n                                  page: number, row: number ): Promise\u0026lt;any\u0026gt; {\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e \u0026lt;any\u0026gt;null;\n    }\n\n    @Args(\n        \u003cspan class=\"hljs-string\"\u003e\"createStartTime\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"createEndingTime\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"updateStartTime\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"updateEndingTime\"\u003c/span\u003e,\n        \u003cspan class=\"hljs-string\"\u003e\"status\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"nickname\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"account\"\u003c/span\u003e\n    )\n    @PostMapping( \u003cspan class=\"hljs-string\"\u003e\"/count_by_multi_condition\"\u003c/span\u003e )\n    public countByMultiCondition( createStartTime: number, createEndingTime: number,\n                                  updateStartTime: number, updateEndingTime: number,\n                                  status: number, nickname: string, account: string ): Promise\u0026lt;any\u0026gt; {\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e \u0026lt;any\u0026gt;null;\n    }\n\n    @Args( \u003cspan class=\"hljs-string\"\u003e\"id\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"status\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"name\"\u003c/span\u003e )\n    @PostMapping( \u003cspan class=\"hljs-string\"\u003e\"/update_user_detail\"\u003c/span\u003e )\n    public updateUserDetail( id: string, status: number, name: string ): Promise\u0026lt;any\u0026gt; {\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e \u0026lt;any\u0026gt;null;\n    }\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e然后初始化一个客户端:\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e retrofit = new FetchRetrofit.Builder()\n    .baseUrl( REQUEST_ADDRESS )\n    .timeout( 0 )\n    // 忽略 AuthenticationInterceptor, 还有一大坨没有贴出来\n    .addInterceptor( new AuthenticationInterceptor() )\n    .build();\n\n\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e userDetailClient: UserDetailClient = retrofit.create( UserDetailClient );\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e到现在, retrofit 变量就是一个拥有自动重试, 拦截器链, 缓存, 重定向的客户端对象了.\u003c/p\u003e\u003cp\u003e so, 做完这些事之后, 怎么搞? 我说, 就这么搞:\u003c/p\u003e\u003cpre class=\"hljs bash\"\u003e\u003ccode\u003e\u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e users = (await userDetailClient.queryByMultiCondition(\n    createStartTime, createEndingTime, updateStartTime, updateEndingTime, \n    status, nickname, account, page - 1, range\n)).body.result;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e 哟, 就是这样, 一句话, 不超过100个字符, 但已经等同于一个带有一切完备功能的异步请求.\u003c/p\u003e\u003cp\u003e我个人觉得这才是 Http 客户端该有的姿态, 简洁有力, 直戳痛点.\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e其实设计也很简单, 而且这种工具在服务端已经很成熟了, 所以在参考了 retrofit 之后, 我也自己设计了一个可用的雏形, 叫做 \u003ca href=\"https://github.com/itfinally/itfinally_frontend_project/tree/master/src/retrofitjs\"\u003eretrofitjs\u003c/a\u003e. \u003cbr\u003e\u003c/p\u003e\u003cp\u003e而在其中, 用到的特性包括 es6 的 Proxy, Decorator, 所以如果真正想用, 只能通过 babel 项目来编译\u003c/p\u003e\u003cp\u003e其次, 如果用纯 JavaScript 实现, 不知道能不能做到兼容 es5, 因为 TypeScript 编译后, es5 object 是不能继承 es6 object 的,\u003c/p\u003e\u003cp\u003e所以 TypeScript 实现的支持最多只能去到 es6.\u003c/p\u003e\u003cp\u003e其实这个项目应该更完善, 比如缓存, 重定向, 自动重发等功能都应该实现, 但是个人时间不允许, 而且我是服务端的人了, 可不能心猿意马阿 = =||  写出这文章也是为了告诉大家, 前端的异步请求还能做的更好!\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e","buildTime":"1514465300.5633","__v":0}
{"_id":{"$oid":"5a44e82194b6eb2020cc0868"},"id":"5a44d91c51882538fe6314ff","author":{"$oid":"5a44e82194b6eb2020cc085e"},"title":"react-router browserHistory刷新页面404问题解决","meta":{"likeCount":0},"tag":["React.js","服务器","Webpack","前端"],"comment":[],"content":"\u003cp\u003e使用React开发新项目时，遇见了刷新页面，直接访问二级或三级路由时，访问失败，出现404或资源加载异常的情况，本篇针对此问题进行分析并总结解决方案。\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"http://blog.codingplayboy.com/2017/12/26/react-router-browserhistory-404/\"\u003e查看个人博客\u003c/a\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e背景\u003c/h2\u003e\n\u003cp\u003e使用webpack-dev-server做本地开发服务器时，正常情况只需要简单使用\u003ccode\u003ewebpack-dev-server\u003c/code\u003e指令启动即可，但是当项目处于以下两种情况时，往往需要有嵌套路由和异步加载路由：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e我们使用react-router这种路由库构建单页面应用路由；\u003c/li\u003e\n\u003cli\u003e使用\u003ccode\u003ehtml-webpack-plugin\u003c/code\u003e插件动态将加载js的\u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e标签注入html文档；\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e这时，访问\u003ccode\u003elocalhost:9090\u003c/code\u003e是可以正常加载页面和js等文件的，但是当我们需要访问二级甚至三级路由或者刷新页面时，如\u003ccode\u003elocalhost:9090/posts/92\u003c/code\u003e时，可能会出现两种情况：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e页面加载失败，返回\u003ccode\u003eCannot Get（404）\u003c/code\u003e；\u003c/li\u003e\n\u003cli\u003e服务响应，但是没有返回webpack处理输出的html文件，导致无法加载js资源，第二种情况如图：\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"react-router-browser-history\" src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609cf06bb1bd148?w=974\u0026amp;h=298\u0026amp;f=png\u0026amp;s=20109\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e那么我们怎么处理才能正常访问，各页面路由呢？博主追踪溯源，查找文档配置后解决了问题，本篇就是对整个解决问题过程的总结。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e分析问题\u003c/h2\u003e\n\u003cp\u003e发现问题后，我们就要开始分析，解决问题了，我们判断这个问题一般是两方面原因造成：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003ereact-router路前端由配置；\u003c/li\u003e\n\u003cli\u003ewebpack-dev-server服务配置；\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 class=\"heading\"\u003ereact-router\u003c/h3\u003e\n\u003cp\u003e因为前端路由更容易确定问题，更方便分析，而且对于react-router更熟悉，所以首先去查询react-router路由库相关配置信息，发现文档中提到了使用\u003ccode\u003ebrowserHistory\u003c/code\u003e时，会创建真实的URL，处理初始\u003ccode\u003e/\u003c/code\u003e请求没有问题，但是对于跳转路由后，刷新页面或者直接访问该URL时，会发现无法正确相应，更多信息\u003ca target=\"_blank\" href=\"https://react-guide.github.io/react-router-cn/docs/guides/basics/Histories.html\"\u003e查看参考文档\u003c/a\u003e，文档中也提供了几种服务器配置解决方式：\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003eNode\u003c/h4\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e express = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'express'\u003c/span\u003e)\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e path = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'path'\u003c/span\u003e)\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e port = process.env.PORT || \u003cspan class=\"hljs-number\"\u003e8080\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e app = express()\n\n\u003cspan class=\"hljs-comment\"\u003e// 通常用于加载静态资源\u003c/span\u003e\napp.use(express.static(__dirname + \u003cspan class=\"hljs-string\"\u003e'/public'\u003c/span\u003e))\n\n\u003cspan class=\"hljs-comment\"\u003e// 在你应用 JavaScript 文件中包含了一个 script 标签\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e// 的 index.html 中处理任何一个 route\u003c/span\u003e\napp.get(\u003cspan class=\"hljs-string\"\u003e'*'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003erequest, response\u003c/span\u003e)\u003c/span\u003e{\n  response.sendFile(path.resolve(__dirname, \u003cspan class=\"hljs-string\"\u003e'public'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'index.html'\u003c/span\u003e))\n})\n\napp.listen(port)\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e\"server started on port \"\u003c/span\u003e + port)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在使用Node作为服务时，需要使用通配符\u003ccode\u003e*\u003c/code\u003e监听所有请求，返回目标html文档（引用js资源的html）。\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003eNginx\u003c/h4\u003e\n\u003cp\u003e如果使用的是nginx服务器，则只需要使用\u003ca target=\"_blank\" href=\"http://nginx.org/en/docs/http/ngx_http_core_module.html#try_files\"\u003e\u003ccode\u003etry_files\u003c/code\u003e 指令\u003c/a\u003e：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003eserver {\n  ...\n  location / {\n    try_files $uri /index.html\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 class=\"heading\"\u003eApache\u003c/h4\u003e\n\u003cp\u003e如果使用Apache服务器，则需要在项目根目录创建\u003ccode\u003e.htaccess\u003c/code\u003e文件，文件包含如下内容：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs shell\" lang=\"shell\"\u003eRewriteBase /\nRewriteRule ^index\\.html$ - [L]\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule . /index.html [L]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e以下都是针对服务器的配置，可惜的是我们目前还没引入相关服务器，只是使用了webpack-dev-server的内置服务，但是我们已经找到问题所在了，就是路由请求无法匹配返回html文档，所以接下来就该去webpack-dev-server文档中查找解决方式了。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003ewebpack-dev-server\u003c/h3\u003e\n\u003cp\u003e在这里不得不吐槽一下webpack-dev-server官方文档，博主反复看了几遍，才看清楚了问题所在，这里也分两种情况：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e没有修改\u003ccode\u003eoutput.publicPath\u003c/code\u003e，即webpack配置文件中没有声明值，属于默认情况；\u003c/li\u003e\n\u003cli\u003e设置了\u003ccode\u003eoutput.publicPath\u003c/code\u003e为自定义值；\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://webpack.github.io/docs/webpack-dev-server.html#the-historyapifallback-option\"\u003e点此查看文档\u003c/a\u003e\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003e默认情况\u003c/h4\u003e\n\u003cp\u003e默认情况下，没有修改\u003ccode\u003eoutput.publicPath\u003c/code\u003e值，只需要设置webpack-dev-server的\u003ccode\u003ehistoryApiFallback\u003c/code\u003e配置：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs json\" lang=\"json\"\u003edevServer: {\n  historyApiFallback: true\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\n\u003cp\u003eIf you are using the HTML5 history API you probably need to serve your \u003ccode\u003eindex.html\u003c/code\u003e in place of 404 responses, which can be done by setting \u003ccode\u003ehistoryApiFallback: true\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e如果你的应用使用HTML5 history API，你可能需要使用\u003ccode\u003eindex.html\u003c/code\u003e响应404或者问题请求，只需要设置g \u003ccode\u003ehistoryApiFallback: true\u003c/code\u003e即可\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch4 class=\"heading\"\u003e自定义值\u003c/h4\u003e\n\u003cblockquote\u003e\n\u003cp\u003eHowever, if you have modified \u003ccode\u003eoutput.publicPath\u003c/code\u003e in your Webpack configuration, you need to specify the URL to redirect to. This is done using the \u003ccode\u003ehistoryApiFallback.index\u003c/code\u003e option\u003c/p\u003e\n\u003cp\u003e如果你在webpack配置文件中修改了 \u003ccode\u003eoutput.publicPath\u003c/code\u003e 值，那么你就需要声明请求重定向，配置\u003ccode\u003ehistoryApiFallback.index\u003c/code\u003e 值。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode class=\"hljs json\" lang=\"json\"\u003e// output.publicPath: '/assets/'\nhistoryApiFallback: {\n  index: '/assets/'\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 class=\"heading\"\u003eProxy\u003c/h4\u003e\n\u003cp\u003e发现使用以上方式，并不能完全解决我的问题，总会有路由请求响应异常，于是博主继续查找更好的解决方案：\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://webpack.github.io/docs/webpack-dev-server.html#bypass-the-proxy\"\u003e点此查看文档\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe proxy can be optionally bypassed based on the return from a function. The function can inspect the HTTP request, response, and any given proxy options. It must return either \u003ccode\u003efalse\u003c/code\u003e or a URL path that will be served \u003cem\u003einstead\u003c/em\u003e of continuing to proxy the request.\u003c/p\u003e\n\u003cp\u003e代理提供通过函数返回值响应请求方式，针对不同请求进行不同处理，函数参数接收HTTP请求和响应体，以及代理配置对象，这个函数必须返回false或URL路径，以表明如何继续处理请求，返回URL时，源请求将被代理到该URL路径请求。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode class=\"hljs json\" lang=\"json\"\u003eproxy: {\n  '/': {\n    target: 'https://api.example.com',\n    secure: false,\n    bypass: function(req, res, proxyOptions) {\n      if (req.headers.accept.indexOf('html') !== -1) {\n        console.log('Skipping proxy for browser request.');\n        return '/index.html';\n      }\n    }\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e如上配置，可以监听\u003ccode\u003ehttps://api.example.com\u003c/code\u003e域下的\u003ccode\u003e/\u003c/code\u003e开头的请求（等效于所有请求），然后判断请求头中\u003ccode\u003eaccept\u003c/code\u003e字段是否包含\u003ccode\u003ehtml\u003c/code\u003e，若包含，则代理请求至\u003ccode\u003e/index.html\u003c/code\u003e，随后将返回index.html文档至浏览器。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e解决问题\u003c/h2\u003e\n\u003cp\u003e综合以上方案，因为在webpack配置中修改了\u003ccode\u003eoutput.publicPath\u003c/code\u003e为\u003ccode\u003e/assets/\u003c/code\u003e，所以博主采用webpack-dev-server Proxy代理方式解决了问题：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs json\" lang=\"json\"\u003econst PUBLICPATH = '/assets/'\n...\nproxy: {\n  '/': {\n    bypass: function (req, res, proxyOptions) {\n      console.log('Skipping proxy for browser request.')\n      return `${PUBLICPATH}/index.html`\n    }\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e监听所有前端路由，然后直接返回\u003ccode\u003e${PUBLICPATH}/index.html\u003c/code\u003e，\u003ccode\u003ePUBLICPATH\u003c/code\u003e就是设置的\u003ccode\u003eoutput.publicPath\u003c/code\u003e值。\u003c/p\u003e\n\u003cp\u003e另外，博主总是习惯性的声明，虽然不设置该属性也能满足预期访问效果：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs json\" lang=\"json\"\u003ehistoryApiFallback: true\n\u003c/code\u003e\u003c/pre\u003e","buildTime":"1514465266.2634","__v":0}
{"_id":{"$oid":"5a44e82194b6eb2020cc0869"},"id":"5a43b6da5188257d167a7aef","author":{"$oid":"5a44e82194b6eb2020cc0862"},"title":"[译]在 React \u0026 Redux 中使用 AJAX 轮询","meta":{"likeCount":0},"tag":["掘金翻译计划","前端","前端框架","React.js","Redux","Ajax","Facebook"],"comment":[],"content":"\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e原文地址：\u003ca target=\"_blank\" href=\"http://notjoshmiller.com/ajax-polling-in-react-with-redux/\"\u003eAJAX POLLING IN REACT WITH REDUX\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e原文作者：\u003ca target=\"_blank\" href=\"http://notjoshmiller.com/\"\u003eJosh M\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e译文出自：\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner\"\u003e掘金翻译计划\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e本文永久链接：\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner/blob/master/TODO/ajax-polling-in-react-with-redux.md\"\u003ehttps://github.com/xitu/gold-miner/blob/master/TODO/ajax-polling-in-react-with-redux.md\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e译者：\u003ca target=\"_blank\" href=\"https://github.com/lcx-seima\"\u003e刘嘉一\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e校对者：\u003ca target=\"_blank\" href=\"https://github.com/yoyoyohamapi\"\u003eyoyoyohamapi\u003c/a\u003e，\u003ca target=\"_blank\" href=\"https://github.com/FateZeros\"\u003eFateZeros\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003e更新：\u003c/strong\u003e 查看最新关于使用 redux-saga 进行轮询的文章：\u003ca target=\"_blank\" href=\"http://notjoshmiller.com/ajax-polling-part-2-sagas/\"\u003ehttp://notjoshmiller.com/ajax-polling-part-2-sagas/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e正如生活不总是给予你所需之物，你所用的 API 也不总是支持流式事件。因此，当你需要把一些有时序依赖的状态从服务端同步到客户端时，一个常用的 “曲线救国” 方法就是使用 AJAX 进行接口轮询。我们大部分人都知道使用 \u003ccode\u003esetInterval\u003c/code\u003e 并不是处理轮询的 “最佳人选”，不过它的堂兄 \u003ccode\u003esetTimeout\u003c/code\u003e 配合 \u003ca target=\"_blank\" href=\"http://stackoverflow.com/questions/14027005/simple-long-polling-example-with-javascript-and-jquery\"\u003e递归解法\u003c/a\u003e 却可以大展身手。\u003c/p\u003e\n\u003cp\u003eReact \u0026amp; Redux 为我们提供了响应式的数据流，我们如何才能使普通的轮询方法与其和谐共处？RxJS 以及其他 Observable 类库是处理轮询的不错选择，不过除非你的项目已经集成了 Observable 类库，否则仅为解决轮询而引入相关类库显得并不值当。当前通过结合 React 组件的生命周期方法和 Redux 的 Action 就已经足够处理 AJAX 轮询，下面来看看如何得解？\u003c/p\u003e\n\u003cp\u003e首先通过 Redux 的 Reducer 来说明当前 State：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e initialState = {  \n    \u003cspan class=\"hljs-attr\"\u003edata\u003c/span\u003e: {},\n    \u003cspan class=\"hljs-attr\"\u003eisFetching\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\n};\n\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003edata\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003estate = initialState, action\u003c/span\u003e) \u003c/span\u003e{  \n    \u003cspan class=\"hljs-keyword\"\u003eswitch\u003c/span\u003e (action.type) {\n    \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e DATA_FETCH_BEGIN: {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e { ...state, \u003cspan class=\"hljs-attr\"\u003eisFetching\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e };\n    }\n    \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e DATA_FETCH_SUCCESS: {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e { \u003cspan class=\"hljs-attr\"\u003eisFetching\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003edata\u003c/span\u003e: { ...state.data, action.payload }};\n    }\n    \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e DATA_FETCH_ERROR: {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e { ...state, \u003cspan class=\"hljs-attr\"\u003eisFetching\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e };\n    }\n    \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e:\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e state;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我不会在这里去讲解如何处理 Redux 中的异步 Action 创建函数，想更好地了解这方面知识请参考 Redux 文档中的异步示例。 现在只需假设我们已有相关的 Redux 中间件来处理本文提到的各种 Action 。我会使用与 \u003ca target=\"_blank\" href=\"https://github.com/rackt/redux/tree/master/examples/real-world\"\u003ereal-world example\u003c/a\u003e（译注：原文链接的仓库已不存在，可以参考 Redux 文档中同名例子）中相似形式的 Action 创建函数。\u003c/p\u003e\n\u003cp\u003e对应上方的数据模型，我们的 Action 创建函数可能为：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003edataFetch\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{  \n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e {\n    [CALL_API]: {\n      \u003cspan class=\"hljs-attr\"\u003etypes\u003c/span\u003e: [DATA_FETCH_BEGIN, DATA_FETCH_SUCCESS, DATA_FETCH_ERROR],\n      \u003cspan class=\"hljs-attr\"\u003eendpoint\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'api/data/'\u003c/span\u003e\n    }\n  };\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e回到最初的问题，让我们想想你会如何实现 API 接口的轮询。你会把轮询的定时器设置在 Reducer 中？还是 Action 创建函数里？或许是中间件里？如果把定时器放到 Smart 组件（译注：参看 \u003ca target=\"_blank\" href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\"\u003eSmart and Dumb Components - Medium\u003c/a\u003e）中怎么样呢？我会选择在组件中设置定时器，不仅是因为组件需要控制自身的数据依赖，而且我们可以通过组件的生命周期方法控制这些定时器，看看如何做到？\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e React \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'react'\u003c/span\u003e;  \n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {connect} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'react-redux'\u003c/span\u003e;  \n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {bindActionCreators} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'redux'\u003c/span\u003e;  \n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e * \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e DataActions \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'actions/DataActions'\u003c/span\u003e;\n\n\u003cspan class=\"hljs-comment\"\u003e// 组件需要哪些 Redux 全局状态作为 props 传入？\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003emapStateToProps\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003estate\u003c/span\u003e) \u003c/span\u003e{  \n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e {\n        \u003cspan class=\"hljs-attr\"\u003edata\u003c/span\u003e: state.data.data,\n        \u003cspan class=\"hljs-attr\"\u003eisFetching\u003c/span\u003e: state.data.isFetching\n    };\n}\n\n\u003cspan class=\"hljs-comment\"\u003e// 组件需要哪些 Action 创建函数作为 props 传入？\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003emapDispatchToProps\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003edispatch\u003c/span\u003e) \u003c/span\u003e{  \n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e {\n        \u003cspan class=\"hljs-attr\"\u003edataActions\u003c/span\u003e: bindActionCreators(DataActions, dispatch)\n    };\n}\n\n@connect(mapStateToProps, mapDispatchToProps)\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppContainer\u003c/span\u003e \u003c/span\u003e{  \n    componentWillReceiveProps(nextProps) {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.props.data !== nextProps.data) {\n\n            clearTimeout(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.timeout);\n\n            \u003cspan class=\"hljs-comment\"\u003e// 你可以在这里处理获取到的数据\u003c/span\u003e\n\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!nextProps.isFetching) {\n                \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.startPoll();\n            }\n        }\n\n    }\n\n    componentWillMount() {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.props.dataActions.dataFetch();\n    }\n\n    componentWillUnmount() {\n        clearTimeout(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.timeout);\n    }\n\n    startPoll() {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.timeout = setTimeout(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e =\u0026gt;\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.props.dataActions.dataFetch(), \u003cspan class=\"hljs-number\"\u003e15000\u003c/span\u003e);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e好了，大功告成。因为上面的组件需要一些额外数据进行渲染，所以它会在挂载的时候尝试获取这些数据。 当 \u003ccode\u003edataFetch\u003c/code\u003e 发送了一个新 Action 后，我们的 Reducer 会返回新的状态， 进而触发组件的 \u003ccode\u003ecomponentWillReceiveProps\u003c/code\u003e 方法。在这个生命周期方法内会首先清除所有进行中的定时器，若当前没有进行数据请求则随即启动一个新定时器。\u003c/p\u003e\n\u003cp\u003e诚然还有很多方法可以处理这里的接口轮询问题，并且如果有任何长轮询方法可用时，此处的轮询方法便相形见绌。不过我还是希望这篇文章可以帮助阐明结合 React 生命周期方法和 Redux 数据流的处 “事” 之道。\u003c/p\u003e\n\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner\"\u003e掘金翻译计划\u003c/a\u003e 是一个翻译优质互联网技术文章的社区，文章来源为 \u003ca target=\"_blank\" href=\"https://juejin.im\"\u003e掘金\u003c/a\u003e 上的英文分享文章。内容覆盖 \u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#android\"\u003eAndroid\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#ios\"\u003eiOS\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E5%89%8D%E7%AB%AF\"\u003e前端\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E5%90%8E%E7%AB%AF\"\u003e后端\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E5%8C%BA%E5%9D%97%E9%93%BE\"\u003e区块链\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E4%BA%A7%E5%93%81\"\u003e产品\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E8%AE%BE%E8%AE%A1\"\u003e设计\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD\"\u003e人工智能\u003c/a\u003e等领域，想要查看更多优质译文请持续关注 \u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner\"\u003e掘金翻译计划\u003c/a\u003e、\u003ca target=\"_blank\" href=\"http://weibo.com/juejinfanyi\"\u003e官方微博\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://zhuanlan.zhihu.com/juejinfanyi\"\u003e知乎专栏\u003c/a\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n","buildTime":"1514465095.5691","__v":0}
{"_id":{"$oid":"5a44e82194b6eb2020cc086a"},"id":"5a43902af265da4319568eab","author":{"$oid":"5a44e82194b6eb2020cc0865"},"title":"如何优雅地在React项目中使用Redux","meta":{"likeCount":0},"tag":["React.js","Redux"],"comment":[],"content":"\u003ch2 class=\"heading\"\u003e前言\u003c/h2\u003e\n\u003chr\u003e\n\u003cp\u003e或许你当前的项目还没有到应用Redux的程度，但提前了解一下也没有坏处，本文不会安利大家使用Redux\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e概念\u003c/h2\u003e\n\u003chr\u003e\n\u003cp\u003e首先我们会用到哪些框架和工具呢？\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003eReact\u003c/h3\u003e\n\u003cp\u003eUI框架\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003eRedux\u003c/h3\u003e\n\u003cp\u003e状态管理工具，与React没有任何关系，其他UI框架也可以使用Redux\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003ereact-redux\u003c/h3\u003e\n\u003cp\u003eReact插件，作用：方便在React项目中使用Redux\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003ereact-thunk\u003c/h3\u003e\n\u003cp\u003e中间件，作用：支持异步action\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e目录结构\u003c/h2\u003e\n\u003chr\u003e\n\u003cp\u003eTips：与Redux无关的目录已省略\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e|--src\n    |-- store           \u0009  Redux目录\n        |-- actions.js\n        |-- index.js\n        |-- reducers.js\n        |-- state.js\n    |-- components      组件目录\n        |-- Test.jsx\n    |-- App.js               项目入口\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 class=\"heading\"\u003e准备工作\u003c/h2\u003e\n\u003chr\u003e\n\u003cp\u003e第1步：提供默认值，既然用Redux来管理数据，那么数据就一定要有默认值，所以我们将state的默认值统一放置在state.js文件\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-comment\"\u003e// state.js\u003c/span\u003e\n\n\u003cspan class=\"hljs-comment\"\u003e// 声明默认值\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e// 这里我们列举两个示例\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e// 同步数据：pageTitle\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e// 异步数据：infoList（将来用异步接口获取）\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e {\n    \u003cspan class=\"hljs-attr\"\u003epageTitle\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'首页'\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003einfoList\u003c/span\u003e: []\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e第2步：创建reducer，它就是将来真正要用到的数据，我们将其统一放置在reducers.js文件\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-comment\"\u003e// reducers.js\u003c/span\u003e\n\n\u003cspan class=\"hljs-comment\"\u003e// 工具函数，用于组织多个reducer，并返回reducer集合\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { combineReducers } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'redux'\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e// 默认值\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e defaultState \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./state.js'\u003c/span\u003e\n\n\u003cspan class=\"hljs-comment\"\u003e// 一个reducer就是一个函数\u003c/span\u003e\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003epageTitle\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003estate = defaultState.pageTitle, action\u003c/span\u003e) \u003c/span\u003e{\n  \u003cspan class=\"hljs-comment\"\u003e// 不同的action有不同的处理逻辑\u003c/span\u003e\n  \u003cspan class=\"hljs-keyword\"\u003eswitch\u003c/span\u003e (action.type) {\n    \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'SET_PAGE_TITLE'\u003c/span\u003e:\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e action.data\n    \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e:\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e state\n  }\n}\n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003einfoList\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003estate = defaultState.infoList, action\u003c/span\u003e) \u003c/span\u003e{\n  \u003cspan class=\"hljs-keyword\"\u003eswitch\u003c/span\u003e (action.type) {\n    \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'SET_INFO_LIST'\u003c/span\u003e:\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e action.data\n    \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e:\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e state\n  }\n}\n\n\u003cspan class=\"hljs-comment\"\u003e// 导出所有reducer\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e combineReducers({\n    pageTitle,\n    infoList\n})\n\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e第3步：创建action，现在我们已经创建了reducer，但是还没有对应的action来操作它们，所以接下来就来编写action\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-comment\"\u003e// actions.js\u003c/span\u003e\n\n\u003cspan class=\"hljs-comment\"\u003e// action也是函数\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetPageTitle\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003edata\u003c/span\u003e) \u003c/span\u003e{\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003edispatch, getState\u003c/span\u003e) =\u0026gt;\u003c/span\u003e {\n    dispatch({ \u003cspan class=\"hljs-attr\"\u003etype\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'SET_PAGE_TITLE'\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003edata\u003c/span\u003e: data })\n  }\n}\n\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetInfoList\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003edata\u003c/span\u003e) \u003c/span\u003e{\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003edispatch, getState\u003c/span\u003e) =\u0026gt;\u003c/span\u003e {\n    \u003cspan class=\"hljs-comment\"\u003e// 使用fetch实现异步请求\u003c/span\u003e\n    \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.fetch(\u003cspan class=\"hljs-string\"\u003e'/api/getInfoList'\u003c/span\u003e, {\n        \u003cspan class=\"hljs-attr\"\u003emethod\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'GET'\u003c/span\u003e,\n        \u003cspan class=\"hljs-attr\"\u003eheaders\u003c/span\u003e: {\n            \u003cspan class=\"hljs-string\"\u003e'Content-Type'\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'application/json'\u003c/span\u003e\n        }\n    }).then(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003eres\u003c/span\u003e =\u0026gt;\u003c/span\u003e {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e res.json()\n    }).then(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003edata\u003c/span\u003e =\u0026gt;\u003c/span\u003e {\n        \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e { code, data } = data\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (code === \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) {\n            dispatch({ \u003cspan class=\"hljs-attr\"\u003etype\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'SET_INFO_LIST'\u003c/span\u003e, \u003cspan class=\"hljs-attr\"\u003edata\u003c/span\u003e: data })\n        }\n    })\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e最后一步：创建store实例\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-comment\"\u003e// index.js\u003c/span\u003e\n\n\u003cspan class=\"hljs-comment\"\u003e// applyMiddleware: redux通过该函数来使用中间件\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e// createStore: 用于创建store实例\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { applyMiddleware, createStore } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'redux'\u003c/span\u003e\n\n\u003cspan class=\"hljs-comment\"\u003e// 中间件，作用：如果不使用该中间件，当我们dispatch一个action时，需要给dispatch函数传入action对象；但如果我们使用了这个中间件，那么就可以传入一个函数，这个函数接收两个参数:dispatch和getState。这个dispatch可以在将来的异步请求完成后使用，对于异步action很有用\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e thunk \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'redux-thunk'\u003c/span\u003e\n\n\u003cspan class=\"hljs-comment\"\u003e// 引入reducer\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e reducers \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./reducers.js'\u003c/span\u003e\n\n\u003cspan class=\"hljs-comment\"\u003e// 创建store实例\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e store = createStore(\n  reducers,\n  applyMiddleware(thunk)\n)\n\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e store\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e至此，我们已经完成了所有使用Redux的准备工作，接下来就在React组件中使用Redux\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e开始使用\u003c/h2\u003e\n\u003chr\u003e\n\u003cp\u003e首先，我们来编写应用的入口文件APP.js\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e React \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'react'\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e ReactDOM \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'react-dom'\u003c/span\u003e\n\n\u003cspan class=\"hljs-comment\"\u003e// 引入组件\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e TestComponent \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./components/Test.jsx'\u003c/span\u003e\n\n\u003cspan class=\"hljs-comment\"\u003e// Provider是react-redux两个核心工具之一，作用：将store传递到每个项目中的组件中\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e// 第二个工具是connect，稍后会作介绍\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Provider } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'react-redux'\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e// 引入创建好的store实例\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e store \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@/store/index.js'\u003c/span\u003e\n\n\u003cspan class=\"hljs-comment\"\u003e// 渲染DOM\u003c/span\u003e\nReactDOM.render (\n  (\n    \u003cspan class=\"xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n        {/* 将store作为prop传入，即可使应用中的所有组件使用store */}\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eProvider\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003estore\u003c/span\u003e = \u003cspan class=\"hljs-string\"\u003e{store}\u003c/span\u003e\u0026gt;\u003c/span\u003e\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eTestComponent\u003c/span\u003e /\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003eProvider\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n  ),\n  \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.getElementById(\u003cspan class=\"hljs-string\"\u003e'root'\u003c/span\u003e)\n)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e最后是我们的组件：Test.jsx\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs javascript\" lang=\"javascript\"\u003e\u003cspan class=\"hljs-comment\"\u003e// Test.jsx\u003c/span\u003e\n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e React, { Component } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'react'\u003c/span\u003e\n\n\u003cspan class=\"hljs-comment\"\u003e// connect方法的作用：将额外的props传递给组件，并返回新的组件，组件在该过程中不会受到影响\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { connect } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'react-redux'\u003c/span\u003e\n\n\u003cspan class=\"hljs-comment\"\u003e// 引入action\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { setPageTitle, setInfoList } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../store/actions.js'\u003c/span\u003e\n\n\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eTest\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eComponent\u003c/span\u003e \u003c/span\u003e{\n  \u003cspan class=\"hljs-keyword\"\u003econstructor\u003c/span\u003e(props) {\n    \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e(props)\n  }\n\n  componentDidMount () {\n    \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e { setPageTitle, setInfoList } = \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.props\n    \n    \u003cspan class=\"hljs-comment\"\u003e// 触发setPageTitle action\u003c/span\u003e\n    setPageTitle(\u003cspan class=\"hljs-string\"\u003e'新的标题'\u003c/span\u003e)\n    \n    \u003cspan class=\"hljs-comment\"\u003e// 触发setInfoList action\u003c/span\u003e\n    setInfoList()\n  }\n\n  render () {\n    \u003cspan class=\"hljs-comment\"\u003e// 从props中解构store\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e { pageTitle, infoList } = \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.props\n    \n    \u003cspan class=\"hljs-comment\"\u003e// 使用store\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e (\n      \u003cspan class=\"xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e{pageTitle}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\n        {\n            infoList.length \u0026gt; 0 ? (\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\n                    {\n                        infoList.map((item, index) =\u0026gt; {\n                            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e{item.data}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\n                        })\n                    }\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\n            ):null\n        }\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    )\n  }\n}\n\n\u003cspan class=\"hljs-comment\"\u003e// mapStateToProps：将state映射到组件的props中\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e mapStateToProps = \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003estate\u003c/span\u003e) =\u0026gt;\u003c/span\u003e {\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e {\n    \u003cspan class=\"hljs-attr\"\u003epageTitle\u003c/span\u003e: state.pageTitle,\n    \u003cspan class=\"hljs-attr\"\u003einfoList\u003c/span\u003e: state.infoList\n  }\n}\n\n\u003cspan class=\"hljs-comment\"\u003e// mapDispatchToProps：将dispatch映射到组件的props中\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e mapDispatchToProps = \u003cspan class=\"hljs-function\"\u003e(\u003cspan class=\"hljs-params\"\u003edispatch, ownProps\u003c/span\u003e) =\u0026gt;\u003c/span\u003e {\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e {\n    setPageTitle (data) {\n        \u003cspan class=\"hljs-comment\"\u003e// 如果不懂这里的逻辑可查看前面对redux-thunk的介绍\u003c/span\u003e\n        dispatch(setPageTitle(data))\n        \u003cspan class=\"hljs-comment\"\u003e// 执行setPageTitle会返回一个函数\u003c/span\u003e\n        \u003cspan class=\"hljs-comment\"\u003e// 这正是redux-thunk的所用之处:异步action\u003c/span\u003e\n        \u003cspan class=\"hljs-comment\"\u003e// 上行代码相当于\u003c/span\u003e\n        \u003cspan class=\"hljs-comment\"\u003e/*dispatch((dispatch, getState) =\u0026gt; {\n            dispatch({ type: 'SET_PAGE_TITLE', data: data })\n        )*/\u003c/span\u003e\n    },\n    setInfoList (data) {\n        dispatch(setInfoList(data))\n    }\n  }\n}\n\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e connect(mapStateToProps, mapDispatchToProps)(Test)\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003eRedux三大原则\u003c/h2\u003e\n\u003chr\u003e\n\u003cul\u003e\n\u003cli\u003e单一数据源\n整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中\u003c/li\u003e\n\u003cli\u003eState 是只读的\n唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象\u003c/li\u003e\n\u003cli\u003e使用纯函数来执行修改\n为了描述 action 如何改变 state tree ，你需要编写 reducers\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 class=\"heading\"\u003e结语\u003c/h2\u003e\n\u003chr\u003e\n\u003cp\u003e以上就是在React项目中使用Redux的简单示例，文中代码可能会有编写错误，欢迎指正，同事希望本文对大家有所帮助\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e参考\u003c/h2\u003e\n\u003chr\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"http://cn.redux.js.org/\"\u003eRedux中文文档\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e原文出处：\u003ca target=\"_blank\" href=\"http://www.guoyunfeng.com/2017/12/27/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%9C%A8react%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8redux/\"\u003e如何优雅地在React项目中使用Redux\u003c/a\u003e\u003c/p\u003e\n","buildTime":"1514464891.9652","__v":0}
{"_id":{"$oid":"5a44e82194b6eb2020cc086c"},"id":"5a44968df265da4335630fb9","author":{"$oid":"5a44e82194b6eb2020cc0861"},"title":"[译] 如何在 JavaScript 中使用 Generator？","meta":{"likeCount":0},"tag":["掘金翻译计划","JavaScript","Promise","前端"],"comment":[],"content":"\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e原文地址：\u003ca target=\"_blank\" href=\"http://blog.bloomca.me/2017/12/19/how-to-use-generators.html\"\u003eHow to Use Generators in JavaScript\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e原文作者：\u003ca target=\"_blank\" href=\"http://blog.bloomca.me/\"\u003eSeva Zaikov\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e译文出自：\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner\"\u003e掘金翻译计划\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e本文永久链接：\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner/blob/master/TODO/how-to-use-generators.md\"\u003ehttps://github.com/xitu/gold-miner/blob/master/TODO/how-to-use-generators.md\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e译者：\u003ca target=\"_blank\" href=\"https://github.com/jonjia\"\u003ejonjia\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e校对者：\u003ca target=\"_blank\" href=\"https://github.com/vuuihc\"\u003evuuihc\u003c/a\u003e \u003ca target=\"_blank\" href=\"https://github.com/congFly\"\u003econgFly\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch1 class=\"heading\"\u003e如何在 JavaScript 中使用 Generator\u003c/h1\u003e\n\u003cp\u003eGenerator 是一种非常强力的语法，但它的使用并不广泛（参见下图 twitter 上的调查！）。为什么这样呢？相比于 async/await，它的使用更复杂，调试起来也不太容易（大多数情况又回到了从前），即使我们可以通过非常简单的方式获得类似体验，但是人们一般会更喜欢 async/await。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"1513838054(1).jpg\" src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609bec14f824cc5?w=515\u0026amp;h=379\u0026amp;f=png\u0026amp;s=14737\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e然而，Generator 允许我们通过 \u003ccode\u003eyield\u003c/code\u003e 关键字遍历我们自己的代码！这是一种超级强大的语法，实际上，我们可以操纵执行过程！从不太明显的取消操作开始，让我们先从同步操作开始吧。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e我为文中提到的功能创建了一个代码仓库 —— \u003ca target=\"_blank\" href=\"https://github.com/Bloomca/obscure-generator-fns\"\u003ehttps://github.com/Bloomca/obscure-generator-fns\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 class=\"heading\"\u003e批处理 (或计划)\u003c/h2\u003e\n\u003cp\u003e执行 Generator 函数会返回一个遍历器对象，那意味着通过它我们可以同步地遍历。为什么我们想这么做？原因有可能是为了实现批处理。想象一下，我们需要下载 1000 个项目，并在表格中逐行的显示它们（不要问我为什么，假设我们不使用框架）。虽然立刻展示它们没有什么不好的，但有时这可能不是最好的解决方案 —— 也许你的 MacBook Pro 可以轻松处理它，但普通人的电脑不能（更别说手机了）。所以，这意味着我们需要用某种方式延迟执行。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e请注意，这个例子是关于性能优化，在你遇到这个问题之前，没必要这样做 —— \u003ca target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Program_optimization#When_to_optimize\"\u003e过早优化是万恶之源\u003c/a\u003e!\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// 最初的同步实现版本\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e renderItems(items) {\n  \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (item of items) {\n    renderItem(item);\n  }\n}\n\n// 函数将由我们的执行器遍历执行\n// 实际上，我们可以用相同的同步方式来执行它！\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e* renderItems(items) {\n  // 我使用 for..of 遍历方法来避免新函数的产生\n  \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (item of items) {\n    yield renderItem(item);\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e没有什么区别是吧？那么，这里的区别在于，现在我们可以在不改变源代码的情况下以不同方式运行这个函数。实际上，正如我之前提到的，没有必要等待，我们可以同步执行它。所以，来调整下我们的代码。在每个 \u003ccode\u003eyield\u003c/code\u003e 后边加一个 4 ms（JavaScript VM 中的一个心跳） 的延迟怎么样？我们有 1000 个项目，渲染将需要 4 秒 —— 还不错，假设我想在 2 秒之内渲染完毕，很容易想到的方法是每次渲染 2 个。突然使用 Promise 的解决方案将变得更加复杂 —— 我们必须要传递另一个参数：每次渲染的项目个数。通过我们的执行器，我们仍然需要传递这个参数，但好处是对我们的 \u003ccode\u003erenderItems\u003c/code\u003e 方法完全没有影响。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e runWithBatch(chunk, fn, ...args) {\n  const gen = fn(...args);\n  \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e num = 0;\n  \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e new Promise((resolve, promiseReject) =\u0026gt; {\n    callNextStep();\n\n    \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e callNextStep(res) {\n      \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e result;\n      try {\n        result = gen.next(res);\n      } catch (e) {\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e reject(e);\n      }\n      next(result);\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e next({ \u003cspan class=\"hljs-keyword\"\u003edone\u003c/span\u003e, value }) {\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003edone\u003c/span\u003e) {\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e resolve(value);\n      }\n\n      // every chunk we sleep \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e a tick\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (num++ % chunk === 0) {\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e sleep(4).then(proceed);\n      } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e proceed();\n      }\n\n      \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003eproceed\u003c/span\u003e\u003c/span\u003e() {\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e callNextStep(value);\n      }\n    }\n  });\n}\n\n// 第一个参数 —— 每批处理多少个项目\nconst items = [...];\nbatchRunner(2, \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e*() {\n  \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (item of items) {\n    yield renderItem(item);\n  }\n});\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e正如你所看到的，我们可以轻松改变每批处理项目的个数，不去考虑执行器，回到正常的同步执行方式 —— 所有这些都不会影响我们的 \u003ccode\u003erenderItems\u003c/code\u003e 方法。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e取消\u003c/h2\u003e\n\u003cp\u003e我们来考虑下传统的功能 —— 取消。在我 \u003ca target=\"_blank\" href=\"http://blog.bloomca.me/2017/12/04/how-to-cancel-your-promise.html\"\u003epromises cancellation in general\u003c/a\u003e (\u003ca target=\"_blank\" href=\"https://juejin.im/post/5a32705a6fb9a045117127fa\"\u003e译文：如何取消你的 Promise?\u003c/a\u003e) 这篇文章中已经详细谈到了。所以我会使用其中一些代码：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e runWithCancel(fn, ...args) {\n  const gen = fn(...args);\n  \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e cancelled, cancel;\n  const promise = new Promise((resolve, promiseReject) =\u0026gt; {\n    // define cancel \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e to \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e it from our fn\n    // 定义 cancel 方法，并返回它\n    cancel = () =\u0026gt; {\n      cancelled = \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n      reject({ reason: \u003cspan class=\"hljs-string\"\u003e'cancelled'\u003c/span\u003e });\n    };\n\n    onFulfilled();\n\n    \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e onFulfilled(res) {\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!cancelled) {\n        \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e result;\n        try {\n          result = gen.next(res);\n        } catch (e) {\n          \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e reject(e);\n        }\n        next(result);\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e null;\n      }\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e onRejected(err) {\n      var result;\n      try {\n        result = gen.throw(err);\n      } catch (e) {\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e reject(e);\n      }\n      next(result);\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e next({ \u003cspan class=\"hljs-keyword\"\u003edone\u003c/span\u003e, value }) {\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003edone\u003c/span\u003e) {\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e resolve(value);\n      }\n      // 假设我们总是接收 Promise，所以不需要检查类型\n      \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e value.then(onFulfilled, onRejected);\n    }\n  });\n\n  \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e { promise, cancel };\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这里最好的部分是我们可以取消所有还没来得及执行的请求（也可以给我们的执行器传递类似 \u003ca target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/AbortController\"\u003eAbortController\u003c/a\u003e 的对象参数，所以它甚至可以取消当前的请求！），而且我们没有修改过自己业务逻辑中的一行的代码。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e暂停/恢复\u003c/h2\u003e\n\u003cp\u003e另一个特殊的需求可能是暂停/恢复功能。你为什么想要这个功能？想象一下，我们渲染了 1000 行数据，而且速度非常慢，我们希望给用户提供暂停/恢复渲染的功能，这样他们就可以停止所有的后台工作读取已经下载的内容了。让我们开始吧！\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// 实现渲染的方法还是一样的\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e* \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003erenderItems\u003c/span\u003e\u003c/span\u003e() {\n  \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (item of items) {\n    yield renderItem(item);\n  }\n}\n\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e runWithPause(genFn, ...args) {\n  \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e pausePromiseResolve = null;\n  \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e pausePromise;\n\n  const gen = genFn(...args);\n\n  const promise = new Promise((resolve, reject) =\u0026gt; {\n    onFulfilledWithPromise();\n\n    \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e onFulfilledWithPromise(res) {\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (pausePromise) {\n        pausePromise.then(() =\u0026gt; onFulfilled(res));\n      } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n        onFulfilled(res);\n      }\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e onFulfilled(res) {\n      \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e result;\n      try {\n        result = gen.next(res);\n      } catch (e) {\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e reject(e);\n      }\n      next(result);\n      \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e null;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e onRejected(err) {\n      var result;\n      try {\n        result = gen.throw(err);\n      } catch (e) {\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e reject(e);\n      }\n      next(result);\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e next({ \u003cspan class=\"hljs-keyword\"\u003edone\u003c/span\u003e, value }) {\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003edone\u003c/span\u003e) {\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e resolve(value);\n      }\n      // 假设我们总是接收 Promise，所以不需要检查类型\n      \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e value.then(onFulfilledWithPromise, onRejected);\n    }\n  });\n\n  \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e {\n    pause: () =\u0026gt; {\n      pausePromise = new Promise(resolve =\u0026gt; {\n        pausePromiseResolve = resolve;\n      });\n    },\n    resume: () =\u0026gt; {\n      pausePromiseResolve();\n      pausePromise = null;\n    },\n    promise\n  };\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e调用这个执行器，可以给我们返回一个具有暂停/恢复功能的对象，所有这些都可以轻松得到，还是使用我们之前的业务代码！所以，如果你有很多\"沉重\"的请求链，需要耗费很长时间，而你想给你的用户提供暂停/恢复功能的话，你可以随意在你的代码中实现这个执行器。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e错误处理\u003c/h2\u003e\n\u003cp\u003e我们有个神秘的 \u003ccode\u003eonRejected\u003c/code\u003e 调用，这是我们这部分谈论的主题。如果我们使用正常的 async/await 或 Promise 链式写法，我们将通过 try/catch 语句来进行错误处理，如果不添加大量的逻辑代码就很难进行错误处理。通常情况下，如果我们需要以某种方式处理错误（比如重试），我们只是在 Promise 内部进行处理，这将会回调自己，可能再次回到同样的点。而且，这还不是一个通用的解决方案 —— 可悲的是，在这里甚至 Generator 也不能帮助我们。我们发现了 Generator 的局限 —— 虽然我们可以控制执行流程，但不能移动 Generator 函数的主体；所以我们不能后退一步，重新执行我们的命令。一个可行的解决方案是使用 \u003ca target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Command_pattern\"\u003ecommand pattern\u003c/a\u003e, 它告诉了我们 \u003ccode\u003eyield\u003c/code\u003e 结果的数据结构 —— 应该是我们需要执行此命令需要的所有信息，这样我们就可以再次执行它了。所以，我们的方法需要改为：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e* \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003erenderItems\u003c/span\u003e\u003c/span\u003e() {\n  \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (item of items) {\n    // 我们需要将所有东西传递出去：\n    // 方法, 内容, 参数\n    yield [renderItem, null, item];\n  }\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e正如你所看到的，这使得我们不清楚发生了什么 —— 所以，也许最好是写一些 \u003ccode\u003ewrapWithRetry\u003c/code\u003e 方法，它会检查 \u003ccode\u003ecatch\u003c/code\u003e 代码块中的错误类型并再次尝试。但是我们仍然可以做一些不影响我们功能的事情。例如，我们可以增加一个关于忽略错误的策略 —— 在 async/await 中我们不得不使用 try/catch 包装每个调用，或者添加空的 \u003ccode\u003e.catch(() =\u0026gt; {})\u003c/code\u003e 部分。有了 Generator，我们可以写一个执行器，忽略所有的错误。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e runWithIgnore(fn, ...args) {\n  const gen = fn(...args);\n  \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e new Promise((resolve, promiseReject) =\u0026gt; {\n    onFulfilled();\n\n    \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e onFulfilled(res) {\n      proceed({ data: res });\n    }\n\n    // 这些是 yield 返回的错误\n    // 我们想忽略它们\n    // 所以我们像往常一样做，但不去传递出错误\n    \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e onRejected(error) {\n      proceed({ error });\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e proceed(data) {\n      \u003cspan class=\"hljs-built_in\"\u003elet\u003c/span\u003e result;\n      try {\n        result = gen.next(data);\n      } catch (e) {\n        // 这些错误是同步错误（比如 TypeError 等）\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e reject(e);\n      }\n      // 为了区分错误和正常的结果\n      // 我们用它来执行\n      next(result);\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e next({ \u003cspan class=\"hljs-keyword\"\u003edone\u003c/span\u003e, value }) {\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003edone\u003c/span\u003e) {\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e resolve(value);\n      }\n      // 假设我们总是接收 Promise，所以不需要检查类型\n      \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e value.then(onFulfilled, onRejected);\n    }\n  });\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e关于 async/await\u003c/h2\u003e\n\u003cp\u003eAsync/await 是现在的首选语法（甚至 \u003ca target=\"_blank\" href=\"https://github.com/tj/co#co-v4\"\u003eco\u003c/a\u003e 也谈到了它 ），这也是未来。但是，Generator 也在 ECMAScript 标准内，这意味着为了使用它们，除了写几个工具函数，你不需要任何东西。我试图向你们展示一些不那么简单的例子，这些实例的价值取决于你的看法。请记住，没有那么多人熟悉 Generator，并且如果在整个代码库中只有一个地方使用它们，那么使用 Promise 可能会更容易一些 —— 但是另一方面，通过 Generator 某些问题可以被优雅和简洁的处理。\u003c/p\u003e\n\u003cp\u003e明智地选择 —— 能力越大，责任越重（蜘蛛侠 2，2004）！\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e相关文章\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e15 Dec 2017 » \u003ca target=\"_blank\" href=\"/2017/12/15/how-to-push-folder-to-github-pages.html\"\u003eHow to Push a Folder to Github Pages\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e04 Dec 2017 » \u003ca target=\"_blank\" href=\"/2017/12/04/how-to-cancel-your-promise.html\"\u003eHow to Cancel Your Promise\u003c/a\u003e (\u003ca target=\"_blank\" href=\"https://juejin.im/post/5a32705a6fb9a045117127fa\"\u003e译文：如何取消你的 Promise?\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003e17 Nov 2017 » \u003ca target=\"_blank\" href=\"/2017/11/17/git-beyond-the-basics.html\"\u003eGit Beyond the Basics\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner\"\u003e掘金翻译计划\u003c/a\u003e 是一个翻译优质互联网技术文章的社区，文章来源为 \u003ca target=\"_blank\" href=\"https://juejin.im\"\u003e掘金\u003c/a\u003e 上的英文分享文章。内容覆盖 \u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#android\"\u003eAndroid\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#ios\"\u003eiOS\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E5%89%8D%E7%AB%AF\"\u003e前端\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E5%90%8E%E7%AB%AF\"\u003e后端\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E5%8C%BA%E5%9D%97%E9%93%BE\"\u003e区块链\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E4%BA%A7%E5%93%81\"\u003e产品\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E8%AE%BE%E8%AE%A1\"\u003e设计\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD\"\u003e人工智能\u003c/a\u003e等领域，想要查看更多优质译文请持续关注 \u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner\"\u003e掘金翻译计划\u003c/a\u003e、\u003ca target=\"_blank\" href=\"http://weibo.com/juejinfanyi\"\u003e官方微博\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://zhuanlan.zhihu.com/juejinfanyi\"\u003e知乎专栏\u003c/a\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n","buildTime":"1514465294.2892","__v":0}
{"_id":{"$oid":"5a44e894d7e2d10da4e369f4"},"id":"5a4104f5f265da43052edd22","author":{"$oid":"5a44e894d7e2d10da4e369ef"},"title":"小程序“圣诞帽”的实现思路","meta":{"likeCount":0},"tag":["Canvas","微信小程序"],"comment":[],"content":"\u003cblockquote\u003e\n\u003cp\u003e这两天朋友圈被“圣诞帽”刷屏，这个小程序连微信官方都出来辟谣了，又一个现象级的玩意儿。从产品角度而言无疑是非常成功，但从技术角度而言是确实习以为常，创意很重要！简单说一下思路：获取头像，把头像画在Canvas里面，接着往Canvas里画帽子，调整帽子的参数（位置、大小、旋转），最后保存为图片。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003chr\u003e\n\u003cp\u003e先来看看效果\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608e1bbc22cf937?w=320\u0026amp;h=569\u0026amp;f=gif\u0026amp;s=2583956\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 class=\"heading\"\u003e思路\u003c/h1\u003e\n\u003ch3 class=\"heading\"\u003e1.获取用户头像\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003ewx.getUserInfo({\n    success: \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(res) {\n        var userInfo = res.userInfo\n        var avatarUrl = userInfo.avatarUrl\n  }\n})\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这里有个问题需要注意，canvas不支持网络图片，上面获取的只是头像图片地址，所以在这里要把图片下载到微信的临时目录。代码如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003ewx.downloadFile({   \n    url: userInfo.avatarUrl, \n    success: \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (res) {    \n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (res.statusCode === 200) {      \n            avatarUrl = res.tempFilePath //这里的地址是指向本地图片 \n        }     \n    }  \n})\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e获取头像这一步用的是微信现成的API 比较方便。\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 class=\"heading\"\u003e2.绘制用户头像\u003c/h3\u003e\n\u003cp\u003e此处封装了常用的方法，下方avatarImg.w和avatarImg.h是指头像的大小。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003edrawAvatar: \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (img) {\n    ctx.drawImage(img, 0, 0, avatarImg.w, avatarImg.h)\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e绘制图片使用drawImage函数\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 class=\"heading\"\u003e3.绘制帽子\u003c/h3\u003e\n\u003cp\u003e绘制帽子之前，我定义了一个对象object来保存帽子的参数\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003evar hat = { \n    url: \u003cspan class=\"hljs-string\"\u003e\"../res/hat01.png\"\u003c/span\u003e, \n    w: 40,  \n    h: 40,  \n    x: 100, \n    y: 100, \n    b: 1,//缩放的倍率\n    rotate: 0//旋转的角度\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e接下来开始绘制帽子\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003edrawHat: \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (hat) { \n    ctx.translate(hat.x, hat.y) \n    ctx.scale(hat.b, hat.b) \n    ctx.rotate(hat.rotate * Math.PI / 180)\n    ctx.translate(-hat.x, -hat.y) \n    ctx.drawImage(hat.url, hat.x - hat.w / 2, hat.y - hat.h / 2, hat.w, hat.h) \n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这里要稍微解释下，都是以帽子的中心点为原点进行缩放、旋转。\n如果初始化Canvas原点坐标在canvas的左上角（0,0），translate之后原点坐标相当于（0 + hat.x , 0 + hat.y）。\n之后针对（0 + hat.x , 0+hat.y）这个坐标进行scale和rotate\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003ectx.translate(hat.x, hat.y) \n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003ectx.scale(hat.b, hat.b) \nctx.rotate(hat.rotate * Math.PI / 180)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e下一步将原点坐标退回到初始化状态、相当于（0 + hat.x - hat.x , 0 + hat.y -hat.y）,原点坐标自然回到Canvas左上角（0,0）。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003ectx.translate(-hat.x, -hat.y) \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e还有一个问题，当以触摸点（e.touches[0].x,e.touches[0].y）绘制hat时，hat中心点并不是触摸点，hat会一直在触摸点右下方,，所以利用下方代码将hat中心点移到触摸点。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003ectx.drawImage(hat.url, hat.x - hat.w / 2, hat.y - hat.h / 2, hat.w, hat.h) \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e示意图如下：\n\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609b242e92c0180?w=500\u0026amp;h=500\u0026amp;f=jpeg\u0026amp;s=19232\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609b245299f2a0b?w=500\u0026amp;h=500\u0026amp;f=jpeg\u0026amp;s=20580\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 class=\"heading\"\u003e4.改变帽子的参数\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e移动帽子:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e moveHat: \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (e) { \n     hat.x = e.touches[0].x\n     hat.y = e.touches[0].y \n     that.drawA() \n }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e旋转帽子：\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e rotateHat: \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (e) {  \n     hat.rotate = e.detail.value    //这一块偷懒了，用slider组件 ，滑动取值\n     that.drawA() \n }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e缩放帽子：\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003escaleHat: \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (e) {  \n     hat.b = e.detail.value   \n     hat.w = 40 * hat.b    \n     hat.h = 40 * hat.b    \n     that.drawA()    ////此处用slider组件 ，滑动取值 \n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e改变帽子样式：\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003echangeHat: \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (e) {\n    hat.url = e.currentTarget.dataset.url  //改变帽子的样式   \n    that.drawA() \n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这几个方法中都有drawA(),这主要是每一次移动、旋转、缩放、改变参数时重绘画布。\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 class=\"heading\"\u003e5.Canvas导出图片\u003c/h3\u003e\n\u003cp\u003e微信官方有提供相应API\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003esaveToPhoto: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003efunction\u003c/span\u003e\u003c/span\u003e () {\n    wx.canvasToTempFilePath({  \n        x: 0,\n        y: 0,\n        width: 240,\n        height: 240,\n        destWidth: 240,\n        destHeight: 240,\n        canvasId: \u003cspan class=\"hljs-string\"\u003e'ctx'\u003c/span\u003e,\n        success: \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (res) {\n            //canvas转图片成功回调\n        }\n    })\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e最后保存到相册\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003ewx.saveImageToPhotosAlbum({\n    filePath: res.tempFilePath,\n}) \nwx.showToast({title: \u003cspan class=\"hljs-string\"\u003e'保存成功'\u003c/span\u003e})\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e基本上一个圣诞帽小程序就是这么个思路，当然还有其他方法~\u003c/p\u003e\n\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003e以上代码没做相关优化，写的比较糙，把我的思路写出来给大家看看，共同成长！\n一个射鸡狮的不归之路~\u003c/p\u003e\n\u003c/blockquote\u003e\n","buildTime":"1514465387.4941","__v":0}
{"_id":{"$oid":"5a44e894d7e2d10da4e369f6"},"id":"5a43b80df265da43176a6e4e","author":{"$oid":"5a44e82194b6eb2020cc0862"},"title":"[译]在 Redux 中使用 AJAX 轮询（二）：Saga 篇","meta":{"likeCount":0},"tag":["掘金翻译计划","Redux","Ajax"],"comment":[],"content":"\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e原文地址：\u003ca target=\"_blank\" href=\"http://notjoshmiller.com/ajax-polling-part-2-sagas/\"\u003eAJAX POLLING IN REDUX PART 2: SAGAS\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e原文作者：\u003ca target=\"_blank\" href=\"http://notjoshmiller.com/\"\u003eJosh M\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e译文出自：\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner\"\u003e掘金翻译计划\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e本文永久链接：\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner/blob/master/TODO/ajax-polling-part-2-sagas.md\"\u003ehttps://github.com/xitu/gold-miner/blob/master/TODO/ajax-polling-part-2-sagas.md\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e译者：\u003ca target=\"_blank\" href=\"https://github.com/lcx-seima\"\u003e刘嘉一\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e校对者：\u003ca target=\"_blank\" href=\"https://github.com/yoyoyohamapi\"\u003eyoyoyohamapi\u003c/a\u003e，\u003ca target=\"_blank\" href=\"https://github.com/FateZeros\"\u003eFateZeros\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e不久之前我写了一篇关于在 React 中使用 AJAX 轮询的短文，内容可以概括为如何发起和控制周期性 AJAX 请求。文中我证明了通过使用组件生命周期方法，原生 React 和 Redux 在技术上就足以解决 AJAX 轮询的控制问题。随着时间推移，在使用中我发现这个方法需要开发者非常细心地筛选和管理 \u003ccode\u003ecomponentWillReceiveProps\u003c/code\u003e 中传入的 props 。最终，我的目标变成了尽可能地清除组件中的异步逻辑。\u003c/p\u003e\n\u003cp\u003e在 Redux 生态中，已有不少管理副作用（side effect）的类库，从最基础的 \u003ca target=\"_blank\" href=\"https://github.com/gaearon/redux-thunk\"\u003eredux-thunk\u003c/a\u003e，到受 Elm 熏陶的 \u003ca target=\"_blank\" href=\"https://github.com/raisemarketplace/redux-loop\"\u003eredux-loop\u003c/a\u003e，最后还有使用 Generator 函数强力驱动的 \u003ca target=\"_blank\" href=\"https://github.com/yelouafi/redux-saga/\"\u003eredux-saga\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e理想情况下，我喜欢把所有的异步请求都放置到一个 API 中间件中，这种用法可以参考 Redux 官方实例 \u003ca target=\"_blank\" href=\"https://github.com/reactjs/redux/tree/master/examples/real-world\"\u003ereal-world example\u003c/a\u003e。若使用 thunk 会使我的 Action 创建函数被异步逻辑所污染，所以 \u003ccode\u003eredux-thunk\u003c/code\u003e 已然出局。使用 \u003ccode\u003eredux-loop\u003c/code\u003e 则会与我的中间件相冲突，作为 store 的一个 enhancer 它却修改了 store 的 signature，进而导致其下游的所有中间件都需要调整。所以综上我决定探索 \u003ccode\u003eredux-saga\u003c/code\u003e，它本质上提供给我的是在应用后台执行任务的能力。使用 \u003ccode\u003eredux-saga\u003c/code\u003e 可以保证我利用中间件集中控制异步逻辑的用法不变，同时通过设定各类不同的观察者（watcher）来触发副作用。那么如何使用 redux-sage 处理 AJAX 轮询呢？\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs bash\" lang=\"bash\"\u003e// 延时副作用的工具函数\n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e delay(millis) {  \n    const promise = new Promise(resolve =\u0026gt; {\n        \u003cspan class=\"hljs-built_in\"\u003eset\u003c/span\u003eTimeout(() =\u0026gt; resolve(\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e), millis)\n    });\n    \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e promise;\n}\n\n// 每隔 20 秒获取一次数据                                           \n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e* \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003epollData\u003c/span\u003e\u003c/span\u003e() {  \n    try {\n        yield call(delay, 20000);\n        yield put(dataFetch());\n    } catch (error) {\n        // 取消异常 -- 如果你愿意也可以捕获\n        \u003cspan class=\"hljs-built_in\"\u003ereturn\u003c/span\u003e;\n    }\n}\n\n// 等待上一次数据请求返回成功后，发起下一轮轮询\n// 如果用户登出，则取消本次未完成的轮询                                          \n\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e* \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003ewatchPollData\u003c/span\u003e\u003c/span\u003e() {  \n    \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e) {             \n        yield take(DATA_FETCH_SUCCESS);\n        yield race([\n            call(pollData),\n            take(USER_LOGOUT)\n        ]);\n    }\n}\n\n// 让各类任务在后台并行运行                       \n\u003cspan class=\"hljs-built_in\"\u003eexport\u003c/span\u003e default \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e* \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003eroot\u003c/span\u003e\u003c/span\u003e() {  \n    yield [\n        fork(watchPollData)\n        // 此处可包含其他观察者\n    ];\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这种以 sagas 存在的轮询逻辑让开发者免于处理组件中潜在的复杂生命周期。我在 race 条件中添加了 \u003ccode\u003eUSER_LOGOUT\u003c/code\u003e Action，这样可以代劳之前 \u003ccode\u003ecomponentWillUnmount\u003c/code\u003e 中 \u003ccode\u003eclearTimeout\u003c/code\u003e 的工作。当发送 logout Action 后，运行中的 \u003ccode\u003epollData\u003c/code\u003e saga 就可以被很好地中断执行。\u003c/p\u003e\n\u003cp\u003e其余涉及到的逻辑如下：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003edataFetch\u003c/code\u003e -- 它是一个 Action 创建函数，产生的 Action 会被 API 中间件拦截并处理。在中间件中会发起真正的 API 请求，并根据请求结果发出一系列后续 Action。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ewatchPollData\u003c/code\u003e -- 它是一个随应用启动并一直运行的 saga。启动后它会阻塞 saga 执行并监听 \u003ccode\u003eDATA_FETCH_SUCCESS\u003c/code\u003e Action 的发出。一旦监听到相应的 Action 被发出，它就解除阻塞继续执行后续的 \u003ccode\u003epollData\u003c/code\u003e saga。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003epollData\u003c/code\u003e -- 先阻塞 Generator 函数的执行，20秒后再调用 \u003ccode\u003edataFetch\u003c/code\u003e 并 dispatch \u003ccode\u003edataFetch\u003c/code\u003e 产生的 Action。\u003c/p\u003e\n\u003cp\u003e此处用到的 \u003ccode\u003etake\u003c/code\u003e、 \u003ccode\u003eput\u003c/code\u003e、 \u003ccode\u003erace\u003c/code\u003e、 \u003ccode\u003ecall\u003c/code\u003e 和 \u003ccode\u003efork\u003c/code\u003e 作用符，都可以在 \u003ca target=\"_blank\" href=\"http://yelouafi.github.io/redux-saga/docs/api/index.html#effect-creators\"\u003eredux-saga documentation\u003c/a\u003e 中找到。\u003c/p\u003e\n\u003cp\u003e你可以将本文的新方法与前一篇文章中在组件内做控制的方法作比较，使用 saga 后更利于预测和集中管理我的副作用。需要注意的是并不是所有的浏览器都支持 Generator 函数，如果你使用了 ES2015 和 Babel，那么它们已经提供了 Generator 函数的浏览器 polyfill 兼容支持。\u003c/p\u003e\n\u003cp\u003e现在所有的数据容器（组件）只需在挂载的时候简单地调用一次 \u003ccode\u003edataFetch()\u003c/code\u003e 即可，之后我们的 saga 就会自动接管所有的轮询工作。非常简而美吧。\u003c/p\u003e\n\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner\"\u003e掘金翻译计划\u003c/a\u003e 是一个翻译优质互联网技术文章的社区，文章来源为 \u003ca target=\"_blank\" href=\"https://juejin.im\"\u003e掘金\u003c/a\u003e 上的英文分享文章。内容覆盖 \u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#android\"\u003eAndroid\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#ios\"\u003eiOS\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E5%89%8D%E7%AB%AF\"\u003e前端\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E5%90%8E%E7%AB%AF\"\u003e后端\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E5%8C%BA%E5%9D%97%E9%93%BE\"\u003e区块链\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E4%BA%A7%E5%93%81\"\u003e产品\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E8%AE%BE%E8%AE%A1\"\u003e设计\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD\"\u003e人工智能\u003c/a\u003e等领域，想要查看更多优质译文请持续关注 \u003ca target=\"_blank\" href=\"https://github.com/xitu/gold-miner\"\u003e掘金翻译计划\u003c/a\u003e、\u003ca target=\"_blank\" href=\"http://weibo.com/juejinfanyi\"\u003e官方微博\u003c/a\u003e、\u003ca target=\"_blank\" href=\"https://zhuanlan.zhihu.com/juejinfanyi\"\u003e知乎专栏\u003c/a\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n","buildTime":"1514461018.9834","__v":0}
{"_id":{"$oid":"5a44e895d7e2d10da4e369fd"},"id":"5a444a096fb9a0450909cc9e","author":{"$oid":"5a4394d8bbcd9a0a78c8cf42"},"title":"【quickhybrid】JS端的项目实现","meta":{"likeCount":0},"tag":["API","JavaScript","前端","单元测试"],"comment":[],"content":"\u003ch2 class=\"heading\"\u003e前言\u003c/h2\u003e\n\u003cp\u003eAPI实现阶段之JS端的实现，重点描述这个项目的JS端都有些什么内容，是如何实现的。\u003c/p\u003e\n\u003cp\u003e不同于一般混合框架的只包含JSBridge部分的前端实现，本框架的前端实现包括JSBridge部分、多平台支持，统一预处理等等。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e项目的结构\u003c/h2\u003e\n\u003cp\u003e在最初的版本中，其实整个前端库就只有一个文件，里面只规定着如何实现JSBridge和原生交互部分。但是到最新的版本中，由于功能逐步增加，单一文件难以满足要求和维护，因此重构成了一整个项目。\u003c/p\u003e\n\u003cp\u003e整个项目基于\u003ccode\u003eES6\u003c/code\u003e、\u003ccode\u003eAirbnb代码规范\u003c/code\u003e，使用\u003ccode\u003egulp + rollup\u003c/code\u003e构建，部分重要代码进行了\u003ccode\u003eKarma + Mocha\u003c/code\u003e单元测试\u003c/p\u003e\n\u003cp\u003e整体目录结构如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003equickhybrid\n    |- dist             \u003cspan class=\"hljs-comment\"\u003e// 发布目录\u003c/span\u003e\n    |   |- quick.js\n    |   |- quick.h5.js\n    |- build            \u003cspan class=\"hljs-comment\"\u003e// 构建项目的相关代码\u003c/span\u003e\n    |   |- gulpfile.js\n    |   |- rollupbuild.js\n    |- src              \u003cspan class=\"hljs-comment\"\u003e// 核心源码\u003c/span\u003e\n    |   |- api          \u003cspan class=\"hljs-comment\"\u003e// 各个环境下的api实现 \u003c/span\u003e\n    |   |   |- h5       \u003cspan class=\"hljs-comment\"\u003e// h5下的api\u003c/span\u003e\n    |   |   |- native   \u003cspan class=\"hljs-comment\"\u003e// quick下的api\u003c/span\u003e\n    |   |- core         \u003cspan class=\"hljs-comment\"\u003e// 核心控制\u003c/span\u003e\n    |   |   |- ...      \u003cspan class=\"hljs-comment\"\u003e// 将核心代码切割为多个文件\u003c/span\u003e\n    |   |- inner        \u003cspan class=\"hljs-comment\"\u003e// 内部用到的代码\u003c/span\u003e\n    |   |- util         \u003cspan class=\"hljs-comment\"\u003e// 用到的工具类\u003c/span\u003e\n    |- test             \u003cspan class=\"hljs-comment\"\u003e// 单元测试相关\u003c/span\u003e\n    |   |- unit         \n    |   |   |- karma.xxx.config.js\n    |   |- xxx.spec.js\n    |   |- ...\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609ac12b2926049?w=394\u0026amp;h=640\u0026amp;f=jpeg\u0026amp;s=45606\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e代码架构\u003c/h2\u003e\n\u003cp\u003e项目代中将核心代码和API实现代码分开，核心代码相当于一个处理引擎，而各个环境下的不同API实现可以单独挂载（这里是为了方便其它地方组合不同环境下的API所以才分开的，实际上可以将native和核心代码打包到一起）\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003equick.js\nquick.h5.js\nquick.native.js\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这里需要注意，\u003ccode\u003equick.xx环境.js\u003c/code\u003e中的代码是基于\u003ccode\u003equick.js\u003c/code\u003e核心代码的（譬如里面需要用到一些特点的快速调用底层的方法）\u003c/p\u003e\n\u003cp\u003e而其中最核心的\u003ccode\u003equick.js\u003c/code\u003e代码架构如下\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003eindex\n    |- os               \u003cspan class=\"hljs-comment\"\u003e// 系统判断相关\u003c/span\u003e\n    |- promise          \u003cspan class=\"hljs-comment\"\u003e// promise支持，这里并没有重新定义，而是判断环境中是否已经支持来决定是否支持\u003c/span\u003e\n    |- error            \u003cspan class=\"hljs-comment\"\u003e// 统一错误处理\u003c/span\u003e\n    |- proxy            \u003cspan class=\"hljs-comment\"\u003e// API的代理对象，内部对进行统一预处理，如默认参数，promise支持等\u003c/span\u003e\n    |- jsbridge         \u003cspan class=\"hljs-comment\"\u003e// 与native环境下原生交互的桥梁\u003c/span\u003e\n    |- callinner        \u003cspan class=\"hljs-comment\"\u003e// API的默认实现，如果是标准的API，可以不传入runcode，内部默认采用这个实现\u003c/span\u003e\n    |- defineapi        \u003cspan class=\"hljs-comment\"\u003e// API的定义，API多平台支撑的关键，也约定着该如何拓展\u003c/span\u003e\n    |- callnative       \u003cspan class=\"hljs-comment\"\u003e// 定义一个调用通用native环境API的方法，拓展组件API（自定义）时需要这个方法调用\u003c/span\u003e\n    |- init             \u003cspan class=\"hljs-comment\"\u003e// 里面定义config，ready，error的使用\u003c/span\u003e\n    |- innerUtil        \u003cspan class=\"hljs-comment\"\u003e// 给核心文件绑定一些内部工具类，供不同API实现中使用\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e可以看到，核心代码已经被切割成很小的单元了，虽然说最终打包起来总共代码也没有多少，但是为了维护性，简洁性，这种拆分还是很有必要的\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e统一的预处理\u003c/h2\u003e\n\u003cp\u003e在上一篇\u003ccode\u003eAPI多平台的支撑\u003c/code\u003e中有提到如何基于\u003ccode\u003eObject.defineProperty\u003c/code\u003e实现一个支持多平台调用的API，实现起来的API大致是这样子的\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-built_in\"\u003eObject\u003c/span\u003e.defineProperty(apiParent, apiName, {\n    \u003cspan class=\"hljs-attr\"\u003econfigurable\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003eenumerable\u003c/span\u003e: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003eget\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eproxyGetter\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        \u003cspan class=\"hljs-comment\"\u003e// 确保get得到的函数一定是能执行的\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e nameSpaceApi = proxysApis[finalNameSpace];\n\n        \u003cspan class=\"hljs-comment\"\u003e// 得到当前是哪一个环境，获得对应环境下的代理对象\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e nameSpaceApi[getCurrProxyApiOs(quick.os)] || nameSpaceApi.h5;\n    },\n    \u003cspan class=\"hljs-attr\"\u003eset\u003c/span\u003e: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eproxySetter\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        alert(\u003cspan class=\"hljs-string\"\u003e'不允许修改quick API'\u003c/span\u003e);\n    },\n});\n\n...\n\nquick.extendModule(\u003cspan class=\"hljs-string\"\u003e'ui'\u003c/span\u003e, [{\n    \u003cspan class=\"hljs-attr\"\u003enamespace\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'alert'\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003eos\u003c/span\u003e: [\u003cspan class=\"hljs-string\"\u003e'h5'\u003c/span\u003e],\n    \u003cspan class=\"hljs-attr\"\u003edefaultParams\u003c/span\u003e: {\n        \u003cspan class=\"hljs-attr\"\u003emessage\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e,\n    },\n    runCode(message) {\n        alert(\u003cspan class=\"hljs-string\"\u003e'h5-'\u003c/span\u003e + message);\n    },\n}]);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e其中\u003ccode\u003enameSpaceApi.h5\u003c/code\u003e的值是\u003ccode\u003eapi.runCode\u003c/code\u003e，也就是说直接执行\u003ccode\u003erunCode(...)\u003c/code\u003e中的代码\u003c/p\u003e\n\u003cp\u003e仅仅这样是不够的，我们需要对调用方法的输入等做统一预处理，因此在这里，我们基于实际的情况，在此基础上进一步完善，加上\u003ccode\u003e统一预处理\u003c/code\u003e机制，也就是\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e newProxy = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eProxy\u003c/span\u003e(api, apiRuncode);\n\n\u003cspan class=\"hljs-built_in\"\u003eObject\u003c/span\u003e.defineProperty(apiParent, apiName, {\n    ...\n    get: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eproxyGetter\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        ...\n        return newProxy.walk();\n    }\n});\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我们将新的运行代码变为一个代理对象\u003ccode\u003eProxy\u003c/code\u003e，代理api.runCode，然后在get时返回代理过后的实际方法（\u003ccode\u003e.walk()\u003c/code\u003e方法代表代理对象内部会进行一次统一的预处理）\u003c/p\u003e\n\u003cp\u003e代理对象的代码如下\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eProxy\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eapi, callback\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.api = api;\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.callback = callback;\n}\n\n\u003cspan class=\"hljs-built_in\"\u003eProxy\u003c/span\u003e.prototype.walk = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ewalk\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-comment\"\u003e// 实时获取promise\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003ePromise\u003c/span\u003e = hybridJs.getPromise();\n\n    \u003cspan class=\"hljs-comment\"\u003e// 返回一个闭包函数\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e (...rest) = \u0026gt;{\n        \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e args = rest;\n\n        args[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e] = args[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e] || {};\n        \u003cspan class=\"hljs-comment\"\u003e// 默认参数的处理\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.api.defaultParams \u0026amp;\u0026amp; (args[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e] \u003cspan class=\"hljs-keyword\"\u003einstanceof\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eObject\u003c/span\u003e)) {\n            \u003cspan class=\"hljs-built_in\"\u003eObject\u003c/span\u003e.keys(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.api.defaultParams).forEach((item) = \u0026gt;{\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (args[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e][item] === \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e) {\n                    args[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e][item] = \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.api.defaultParams[item];\n                }\n            });\n        }\n\n        \u003cspan class=\"hljs-comment\"\u003e// 决定是否使用Promise\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e finallyCallback;\n\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.callback) {\n            \u003cspan class=\"hljs-comment\"\u003e// 将this指针修正为proxy内部，方便直接使用一些api关键参数\u003c/span\u003e\n            finallyCallback = \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.callback;\n        }\n\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-built_in\"\u003ePromise\u003c/span\u003e) {\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e finallyCallback \u0026amp;\u0026amp; \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003ePromise\u003c/span\u003e((resolve, reject) = \u0026gt;{\n                \u003cspan class=\"hljs-comment\"\u003e// 拓展 args\u003c/span\u003e\n                args = args.concat([resolve, reject]);\n                finallyCallback.apply(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, args);\n            });\n        }\n\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e finallyCallback \u0026amp;\u0026amp; finallyCallback.apply(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, args);\n    };\n};\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e从源码中可以看到，这个代理对象统一预处理了两件事情：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e1.对于合法的输入参数，进行默认参数的匹配\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e2.如果环境中支持Promise，那么返回Promise对象并且参数的最后加上\u003ccode\u003eresolve\u003c/code\u003e，\u003ccode\u003ereject\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e而且，后续如果有新的统一预处理（调用API前的预处理），只需在这个代理对象的这个方法中增加即可\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003eJSBridge解析规则\u003c/h2\u003e\n\u003cp\u003e前面的文章中有提到JSBridge的实现，但那时其实更多的是关注原理层面，那么实际上，定义的交互解析规则是什么样的呢？如下\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-comment\"\u003e// 以ui.toast实际调用的示例\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e// `${CUSTOM_PROTOCOL_SCHEME}://${module}:${callbackId}/${method}?${params}`\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e uri = \u003cspan class=\"hljs-string\"\u003e'QuickHybridJSBridge://ui:9527/toast?{\"message\":\"hello\"}'\u003c/span\u003e;\n\n\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (os.quick) {\n    \u003cspan class=\"hljs-comment\"\u003e// 依赖于os判断\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (os.ios) {\n        \u003cspan class=\"hljs-comment\"\u003e// ios采用\u003c/span\u003e\n        \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.webkit.messageHandlers.WKWebViewJavascriptBridge.postMessage(uri);\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n        \u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e.top.prompt(uri, \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e);\n    }\n} \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n    \u003cspan class=\"hljs-comment\"\u003e// 浏览器\u003c/span\u003e\n    warn(\u003cspan class=\"hljs-string\"\u003e`浏览器中jsbridge无效, 对应scheme: \u003cspan class=\"hljs-subst\"\u003e${uri}\u003c/span\u003e`\u003c/span\u003e);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e原生容器中接收到对于的uri后反解析即可知道调用了些什么，上述中：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eQuickHybridJSBridge\u003c/code\u003e是本框架交互的scheme标识\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003emodule\u003c/code\u003e和\u003ccode\u003emethod\u003c/code\u003e分别代表API的模块名和方法名\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eparams\u003c/code\u003e是对于方法传递的额外参数，原生容器会解析成JSONObject\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ecallbackId\u003c/code\u003e是本次API调用在H5端的回调id，原生容器执行完后，通知H5时会传递回调id，然后H5端找到对应的回调函数并执行\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e为什么要用uri的方式，因为这种方式可以兼容以前的scheme方式，如果方案切换，变动代价下（本身就是这样升级上来的，所以没有替换的必要）\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003eUA约定\u003c/h3\u003e\n\u003cp\u003e混合开发容器中，需要有一个UA标识位来判断当前系统。\u003c/p\u003e\n\u003cp\u003e这里Android和iOS原生容器统一在webview中加上如下UA标识（也就是说，如果容器UA中有这个标识位，就代表是quick环境-这也是os判断的实现原理）\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-built_in\"\u003eString\u003c/span\u003e ua = webview.getSettings().getUserAgentString();\n\nua += \u003cspan class=\"hljs-string\"\u003e\" QuickHybridJs/\"\u003c/span\u003e + getVersion();\n\n\u003cspan class=\"hljs-comment\"\u003e// 设置浏览器UA,JS端通过UA判断是否属于quick环境\u003c/span\u003e\nwebview.getSettings().setUserAgentString(ua);\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-comment\"\u003e// 获取默认UA\u003c/span\u003e\nNSString *defaultUA = [[UIWebView \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e] stringByEvaluatingJavaScriptFromString:@\u003cspan class=\"hljs-string\"\u003e\"navigator.userAgent\"\u003c/span\u003e];\n        \nNSString *version = [[NSBundle mainBundle].infoDictionary objectForKey:@\u003cspan class=\"hljs-string\"\u003e\"CFBundleShortVersionString\"\u003c/span\u003e];\n        \nNSString *customerUA = [defaultUA stringByAppendingString:[NSString stringWithFormat:@\u003cspan class=\"hljs-string\"\u003e\" QuickHybridJs/%@\"\u003c/span\u003e, version]];\n        \n[[NSUserDefaults standardUserDefaults] registerDefaults:@{@\u003cspan class=\"hljs-string\"\u003e\"UserAgent\"\u003c/span\u003e:customerUA}];\n        \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e如上述代码中分别在Android和iOS容器的UA中添加关键性的标识位。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003eAPI内部做了些什么\u003c/h2\u003e\n\u003cp\u003eAPI内部只做与本身功能逻辑相关的操作，这里有几个示例\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003equick.extendModule(\u003cspan class=\"hljs-string\"\u003e'ui'\u003c/span\u003e, [{\n    \u003cspan class=\"hljs-attr\"\u003enamespace\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'toast'\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003eos\u003c/span\u003e: [\u003cspan class=\"hljs-string\"\u003e'h5'\u003c/span\u003e],\n    \u003cspan class=\"hljs-attr\"\u003edefaultParams\u003c/span\u003e: {\n        \u003cspan class=\"hljs-attr\"\u003emessage\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e,\n    },\n    runCode(...rest) {\n        \u003cspan class=\"hljs-comment\"\u003e// 兼容字符串形式\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e args = innerUtil.compatibleStringParamsToObject.call(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, rest, \u003cspan class=\"hljs-string\"\u003e'message'\u003c/span\u003e, );\n        \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e options = args[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e];\n        \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e resolve = args[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e];\n        \n        \u003cspan class=\"hljs-comment\"\u003e// 实际的toast实现\u003c/span\u003e\n        toast(options);\n        options.success \u0026amp;\u0026amp; options.success();\n        resolve \u0026amp;\u0026amp; resolve();\n    },\n}, ...]);\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003equick.extendModule(\u003cspan class=\"hljs-string\"\u003e'ui'\u003c/span\u003e, [{\n    \u003cspan class=\"hljs-attr\"\u003enamespace\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'toast'\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003eos\u003c/span\u003e: [\u003cspan class=\"hljs-string\"\u003e'quick'\u003c/span\u003e],\n    \u003cspan class=\"hljs-attr\"\u003edefaultParams\u003c/span\u003e: {\n        \u003cspan class=\"hljs-attr\"\u003emessage\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e,\n    },\n    runCode(...rest) {\n        \u003cspan class=\"hljs-comment\"\u003e// 兼容字符串形式\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e args = innerUtil.compatibleStringParamsToObject.call(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, rest, \u003cspan class=\"hljs-string\"\u003e'message'\u003c/span\u003e);\n\n        quick.callInner.apply(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, args);\n    },\n}, ...]);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e以上是toast功能在h5和quick环境下的实现，其中，在quick环境下唯一做的就是兼容了一个字符串形式的调用，在h5环境下则是完全的实现了h5下对应的功能（promise也需自行兼容）\u003c/p\u003e\n\u003cp\u003e为什么h5中更复杂？因为quick环境中，只需要拼凑成一个JSBridge命令发送给原生即可，具体功能由原生实现，而h5的实现是需要自己完全实现的。\u003c/p\u003e\n\u003cp\u003e另外，其实在quick环境中，上述还不是最少的代码（上述加了一个兼容调用功能，所以多了几行），最少代码如下\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003equick.extendModule(\u003cspan class=\"hljs-string\"\u003e'ui'\u003c/span\u003e, [{\n    \u003cspan class=\"hljs-attr\"\u003enamespace\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e'confirm'\u003c/span\u003e,\n    \u003cspan class=\"hljs-attr\"\u003eos\u003c/span\u003e: [\u003cspan class=\"hljs-string\"\u003e'quick'\u003c/span\u003e],\n    \u003cspan class=\"hljs-attr\"\u003edefaultParams\u003c/span\u003e: {\n        \u003cspan class=\"hljs-attr\"\u003etitle\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e,\n        \u003cspan class=\"hljs-attr\"\u003emessage\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e''\u003c/span\u003e,\n        \u003cspan class=\"hljs-attr\"\u003ebuttonLabels\u003c/span\u003e: [\u003cspan class=\"hljs-string\"\u003e'取消'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'确定'\u003c/span\u003e],\n    },\n}, ...]);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e可以看到，只要是符合标准的API定义，在quick环境下的实现只需要定义些默认参数就可以了，其它的框架自动帮助实现了（同样promise的实现也在内部默认处理掉了）\u003c/p\u003e\n\u003cp\u003e这样以来，就算是标准quick环境下的API数量多，实际上增加的代码也并不多。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e关于代码规范与单元测试\u003c/h2\u003e\n\u003cp\u003e项目中采用的\u003ccode\u003eAirbnb代码规范\u003c/code\u003e并不是\u003ccode\u003e100%\u003c/code\u003e契合原版，而是基于项目的情况定制了下，但是总体上\u003ccode\u003e95%\u003c/code\u003e以上是符合的\u003c/p\u003e\n\u003cp\u003e还有一块就是单元测试，这是很容易忽视的一块，但是也挺难做好的。这个项目中，基于\u003ccode\u003eKarma + Mocha\u003c/code\u003e进行单元测试，而且并不是测试驱动，而是在确定好内容后，对核心部分的代码都进行单测。\n内部对于API的调用基本都是靠JS来模拟，对于一些特殊的方法，还需\u003ccode\u003eObject.defineProperty(window.navigator, name, prop)\u003c/code\u003e来改变window本身的属性来模拟。\n本项目中的核心代码已经达到了\u003ccode\u003e100%\u003c/code\u003e的代码覆盖率。\u003c/p\u003e\n\u003cp\u003e具体的代码这里不赘述，可以参考源码\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e返回根目录\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://github.com/quickhybrid/quickhybrid/issues/12\"\u003e【quickhybrid】如何实现一个Hybrid框架\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 class=\"heading\"\u003e源码\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003egithub\u003c/code\u003e上这个框架的实现\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://github.com/quickhybrid/quickhybrid\"\u003equickhybrid/quickhybrid\u003c/a\u003e\u003c/p\u003e\n","buildTime":"1514465080.5978","__v":0}
{"_id":{"$oid":"5a44e895d7e2d10da4e36a00"},"id":"5a43b7fa6fb9a04511716a43","author":{"$oid":"5a44e894d7e2d10da4e369e8"},"title":"技术雷达之「微前端」- 将微服务理念扩展到前端开发 | 《前端的逆袭》知乎专栏","meta":{"likeCount":0},"tag":["前端框架","架构","微服务"],"comment":[],"content":"\u003cp\u003e本文首发于\u003ca target=\"_blank\" href=\"https://zhuanlan.zhihu.com/p/32378432\"\u003e技术雷达之「微前端」- 将微服务理念扩展到前端开发\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e欢迎关注\u003ca target=\"_blank\" href=\"https://zhuanlan.zhihu.com/no-backend\"\u003e知乎专栏 —— 前端的逆袭\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e欢迎关注我的\u003ca target=\"_blank\" href=\"https://blog.jimmylv.info/\"\u003e博客\u003c/a\u003e，\u003ca target=\"_blank\" href=\"https://www.zhihu.com/people/JimmyLv\"\u003e知乎\u003c/a\u003e，\u003ca target=\"_blank\" href=\"https://github.com/JimmyLv\"\u003eGitHub\u003c/a\u003e。\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 class=\"heading\"\u003e文章大纲\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e本文共计约 7k 字，预计阅读时间 15mins\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"#title1\"\u003e微前端的缘由：单体应用与微服务架构\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"#title2\"\u003e微服务架构带来了哪些好处？\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"#title3\"\u003e那么前端的现状呢？ —— 臃肿的前端\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"#title4\"\u003e微前端的定义 - 将微服务理念扩展到前端开发\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"#title5\"\u003e拆分微前端所带来的好处\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"#title6\"\u003e微前端的核心思想\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"#title7\"\u003e微前端的可选实践方案（4 种 +）\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"#title8\"\u003e创建更小的 Apps（而不是 Components）\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"#title9\"\u003e如何组合微前端的 App 模块？\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"#title10\"\u003eOption 1: 使用后端模板引擎插入 HTML\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"#title11\"\u003eOption 1.1: 渐进式从后端进行加载\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"#title12\"\u003eOption 2: 使用 IFrame 隔离运行时\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"#title13\"\u003eOption 3: 客户端 JavaScript 异步加载\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"#title14\"\u003eOption 4: WebComponents 整合所有功能模块\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"#title15\"\u003e不同 App 模块之间如何交互？\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"#title16\"\u003eMore Options…\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"#title17\"\u003e微前端的页面优化与实例\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"#title18\"\u003e多模块页面加载问题与优化建议\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"#title19\"\u003e微前端在 AEM（CMS）项目的应用\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"#title20\"\u003e现成解决方案：Single-SPA “meta framework”\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"#title21\"\u003e总结与思考：微前端的优缺点\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"#title22\"\u003e优点\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"#title23\"\u003e缺点\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"#title24\"\u003e持续思考…\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"#title25\"\u003e参考资料\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 class=\"heading\"\u003e微前端的缘由：单体应用与微服务架构\u003c/h2\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"The Majestic Monolith\" src=\"https://user-gold-cdn.xitu.io/2017/12/27/16098869bbece6c5?w=2000\u0026amp;h=1120\u0026amp;f=png\u0026amp;s=704722\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e在传统的软件开发当中，大多数软件都是单体式应用架构的。在瞬息万变的商业时代背景下，企业必须学会适应我们这个时代的不确定性。快速试验，快速失败。更快地推出新产品和有效地改进当前产品，从而为客户提供有意义的数字体验。\u003c/p\u003e\n\u003cp\u003e而单体应用这种软件架构对于企业来说的致命缺点就是，企业对于市场的响应速度变慢。企业决策者在一年内需要做的决策数量非常有限，由于依赖关系，其响应周期往往会变得非常漫长。每当开发或升级产品，都需要在一系列体量庞大的相关服务中同时增加新功能，这就需要所有利益相关方共同努力，以同步方式进行变更。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e微服务架构带来了哪些好处？\u003c/h3\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/16098869b86e0002?w=3925\u0026amp;h=2241\u0026amp;f=png\u0026amp;s=1006724\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e假设服务边界已经被正确地定义为可独立运行的业务领域，并确保在微服务设计中遵循诸多最佳实践。那么至少会以下几个方面获得显而易见的好处：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e复杂性：服务可以更好地分离，每一个服务都足够小，完成完整的定义清晰的职责；\u003c/li\u003e\n\u003cli\u003e扩展性：每一个服务可以独立横向扩展以满足业务伸缩性，并资源的不必要消耗；\u003c/li\u003e\n\u003cli\u003e灵活性：每一个服务可以独立失败，允许每个团队决定最适合他们的技术和基础架构；\u003c/li\u003e\n\u003cli\u003e敏捷性：每一个服务都可以独立开发，测试和部署，并允许团队扩展独立部署和维护服务的交付。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e每个微服务是孤立的，独立的「模块」，它们共同为更高的逻辑目的服务。微服务之间通过 Contract 彼此沟通，每个服务都负责特定的功能。这使得每个服务都能够保持简单，简洁和可测试性。\u003c/p\u003e\n\u003cp\u003e从而微服务架构允许企业更自发地采取更深远的业务决策，因为每个微服务都是独立运作的，而且每一个管理团队可以很好地控制该服务的变更。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e那么前端的现状呢？ —— 臃肿的前端\u003c/h3\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/16098869b8108b60?w=1664\u0026amp;h=1024\u0026amp;f=png\u0026amp;s=150450\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e在前端，往往由一个前端团队创建并维护一个 Web 应用程序，使用 REST API 从后端服务获取数据。这种方式如果做得好的话，它能够提供优秀的用户体验。但主要的缺点是单页面应用（SPA）不能很好地扩展和部署。在一个大公司里，单前端团队可能成为一个发展瓶颈。随着时间的推移，往往由一个独立团队所开发的前端层越来越难以维护。\u003c/p\u003e\n\u003cp\u003e特别是一个特性丰富、功能强大的前端 Web 应用程序，却位于后端微服务架构之上。并且随着业务的发展，前端变得越来越臃肿，一个项目可能会有 90％ 的前端代码，却只有非常薄的后端，甚至这种情况在 Serverless 架构的背景下还会愈演愈烈。\u003c/p\u003e\n\u003ch2 class=\"heading\"\u003e微前端的定义 - 将微服务理念扩展到前端开发\u003c/h2\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/16098869b7b8102f?w=920\u0026amp;h=509\u0026amp;f=png\u0026amp;s=23369\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e微前端（Micro Frontends）这个术语其实就是微服务的衍生物。将微服务理念扩展到前端开发，同时构建多个完全自治的和松耦合的 App 模块（服务），其中每个 App 模块只负责特定的 UI 元素和功能。\u003c/p\u003e\n\u003cp\u003e如果我们看到微服务提供给后端的好处，那么就可以更进一步将这些好处应用到前端。与此同时，在设计微服务的时候，就可以考虑不仅要完成后端逻辑，而且还要完成前端的视觉部分。而对于微前端来说，与微服务的许多要求也是一致的：监控、日志、HealthCheck、Analytics 等等。\u003c/p\u003e\n\u003ch3 class=\"heading\"\u003e拆分微前端所带来的好处\u003c/h3\u003e\n\u003cp\u003e这样就能使各个前端团队按照自己的步调迭代，并随时准备就绪处于可发布状态，并隔离相互依赖所产生的风险，与此同时也更容易尝试新技术。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWeb 应用程序被分解成独立的特征，并且每个特征都由不同的团队拥有，前端到后端。这确保了每个功能都是独立于其他功能开发，测试和部署的。\u003c/li\u003e\n\u003cli\u003e将网站或 Web 应用程序视为由独立团队拥有的功能组合。每个团队都有一个独特的业务或关注点确定的任务。\u003c/li\u003e\n\u003cli\u003e每一个团队是跨职能的，从数据库到用户界面端到端地开发其功能/特性。\u003c/li\u003e\n\u003cli\u003e所有前端功能（身份验证，库存，购物车等）都是 Web 应用程序的一部分，并与后端（大部分时间通过 HTTP）进行通信，并将其分解为微服务。\u003c/li\u003e\n\u003cli\u003e可以同时拥有后端、前端、数据访问层和数据库，即一个服务子域所需的所有内容。\u003c/li\u003e\n\u003cli\u003e查找线上 bug、测试、框架迭代，甚至语言、代码隔离与责任和其他事情变得更容易处理。\u003c/li\u003e\n\u003cli\u003e我们不得不付出的代价是部署，但是容器（Docker 和 Rocket）以及不可变服务器使得这种情况也得到了极大的改善。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 class=\"heading\"\u003e微前端的核心思想\u003c/h3\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/16098869b848027e?w=1600\u0026amp;h=900\u0026amp;f=png\u0026amp;s=43279\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e✨ Be Technology Agnostic：每个团队都应该能够选择和升级他们的技术栈，而不必与其他团队协调。自定义元素（后面会具体提到）是隐藏实现细节的好方法，同时为其他人提供公共接口。\u003c/li\u003e\n\u003cli\u003e✨ Isolate Team Code：即使所有团队使用相同的框架，也不要共享运行时。构建独立的应用程序。不要依赖共享状态或全局变量。\u003c/li\u003e\n\u003cli\u003e✨ Establish Team Prefixes：相互约定命名隔离。为 CSS、浏览器事件、Local Storage 和 Cookies 制定命名空间，以避免冲突和明确其所有权。\u003c/li\u003e\n\u003cli\u003e✨ Favor Native Browser Features over Custom APIs：使用浏览器事件进行通信，而不是构建全局的 PubSub 系统。如果确实需要构建跨团队 API，请尽量保持简单。（与框架无关，可使用 CustomEvent）\u003c/li\u003e\n\u003cli\u003e✨ Build a Resilient Site：即使 JavaScript 失败或尚未执行，Web 应用程序的功能仍应有效。可以使用通用渲染和渐进增强来提高用户的感知性能。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 class=\"heading\"\u003e微前端的可选实践方案（4 种+）\u003c/h2\u003e\n\u003ch3 class=\"heading\"\u003e创建更小的 Apps（而不是 Components）\u003c/h3\u003e\n\u003cp\u003e首先让我们来创建一个典型 Web 应用程序的基本组件（Header、ProductList、ShoppingCart），以 Header 组件为例：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs jsx\" lang=\"jsx\"\u003e# src/App.js\nexport default () =\u0026gt;\n  \u0026lt;header\u0026gt;\n    \u0026lt;h1\u0026gt;Logo\u0026lt;/h1\u0026gt;\n    \u0026lt;nav\u0026gt;\n      \u0026lt;ul\u0026gt;\n        \u0026lt;li\u0026gt;About\u0026lt;/li\u0026gt;\n        \u0026lt;li\u0026gt;Contact\u0026lt;/li\u0026gt;\n      \u0026lt;/ul\u0026gt;\n    \u0026lt;/nav\u0026gt;\n  \u0026lt;/header\u0026gt;;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e然后需要注意的是我们会用到 Express 对刚刚创建的 React 组件进行服务器端渲染，使之成为一个 App 模块:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e# server.js\nfs.readFile(htmlPath, 'utf8', (err, html) =\u0026gt; {\n  const rootElem = '\u0026lt;div id=\"root\"\u0026gt;';\n  const renderedApp = renderToString(React.createElement(App, null));\n\n  res.send(html.replace(rootElem, rootElem + renderedApp));\n});\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e再依次创建其他 Apps 并独立部署：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://microfrontends-header.herokuapp.com/\"\u003ehttps://microfrontends-header.herokuapp.com/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://microfrontends-products-list.herokuapp.com/\"\u003ehttps://microfrontends-products-list.herokuapp.com/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://microfrontends-cart.herokuapp.com/\"\u003ehttps://microfrontends-cart.herokuapp.com/\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 class=\"heading\"\u003e如何组合微前端的 App 模块？\u003c/h3\u003e\n\u003cp\u003e在每个独立团队创建好各自的 App 模块后，我们就可以将网站或 Web 应用程序视为由各种模块的功能组合。下文将介绍多种技术实践方案来重新组合这些模块（有时作为页面，有时作为组件），而前端（不管是不是 SPA）将只需要负责路由器（Router）如何选择和决定要导入哪些模块，从而为最终用户提供一致性的用户体验。\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003eOption 1: 使用后端模板引擎插入 HTML\u003c/h4\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e# server.js\nPromise.all([\n    getContents('https://microfrontends-header.herokuapp.com/'),\n    getContents('https://microfrontends-products-list.herokuapp.com/'),\n    getContents('https://microfrontends-cart.herokuapp.com/')\n  ]).then(responses =\u0026gt;\n    res.render('index', { header: responses[0], productsList: responses[1], cart: responses[2] })\n  ).catch(error =\u0026gt;\n    res.send(error.message)\n  )\n);\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode class=\"hljs ejs\" lang=\"ejs\"\u003e#\u0026nbsp;views/index.ejs\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026lt;head\u0026gt;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026lt;meta\u0026nbsp;charset=\"utf-8\"\u0026gt;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026lt;title\u0026gt;Microfrontends\u0026nbsp;Homepage\u0026lt;/title\u0026gt;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026lt;/head\u0026gt;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026lt;body\u0026gt;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026lt;%-\u0026nbsp;header\u0026nbsp;%\u0026gt;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026lt;%-\u0026nbsp;productsList\u0026nbsp;%\u0026gt;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026lt;%-\u0026nbsp;cart\u0026nbsp;%\u0026gt;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026lt;/body\u0026gt;\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e但是，这种方案也存在弊端，即某些 App 模块可能会需要相对较长的加载时间，而在前端整个页面的渲染却要取决于最慢的那个模块。\u003c/p\u003e\n\u003cp\u003e比如说，可能 Header 模块的加载速度要比其他部分快得多，而 ProductList 则因为需要获取更多 API 数据而需要更多时间。通常情况下我们希望尽快将网页显示给用户，而在这种情况下后台加载时间就会变得更长。\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003eOption 1.1: 渐进式从后端进行加载\u003c/h4\u003e\n\u003cp\u003e当然，我们也可以通过修改一些后端代码来渐进式地（Progressive）往前端发送 HTML，但与此同时却徒增了后端复杂度，并且又将前端的渲染控制权交回了后端服务器。而且我们的优化也取决于每个模块加载的速度，若是进行优化就必须按一定顺序进行加载。\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/16098869b90abdd1?w=1162\u0026amp;h=1078\u0026amp;f=png\u0026amp;s=27761\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003eOption 2: 使用 IFrame 隔离运行时\u003c/h4\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eiframe\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ewidth\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"100%\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eheight\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"200\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"https://microfrontends-header.herokuapp.com/\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003eiframe\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eiframe\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ewidth\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"100%\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eheight\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"200\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"https://microfrontends-products-list.herokuapp.com/\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003eiframe\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003eiframe\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ewidth\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"100%\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eheight\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"200\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"https://microfrontends-cart.herokuapp.com/\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003eiframe\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我们也可以将每个子应用程序嵌入到各自的 \u003ccode\u003e\u0026lt;iframe\u0026gt;\u003c/code\u003e 中，这使得每个模块能够使用任何他们需要的框架，而无需与其他团队协调工具和依赖关系，依然可以借助于一些库或者 \u003ccode\u003eWindow.postMessageAPI\u003c/code\u003e 来进行交互。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e优点\u003c/strong\u003e：\n\u003cul\u003e\n\u003cli\u003e最强大的是隔离了组件和应用程序部分的运行时环境，因此每个模块都可以独立开发，并且可以与其他部分的技术无关\u003c/li\u003e\n\u003cli\u003e可以各自使用完全不同的前端框架，可以在 React 中开发一部分，在 Angular 中开发一部分，然后使用原生 JavaScript 开发其他部分或任何其他技术。\u003c/li\u003e\n\u003cli\u003e只要每个 iframe 来自同一个来源，消息传递也就相当直接和强大。参考文档 \u003ca target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\"\u003e\u003ccode\u003eWindow.postMessageAPI\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e缺点\u003c/strong\u003e：\n\u003cul\u003e\n\u003cli\u003eBundle 的大小非常明显，因为可能最终会多次发送相同的库，并且由于应用程序是分开的，所以在构建时也不能提取公共依赖关系。\u003c/li\u003e\n\u003cli\u003e至于浏览器的支持，基本上不可能嵌套两层以上的 iframe（\u003ccode\u003eparent - \u0026gt; iframe - \u0026gt; iframe\u003c/code\u003e）。\u003c/li\u003e\n\u003cli\u003e如果任何嵌套的框架需要能够滚动或具有 Form 表单域，那样的情况处理起来就会变得特别痛苦。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 class=\"heading\"\u003eOption 3: 客户端 JavaScript 异步加载\u003c/h4\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eloadPage\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003eelement\u003c/span\u003e) \u003c/span\u003e{\n  [].forEach.call(element.querySelectorAll(\u003cspan class=\"hljs-string\"\u003e'script'\u003c/span\u003e), \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003enonExecutableScript\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e script = \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.createElement(\u003cspan class=\"hljs-string\"\u003e\"script\"\u003c/span\u003e);\n    script.setAttribute(\u003cspan class=\"hljs-string\"\u003e\"src\"\u003c/span\u003e, nonExecutableScript.src);\n    script.setAttribute(\u003cspan class=\"hljs-string\"\u003e\"type\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"text/javascript\"\u003c/span\u003e);\n    element.appendChild(script);\n  });\n}\n\n\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.querySelectorAll(\u003cspan class=\"hljs-string\"\u003e'.load-app'\u003c/span\u003e).forEach(loadPage);\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"load-app\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003edata-url\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"header\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"load-app\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003edata-url\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"products-list\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"load-app\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003edata-url\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"cart\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e简单来说，这种方式就是在客户端浏览器通过 Ajax 加载应用程序，然后将不同模块的内容插入到对应的 \u003ccode\u003ediv\u003c/code\u003e 中，而且还必须手动克隆每个 script 的标记才能使其工作。\u003c/p\u003e\n\u003cp\u003e需要注意的是，为了避免 Javascript 和 CSS 加载顺序的问题，建议将其修改成类似于 \u003ca target=\"_blank\" href=\"https://www.facebook.com/notes/facebook-engineering/bigpipe-pipelining-web-pages-for-high-performance/389414033919/\"\u003eFacebook \u003ccode\u003ebigpipe\u003c/code\u003e\u003c/a\u003e 的解决方案，返回一个 JSON 对象 \u003ccode\u003e{ html: ..., css: [...], js: [...] }\u003c/code\u003e 再进行加载顺序的控制。\u003c/p\u003e\n\u003ch4 class=\"heading\"\u003eOption 4: WebComponents 整合所有功能模块\u003c/h4\u003e\n\u003cp\u003eWeb Components 是一个 Web 标准，所以像 Angular、React/Preact、Vue 或 Hyperapp 这样的主流 JavaScript 框架都支持它们。你可以将 Web Components 视为使用开放 Web 技术创建的可重用的用户界面小部件，也许会是 Web 组件化的未来。\u003c/p\u003e\n\u003cp\u003eWeb Components 由以下四种技术组成（尽管每种技术都可以独立使用）：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Custom_Elements\"\u003e自定义元素（Custom Elements）\u003c/a\u003e对外提供组件的标签，实现自定义标签：可以创建自己的自定义 HTML 标签和元素。每个元素可以有自己的脚本和 CSS 样式。还包括生命周期回调，它们允许我们定义正在加载的组件特定行为。\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/template\"\u003eHTML 模板（HTML \u003ccode\u003e\u0026lt;template\u0026gt;\u003c/code\u003e）\u003c/a\u003e定义组件的 HTML 模板能力：一种用于保存客户端内容的机制，该内容在页面加载时不被渲染，但可以在运行时使用 JavaScript 进行实例化。可以将一个模板视为正在被存储以供随后在文档中使用的一个内容片段。\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Shadow_DOM\"\u003e影子 DOM（Shadow DOM）\u003c/a\u003e封装组件的内部结构，并且保持其独立性：允许我们在 Web 组件中封装 JavaScript，CSS 和 HTML。在组件内部时，这些东西与主文档的 DOM 分离。\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/HTML_Imports\"\u003eHTML 导入（HTML Imports）\u003c/a\u003e解决组件组合和依赖加载：在微前端的上下文中，可以是包含我们要使用的组件在服务器上的远程位置。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e# src/index.js\nclass Header extends HTMLElement {\n  attachedCallback() {\n    ReactDOM.render(\u0026lt;App /\u0026gt;, this.createShadowRoot());\n  }\n}\ndocument.registerElement('microfrontends-header', Header);\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003emicrofrontends-header\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003emicrofrontends-header\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003emicrofrontends-products-list\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003emicrofrontends-products-list\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003emicrofrontends-cart\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003emicrofrontends-cart\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在微前端的实践当中：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e每个团队使用各自的技术栈创建他们的组件，并把它包装到自定义元素（\u003ca target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Custom_Elements\"\u003eCustom Element\u003c/a\u003e）中（如 \u003ccode\u003e\u0026lt;microfrontends-header\u0026gt;\u0026lt;/microfrontends-header\u0026gt;\u003c/code\u003e）。\u003c/li\u003e\n\u003cli\u003eWeb 组件就是应用程序中包含的组件的本地实现，如菜单，表单，日期选择器等。每个组件都是独立开发的，主应用程序项目利用它们组装成最终的应用程序。\u003c/li\u003e\n\u003cli\u003e特定元素（标签名称，属性和事件）的 DOM 规范还可以充当跨团队之间的契约或公共 API。\u003c/li\u003e\n\u003cli\u003e创建可被导入到 Web 应用程序中的可重用组件，它们就像可以导入任何网页的用户界面小部件。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"import\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"/components/microfrontends/header.html\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"import\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"/components/microfrontends/products-list.html\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"import\"\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"/components/microfrontends/cart.html\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e优点\n\u003cul\u003e\n\u003cli\u003e代码的可读性变得非常清晰，组件资源内部高内聚，组件资源由自身加载控制，作用域独立。\u003c/li\u003e\n\u003cli\u003e功能团队可以使用组件及其功能，而不必知道实现，他们只需要能够与 HTML DOM 进行交互。\u003c/li\u003e\n\u003cli\u003e使用 PubSub 机制，组件可以发布消息，其他组件可以订阅特定的主题。幸运的是浏览器内置了这个功能。比如购物车可以在 \u003ccode\u003ewindow\u003c/code\u003e 订阅此事件并在应该刷新其数据时得到通知。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e缺点\n\u003cul\u003e\n\u003cli\u003e可惜的是，Web 组件规范跟服务器渲染无关。没有 JavaScript，就没有所谓的自定义元素。\u003c/li\u003e\n\u003cli\u003e浏览器和框架的支持不够，需要更多的 polyfills 从而影响到用户页面的加载体验。\u003c/li\u003e\n\u003cli\u003e我们需要在整个 Web 应用程序上做出改变，把它们全部转换成 Web Components。\u003c/li\u003e\n\u003cli\u003e社区不够活跃，Web Components 还没有真正流行起来，也许永远也不会。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 class=\"heading\"\u003e不同 App 模块之间如何交互？\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e# angularComponent.ts\nconst event = new CustomEvent('addToCart', { detail: item });\nwindow.dispatchEvent(event);\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e# reactComponent.js\ncomponentDidMount() {\n  window.addEventListener('addToCart', (event) =\u0026gt; {\n    this.setState({ products: [...this.state.products, event.detail] });\n  }, false);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e得益于浏览器的原生 API，Custom Event 可以与其他任何技术和框架一起工作。比如，我们可以将消息从 Angular 组件发送到 React 组件。其实这也是现在 API 之间普遍使用 JSON 进行通信的原因，即使没有人使用 NodeJS 作为服务器端。\u003c/li\u003e\n\u003cli\u003e但是，新的问题又出现了。我们该如何测试这种跨模块之间的交互？需要编写类似于后端微服务之间的 Contract Testing 或 Integration Testing 吗？并没有答案。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 class=\"heading\"\u003eMore Options...\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e组件库 - 根据主 App 的技术栈，不同的组件和 App 模块拆分作为库的形式提供给主App，所以主 App 是由不同组件组成的。但是组件库的升级将成为一个大麻烦，比如对 Header 组件进行了更改，那么如果已经有 50 个页面使用了 Header 组件该怎么办？必须要求每一页都升级它的 Header，而且升级过程中用户还会在整个网站不同页面上看到不一致的标题。并且，在两边还必须都使用相同的技术，比如 Header 组件中使用了 ClojureScript，而 Content 组件中又用了 Elm，那么该怎么办？构建工具就必须在编译时处理不同的语言。\u003c/li\u003e\n\u003cli\u003e将 App 模块作为 React 黑盒组件分发给消费者模块 - 应用程序的状态完全包含在组件中，API 只是通过 props 暴露出来。这种方式其实增加了应用程序之间的耦合，因为它迫使每个人都使用 React，甚至会使用相同版本的 React，但是这似乎也是一个比较好的折衷。\u003c/li\u003e\n\u003cli\u003eEdge Side Includes(ESI)/Server Side Includes(SSI) - 通过特殊的文件后缀 (shtml,inc) 或简单的标记语言来对那些可以加速和不能加速的网页中的内容片断进行描述，将每个网页划分成不同的小部分分别赋予不同的缓存控制策略。SSI / ESI 方法的缺点是，最慢的片段决定了整个页面的响应时间。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 class=\"heading\"\u003e微前端的页面优化与实例\u003c/h2\u003e\n\u003ch3 class=\"heading\"\u003e多模块页面加载问题与优化建议\u003c/h3\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/16098869fba44835?w=1275\u0026amp;h=759\u0026amp;f=png\u0026amp;s=10377\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e使用 skeleton screen 响应式布局\u003c/strong\u003e：如上图 LinkedIn 所做的那样，首先展现给用户一个页面的空白版本，然后在这个页面中逐渐加载和填充相应的信息。否则中间的信息流部分的内容最初是空白的，然后在 JavaScript 被加载和执行过后，信息流就会因为需要占用更多的空间而推动整个页面的布局。虽然我们可以控制页面来固定中间部分的高度，但在响应式网站上，确定一个确切的高度往往很难，而且不同的屏幕尺寸可能会有所不同。但更重要的问题是，这种高度尺寸的约定会让不同团队之间产生紧密的联系，从而违背了微前端的初衷。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e使用浏览器异步加载加快初始渲染\u003c/strong\u003e：对于加载成本高且难以缓存的碎片，将其从初始渲染中排除是一个好主意。比如说 LinkedIn 首页的信息流就是一个很好的例子。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e共享 UI 组件库保证视觉体验一致\u003c/strong\u003e：在前端设计中，必须向用户呈现外观和感觉一致的用户界面。建议可以建立一个共享组件库（包含 CSS、字体和 JavaScript）。将这些资源托管在 CDN，每个微前端就可以在其 HTML 输出中引用它们的位置。每个组件库的版本都正确地对资源进行版本控制，而每个微前端都指定要使用的组件库的版本和显式更新依赖关系。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e使用集中式服务（Router）来管理 URL\u003c/strong\u003e：可以理解为前端的 Gateway，不同的 URL 对应不同应用程序所包含的内容。建议通过一个集中式的 URLs Router 来为应用程序提供一个 API 来注册他们自己的 URL，Router 将会位于 Web 应用程序的前面，根据不同的用户请求指向不同的 App 模块组合。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/16098869fa002104?w=944\u0026amp;h=956\u0026amp;f=png\u0026amp;s=11591\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e提取共同依赖作为 externals 加载\u003c/strong\u003e：虽然说不同 App 模块之间不能直接共享相同的第三方模块，当我们依然可以将常用的依赖比如 \u003ccode\u003elodash\u003c/code\u003e、\u003ccode\u003emoment.js\u003c/code\u003e等公共库，或者跨多个团队共同使用的 \u003ccode\u003ereact\u003c/code\u003e 和 \u003ccode\u003ereact-dom\u003c/code\u003e。通过 Webpack 等构建工具就可以把打包的时候将这些共同模块排除掉，而只需要在 HTML \u003ccode\u003e\u0026lt;header\u0026gt;\u003c/code\u003e 中的 \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e中直接通过 CDN  加载 externals 依赖。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\n  \u003cspan class=\"hljs-attr\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"https://cdnjs.cloudflare.com/ajax/libs/react/16.2.0/react.min.js\"\u003c/span\u003e\n  \u003cspan class=\"hljs-attr\"\u003ecrossorigin\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"anonymous\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\n  \u003cspan class=\"hljs-attr\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"https://cdnjs.cloudflare.com/ajax/libs/react/16.2.0/react-dom.min.js\"\u003c/span\u003e\n  \u003cspan class=\"hljs-attr\"\u003ecrossorigin\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"anonymous\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e微前端在 AEM（CMS）项目的应用\u003c/h3\u003e\n\u003cp\u003e我们在「三靠谱」（\u003cs\u003e已和谐客户名称\u003c/s\u003e）的 Marketplace 项目当中也曾经探索过 AEM + React 混合开发的解决方案，其中就涉及到如何在 AEM 当中嵌入 React 组件，甚至将 AEM 组件又强行转化为 React 组件进行嵌套。现在回过头来其实也算是微前端的一种实践：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAEM 仅仅包含网页内容，不包含 domain 相关的结构化数据。\u003c/li\u003e\n\u003cli\u003eReact 组件被托管在 AEM 组件当中，再经由 AEM 传递给组件所需要的属性，比如 IDs 或 APIs 的 URL 等等\u003c/li\u003e\n\u003cli\u003e后端微服务则包含 domain 结构化数据，由对应的 React 组件通过 Ajax 进行数据查询。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"hljs html\" lang=\"html\"\u003e  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"cms-container-1\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"react-input-container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n      ReactDOM.render(React.createElement(Input, { ...injectProps }), \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.getElementById(\u003cspan class=\"hljs-string\"\u003e'react-input-container'\u003c/span\u003e));\n    \u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"cms-container-2\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attr\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"react-button-container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n      ReactDOM.render(React.createElement(Button, {}), \u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e.getElementById(\u003cspan class=\"hljs-string\"\u003e'react-button-container'\u003c/span\u003e));\n    \u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-name\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 class=\"heading\"\u003e现成解决方案：\u003ca target=\"_blank\" href=\"https://single-spa.surge.sh/\"\u003eSingle-SPA “meta framework”\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://single-spa.surge.sh/\"\u003e\u003c/a\u003e\u003c/p\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://single-spa.surge.sh/\"\u003e\u003cimg alt=\"点击图片可查看实例\" src=\"https://user-gold-cdn.xitu.io/2017/12/27/16098869fd43456c?w=3840\u0026amp;h=2160\u0026amp;f=png\u0026amp;s=163860\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/a\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e开源的 \u003ca target=\"_blank\" href=\"https://github.com/CanopyTax/single-spa\"\u003e\u003ccode\u003esingle-spa\u003c/code\u003e\u003c/a\u003e 自称为「元框架」，可以实现在一个页面将多个不同的框架整合，甚至在切换的时候都不需要刷新页面（支持 React、Vue、Angular 1、Angular 2、Ember 等等）：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBuild micro frontends that coexist and can each be written with their own framework.\u003c/li\u003e\n\u003cli\u003eUse multiple frameworks on the same page without refreshing the page (React, AngularJS, Angular, Ember, or whatever you're using)\u003c/li\u003e\n\u003cli\u003eWrite code using a new framework, without rewriting your existing app\u003c/li\u003e\n\u003cli\u003eLazy load code for improved initial load time.\u003c/li\u003e\n\u003cli\u003eHot reload entire chunks of your overall application (instead of individual files).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e请看示例代码，所提供的 API 非常简单：\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e * \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e singleSpa \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'single-spa'\u003c/span\u003e;\n\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e appName = \u003cspan class=\"hljs-string\"\u003e'app1'\u003c/span\u003e;\n\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e loadingFunction = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e =\u0026gt;\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'./app1/app1.js'\u003c/span\u003e);\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e activityFunction = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-params\"\u003elocation\u003c/span\u003e =\u0026gt;\u003c/span\u003e location.hash.startsWith(\u003cspan class=\"hljs-string\"\u003e'#/app1'\u003c/span\u003e);\n\nsingleSpa.declareChildApplication(appName, loadingFunction, activityFunction);\nsingleSpa.start();\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode class=\"hljs js\" lang=\"js\"\u003e# single-spa-examples.js\n\ndeclareChildApplication('navbar', () =\u0026gt; import('./navbar/navbar.app.js'), () =\u0026gt; true);\ndeclareChildApplication('home', () =\u0026gt; import('./home/home.app.js'), () =\u0026gt; location.hash === \"\" || location.hash === \"#\");\ndeclareChildApplication('angular1', () =\u0026gt; import('./angular1/angular1.app.js'), hashPrefix('/angular1'));\ndeclareChildApplication('react', () =\u0026gt; import('./react/react.app.js'), hashPrefix('/react'));\ndeclareChildApplication('angular2', () =\u0026gt; import('./angular2/angular2.app.js'), hashPrefix('/angular2'));\ndeclareChildApplication('vue', () =\u0026gt; import('src/vue/vue.app.js'), hashPrefix('/vue'));\ndeclareChildApplication('svelte', () =\u0026gt; import('src/svelte/svelte.app.js'), hashPrefix('/svelte'));\ndeclareChildApplication('preact', () =\u0026gt; import('src/preact/preact.app.js'), hashPrefix('/preact'));\ndeclareChildApplication('iframe-vanilla-js', () =\u0026gt; import('src/vanillajs/vanilla.app.js'), hashPrefix('/vanilla'));\ndeclareChildApplication('inferno', () =\u0026gt; import('src/inferno/inferno.app.js'), hashPrefix('/inferno'));\ndeclareChildApplication('ember', () =\u0026gt; loadEmberApp(\"ember-app\", '/build/ember-app/assets/ember-app.js', '/build/ember-app/assets/vendor.js'), hashPrefix('/ember'));\n\nstart();\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 class=\"heading\"\u003e总结与思考：微前端的优缺点\u003c/h2\u003e\n\u003ch3 class=\"heading\"\u003e优点\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e敏捷性 - 独立开发和更快的部署周期：\n\u003cul\u003e\n\u003cli\u003e开发团队可以选择自己的技术并及时更新技术栈。\u003c/li\u003e\n\u003cli\u003e一旦完成其中一项就可以部署，而不必等待所有事情完毕。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e降低错误和回归问题的风险，相互之间的依赖性急剧下降。\u003c/li\u003e\n\u003cli\u003e更简单快捷的测试，每一个小的变化不必再触碰整个应用程序。\u003c/li\u003e\n\u003cli\u003e更快交付客户价值，有助于持续集成、持续部署以及持续交付。\u003c/li\u003e\n\u003cli\u003e维护和 bugfix 非常简单，每个团队都熟悉所维护特定的区域。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 class=\"heading\"\u003e缺点\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e开发与部署环境分离\n\u003cul\u003e\n\u003cli\u003e本地需要一个更为复杂的开发环境。\u003c/li\u003e\n\u003cli\u003e每个 App 模块有一个孤立的部署周期。\u003c/li\u003e\n\u003cli\u003e最终应用程序需要在\u003cstrong\u003e同一个\u003c/strong\u003e孤立的环境中运行。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e复杂的集成\n\u003cul\u003e\n\u003cli\u003e需要考虑隔离 JS，避免 CSS 冲突，并考虑按需加载资源\u003c/li\u003e\n\u003cli\u003e处理数据获取并考虑用户的初始化加载状态\u003c/li\u003e\n\u003cli\u003e如何有效测试，微前端模块之间的 Contract Testing？\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e第三方模块重叠\n\u003cul\u003e\n\u003cli\u003e依赖冗余增加了管理的复杂性\u003c/li\u003e\n\u003cli\u003e在团队之间共享公共资源的机制\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e影响最终用户的体验\n\u003cul\u003e\n\u003cli\u003e初始 Loading 时间可能会增加\u003c/li\u003e\n\u003cli\u003eHTML 会需要服务器端的渲染\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 class=\"heading\"\u003e持续思考…\u003c/h3\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/1609886a01e4210b?w=1992\u0026amp;h=1042\u0026amp;f=png\u0026amp;s=77740\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e（变幻莫测）前端的技术选型？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e前端 JavaScript 框架工具穷出不穷，过几个月就要重写前端项目？比如最近又出来了声称要取代 Webpack（\u003ca target=\"_blank\" href=\"https://github.com/parcel-bundler/parcel\"\u003eParcel\u003c/a\u003e）和 Yarn（\u003ca target=\"_blank\" href=\"https://medium.com/@ericsimons/introducing-turbo-5x-faster-than-yarn-npm-and-runs-natively-in-browser-cc2c39715403\"\u003eTurbo\u003c/a\u003e）的工具。伴随着前端框架的更新换代，如果整个项目一起升级/重构的话压力大、风险高，那不如拆分微前端直接支持多 framework，或者同一 framework 的不同版本？\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e在 Mobile/Mobile Web 上的悖论\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e受限于 Mobile 尺寸大小，单一页面所能展现的内容本就有限。\u003c/li\u003e\n\u003cli\u003e既然已经分出了不同的子页面，那何不如直接 Route 即可？\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e合理划分的边界：DDD（领域驱动开发）\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e最大的挑战是搞清楚如何合理拆分应用程序。\u003c/li\u003e\n\u003cli\u003e糟糕的设计可能成为开发和维护的噩梦。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDon't use any of this if you don't need it\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDo not use the ideas described here until it is needed, it will make things more complex.\u003c/li\u003e\n\u003cli\u003eIf you are in a big company, those ideas could help you.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e软件架构到底在解决什么问题？—— 跨团队沟通的问题\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在正常情况下，每个团队拥有开发和维护其特性所需的一切，都应该有自己的能力来完成自己的特性，并最大限度地减少团队要求其他部门获得许可和/或帮助。\u003c/li\u003e\n\u003cli\u003e当引入 library 或 framework 时的好处是只需要少数人讨论，而不用涉及超过 100 人的决策和他们的各种需求。这样一场大讨论不仅会耗费时间和精力，而且会迫使我们采用最不起眼的方法来选择 library，而不是选择专门针对每个 team 的问题领域的方案。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e所谓架构，其实是解决人的问题；所谓敏捷，其实是解决沟通的问题；\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 class=\"heading\"\u003e参考资料\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e本次技术雷达「微前端」主题的宣讲 Slides 可以在我的博客找到：\u003ca target=\"_blank\" href=\"https://blog.jimmylv.info/2017-12-22-tech-radar-microfrontends-extending-microservice-to-fed/\"\u003e「技术雷达」之 Micro Frontends：微前端 - 将微服务理念扩展到前端开发 - 吕立青的博客\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://user-gold-cdn.xitu.io/2017/12/27/1609886a085d9093?w=3840\u0026amp;h=2160\u0026amp;f=png\u0026amp;s=37012\"\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在做 Slides 之前所整理的 XMind 思维导图：\u003ca target=\"_blank\" href=\"https://www.xmind.net/m/e3dv\"\u003ehttps://www.xmind.net/m/e3dv\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e本人所整理的所有关于「微前端」的资料：\u003ca target=\"_blank\" href=\"https://www.diigo.com/user/jimmylv?query=%23microfrontends\"\u003ehttps://www.diigo.com/user/jimmylv?query=%23microfrontends\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e日常挖宝：ThoughtWorks 邮件组搜索「microfrontend」关键字：\u003ca target=\"_blank\" href=\"https://inbox.google.com/u/1/search/microfrontend\"\u003ehttps://inbox.google.com/u/1/search/microfrontend\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://micro-frontends.org/\"\u003ehttps://micro-frontends.org/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://medium.com/@tomsoderlund/micro-frontends-a-microservice-approach-to-front-end-web-development-f325ebdadc16\"\u003ehttps://medium.com/@tomsoderlund/micro-frontends-a-microservice-approach-to-front-end-web-development-f325ebdadc16\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://medium.com/@_rchaves_/building-microfrontends-part-i-creating-small-apps-710d709b48b7\"\u003ehttps://medium.com/@_rchaves_/building-microfrontends-part-i-creating-small-apps-710d709b48b7\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"http://www.agilechamps.com/microservices-to-micro-frontends/\"\u003ehttp://www.agilechamps.com/microservices-to-micro-frontends/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"http://allegro.tech/2016/03/Managing-Frontend-in-the-microservices-architecture.html\"\u003ehttp://allegro.tech/2016/03/Managing-Frontend-in-the-microservices-architecture.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://technologyconversations.com/2015/08/09/developing-front-end-microservices-with-polymer-web-components-and-test-driven-development-part-55-using-microservices/\"\u003ehttps://technologyconversations.com/2015/08/09/developing-front-end-microservices-with-polymer-web-components-and-test-driven-development-part-55-using-microservices/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" href=\"https://technologyconversations.com/2015/08/09/including-front-end-web-components-into-microservices/\"\u003ehttps://technologyconversations.com/2015/08/09/including-front-end-web-components-into-microservices/\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","buildTime":"1514463836.9187","__v":0}
